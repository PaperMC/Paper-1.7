From b3d4dab4666a8642a00d9c7b06ed2aaafbadb9c8 Mon Sep 17 00:00:00 2001
From: Christian Jones <elmoooo@gmail.com>
Date: Wed, 29 Apr 2015 19:28:25 +0100
Subject: [PATCH] Better code consistency across API


diff --git a/src/main/java/org/bukkit/Achievement.java b/src/main/java/org/bukkit/Achievement.java
index 928b6d5..4184e6e 100644
--- a/src/main/java/org/bukkit/Achievement.java
+++ b/src/main/java/org/bukkit/Achievement.java
@@ -4,54 +4,54 @@ package org.bukkit;
  * Represents an achievement, which may be given to players.
  */
 public enum Achievement {
+
     OPEN_INVENTORY,
-    MINE_WOOD (OPEN_INVENTORY),
-    BUILD_WORKBENCH (MINE_WOOD),
-    BUILD_PICKAXE (BUILD_WORKBENCH),
-    BUILD_FURNACE (BUILD_PICKAXE),
-    ACQUIRE_IRON (BUILD_FURNACE),
-    BUILD_HOE (BUILD_WORKBENCH),
-    MAKE_BREAD (BUILD_HOE),
-    BAKE_CAKE (BUILD_HOE),
-    BUILD_BETTER_PICKAXE (BUILD_PICKAXE),
-    COOK_FISH (BUILD_FURNACE),
-    ON_A_RAIL (ACQUIRE_IRON),
-    BUILD_SWORD (BUILD_WORKBENCH),
-    KILL_ENEMY (BUILD_SWORD),
-    KILL_COW (BUILD_SWORD),
-    FLY_PIG (KILL_COW),
-    SNIPE_SKELETON (KILL_ENEMY),
-    GET_DIAMONDS (ACQUIRE_IRON),
-    NETHER_PORTAL (GET_DIAMONDS),
-    GHAST_RETURN (NETHER_PORTAL),
-    GET_BLAZE_ROD (NETHER_PORTAL),
-    BREW_POTION (GET_BLAZE_ROD),
-    END_PORTAL (GET_BLAZE_ROD),
-    THE_END (END_PORTAL),
-    ENCHANTMENTS (GET_DIAMONDS),
-    OVERKILL (ENCHANTMENTS),
-    BOOKCASE (ENCHANTMENTS),
-    EXPLORE_ALL_BIOMES (END_PORTAL),
-    SPAWN_WITHER (THE_END),
-    KILL_WITHER (SPAWN_WITHER),
-    FULL_BEACON (KILL_WITHER),
-    BREED_COW (KILL_COW),
-    DIAMONDS_TO_YOU (GET_DIAMONDS),
-    ;
+    MINE_WOOD(OPEN_INVENTORY),
+    BUILD_WORKBENCH(MINE_WOOD),
+    BUILD_PICKAXE(BUILD_WORKBENCH),
+    BUILD_FURNACE(BUILD_PICKAXE),
+    ACQUIRE_IRON(BUILD_FURNACE),
+    BUILD_HOE(BUILD_WORKBENCH),
+    MAKE_BREAD(BUILD_HOE),
+    BAKE_CAKE(BUILD_HOE),
+    BUILD_BETTER_PICKAXE(BUILD_PICKAXE),
+    COOK_FISH(BUILD_FURNACE),
+    ON_A_RAIL(ACQUIRE_IRON),
+    BUILD_SWORD(BUILD_WORKBENCH),
+    KILL_ENEMY(BUILD_SWORD),
+    KILL_COW(BUILD_SWORD),
+    FLY_PIG(KILL_COW),
+    SNIPE_SKELETON(KILL_ENEMY),
+    GET_DIAMONDS(ACQUIRE_IRON),
+    NETHER_PORTAL(GET_DIAMONDS),
+    GHAST_RETURN(NETHER_PORTAL),
+    GET_BLAZE_ROD(NETHER_PORTAL),
+    BREW_POTION(GET_BLAZE_ROD),
+    END_PORTAL(GET_BLAZE_ROD),
+    THE_END(END_PORTAL),
+    ENCHANTMENTS(GET_DIAMONDS),
+    OVERKILL(ENCHANTMENTS),
+    BOOKCASE(ENCHANTMENTS),
+    EXPLORE_ALL_BIOMES(END_PORTAL),
+    SPAWN_WITHER(THE_END),
+    KILL_WITHER(SPAWN_WITHER),
+    FULL_BEACON(KILL_WITHER),
+    BREED_COW(KILL_COW),
+    DIAMONDS_TO_YOU(GET_DIAMONDS),;
 
     private final Achievement parent;
 
-    private Achievement() {
+    Achievement() {
         parent = null;
     }
 
-    private Achievement(Achievement parent) {
+    Achievement(Achievement parent) {
         this.parent = parent;
     }
 
     /**
      * Returns whether or not this achievement has a parent achievement.
-     * 
+     *
      * @return whether the achievement has a parent achievement
      */
     public boolean hasParent() {
@@ -60,7 +60,7 @@ public enum Achievement {
 
     /**
      * Returns the parent achievement of this achievement, or null if none.
-     * 
+     *
      * @return the parent achievement or null
      */
     public Achievement getParent() {
diff --git a/src/main/java/org/bukkit/Art.java b/src/main/java/org/bukkit/Art.java
index ba66f16..488015a 100644
--- a/src/main/java/org/bukkit/Art.java
+++ b/src/main/java/org/bukkit/Art.java
@@ -1,15 +1,15 @@
 package org.bukkit;
 
-import java.util.HashMap;
-
+import com.google.common.collect.Maps;
 import org.apache.commons.lang.Validate;
 
-import com.google.common.collect.Maps;
+import java.util.HashMap;
 
 /**
  * Represents the art on a painting
  */
 public enum Art {
+
     KEBAB(0, 1, 1),
     AZTEC(1, 1, 1),
     ALBAN(2, 1, 1),
@@ -37,10 +37,18 @@ public enum Art {
     SKELETON(24, 4, 3),
     DONKEYKONG(25, 4, 3);
 
-    private int id, width, height;
     private static final HashMap<String, Art> BY_NAME = Maps.newHashMap();
     private static final HashMap<Integer, Art> BY_ID = Maps.newHashMap();
 
+    static {
+        for (Art art : values()) {
+            BY_ID.put(art.id, art);
+            BY_NAME.put(art.toString().toLowerCase().replaceAll("_", ""), art);
+        }
+    }
+
+    private int id, width, height;
+
     private Art(int id, int width, int height) {
         this.id = id;
         this.width = width;
@@ -48,6 +56,31 @@ public enum Art {
     }
 
     /**
+     * Get a painting by its numeric ID
+     *
+     * @param id The ID
+     * @return The painting
+     * @deprecated Magic value
+     */
+    @Deprecated
+    public static Art getById(int id) {
+        return BY_ID.get(id);
+    }
+
+    /**
+     * Get a painting by its unique name
+     * <p>
+     * This ignores underscores and capitalization
+     *
+     * @param name The name
+     * @return The painting
+     */
+    public static Art getByName(String name) {
+        Validate.notNull(name, "Name cannot be null");
+        return BY_NAME.get(name.toLowerCase().replaceAll("_", ""));
+    }
+
+    /**
      * Gets the width of the painting, in blocks
      *
      * @return The width of the painting, in blocks
@@ -75,37 +108,4 @@ public enum Art {
     public int getId() {
         return id;
     }
-
-    /**
-     * Get a painting by its numeric ID
-     *
-     * @param id The ID
-     * @return The painting
-     * @deprecated Magic value
-     */
-    @Deprecated
-    public static Art getById(int id) {
-        return BY_ID.get(id);
-    }
-
-    /**
-     * Get a painting by its unique name
-     * <p>
-     * This ignores underscores and capitalization
-     *
-     * @param name The name
-     * @return The painting
-     */
-    public static Art getByName(String name) {
-        Validate.notNull(name, "Name cannot be null");
-
-        return BY_NAME.get(name.toLowerCase().replaceAll("_", ""));
-    }
-
-    static {
-        for (Art art : values()) {
-            BY_ID.put(art.id, art);
-            BY_NAME.put(art.toString().toLowerCase().replaceAll("_", ""), art);
-        }
-    }
 }
diff --git a/src/main/java/org/bukkit/BanEntry.java b/src/main/java/org/bukkit/BanEntry.java
index 986120e..75f6c9a 100644
--- a/src/main/java/org/bukkit/BanEntry.java
+++ b/src/main/java/org/bukkit/BanEntry.java
@@ -9,23 +9,23 @@ import java.util.Date;
  * Ban entries include the following properties:
  * <table border=1>
  * <tr>
- *     <th>Property</th>
- *     <th>Description</th>
+ * <th>Property</th>
+ * <th>Description</th>
  * </tr><tr>
- *     <td>Target Name / IP Address</td>
- *     <td>The target name or IP address</td>
+ * <td>Target Name / IP Address</td>
+ * <td>The target name or IP address</td>
  * </tr><tr>
- *     <td>Creation Date</td>
- *     <td>The creation date of the ban</td>
+ * <td>Creation Date</td>
+ * <td>The creation date of the ban</td>
  * </tr><tr>
- *     <td>Source</td>
- *     <td>The source of the ban, such as a player, console, plugin, etc</td>
+ * <td>Source</td>
+ * <td>The source of the ban, such as a player, console, plugin, etc</td>
  * </tr><tr>
- *     <td>Expiration Date</td>
- *     <td>The expiration date of the ban</td>
+ * <td>Expiration Date</td>
+ * <td>The expiration date of the ban</td>
  * </tr><tr>
- *     <td>Reason</td>
- *     <td>The reason for the ban</td>
+ * <td>Reason</td>
+ * <td>The reason for the ban</td>
  * </tr>
  * </table>
  * <p>
@@ -46,14 +46,14 @@ public interface BanEntry {
      *
      * @return the target name or IP address
      */
-    public String getTarget();
+    String getTarget();
 
     /**
      * Gets the date this ban entry was created.
      *
      * @return the creation date
      */
-    public Date getCreated();
+    Date getCreated();
 
     /**
      * Sets the date this ban entry was created.
@@ -61,7 +61,7 @@ public interface BanEntry {
      * @param created the new created date, cannot be null
      * @see #save() saving changes
      */
-    public void setCreated(Date created);
+    void setCreated(Date created);
 
     /**
      * Gets the source of this ban.
@@ -71,7 +71,7 @@ public interface BanEntry {
      *
      * @return the source of the ban
      */
-    public String getSource();
+    String getSource();
 
     /**
      * Sets the source of this ban.
@@ -82,40 +82,40 @@ public interface BanEntry {
      * @param source the new source where null values become empty strings
      * @see #save() saving changes
      */
-    public void setSource(String source);
+    void setSource(String source);
 
     /**
      * Gets the date this ban expires on, or null for no defined end date.
      *
      * @return the expiration date
      */
-    public Date getExpiration();
+    Date getExpiration();
 
     /**
      * Sets the date this ban expires on. Null values are considered
      * "infinite" bans.
      *
      * @param expiration the new expiration date, or null to indicate an
-     *     eternity
+     *                   eternity
      * @see #save() saving changes
      */
-    public void setExpiration(Date expiration);
+    void setExpiration(Date expiration);
 
     /**
      * Gets the reason for this ban.
      *
      * @return the ban reason, or null if not set
      */
-    public String getReason();
+    String getReason();
 
     /**
      * Sets the reason for this ban. Reasons must not be null.
      *
      * @param reason the new reason, null values assume the implementation
-     *     default
+     *               default
      * @see #save() saving changes
      */
-    public void setReason(String reason);
+    void setReason(String reason);
 
     /**
      * Saves the ban entry, overwriting any previous data in the ban list.
@@ -123,5 +123,5 @@ public interface BanEntry {
      * Saving the ban entry of an unbanned player will cause the player to be
      * banned once again.
      */
-    public void save();
+    void save();
 }
diff --git a/src/main/java/org/bukkit/BanList.java b/src/main/java/org/bukkit/BanList.java
index c21b858..9dd1bed 100644
--- a/src/main/java/org/bukkit/BanList.java
+++ b/src/main/java/org/bukkit/BanList.java
@@ -9,48 +9,33 @@ import java.util.Set;
 public interface BanList {
 
     /**
-     * Represents a ban-type that a {@link BanList} may track.
-     */
-    public enum Type {
-        /**
-         * Banned player names
-         */
-        NAME,
-        /**
-         * Banned player IP addresses
-         */
-        IP,
-        ;
-    }
-
-    /**
      * Gets a {@link BanEntry} by target.
      *
      * @param target entry parameter to search for
      * @return the corresponding entry, or null if none found
      */
-    public BanEntry getBanEntry(String target);
+    BanEntry getBanEntry(String target);
 
     /**
      * Adds a ban to the this list. If a previous ban exists, this will
      * update the previous entry.
      *
-     * @param target the target of the ban
-     * @param reason reason for the ban, null indicates implementation default
+     * @param target  the target of the ban
+     * @param reason  reason for the ban, null indicates implementation default
      * @param expires date for the ban's expiration (unban), or null to imply
-     *     forever
-     * @param source source of the ban, null indicates implementation default
+     *                forever
+     * @param source  source of the ban, null indicates implementation default
      * @return the entry for the newly created ban, or the entry for the
-     *     (updated) previous ban
+     * (updated) previous ban
      */
-    public BanEntry addBan(String target, String reason, Date expires, String source);
+    BanEntry addBan(String target, String reason, Date expires, String source);
 
     /**
      * Gets a set containing every {@link BanEntry} in this list.
      *
      * @return an immutable set containing every entry tracked by this list
      */
-    public Set<BanEntry> getBanEntries();
+    Set<BanEntry> getBanEntries();
 
     /**
      * Gets if a {@link BanEntry} exists for the target, indicating an active
@@ -58,9 +43,9 @@ public interface BanList {
      *
      * @param target the target to find
      * @return true if a {@link BanEntry} exists for the name, indicating an
-     *     active ban status, false otherwise
+     * active ban status, false otherwise
      */
-    public boolean isBanned(String target);
+    boolean isBanned(String target);
 
     /**
      * Removes the specified target from this list, therefore indicating a
@@ -68,5 +53,20 @@ public interface BanList {
      *
      * @param target the target to remove from this list
      */
-    public void pardon(String target);
+    void pardon(String target);
+
+    /**
+     * Represents a ban-type that a {@link BanList} may track.
+     */
+    enum Type {
+
+        /**
+         * Banned player names
+         */
+        NAME,
+        /**
+         * Banned player IP addresses
+         */
+        IP,;
+    }
 }
diff --git a/src/main/java/org/bukkit/BlockChangeDelegate.java b/src/main/java/org/bukkit/BlockChangeDelegate.java
index e6b9f0e..e2521d5 100644
--- a/src/main/java/org/bukkit/BlockChangeDelegate.java
+++ b/src/main/java/org/bukkit/BlockChangeDelegate.java
@@ -14,15 +14,15 @@ public interface BlockChangeDelegate {
      * It is safe to have this call World.setTypeId, but it may be slower than
      * World.setRawTypeId.
      *
-     * @param x X coordinate
-     * @param y Y coordinate
-     * @param z Z coordinate
+     * @param x      X coordinate
+     * @param y      Y coordinate
+     * @param z      Z coordinate
      * @param typeId New block ID
      * @return true if the block was set successfully
      * @deprecated Magic value
      */
     @Deprecated
-    public boolean setRawTypeId(int x, int y, int z, int typeId);
+    boolean setRawTypeId(int x, int y, int z, int typeId);
 
     /**
      * Set a block type and data at the specified coordinates without doing
@@ -31,47 +31,47 @@ public interface BlockChangeDelegate {
      * It is safe to have this call World.setTypeId, but it may be slower than
      * World.setRawTypeId.
      *
-     * @param x X coordinate
-     * @param y Y coordinate
-     * @param z Z coordinate
+     * @param x      X coordinate
+     * @param y      Y coordinate
+     * @param z      Z coordinate
      * @param typeId New block ID
-     * @param data Block data
+     * @param data   Block data
      * @return true if the block was set successfully
      * @deprecated Magic value
      */
     @Deprecated
-    public boolean setRawTypeIdAndData(int x, int y, int z, int typeId, int data);
+    boolean setRawTypeIdAndData(int x, int y, int z, int typeId, int data);
 
     /**
      * Set a block type at the specified coordinates.
      * <p>
      * This method cannot call World.setRawTypeId, a full update is needed.
      *
-     * @param x X coordinate
-     * @param y Y coordinate
-     * @param z Z coordinate
+     * @param x      X coordinate
+     * @param y      Y coordinate
+     * @param z      Z coordinate
      * @param typeId New block ID
      * @return true if the block was set successfully
      * @deprecated Magic value
      */
     @Deprecated
-    public boolean setTypeId(int x, int y, int z, int typeId);
+    boolean setTypeId(int x, int y, int z, int typeId);
 
     /**
      * Set a block type and data at the specified coordinates.
      * <p>
      * This method cannot call World.setRawTypeId, a full update is needed.
      *
-     * @param x X coordinate
-     * @param y Y coordinate
-     * @param z Z coordinate
+     * @param x      X coordinate
+     * @param y      Y coordinate
+     * @param z      Z coordinate
      * @param typeId New block ID
-     * @param data Block data
+     * @param data   Block data
      * @return true if the block was set successfully
      * @deprecated Magic value
      */
     @Deprecated
-    public boolean setTypeIdAndData(int x, int y, int z, int typeId, int data);
+    boolean setTypeIdAndData(int x, int y, int z, int typeId, int data);
 
     /**
      * Get the block type at the location.
@@ -83,14 +83,14 @@ public interface BlockChangeDelegate {
      * @deprecated Magic value
      */
     @Deprecated
-    public int getTypeId(int x, int y, int z);
+    int getTypeId(int x, int y, int z);
 
     /**
      * Gets the height of the world.
      *
      * @return Height of the world
      */
-    public int getHeight();
+    int getHeight();
 
     /**
      * Checks if the specified block is empty (air) or not.
@@ -100,5 +100,5 @@ public interface BlockChangeDelegate {
      * @param z Z coordinate
      * @return True if the block is considered empty.
      */
-    public boolean isEmpty(int x, int y, int z);
+    boolean isEmpty(int x, int y, int z);
 }
diff --git a/src/main/java/org/bukkit/Bukkit.java b/src/main/java/org/bukkit/Bukkit.java
index b85a699..9dcb003 100644
--- a/src/main/java/org/bukkit/Bukkit.java
+++ b/src/main/java/org/bukkit/Bukkit.java
@@ -1,15 +1,6 @@
 package org.bukkit;
 
-import java.awt.image.BufferedImage;
-import java.io.File;
-import java.util.Collection;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.UUID;
-import java.util.logging.Logger;
-
+import com.avaje.ebean.config.ServerConfig;
 import org.bukkit.Warning.WarningState;
 import org.bukkit.command.CommandException;
 import org.bukkit.command.CommandSender;
@@ -18,10 +9,10 @@ import org.bukkit.command.PluginCommand;
 import org.bukkit.entity.Player;
 import org.bukkit.event.inventory.InventoryType;
 import org.bukkit.help.HelpMap;
-import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.Inventory;
 import org.bukkit.inventory.InventoryHolder;
 import org.bukkit.inventory.ItemFactory;
+import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.Recipe;
 import org.bukkit.map.MapView;
 import org.bukkit.plugin.PluginManager;
@@ -31,18 +22,29 @@ import org.bukkit.scheduler.BukkitScheduler;
 import org.bukkit.scoreboard.ScoreboardManager;
 import org.bukkit.util.CachedServerIcon;
 
-import com.avaje.ebean.config.ServerConfig;
+import java.awt.image.BufferedImage;
+import java.io.File;
+import java.util.Collection;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.UUID;
+import java.util.logging.Logger;
 
 /**
  * Represents the Bukkit core, for version and Server singleton handling
  */
 public final class Bukkit {
+
     private static Server server;
 
     /**
      * Static class cannot be initialized.
      */
-    private Bukkit() {}
+    private Bukkit() {
+
+    }
 
     /**
      * Gets the current {@link Server} singleton
@@ -481,7 +483,7 @@ public final class Bukkit {
     /**
      * @see Server#getBanList(BanList.Type)
      */
-    public static BanList getBanList(BanList.Type type){
+    public static BanList getBanList(BanList.Type type) {
         return server.getBanList(type);
     }
 
@@ -620,7 +622,7 @@ public final class Bukkit {
 
     /**
      * @see Server#createInventory(InventoryHolder owner, int size, String
-     *     title)
+     * title)
      */
     public static Inventory createInventory(InventoryHolder owner, int size, String title) throws IllegalArgumentException {
         return server.createInventory(owner, size, title);
@@ -713,29 +715,29 @@ public final class Bukkit {
     /**
      * @see Server#loadServerIcon(File)
      */
-    public static CachedServerIcon loadServerIcon(File file) throws IllegalArgumentException, Exception {
+    public static CachedServerIcon loadServerIcon(File file) throws Exception {
         return server.loadServerIcon(file);
     }
 
     /**
      * @see Server#loadServerIcon(BufferedImage)
      */
-    public static CachedServerIcon loadServerIcon(BufferedImage image) throws IllegalArgumentException, Exception {
+    public static CachedServerIcon loadServerIcon(BufferedImage image) throws Exception {
         return server.loadServerIcon(image);
     }
 
     /**
-     * @see Server#setIdleTimeout(int)
+     * @see Server#getIdleTimeout()
      */
-    public static void setIdleTimeout(int threshold) {
-        server.setIdleTimeout(threshold);
+    public static int getIdleTimeout() {
+        return server.getIdleTimeout();
     }
 
     /**
-     * @see Server#getIdleTimeout()
+     * @see Server#setIdleTimeout(int)
      */
-    public static int getIdleTimeout() {
-        return server.getIdleTimeout();
+    public static void setIdleTimeout(int threshold) {
+        server.setIdleTimeout(threshold);
     }
 
     /**
@@ -746,8 +748,7 @@ public final class Bukkit {
         return server.getUnsafe();
     }
 
-    public static Server.Spigot spigot()
-    {
+    public static Server.Spigot spigot() {
         return server.spigot();
     }
 }
diff --git a/src/main/java/org/bukkit/ChatColor.java b/src/main/java/org/bukkit/ChatColor.java
index 0bbc9fa..b145d37 100644
--- a/src/main/java/org/bukkit/ChatColor.java
+++ b/src/main/java/org/bukkit/ChatColor.java
@@ -1,100 +1,121 @@
 package org.bukkit;
 
-import java.util.Map;
-import java.util.regex.Pattern;
-
+import com.google.common.collect.Maps;
 import org.apache.commons.lang.Validate;
 
-import com.google.common.collect.Maps;
+import java.util.Map;
+import java.util.regex.Pattern;
 
 /**
  * All supported color values for chat
  */
 public enum ChatColor {
+
     /**
      * Represents black
      */
     BLACK('0', 0x00),
+
     /**
      * Represents dark blue
      */
     DARK_BLUE('1', 0x1),
+
     /**
      * Represents dark green
      */
     DARK_GREEN('2', 0x2),
+
     /**
      * Represents dark blue (aqua)
      */
     DARK_AQUA('3', 0x3),
+
     /**
      * Represents dark red
      */
     DARK_RED('4', 0x4),
+
     /**
      * Represents dark purple
      */
     DARK_PURPLE('5', 0x5),
+
     /**
      * Represents gold
      */
     GOLD('6', 0x6),
+
     /**
      * Represents gray
      */
     GRAY('7', 0x7),
+
     /**
      * Represents dark gray
      */
     DARK_GRAY('8', 0x8),
+
     /**
      * Represents blue
      */
     BLUE('9', 0x9),
+
     /**
      * Represents green
      */
     GREEN('a', 0xA),
+
     /**
      * Represents aqua
      */
     AQUA('b', 0xB),
+
     /**
      * Represents red
      */
     RED('c', 0xC),
+
     /**
      * Represents light purple
      */
     LIGHT_PURPLE('d', 0xD),
+
     /**
      * Represents yellow
      */
     YELLOW('e', 0xE),
+
     /**
      * Represents white
      */
     WHITE('f', 0xF),
+
     /**
      * Represents magical characters that change around randomly
      */
     MAGIC('k', 0x10, true),
+
     /**
      * Makes the text bold.
      */
     BOLD('l', 0x11, true),
+
     /**
      * Makes a line appear through the text.
      */
     STRIKETHROUGH('m', 0x12, true),
+
     /**
      * Makes the text appear underlined.
      */
     UNDERLINE('n', 0x13, true),
+
     /**
      * Makes the text italic.
      */
     ITALIC('o', 0x14, true),
+
     /**
      * Resets all previous chat colors or formats.
      */
@@ -105,14 +126,22 @@ public enum ChatColor {
      * you need to dynamically convert colour codes from your custom format.
      */
     public static final char COLOR_CHAR = '\u00A7';
+
     private static final Pattern STRIP_COLOR_PATTERN = Pattern.compile("(?i)" + String.valueOf(COLOR_CHAR) + "[0-9A-FK-OR]");
+    private final static Map<Integer, ChatColor> BY_ID = Maps.newHashMap();
+    private final static Map<Character, ChatColor> BY_CHAR = Maps.newHashMap();
+
+    static {
+        for (ChatColor color : values()) {
+            BY_ID.put(color.intCode, color);
+            BY_CHAR.put(color.code, color);
+        }
+    }
 
     private final int intCode;
     private final char code;
     private final boolean isFormat;
     private final String toString;
-    private final static Map<Integer, ChatColor> BY_ID = Maps.newHashMap();
-    private final static Map<Character, ChatColor> BY_CHAR = Maps.newHashMap();
 
     private ChatColor(char code, int intCode) {
         this(code, intCode, false);
@@ -122,35 +151,7 @@ public enum ChatColor {
         this.code = code;
         this.intCode = intCode;
         this.isFormat = isFormat;
-        this.toString = new String(new char[] {COLOR_CHAR, code});
-    }
-
-    /**
-     * Gets the char value associated with this color
-     *
-     * @return A char value of this color code
-     */
-    public char getChar() {
-        return code;
-    }
-
-    @Override
-    public String toString() {
-        return toString;
-    }
-
-    /**
-     * Checks if this code is a format code as opposed to a color code.
-     */
-    public boolean isFormat() {
-        return isFormat;
-    }
-
-    /**
-     * Checks if this code is a color code as opposed to a format code.
-     */
-    public boolean isColor() {
-        return !isFormat && this != RESET;
+        this.toString = new String(new char[]{COLOR_CHAR, code});
     }
 
     /**
@@ -158,7 +159,7 @@ public enum ChatColor {
      *
      * @param code Code to check
      * @return Associative {@link org.bukkit.ChatColor} with the given code,
-     *     or null if it doesn't exist
+     * or null if it doesn't exist
      */
     public static ChatColor getByChar(char code) {
         return BY_CHAR.get(code);
@@ -169,7 +170,7 @@ public enum ChatColor {
      *
      * @param code Code to check
      * @return Associative {@link org.bukkit.ChatColor} with the given code,
-     *     or null if it doesn't exist
+     * or null if it doesn't exist
      */
     public static ChatColor getByChar(String code) {
         Validate.notNull(code, "Code cannot be null");
@@ -198,18 +199,19 @@ public enum ChatColor {
      * character. The alternate color code character will only be replaced if
      * it is immediately followed by 0-9, A-F, a-f, K-O, k-o, R or r.
      *
-     * @param altColorChar The alternate color code character to replace. Ex: &
+     * @param altColorChar    The alternate color code character to replace. Ex: &
      * @param textToTranslate Text containing the alternate color code character.
      * @return Text containing the ChatColor.COLOR_CODE color code character.
      */
     public static String translateAlternateColorCodes(char altColorChar, String textToTranslate) {
         char[] b = textToTranslate.toCharArray();
         for (int i = 0; i < b.length - 1; i++) {
-            if (b[i] == altColorChar && "0123456789AaBbCcDdEeFfKkLlMmNnOoRr".indexOf(b[i+1]) > -1) {
+            if (b[i] == altColorChar && "0123456789AaBbCcDdEeFfKkLlMmNnOoRr".indexOf(b[i + 1]) > -1) {
                 b[i] = ChatColor.COLOR_CHAR;
-                b[i+1] = Character.toLowerCase(b[i+1]);
+                b[i + 1] = Character.toLowerCase(b[i + 1]);
             }
         }
+
         return new String(b);
     }
 
@@ -244,10 +246,31 @@ public enum ChatColor {
         return result;
     }
 
-    static {
-        for (ChatColor color : values()) {
-            BY_ID.put(color.intCode, color);
-            BY_CHAR.put(color.code, color);
-        }
+    /**
+     * Gets the char value associated with this color
+     *
+     * @return A char value of this color code
+     */
+    public char getChar() {
+        return code;
+    }
+
+    @Override
+    public String toString() {
+        return toString;
+    }
+
+    /**
+     * Checks if this code is a format code as opposed to a color code.
+     */
+    public boolean isFormat() {
+        return isFormat;
+    }
+
+    /**
+     * Checks if this code is a color code as opposed to a format code.
+     */
+    public boolean isColor() {
+        return !isFormat && this != RESET;
     }
 }
diff --git a/src/main/java/org/bukkit/Chunk.java b/src/main/java/org/bukkit/Chunk.java
index 0510151..a95e3f1 100644
--- a/src/main/java/org/bukkit/Chunk.java
+++ b/src/main/java/org/bukkit/Chunk.java
@@ -50,12 +50,12 @@ public interface Chunk {
     /**
      * Capture thread-safe read-only snapshot of chunk data
      *
-     * @param includeMaxblocky - if true, snapshot includes per-coordinate
-     *     maximum Y values
-     * @param includeBiome - if true, snapshot includes per-coordinate biome
-     *     type
+     * @param includeMaxblocky     - if true, snapshot includes per-coordinate
+     *                             maximum Y values
+     * @param includeBiome         - if true, snapshot includes per-coordinate biome
+     *                             type
      * @param includeBiomeTempRain - if true, snapshot includes per-coordinate
-     *     raw biome temperature and rainfall
+     *                             raw biome temperature and rainfall
      * @return ChunkSnapshot
      */
     ChunkSnapshot getChunkSnapshot(boolean includeMaxblocky, boolean includeBiome, boolean includeBiomeTempRain);
@@ -85,7 +85,7 @@ public interface Chunk {
      * Loads the chunk.
      *
      * @param generate Whether or not to generate a chunk if it doesn't
-     *     already exist
+     *                 already exist
      * @return true if the chunk has loaded successfully, otherwise false
      */
     boolean load(boolean generate);
@@ -102,7 +102,7 @@ public interface Chunk {
      *
      * @param save Controls whether the chunk is saved
      * @param safe Controls whether to unload the chunk when players are
-     *     nearby
+     *             nearby
      * @return true if the chunk has unloaded successfully, otherwise false
      */
     boolean unload(boolean save, boolean safe);
diff --git a/src/main/java/org/bukkit/CoalType.java b/src/main/java/org/bukkit/CoalType.java
index 4fcccd2..beb1ae2 100644
--- a/src/main/java/org/bukkit/CoalType.java
+++ b/src/main/java/org/bukkit/CoalType.java
@@ -1,32 +1,29 @@
 package org.bukkit;
 
-import java.util.Map;
-
 import com.google.common.collect.Maps;
 
+import java.util.Map;
+
 /**
  * Represents the two types of coal
  */
 public enum CoalType {
+
     COAL(0x0),
     CHARCOAL(0x1);
 
-    private final byte data;
     private final static Map<Byte, CoalType> BY_DATA = Maps.newHashMap();
 
-    private CoalType(final int data) {
-        this.data = (byte) data;
+    static {
+        for (CoalType type : values()) {
+            BY_DATA.put(type.data, type);
+        }
     }
 
-    /**
-     * Gets the associated data value representing this type of coal
-     *
-     * @return A byte containing the data value of this coal type
-     * @deprecated Magic value
-     */
-    @Deprecated
-    public byte getData() {
-        return data;
+    private final byte data;
+
+    CoalType(final int data) {
+        this.data = (byte) data;
     }
 
     /**
@@ -34,7 +31,7 @@ public enum CoalType {
      *
      * @param data Data value to fetch
      * @return The {@link CoalType} representing the given value, or null if
-     *     it doesn't exist
+     * it doesn't exist
      * @deprecated Magic value
      */
     @Deprecated
@@ -42,9 +39,14 @@ public enum CoalType {
         return BY_DATA.get(data);
     }
 
-    static {
-        for (CoalType type : values()) {
-            BY_DATA.put(type.data, type);
-        }
+    /**
+     * Gets the associated data value representing this type of coal
+     *
+     * @return A byte containing the data value of this coal type
+     * @deprecated Magic value
+     */
+    @Deprecated
+    public byte getData() {
+        return data;
     }
 }
diff --git a/src/main/java/org/bukkit/Color.java b/src/main/java/org/bukkit/Color.java
index 76ff651..89148d1 100644
--- a/src/main/java/org/bukkit/Color.java
+++ b/src/main/java/org/bukkit/Color.java
@@ -1,12 +1,11 @@
 package org.bukkit;
 
-import java.util.Map;
-
+import com.google.common.collect.ImmutableMap;
 import org.apache.commons.lang.Validate;
 import org.bukkit.configuration.serialization.ConfigurationSerializable;
 import org.bukkit.configuration.serialization.SerializableAs;
 
-import com.google.common.collect.ImmutableMap;
+import java.util.Map;
 
 /**
  * A container for a color palette. This class is immutable; the set methods
@@ -15,6 +14,7 @@ import com.google.common.collect.ImmutableMap;
  */
 @SerializableAs("Color")
 public final class Color implements ConfigurationSerializable {
+
     private static final int BIT_MASK = 0xff;
 
     /**
@@ -106,12 +106,22 @@ public final class Color implements ConfigurationSerializable {
     private final byte green;
     private final byte blue;
 
+    private Color(int red, int green, int blue) {
+        Validate.isTrue(red >= 0 && red <= BIT_MASK, "Red is not between 0-255: ", red);
+        Validate.isTrue(green >= 0 && green <= BIT_MASK, "Green is not between 0-255: ", green);
+        Validate.isTrue(blue >= 0 && blue <= BIT_MASK, "Blue is not between 0-255: ", blue);
+
+        this.red = (byte) red;
+        this.green = (byte) green;
+        this.blue = (byte) blue;
+    }
+
     /**
      * Creates a new Color object from a red, green, and blue
      *
-     * @param red integer from 0-255
+     * @param red   integer from 0-255
      * @param green integer from 0-255
-     * @param blue integer from 0-255
+     * @param blue  integer from 0-255
      * @return a new Color object for the red, green, blue
      * @throws IllegalArgumentException if any value is strictly >255 or <0
      */
@@ -122,9 +132,9 @@ public final class Color implements ConfigurationSerializable {
     /**
      * Creates a new Color object from a blue, green, and red
      *
-     * @param blue integer from 0-255
+     * @param blue  integer from 0-255
      * @param green integer from 0-255
-     * @param red integer from 0-255
+     * @param red   integer from 0-255
      * @return a new Color object for the red, green, blue
      * @throws IllegalArgumentException if any value is strictly >255 or <0
      */
@@ -139,11 +149,11 @@ public final class Color implements ConfigurationSerializable {
      * @param rgb the integer storing the red, green, and blue values
      * @return a new color object for specified values
      * @throws IllegalArgumentException if any data is in the highest order 8
-     *     bits
+     *                                  bits
      */
     public static Color fromRGB(int rgb) throws IllegalArgumentException {
         Validate.isTrue((rgb >> 24) == 0, "Extrenuous data in: ", rgb);
-        return fromRGB(rgb >> 16 & BIT_MASK, rgb >> 8 & BIT_MASK, rgb >> 0 & BIT_MASK);
+        return fromRGB(rgb >> 16 & BIT_MASK, rgb >> 8 & BIT_MASK, rgb & BIT_MASK);
     }
 
     /**
@@ -153,21 +163,33 @@ public final class Color implements ConfigurationSerializable {
      * @param bgr the integer storing the blue, green, and red values
      * @return a new color object for specified values
      * @throws IllegalArgumentException if any data is in the highest order 8
-     *     bits
+     *                                  bits
      */
     public static Color fromBGR(int bgr) throws IllegalArgumentException {
         Validate.isTrue((bgr >> 24) == 0, "Extrenuous data in: ", bgr);
-        return fromBGR(bgr >> 16 & BIT_MASK, bgr >> 8 & BIT_MASK, bgr >> 0 & BIT_MASK);
+        return fromBGR(bgr >> 16 & BIT_MASK, bgr >> 8 & BIT_MASK, bgr & BIT_MASK);
     }
 
-    private Color(int red, int green, int blue) {
-        Validate.isTrue(red >= 0 && red <= BIT_MASK, "Red is not between 0-255: ", red);
-        Validate.isTrue(green >= 0 && green <= BIT_MASK, "Green is not between 0-255: ", green);
-        Validate.isTrue(blue >= 0 && blue <= BIT_MASK, "Blue is not between 0-255: ", blue);
+    @SuppressWarnings("javadoc")
+    public static Color deserialize(Map<String, Object> map) {
+        return fromRGB(
+                asInt("RED", map),
+                asInt("GREEN", map),
+                asInt("BLUE", map)
+        );
+    }
 
-        this.red = (byte) red;
-        this.green = (byte) green;
-        this.blue = (byte) blue;
+    private static int asInt(String string, Map<String, Object> map) {
+        Object value = map.get(string);
+        if (value == null) {
+            throw new IllegalArgumentException(string + " not in map " + map);
+        }
+
+        if (!(value instanceof Number)) {
+            throw new IllegalArgumentException(string + '(' + value + ") is not a number");
+        }
+
+        return ((Number) value).intValue();
     }
 
     /**
@@ -228,19 +250,17 @@ public final class Color implements ConfigurationSerializable {
     }
 
     /**
-     *
      * @return An integer representation of this color, as 0xRRGGBB
      */
     public int asRGB() {
-        return getRed() << 16 | getGreen() << 8 | getBlue() << 0;
+        return getRed() << 16 | getGreen() << 8 | getBlue();
     }
 
     /**
-     *
      * @return An integer representation of this color, as 0xBBGGRR
      */
     public int asBGR() {
-        return getBlue() << 16 | getGreen() << 8 | getRed() << 0;
+        return getBlue() << 16 | getGreen() << 8 | getRed();
     }
 
     /**
@@ -300,6 +320,7 @@ public final class Color implements ConfigurationSerializable {
         if (!(o instanceof Color)) {
             return false;
         }
+
         final Color that = (Color) o;
         return this.blue == that.blue && this.green == that.green && this.red == that.red;
     }
@@ -311,32 +332,12 @@ public final class Color implements ConfigurationSerializable {
 
     public Map<String, Object> serialize() {
         return ImmutableMap.<String, Object>of(
-            "RED", getRed(),
-            "BLUE", getBlue(),
-            "GREEN", getGreen()
+                "RED", getRed(),
+                "BLUE", getBlue(),
+                "GREEN", getGreen()
         );
     }
 
-    @SuppressWarnings("javadoc")
-    public static Color deserialize(Map<String, Object> map) {
-        return fromRGB(
-            asInt("RED", map),
-            asInt("GREEN", map),
-            asInt("BLUE", map)
-        );
-    }
-
-    private static int asInt(String string, Map<String, Object> map) {
-        Object value = map.get(string);
-        if (value == null) {
-            throw new IllegalArgumentException(string + " not in map " + map);
-        }
-        if (!(value instanceof Number)) {
-            throw new IllegalArgumentException(string + '(' + value + ") is not a number");
-        }
-        return ((Number) value).intValue();
-    }
-
     @Override
     public String toString() {
         return "Color:[rgb0x" + Integer.toHexString(getRed()).toUpperCase() + Integer.toHexString(getGreen()).toUpperCase() + Integer.toHexString(getBlue()).toUpperCase() + "]";
diff --git a/src/main/java/org/bukkit/CropState.java b/src/main/java/org/bukkit/CropState.java
index ef0faf9..053a809 100644
--- a/src/main/java/org/bukkit/CropState.java
+++ b/src/main/java/org/bukkit/CropState.java
@@ -1,9 +1,9 @@
 package org.bukkit;
 
-import java.util.Map;
-
 import com.google.common.collect.Maps;
 
+import java.util.Map;
+
 /**
  * Represents the different growth states of crops
  */
@@ -13,51 +13,54 @@ public enum CropState {
      * State when first seeded
      */
     SEEDED(0x0),
+
     /**
      * First growth stage
      */
     GERMINATED(0x1),
+
     /**
      * Second growth stage
      */
     VERY_SMALL(0x2),
+
     /**
      * Third growth stage
      */
     SMALL(0x3),
+
     /**
      * Fourth growth stage
      */
     MEDIUM(0x4),
+
     /**
      * Fifth growth stage
      */
     TALL(0x5),
+
     /**
      * Almost ripe stage
      */
     VERY_TALL(0x6),
+
     /**
      * Ripe stage
      */
     RIPE(0x7);
 
-    private final byte data;
     private final static Map<Byte, CropState> BY_DATA = Maps.newHashMap();
 
-    private CropState(final int data) {
-        this.data = (byte) data;
+    static {
+        for (CropState cropState : values()) {
+            BY_DATA.put(cropState.getData(), cropState);
+        }
     }
 
-    /**
-     * Gets the associated data value representing this growth state
-     *
-     * @return A byte containing the data value of this growth state
-     * @deprecated Magic value
-     */
-    @Deprecated
-    public byte getData() {
-        return data;
+    private final byte data;
+
+    CropState(final int data) {
+        this.data = (byte) data;
     }
 
     /**
@@ -65,7 +68,7 @@ public enum CropState {
      *
      * @param data Data value to fetch
      * @return The {@link CropState} representing the given value, or null if
-     *     it doesn't exist
+     * it doesn't exist
      * @deprecated Magic value
      */
     @Deprecated
@@ -73,9 +76,14 @@ public enum CropState {
         return BY_DATA.get(data);
     }
 
-    static {
-        for (CropState cropState : values()) {
-            BY_DATA.put(cropState.getData(), cropState);
-        }
+    /**
+     * Gets the associated data value representing this growth state
+     *
+     * @return A byte containing the data value of this growth state
+     * @deprecated Magic value
+     */
+    @Deprecated
+    public byte getData() {
+        return data;
     }
 }
diff --git a/src/main/java/org/bukkit/Difficulty.java b/src/main/java/org/bukkit/Difficulty.java
index a8a5a78..daa71d1 100644
--- a/src/main/java/org/bukkit/Difficulty.java
+++ b/src/main/java/org/bukkit/Difficulty.java
@@ -1,13 +1,14 @@
 package org.bukkit;
 
-import java.util.Map;
-
 import com.google.common.collect.Maps;
 
+import java.util.Map;
+
 /**
  * Represents the various difficulty levels that are available.
  */
 public enum Difficulty {
+
     /**
      * Players regain health over time, hostile mobs don't spawn, the hunger
      * bar does not deplete.
@@ -33,22 +34,18 @@ public enum Difficulty {
      */
     HARD(3);
 
-    private final int value;
     private final static Map<Integer, Difficulty> BY_ID = Maps.newHashMap();
 
-    private Difficulty(final int value) {
-        this.value = value;
+    static {
+        for (Difficulty diff : values()) {
+            BY_ID.put(diff.value, diff);
+        }
     }
 
-    /**
-     * Gets the difficulty value associated with this Difficulty.
-     *
-     * @return An integer value of this difficulty
-     * @deprecated Magic value
-     */
-    @Deprecated
-    public int getValue() {
-        return value;
+    private final int value;
+
+    Difficulty(final int value) {
+        this.value = value;
     }
 
     /**
@@ -56,7 +53,7 @@ public enum Difficulty {
      *
      * @param value Value to check
      * @return Associative {@link Difficulty} with the given value, or null if
-     *     it doesn't exist
+     * it doesn't exist
      * @deprecated Magic value
      */
     @Deprecated
@@ -64,9 +61,14 @@ public enum Difficulty {
         return BY_ID.get(value);
     }
 
-    static {
-        for (Difficulty diff : values()) {
-            BY_ID.put(diff.value, diff);
-        }
+    /**
+     * Gets the difficulty value associated with this Difficulty.
+     *
+     * @return An integer value of this difficulty
+     * @deprecated Magic value
+     */
+    @Deprecated
+    public int getValue() {
+        return value;
     }
 }
diff --git a/src/main/java/org/bukkit/DyeColor.java b/src/main/java/org/bukkit/DyeColor.java
index 214806e..0f510cb 100644
--- a/src/main/java/org/bukkit/DyeColor.java
+++ b/src/main/java/org/bukkit/DyeColor.java
@@ -1,9 +1,9 @@
 package org.bukkit;
 
-import java.util.Map;
-
 import com.google.common.collect.ImmutableMap;
 
+import java.util.Map;
+
 /**
  * All supported color values for dyes and cloth
  */
@@ -13,137 +13,114 @@ public enum DyeColor {
      * Represents white dye.
      */
     WHITE(0x0, 0xF, Color.WHITE, Color.fromRGB(0xF0F0F0)),
+
     /**
      * Represents orange dye.
      */
     ORANGE(0x1, 0xE, Color.fromRGB(0xD87F33), Color.fromRGB(0xEB8844)),
+
     /**
      * Represents magenta dye.
      */
     MAGENTA(0x2, 0xD, Color.fromRGB(0xB24CD8), Color.fromRGB(0xC354CD)),
+
     /**
      * Represents light blue dye.
      */
     LIGHT_BLUE(0x3, 0xC, Color.fromRGB(0x6699D8), Color.fromRGB(0x6689D3)),
+
     /**
      * Represents yellow dye.
      */
     YELLOW(0x4, 0xB, Color.fromRGB(0xE5E533), Color.fromRGB(0xDECF2A)),
+
     /**
      * Represents lime dye.
      */
     LIME(0x5, 0xA, Color.fromRGB(0x7FCC19), Color.fromRGB(0x41CD34)),
+
     /**
      * Represents pink dye.
      */
     PINK(0x6, 0x9, Color.fromRGB(0xF27FA5), Color.fromRGB(0xD88198)),
+
     /**
      * Represents gray dye.
      */
     GRAY(0x7, 0x8, Color.fromRGB(0x4C4C4C), Color.fromRGB(0x434343)),
+
     /**
      * Represents silver dye.
      */
     SILVER(0x8, 0x7, Color.fromRGB(0x999999), Color.fromRGB(0xABABAB)),
+
     /**
      * Represents cyan dye.
      */
     CYAN(0x9, 0x6, Color.fromRGB(0x4C7F99), Color.fromRGB(0x287697)),
+
     /**
      * Represents purple dye.
      */
     PURPLE(0xA, 0x5, Color.fromRGB(0x7F3FB2), Color.fromRGB(0x7B2FBE)),
+
     /**
      * Represents blue dye.
      */
     BLUE(0xB, 0x4, Color.fromRGB(0x334CB2), Color.fromRGB(0x253192)),
+
     /**
      * Represents brown dye.
      */
     BROWN(0xC, 0x3, Color.fromRGB(0x664C33), Color.fromRGB(0x51301A)),
+
     /**
      * Represents green dye.
      */
     GREEN(0xD, 0x2, Color.fromRGB(0x667F33), Color.fromRGB(0x3B511A)),
+
     /**
      * Represents red dye.
      */
     RED(0xE, 0x1, Color.fromRGB(0x993333), Color.fromRGB(0xB3312C)),
+
     /**
      * Represents black dye.
      */
     BLACK(0xF, 0x0, Color.fromRGB(0x191919), Color.fromRGB(0x1E1B1B));
 
-    private final byte woolData;
-    private final byte dyeData;
-    private final Color color;
-    private final Color firework;
     private final static DyeColor[] BY_WOOL_DATA;
     private final static DyeColor[] BY_DYE_DATA;
     private final static Map<Color, DyeColor> BY_COLOR;
     private final static Map<Color, DyeColor> BY_FIREWORK;
 
-    private DyeColor(final int woolData, final int dyeData, Color color, Color firework) {
-        this.woolData = (byte) woolData;
-        this.dyeData = (byte) dyeData;
-        this.color = color;
-        this.firework = firework;
-    }
-
-    /**
-     * Gets the associated (wool) data value representing this color.
-     *
-     * @return A byte containing the (wool) data value of this color
-     * @deprecated The name is misleading. It would imply {@link
-     *     Material#INK_SACK} but uses {@link Material#WOOL}
-     * @see #getWoolData()
-     * @see #getDyeData()
-     */
-    @Deprecated
-    public byte getData() {
-        return getWoolData();
-    }
+    static {
+        BY_WOOL_DATA = values();
+        BY_DYE_DATA = values();
+        ImmutableMap.Builder<Color, DyeColor> byColor = ImmutableMap.builder();
+        ImmutableMap.Builder<Color, DyeColor> byFirework = ImmutableMap.builder();
 
-    /**
-     * Gets the associated wool data value representing this color.
-     *
-     * @return A byte containing the wool data value of this color
-     * @see #getDyeData()
-     * @deprecated Magic value
-     */
-    @Deprecated
-    public byte getWoolData() {
-        return woolData;
-    }
+        for (DyeColor color : values()) {
+            BY_WOOL_DATA[color.woolData & 0xff] = color;
+            BY_DYE_DATA[color.dyeData & 0xff] = color;
+            byColor.put(color.getColor(), color);
+            byFirework.put(color.getFireworkColor(), color);
+        }
 
-    /**
-     * Gets the associated dye data value representing this color.
-     *
-     * @return A byte containing the dye data value of this color
-     * @see #getWoolData()
-     * @deprecated Magic value
-     */
-    @Deprecated
-    public byte getDyeData() {
-        return dyeData;
+        BY_COLOR = byColor.build();
+        BY_FIREWORK = byFirework.build();
     }
 
-    /**
-     * Gets the color that this dye represents.
-     *
-     * @return The {@link Color} that this dye represents
-     */
-    public Color getColor() {
-        return color;
-    }
+    private final byte woolData;
+    private final byte dyeData;
+    private final Color color;
+    private final Color firework;
 
-    /**
-     * Gets the firework color that this dye represents.
-     *
-     * @return The {@link Color} that this dye represents
-     */
-    public Color getFireworkColor() {
-        return firework;
+    DyeColor(final int woolData, final int dyeData, Color color, Color firework) {
+        this.woolData = (byte) woolData;
+        this.dyeData = (byte) dyeData;
+        this.color = color;
+        this.firework = firework;
     }
 
     /**
@@ -151,11 +128,11 @@ public enum DyeColor {
      *
      * @param data (wool) data value to fetch
      * @return The {@link DyeColor} representing the given value, or null if
-     *     it doesn't exist
-     * @deprecated The name is misleading. It would imply {@link
-     *     Material#INK_SACK} but uses {@link Material#WOOL}
+     * it doesn't exist
      * @see #getByDyeData(byte)
      * @see #getByWoolData(byte)
+     * @deprecated The name is misleading. It would imply {@link
+     * Material#INK_SACK} but uses {@link Material#WOOL}
      */
     @Deprecated
     public static DyeColor getByData(final byte data) {
@@ -167,7 +144,7 @@ public enum DyeColor {
      *
      * @param data Wool data value to fetch
      * @return The {@link DyeColor} representing the given value, or null if
-     *     it doesn't exist
+     * it doesn't exist
      * @see #getByDyeData(byte)
      * @deprecated Magic value
      */
@@ -177,6 +154,7 @@ public enum DyeColor {
         if (i >= BY_WOOL_DATA.length) {
             return null;
         }
+
         return BY_WOOL_DATA[i];
     }
 
@@ -185,7 +163,7 @@ public enum DyeColor {
      *
      * @param data Dye data value to fetch
      * @return The {@link DyeColor} representing the given value, or null if
-     *     it doesn't exist
+     * it doesn't exist
      * @see #getByWoolData(byte)
      * @deprecated Magic value
      */
@@ -195,6 +173,7 @@ public enum DyeColor {
         if (i >= BY_DYE_DATA.length) {
             return null;
         }
+
         return BY_DYE_DATA[i];
     }
 
@@ -203,7 +182,7 @@ public enum DyeColor {
      *
      * @param color Color value to get the dye by
      * @return The {@link DyeColor} representing the given value, or null if
-     *     it doesn't exist
+     * it doesn't exist
      */
     public static DyeColor getByColor(final Color color) {
         return BY_COLOR.get(color);
@@ -214,26 +193,65 @@ public enum DyeColor {
      *
      * @param color Color value to get dye by
      * @return The {@link DyeColor} representing the given value, or null if
-     *     it doesn't exist
+     * it doesn't exist
      */
     public static DyeColor getByFireworkColor(final Color color) {
         return BY_FIREWORK.get(color);
     }
 
-    static {
-        BY_WOOL_DATA = values();
-        BY_DYE_DATA = values();
-        ImmutableMap.Builder<Color, DyeColor> byColor = ImmutableMap.builder();
-        ImmutableMap.Builder<Color, DyeColor> byFirework = ImmutableMap.builder();
+    /**
+     * Gets the associated (wool) data value representing this color.
+     *
+     * @return A byte containing the (wool) data value of this color
+     * @see #getWoolData()
+     * @see #getDyeData()
+     * @deprecated The name is misleading. It would imply {@link
+     * Material#INK_SACK} but uses {@link Material#WOOL}
+     */
+    @Deprecated
+    public byte getData() {
+        return getWoolData();
+    }
 
-        for (DyeColor color : values()) {
-            BY_WOOL_DATA[color.woolData & 0xff] = color;
-            BY_DYE_DATA[color.dyeData & 0xff] = color;
-            byColor.put(color.getColor(), color);
-            byFirework.put(color.getFireworkColor(), color);
-        }
+    /**
+     * Gets the associated wool data value representing this color.
+     *
+     * @return A byte containing the wool data value of this color
+     * @see #getDyeData()
+     * @deprecated Magic value
+     */
+    @Deprecated
+    public byte getWoolData() {
+        return woolData;
+    }
 
-        BY_COLOR = byColor.build();
-        BY_FIREWORK = byFirework.build();
+    /**
+     * Gets the associated dye data value representing this color.
+     *
+     * @return A byte containing the dye data value of this color
+     * @see #getWoolData()
+     * @deprecated Magic value
+     */
+    @Deprecated
+    public byte getDyeData() {
+        return dyeData;
+    }
+
+    /**
+     * Gets the color that this dye represents.
+     *
+     * @return The {@link Color} that this dye represents
+     */
+    public Color getColor() {
+        return color;
+    }
+
+    /**
+     * Gets the firework color that this dye represents.
+     *
+     * @return The {@link Color} that this dye represents
+     */
+    public Color getFireworkColor() {
+        return firework;
     }
 }
diff --git a/src/main/java/org/bukkit/Effect.java b/src/main/java/org/bukkit/Effect.java
index 37f29e2..5924850 100644
--- a/src/main/java/org/bukkit/Effect.java
+++ b/src/main/java/org/bukkit/Effect.java
@@ -1,257 +1,319 @@
 package org.bukkit;
 
-import java.util.Map;
-
 import com.google.common.collect.Maps;
-
 import org.bukkit.block.BlockFace;
 import org.bukkit.material.MaterialData;
 import org.bukkit.potion.Potion;
 
+import java.util.Map;
+
 /**
  * A list of effects that the server is able to send to players.
  */
 public enum Effect {
+
     /**
      * An alternate click sound.
      */
     CLICK2(1000, Type.SOUND),
+
     /**
      * A click sound.
      */
     CLICK1(1001, Type.SOUND),
+
     /**
      * Sound of a bow firing.
      */
     BOW_FIRE(1002, Type.SOUND),
+
     /**
      * Sound of a door opening/closing.
      */
     DOOR_TOGGLE(1003, Type.SOUND),
+
     /**
      * Sound of fire being extinguished.
      */
     EXTINGUISH(1004, Type.SOUND),
+
     /**
      * A song from a record. Needs the record item ID as additional info
      */
     RECORD_PLAY(1005, Type.SOUND, Material.class),
+
     /**
      * Sound of ghast shrieking.
      */
     GHAST_SHRIEK(1007, Type.SOUND),
+
     /**
      * Sound of ghast firing.
      */
     GHAST_SHOOT(1008, Type.SOUND),
+
     /**
      * Sound of blaze firing.
      */
     BLAZE_SHOOT(1009, Type.SOUND),
+
     /**
      * Sound of zombies chewing on wooden doors.
      */
     ZOMBIE_CHEW_WOODEN_DOOR(1010, Type.SOUND),
+
     /**
      * Sound of zombies chewing on iron doors.
      */
     ZOMBIE_CHEW_IRON_DOOR(1011, Type.SOUND),
+
     /**
      * Sound of zombies destroying a door.
      */
     ZOMBIE_DESTROY_DOOR(1012, Type.SOUND),
+
     /**
      * A visual smoke effect. Needs direction as additional info.
      */
     SMOKE(2000, Type.VISUAL, BlockFace.class),
+
     /**
      * Sound of a block breaking. Needs block ID as additional info.
      */
     STEP_SOUND(2001, Type.SOUND, Material.class),
+
     /**
      * Visual effect of a splash potion breaking. Needs potion data value as
      * additional info.
      */
     POTION_BREAK(2002, Type.VISUAL, Potion.class),
+
     /**
      * An ender eye signal; a visual effect.
      */
     ENDER_SIGNAL(2003, Type.VISUAL),
+
     /**
      * The flames seen on a mobspawner; a visual effect.
      */
     MOBSPAWNER_FLAMES(2004, Type.VISUAL),
+
     /**
      * The spark that comes off a fireworks
      */
     FIREWORKS_SPARK("fireworksSpark", Type.PARTICLE),
+
     /**
      * Critical hit particles
      */
     CRIT("crit", Type.PARTICLE),
+
     /**
      * Blue critical hit particles
      */
     MAGIC_CRIT("magicCrit", Type.PARTICLE),
+
     /**
      * Multicolored potion effect particles
      */
     POTION_SWIRL("mobSpell", Type.PARTICLE),
+
     /**
      * Multicolored potion effect particles that are slightly transparent
      */
     POTION_SWIRL_TRANSPARENT("mobSpellAmbient", Type.PARTICLE),
+
     /**
      * A puff of white potion swirls
      */
     SPELL("spell", Type.PARTICLE),
+
     /**
      * A puff of white stars
      */
     INSTANT_SPELL("instantSpell", Type.PARTICLE),
+
     /**
      * A puff of purple particles
      */
     WITCH_MAGIC("witchMagic", Type.PARTICLE),
+
     /**
      * The note that appears above note blocks
      */
     NOTE("note", Type.PARTICLE),
+
     /**
      * The particles shown at nether portals
      */
     PORTAL("portal", Type.PARTICLE),
+
     /**
      * The symbols that fly towards the enchantment table
      */
     FLYING_GLYPH("enchantmenttable", Type.PARTICLE),
+
     /**
      * Fire particles
      */
     FLAME("flame", Type.PARTICLE),
+
     /**
      * The particles that pop out of lava
      */
     LAVA_POP("lava", Type.PARTICLE),
+
     /**
      * A small gray square
      */
     FOOTSTEP("footstep", Type.PARTICLE),
+
     /**
      * Water particles
      */
     SPLASH("splash", Type.PARTICLE),
+
     /**
      * Smoke particles
      */
     PARTICLE_SMOKE("smoke", Type.PARTICLE),
+
     /**
      * The biggest explosion particle effect
      */
     EXPLOSION_HUGE("hugeexplosion", Type.PARTICLE),
+
     /**
      * A larger version of the explode particle
      */
     EXPLOSION_LARGE("largeexplode", Type.PARTICLE),
+
     /**
      * Explosion particles
      */
     EXPLOSION("explode", Type.PARTICLE),
+
     /**
      * Small gray particles
      */
     VOID_FOG("depthsuspend", Type.PARTICLE),
+
     /**
      * Small gray particles
      */
     SMALL_SMOKE("townaura", Type.PARTICLE),
+
     /**
      * A puff of white smoke
      */
     CLOUD("cloud", Type.PARTICLE),
+
     /**
      * Multicolored dust particles
      */
     COLOURED_DUST("reddust", Type.PARTICLE),
+
     /**
      * Snowball breaking
      */
     SNOWBALL_BREAK("snowballpoof", Type.PARTICLE),
+
     /**
      * The water drip particle that appears on blocks under water
      */
     WATERDRIP("dripWater", Type.PARTICLE),
+
     /**
      * The lava drip particle that appears on blocks under lava
      */
     LAVADRIP("dripLava", Type.PARTICLE),
+
     /**
      * White particles
      */
     SNOW_SHOVEL("snowshovel", Type.PARTICLE),
+
     /**
      * The particle shown when a slime jumps
      */
     SLIME("slime", Type.PARTICLE),
+
     /**
      * The particle that appears when breading animals
      */
     HEART("heart", Type.PARTICLE),
+
     /**
      * The particle that appears when hitting a villager
      */
     VILLAGER_THUNDERCLOUD("angryVillager", Type.PARTICLE),
+
     /**
      * The particle that appears when trading with a villager
      */
     HAPPY_VILLAGER("happyVillager", Type.PARTICLE),
+
     /**
      * The smoke particles that appears on blazes, minecarts
      * with furnaces and fire
      */
     LARGE_SMOKE("largesmoke", Type.PARTICLE),
+
     /**
      * The particles generated when a tool breaks.
      * This particle requires a Material so that the client can select the correct texture.
      */
     ITEM_BREAK("iconcrack", Type.PARTICLE, Material.class),
+
     /**
      * The particles generated while breaking a block.
      * This particle requires a Material and data value so that the client can select the correct texture.
      */
     TILE_BREAK("blockcrack", Type.PARTICLE, MaterialData.class),
+
     /**
      * The particles generated while sprinting a block
      * This particle requires a Material and data value so that the client can select the correct texture.
      */
     TILE_DUST("blockdust", Type.PARTICLE, MaterialData.class);
 
+    private static final Map<Integer, Effect> BY_ID = Maps.newHashMap();
+    private static final Map<String, Effect> BY_NAME = Maps.newHashMap();
+
+    static {
+        for (Effect effect : values()) {
+            if (effect.type == Type.PARTICLE) {
+                BY_NAME.put(effect.particleName, effect);
+            } else {
+                BY_ID.put(effect.id, effect);
+            }
+        }
+    }
+
     private final int id;
     private final Type type;
     private final Class<?> data;
-    private static final Map<Integer, Effect> BY_ID = Maps.newHashMap();
-    private static final Map<String, Effect> BY_NAME = Maps.newHashMap();
     private final String particleName;
 
-    private Effect(int id, Type type) {
-        this(id,type,null);
+    Effect(int id, Type type) {
+        this(id, type, null);
     }
 
-    private Effect(int id, Type type, Class<?> data) {
+    Effect(int id, Type type, Class<?> data) {
         this.id = id;
         this.type = type;
         this.data = data;
         particleName = null;
     }
 
-    private Effect(String particleName, Type type, Class<?> data) {
+    Effect(String particleName, Type type, Class<?> data) {
         this.particleName = particleName;
         this.type = type;
         id = 0;
         this.data = data;
     }
 
-    private Effect(String particleName, Type type) {
+    Effect(String particleName, Type type) {
         this.particleName = particleName;
         this.type = type;
         id = 0;
@@ -259,6 +321,28 @@ public enum Effect {
     }
 
     /**
+     * Gets the Effect associated with the given ID.
+     *
+     * @param id ID of the Effect to return
+     * @return Effect with the given ID
+     * @deprecated Magic value
+     */
+    @Deprecated
+    public static Effect getById(int id) {
+        return BY_ID.get(id);
+    }
+
+    /**
+     * Gets the Effect associated with the given name.
+     *
+     * @param name name of the Effect to return
+     * @return Effect with the given name
+     */
+    public static Effect getByName(String name) {
+        return BY_NAME.get(name);
+    }
+
+    /**
      * Gets the ID for this effect.
      *
      * @return if this Effect isn't of type PARTICLE it returns ID of this effect
@@ -293,45 +377,9 @@ public enum Effect {
     }
 
     /**
-     * Gets the Effect associated with the given ID.
-     *
-     * @param id ID of the Effect to return
-     * @return Effect with the given ID
-     * @deprecated Magic value
-     */
-    @Deprecated
-    public static Effect getById(int id) {
-        return BY_ID.get(id);
-    }
-
-    static {
-        for (Effect effect : values()) {
-            if (effect.type != Type.PARTICLE) {
-                BY_ID.put(effect.id, effect);
-            }
-        }
-    }
-
-    /**
-     * Gets the Effect associated with the given name.
-     *
-     * @param name name of the Effect to return
-     * @return Effect with the given name
-     */
-    public static Effect getByName(String name) {
-        return BY_NAME.get(name);
-    }
-
-    static {
-        for (Effect effect : values()) {
-            if (effect.type == Type.PARTICLE) {
-                BY_NAME.put(effect.particleName, effect);
-            }
-        }
-    }
-
-    /**
      * Represents the type of an effect.
      */
-    public enum Type {SOUND, VISUAL, PARTICLE}
+    public enum Type {
+        SOUND, VISUAL, PARTICLE
+    }
 }
diff --git a/src/main/java/org/bukkit/EntityEffect.java b/src/main/java/org/bukkit/EntityEffect.java
index ec7d1e3..517186f 100644
--- a/src/main/java/org/bukkit/EntityEffect.java
+++ b/src/main/java/org/bukkit/EntityEffect.java
@@ -1,9 +1,9 @@
 package org.bukkit;
 
-import java.util.Map;
-
 import com.google.common.collect.Maps;
 
+import java.util.Map;
+
 /**
  * A list of all Effects that can happen to entities.
  */
@@ -96,22 +96,18 @@ public enum EntityEffect {
      */
     FIREWORK_EXPLODE(17);
 
-    private final byte data;
     private final static Map<Byte, EntityEffect> BY_DATA = Maps.newHashMap();
 
-    EntityEffect(final int data) {
-        this.data = (byte) data;
+    static {
+        for (EntityEffect entityEffect : values()) {
+            BY_DATA.put(entityEffect.data, entityEffect);
+        }
     }
 
-    /**
-     * Gets the data value of this EntityEffect
-     *
-     * @return The data value
-     * @deprecated Magic value
-     */
-    @Deprecated
-    public byte getData() {
-        return data;
+    private final byte data;
+
+    EntityEffect(final int data) {
+        this.data = (byte) data;
     }
 
     /**
@@ -119,7 +115,7 @@ public enum EntityEffect {
      *
      * @param data Data value to fetch
      * @return The {@link EntityEffect} representing the given value, or null
-     *     if it doesn't exist
+     * if it doesn't exist
      * @deprecated Magic value
      */
     @Deprecated
@@ -127,10 +123,14 @@ public enum EntityEffect {
         return BY_DATA.get(data);
     }
 
-
-    static {
-        for (EntityEffect entityEffect : values()) {
-            BY_DATA.put(entityEffect.data, entityEffect);
-        }
+    /**
+     * Gets the data value of this EntityEffect
+     *
+     * @return The data value
+     * @deprecated Magic value
+     */
+    @Deprecated
+    public byte getData() {
+        return data;
     }
 }
diff --git a/src/main/java/org/bukkit/FireworkEffect.java b/src/main/java/org/bukkit/FireworkEffect.java
index 6f2d096..1b4e03b 100644
--- a/src/main/java/org/bukkit/FireworkEffect.java
+++ b/src/main/java/org/bukkit/FireworkEffect.java
@@ -1,14 +1,13 @@
 package org.bukkit;
 
-import java.util.List;
-import java.util.Map;
-
+import com.google.common.collect.ImmutableList;
+import com.google.common.collect.ImmutableMap;
 import org.apache.commons.lang.Validate;
 import org.bukkit.configuration.serialization.ConfigurationSerializable;
 import org.bukkit.configuration.serialization.SerializableAs;
 
-import com.google.common.collect.ImmutableList;
-import com.google.common.collect.ImmutableMap;
+import java.util.List;
+import java.util.Map;
 
 /**
  * Represents a single firework effect.
@@ -16,40 +15,184 @@ import com.google.common.collect.ImmutableMap;
 @SerializableAs("Firework")
 public final class FireworkEffect implements ConfigurationSerializable {
 
+    private static final String FLICKER = "flicker";
+    private static final String TRAIL = "trail";
+    private static final String COLORS = "colors";
+    private static final String FADE_COLORS = "fade-colors";
+    private static final String TYPE = "type";
+    private final boolean flicker;
+    private final boolean trail;
+    private final ImmutableList<Color> colors;
+    private final ImmutableList<Color> fadeColors;
+    private final Type type;
+    private String string = null;
+    FireworkEffect(boolean flicker, boolean trail, ImmutableList<Color> colors, ImmutableList<Color> fadeColors, Type type) {
+        if (colors.isEmpty()) {
+            throw new IllegalStateException("Cannot make FireworkEffect without any color");
+        }
+
+        this.flicker = flicker;
+        this.trail = trail;
+        this.colors = colors;
+        this.fadeColors = fadeColors;
+        this.type = type;
+    }
+
+    /**
+     * Construct a firework effect.
+     *
+     * @return A utility object for building a firework effect
+     */
+    public static Builder builder() {
+        return new Builder();
+    }
+
+    /**
+     * @see ConfigurationSerializable
+     */
+    public static ConfigurationSerializable deserialize(Map<String, Object> map) {
+        Type type = Type.valueOf((String) map.get(TYPE));
+        if (type == null) {
+            throw new IllegalArgumentException(map.get(TYPE) + " is not a valid Type");
+        }
+
+        return builder()
+                .flicker((Boolean) map.get(FLICKER))
+                .trail((Boolean) map.get(TRAIL))
+                .withColor((Iterable<?>) map.get(COLORS))
+                .withFade((Iterable<?>) map.get(FADE_COLORS))
+                .with(type)
+                .build();
+    }
+
+    /**
+     * Get whether the firework effect flickers.
+     *
+     * @return true if it flickers, false if not
+     */
+    public boolean hasFlicker() {
+        return flicker;
+    }
+
+    /**
+     * Get whether the firework effect has a trail.
+     *
+     * @return true if it has a trail, false if not
+     */
+    public boolean hasTrail() {
+        return trail;
+    }
+
+    /**
+     * Get the primary colors of the firework effect.
+     *
+     * @return An immutable list of the primary colors
+     */
+    public List<Color> getColors() {
+        return colors;
+    }
+
+    /**
+     * Get the fade colors of the firework effect.
+     *
+     * @return An immutable list of the fade colors
+     */
+    public List<Color> getFadeColors() {
+        return fadeColors;
+    }
+
+    /**
+     * Get the type of the firework effect.
+     *
+     * @return The effect type
+     */
+    public Type getType() {
+        return type;
+    }
+
+    @Override
+    public Map<String, Object> serialize() {
+        return ImmutableMap.<String, Object>of(
+                FLICKER, flicker,
+                TRAIL, trail,
+                COLORS, colors,
+                FADE_COLORS, fadeColors,
+                TYPE, type.name()
+        );
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+        if (this == obj) {
+            return true;
+        }
+
+        if (!(obj instanceof FireworkEffect)) {
+            return false;
+        }
+
+        FireworkEffect that = (FireworkEffect) obj;
+        return this.flicker == that.flicker
+                && this.trail == that.trail
+                && this.type == that.type
+                && this.colors.equals(that.colors)
+                && this.fadeColors.equals(that.fadeColors);
+    }
+
+    @Override
+    public int hashCode() {
+        /**
+         * TRUE and FALSE as per boolean.hashCode()
+         */
+        final int PRIME = 31, TRUE = 1231, FALSE = 1237;
+        int hash = 1;
+        hash = hash * PRIME + (flicker ? TRUE : FALSE);
+        hash = hash * PRIME + (trail ? TRUE : FALSE);
+        hash = hash * PRIME + type.hashCode();
+        hash = hash * PRIME + colors.hashCode();
+        hash = hash * PRIME + fadeColors.hashCode();
+        return hash;
+    }
+
+    @Override
+    public String toString() {
+        final String string = this.string;
+        if (string == null) {
+            return this.string = "FireworkEffect:" + serialize();
+        }
+
+        return string;
+    }
+
     /**
      * The type or shape of the effect.
      */
     public enum Type {
+
         /**
          * A small ball effect.
          */
         BALL,
+
         /**
          * A large ball effect.
          */
         BALL_LARGE,
+
         /**
          * A star-shaped effect.
          */
         STAR,
+
         /**
          * A burst effect.
          */
         BURST,
+
         /**
          * A creeper-face effect.
          */
-        CREEPER,
-        ;
-    }
-
-    /**
-     * Construct a firework effect.
-     *
-     * @return A utility object for building a firework effect
-     */
-    public static Builder builder() {
-        return new Builder();
+        CREEPER,;
     }
 
     /**
@@ -58,13 +201,15 @@ public final class FireworkEffect implements ConfigurationSerializable {
      * @see FireworkEffect#builder()
      */
     public static final class Builder {
+        final ImmutableList.Builder<Color> colors = ImmutableList.builder();
         boolean flicker = false;
         boolean trail = false;
-        final ImmutableList.Builder<Color> colors = ImmutableList.builder();
         ImmutableList.Builder<Color> fadeColors = null;
         Type type = Type.BALL;
 
-        Builder() {}
+        Builder() {
+
+        }
 
         /**
          * Specify the type of the firework effect.
@@ -143,9 +288,9 @@ public final class FireworkEffect implements ConfigurationSerializable {
          * @return This object, for chaining
          * @throws IllegalArgumentException If colors is null
          * @throws IllegalArgumentException If any color is null (may be
-         *     thrown after changes have occurred)
+         *                                  thrown after changes have occurred)
          */
-        public Builder withColor(Color...colors) throws IllegalArgumentException {
+        public Builder withColor(Color... colors) throws IllegalArgumentException {
             Validate.notNull(colors, "Cannot have null colors");
             if (colors.length == 0) {
                 return this;
@@ -164,11 +309,11 @@ public final class FireworkEffect implements ConfigurationSerializable {
          * Add several primary colors to the firework effect.
          *
          * @param colors An iterable object whose iterator yields the desired
-         *     colors
+         *               colors
          * @return This object, for chaining
          * @throws IllegalArgumentException If colors is null
          * @throws IllegalArgumentException If any color is null (may be
-         *     thrown after changes have occurred)
+         *                                  thrown after changes have occurred)
          */
         public Builder withColor(Iterable<?> colors) throws IllegalArgumentException {
             Validate.notNull(colors, "Cannot have null colors");
@@ -178,6 +323,7 @@ public final class FireworkEffect implements ConfigurationSerializable {
                 if (!(color instanceof Color)) {
                     throw new IllegalArgumentException(color + " is not a Color in " + colors);
                 }
+
                 list.add((Color) color);
             }
 
@@ -191,7 +337,7 @@ public final class FireworkEffect implements ConfigurationSerializable {
          * @return This object, for chaining
          * @throws IllegalArgumentException If colors is null
          * @throws IllegalArgumentException If any color is null (may be
-         *     thrown after changes have occurred)
+         *                                  thrown after changes have occurred)
          */
         public Builder withFade(Color color) throws IllegalArgumentException {
             Validate.notNull(color, "Cannot have null color");
@@ -201,7 +347,6 @@ public final class FireworkEffect implements ConfigurationSerializable {
             }
 
             fadeColors.add(color);
-
             return this;
         }
 
@@ -212,9 +357,9 @@ public final class FireworkEffect implements ConfigurationSerializable {
          * @return This object, for chaining
          * @throws IllegalArgumentException If colors is null
          * @throws IllegalArgumentException If any color is null (may be
-         *     thrown after changes have occurred)
+         *                                  thrown after changes have occurred)
          */
-        public Builder withFade(Color...colors) throws IllegalArgumentException {
+        public Builder withFade(Color... colors) throws IllegalArgumentException {
             Validate.notNull(colors, "Cannot have null colors");
             if (colors.length == 0) {
                 return this;
@@ -237,11 +382,11 @@ public final class FireworkEffect implements ConfigurationSerializable {
          * Add several fade colors to the firework effect.
          *
          * @param colors An iterable object whose iterator yields the desired
-         *     colors
+         *               colors
          * @return This object, for chaining
          * @throws IllegalArgumentException If colors is null
          * @throws IllegalArgumentException If any color is null (may be
-         *     thrown after changes have occurred)
+         *                                  thrown after changes have occurred)
          */
         public Builder withFade(Iterable<?> colors) throws IllegalArgumentException {
             Validate.notNull(colors, "Cannot have null colors");
@@ -255,6 +400,7 @@ public final class FireworkEffect implements ConfigurationSerializable {
                 if (!(color instanceof Color)) {
                     throw new IllegalArgumentException(color + " is not a Color in " + colors);
                 }
+
                 list.add((Color) color);
             }
 
@@ -271,151 +417,12 @@ public final class FireworkEffect implements ConfigurationSerializable {
          */
         public FireworkEffect build() {
             return new FireworkEffect(
-                flicker,
-                trail,
-                colors.build(),
-                fadeColors == null ? ImmutableList.<Color>of() : fadeColors.build(),
-                type
+                    flicker,
+                    trail,
+                    colors.build(),
+                    fadeColors == null ? ImmutableList.<Color>of() : fadeColors.build(),
+                    type
             );
         }
     }
-
-    private static final String FLICKER = "flicker";
-    private static final String TRAIL = "trail";
-    private static final String COLORS = "colors";
-    private static final String FADE_COLORS = "fade-colors";
-    private static final String TYPE = "type";
-
-    private final boolean flicker;
-    private final boolean trail;
-    private final ImmutableList<Color> colors;
-    private final ImmutableList<Color> fadeColors;
-    private final Type type;
-    private String string = null;
-
-    FireworkEffect(boolean flicker, boolean trail, ImmutableList<Color> colors, ImmutableList<Color> fadeColors, Type type) {
-        if (colors.isEmpty()) {
-            throw new IllegalStateException("Cannot make FireworkEffect without any color");
-        }
-        this.flicker = flicker;
-        this.trail = trail;
-        this.colors = colors;
-        this.fadeColors = fadeColors;
-        this.type = type;
-    }
-
-    /**
-     * Get whether the firework effect flickers.
-     *
-     * @return true if it flickers, false if not
-     */
-    public boolean hasFlicker() {
-        return flicker;
-    }
-
-    /**
-     * Get whether the firework effect has a trail.
-     *
-     * @return true if it has a trail, false if not
-     */
-    public boolean hasTrail() {
-        return trail;
-    }
-
-    /**
-     * Get the primary colors of the firework effect.
-     *
-     * @return An immutable list of the primary colors
-     */
-    public List<Color> getColors() {
-        return colors;
-    }
-
-    /**
-     * Get the fade colors of the firework effect.
-     *
-     * @return An immutable list of the fade colors
-     */
-    public List<Color> getFadeColors() {
-        return fadeColors;
-    }
-
-    /**
-     * Get the type of the firework effect.
-     *
-     * @return The effect type
-     */
-    public Type getType() {
-        return type;
-    }
-
-    /**
-     * @see ConfigurationSerializable
-     */
-    public static ConfigurationSerializable deserialize(Map<String, Object> map) {
-        Type type = Type.valueOf((String) map.get(TYPE));
-        if (type == null) {
-            throw new IllegalArgumentException(map.get(TYPE) + " is not a valid Type");
-        }
-
-        return builder()
-            .flicker((Boolean) map.get(FLICKER))
-            .trail((Boolean) map.get(TRAIL))
-            .withColor((Iterable<?>) map.get(COLORS))
-            .withFade((Iterable<?>) map.get(FADE_COLORS))
-            .with(type)
-            .build();
-    }
-
-    public Map<String, Object> serialize() {
-        return ImmutableMap.<String, Object>of(
-            FLICKER, flicker,
-            TRAIL, trail,
-            COLORS, colors,
-            FADE_COLORS, fadeColors,
-            TYPE, type.name()
-        );
-    }
-
-    @Override
-    public String toString() {
-        final String string = this.string;
-        if (string == null) {
-            return this.string = "FireworkEffect:" + serialize();
-        }
-        return string;
-    }
-
-    @Override
-    public int hashCode() {
-        /**
-         * TRUE and FALSE as per boolean.hashCode()
-         */
-        final int PRIME = 31, TRUE = 1231, FALSE = 1237;
-        int hash = 1;
-        hash = hash * PRIME + (flicker ? TRUE : FALSE);
-        hash = hash * PRIME + (trail ? TRUE : FALSE);
-        hash = hash * PRIME + type.hashCode();
-        hash = hash * PRIME + colors.hashCode();
-        hash = hash * PRIME + fadeColors.hashCode();
-        return hash;
-    }
-
-    @Override
-    public boolean equals(Object obj) {
-        if (this == obj) {
-            return true;
-        }
-
-        if (!(obj instanceof FireworkEffect)) {
-            return false;
-        }
-
-        FireworkEffect that = (FireworkEffect) obj;
-        return this.flicker == that.flicker
-                && this.trail == that.trail
-                && this.type == that.type
-                && this.colors.equals(that.colors)
-                && this.fadeColors.equals(that.fadeColors);
-    }
 }
diff --git a/src/main/java/org/bukkit/GameMode.java b/src/main/java/org/bukkit/GameMode.java
index f85ed0b..bb6cbf3 100644
--- a/src/main/java/org/bukkit/GameMode.java
+++ b/src/main/java/org/bukkit/GameMode.java
@@ -1,24 +1,26 @@
 package org.bukkit;
 
-import java.util.Map;
-
+import com.google.common.collect.Maps;
 import org.bukkit.entity.HumanEntity;
 
-import com.google.common.collect.Maps;
+import java.util.Map;
 
 /**
  * Represents the various type of game modes that {@link HumanEntity}s may
  * have
  */
 public enum GameMode {
+
     /**
-     * Creative mode may fly, build instantly, become invulnerable and create
-     * free items.
+     * Creative mode may fly, build instantly, become
+     * invulnerable and create free items.
      */
     CREATIVE(1),
 
+
     /**
-     * Survival mode is the "normal" gameplay type, with no special features.
+     * Survival mode is the "normal" gameplay type,
+     * with no special features.
      */
     SURVIVAL(0),
 
@@ -27,22 +29,18 @@ public enum GameMode {
      */
     ADVENTURE(2);
 
-    private final int value;
     private final static Map<Integer, GameMode> BY_ID = Maps.newHashMap();
 
-    private GameMode(final int value) {
-        this.value = value;
+    static {
+        for (GameMode mode : values()) {
+            BY_ID.put(mode.getValue(), mode);
+        }
     }
 
-    /**
-     * Gets the mode value associated with this GameMode
-     *
-     * @return An integer value of this gamemode
-     * @deprecated Magic value
-     */
-    @Deprecated
-    public int getValue() {
-        return value;
+    private final int value;
+
+    GameMode(final int value) {
+        this.value = value;
     }
 
     /**
@@ -50,7 +48,7 @@ public enum GameMode {
      *
      * @param value Value to check
      * @return Associative {@link GameMode} with the given value, or null if
-     *     it doesn't exist
+     * it doesn't exist
      * @deprecated Magic value
      */
     @Deprecated
@@ -58,9 +56,14 @@ public enum GameMode {
         return BY_ID.get(value);
     }
 
-    static {
-        for (GameMode mode : values()) {
-            BY_ID.put(mode.getValue(), mode);
-        }
+    /**
+     * Gets the mode value associated with this GameMode
+     *
+     * @return An integer value of this gamemode
+     * @deprecated Magic value
+     */
+    @Deprecated
+    public int getValue() {
+        return value;
     }
 }
diff --git a/src/main/java/org/bukkit/GrassSpecies.java b/src/main/java/org/bukkit/GrassSpecies.java
index 1111515..1c1cf42 100644
--- a/src/main/java/org/bukkit/GrassSpecies.java
+++ b/src/main/java/org/bukkit/GrassSpecies.java
@@ -1,9 +1,9 @@
 package org.bukkit;
 
-import java.util.Map;
-
 import com.google.common.collect.Maps;
 
+import java.util.Map;
+
 /**
  * Represents the different types of grass.
  */
@@ -13,31 +13,29 @@ public enum GrassSpecies {
      * Represents the dead looking grass.
      */
     DEAD(0x0),
+
     /**
      * Represents the normal grass species.
      */
     NORMAL(0x1),
+
     /**
      * Represents the fern-looking grass species.
      */
     FERN_LIKE(0x2);
 
-    private final byte data;
     private final static Map<Byte, GrassSpecies> BY_DATA = Maps.newHashMap();
 
-    private GrassSpecies(final int data) {
-        this.data = (byte) data;
+    static {
+        for (GrassSpecies grassSpecies : values()) {
+            BY_DATA.put(grassSpecies.getData(), grassSpecies);
+        }
     }
 
-    /**
-     * Gets the associated data value representing this species
-     *
-     * @return A byte containing the data value of this grass species
-     * @deprecated Magic value
-     */
-    @Deprecated
-    public byte getData() {
-        return data;
+    private final byte data;
+
+    GrassSpecies(final int data) {
+        this.data = (byte) data;
     }
 
     /**
@@ -45,7 +43,7 @@ public enum GrassSpecies {
      *
      * @param data Data value to fetch
      * @return The {@link GrassSpecies} representing the given value, or null
-     *     if it doesn't exist
+     * if it doesn't exist
      * @deprecated Magic value
      */
     @Deprecated
@@ -53,9 +51,14 @@ public enum GrassSpecies {
         return BY_DATA.get(data);
     }
 
-    static {
-        for (GrassSpecies grassSpecies : values()) {
-            BY_DATA.put(grassSpecies.getData(), grassSpecies);
-        }
+    /**
+     * Gets the associated data value representing this species
+     *
+     * @return A byte containing the data value of this grass species
+     * @deprecated Magic value
+     */
+    @Deprecated
+    public byte getData() {
+        return data;
     }
 }
diff --git a/src/main/java/org/bukkit/Instrument.java b/src/main/java/org/bukkit/Instrument.java
index 891a2b1..cf8d19a 100644
--- a/src/main/java/org/bukkit/Instrument.java
+++ b/src/main/java/org/bukkit/Instrument.java
@@ -1,50 +1,52 @@
 package org.bukkit;
 
-import java.util.Map;
-
 import com.google.common.collect.Maps;
 
+import java.util.Map;
+
 public enum Instrument {
 
     /**
      * Piano is the standard instrument for a note block.
      */
     PIANO(0x0),
+
     /**
      * Bass drum is normally played when a note block is on top of a
      * stone-like block
      */
     BASS_DRUM(0x1),
+
     /**
      * Snare drum is normally played when a note block is on top of a sandy
      * block.
      */
     SNARE_DRUM(0x2),
+
     /**
      * Sticks are normally played when a note block is on top of a glass
      * block.
      */
     STICKS(0x3),
+
     /**
      * Bass guitar is normally played when a note block is on top of a wooden
      * block.
      */
     BASS_GUITAR(0x4);
 
-    private final byte type;
     private final static Map<Byte, Instrument> BY_DATA = Maps.newHashMap();
 
-    private Instrument(final int type) {
-        this.type = (byte) type;
+    static {
+        for (Instrument instrument : Instrument.values()) {
+            BY_DATA.put(instrument.getType(), instrument);
+        }
     }
 
-    /**
-     * @return The type ID of this instrument.
-     * @deprecated Magic value
-     */
-    @Deprecated
-    public byte getType() {
-        return this.type;
+    private final byte type;
+
+    Instrument(final int type) {
+        this.type = (byte) type;
     }
 
     /**
@@ -59,9 +61,12 @@ public enum Instrument {
         return BY_DATA.get(type);
     }
 
-    static {
-        for (Instrument instrument : Instrument.values()) {
-            BY_DATA.put(instrument.getType(), instrument);
-        }
+    /**
+     * @return The type ID of this instrument.
+     * @deprecated Magic value
+     */
+    @Deprecated
+    public byte getType() {
+        return this.type;
     }
 }
diff --git a/src/main/java/org/bukkit/Location.java b/src/main/java/org/bukkit/Location.java
index 5c18507..2dd98c0 100644
--- a/src/main/java/org/bukkit/Location.java
+++ b/src/main/java/org/bukkit/Location.java
@@ -8,6 +8,7 @@ import org.bukkit.util.Vector;
  * Represents a 3-dimensional position in a world
  */
 public class Location implements Cloneable {
+
     private World world;
     private double x;
     private double y;
@@ -19,9 +20,9 @@ public class Location implements Cloneable {
      * Constructs a new Location with the given coordinates
      *
      * @param world The world in which this location resides
-     * @param x The x-coordinate of this new location
-     * @param y The y-coordinate of this new location
-     * @param z The z-coordinate of this new location
+     * @param x     The x-coordinate of this new location
+     * @param y     The y-coordinate of this new location
+     * @param z     The z-coordinate of this new location
      */
     public Location(final World world, final double x, final double y, final double z) {
         this(world, x, y, z, 0, 0);
@@ -31,10 +32,10 @@ public class Location implements Cloneable {
      * Constructs a new Location with the given coordinates and direction
      *
      * @param world The world in which this location resides
-     * @param x The x-coordinate of this new location
-     * @param y The y-coordinate of this new location
-     * @param z The z-coordinate of this new location
-     * @param yaw The absolute rotation on the x-plane, in degrees
+     * @param x     The x-coordinate of this new location
+     * @param y     The y-coordinate of this new location
+     * @param z     The z-coordinate of this new location
+     * @param yaw   The absolute rotation on the x-plane, in degrees
      * @param pitch The absolute rotation on the y-plane, in degrees
      */
     public Location(final World world, final double x, final double y, final double z, final float yaw, final float pitch) {
@@ -47,12 +48,14 @@ public class Location implements Cloneable {
     }
 
     /**
-     * Sets the world that this location resides in
+     * Safely converts a double (location coordinate) to an int (block
+     * coordinate)
      *
-     * @param world New world that this location resides in
+     * @param loc Precise coordinate
+     * @return Block coordinate
      */
-    public void setWorld(World world) {
-        this.world = world;
+    public static int locToBlock(double loc) {
+        return NumberConversions.floor(loc);
     }
 
     /**
@@ -65,6 +68,15 @@ public class Location implements Cloneable {
     }
 
     /**
+     * Sets the world that this location resides in
+     *
+     * @param world New world that this location resides in
+     */
+    public void setWorld(World world) {
+        this.world = world;
+    }
+
+    /**
      * Gets the chunk at the represented location
      *
      * @return Chunk at the represented location
@@ -83,21 +95,21 @@ public class Location implements Cloneable {
     }
 
     /**
-     * Sets the x-coordinate of this location
+     * Gets the x-coordinate of this location
      *
-     * @param x X-coordinate
+     * @return x-coordinate
      */
-    public void setX(double x) {
-        this.x = x;
+    public double getX() {
+        return x;
     }
 
     /**
-     * Gets the x-coordinate of this location
+     * Sets the x-coordinate of this location
      *
-     * @return x-coordinate
+     * @param x X-coordinate
      */
-    public double getX() {
-        return x;
+    public void setX(double x) {
+        this.x = x;
     }
 
     /**
@@ -111,21 +123,21 @@ public class Location implements Cloneable {
     }
 
     /**
-     * Sets the y-coordinate of this location
+     * Gets the y-coordinate of this location
      *
-     * @param y y-coordinate
+     * @return y-coordinate
      */
-    public void setY(double y) {
-        this.y = y;
+    public double getY() {
+        return y;
     }
 
     /**
-     * Gets the y-coordinate of this location
+     * Sets the y-coordinate of this location
      *
-     * @return y-coordinate
+     * @param y y-coordinate
      */
-    public double getY() {
-        return y;
+    public void setY(double y) {
+        this.y = y;
     }
 
     /**
@@ -139,21 +151,21 @@ public class Location implements Cloneable {
     }
 
     /**
-     * Sets the z-coordinate of this location
+     * Gets the z-coordinate of this location
      *
-     * @param z z-coordinate
+     * @return z-coordinate
      */
-    public void setZ(double z) {
-        this.z = z;
+    public double getZ() {
+        return z;
     }
 
     /**
-     * Gets the z-coordinate of this location
+     * Sets the z-coordinate of this location
      *
-     * @return z-coordinate
+     * @param z z-coordinate
      */
-    public double getZ() {
-        return z;
+    public void setZ(double z) {
+        this.z = z;
     }
 
     /**
@@ -167,7 +179,7 @@ public class Location implements Cloneable {
     }
 
     /**
-     * Sets the yaw of this location, measured in degrees.
+     * Gets the yaw of this location, measured in degrees.
      * <ul>
      * <li>A yaw of 0 or 360 represents the positive z direction.
      * <li>A yaw of 180 represents the negative z direction.
@@ -178,14 +190,14 @@ public class Location implements Cloneable {
      * right-facing, increasing the scale of the next respective axis, and
      * decreasing the scale of the previous axis.
      *
-     * @param yaw new rotation's yaw
+     * @return the rotation's yaw
      */
-    public void setYaw(float yaw) {
-        this.yaw = yaw;
+    public float getYaw() {
+        return yaw;
     }
 
     /**
-     * Gets the yaw of this location, measured in degrees.
+     * Sets the yaw of this location, measured in degrees.
      * <ul>
      * <li>A yaw of 0 or 360 represents the positive z direction.
      * <li>A yaw of 180 represents the negative z direction.
@@ -196,42 +208,42 @@ public class Location implements Cloneable {
      * right-facing, increasing the scale of the next respective axis, and
      * decreasing the scale of the previous axis.
      *
-     * @return the rotation's yaw
+     * @param yaw new rotation's yaw
      */
-    public float getYaw() {
-        return yaw;
+    public void setYaw(float yaw) {
+        this.yaw = yaw;
     }
 
     /**
-     * Sets the pitch of this location, measured in degrees.
+     * Gets the pitch of this location, measured in degrees.
      * <ul>
      * <li>A pitch of 0 represents level forward facing.
      * <li>A pitch of 90 represents downward facing, or negative y
-     *     direction.
+     * direction.
      * <li>A pitch of -90 represents upward facing, or positive y direction.
      * <ul>
      * Increasing pitch values the equivalent of looking down.
      *
-     * @param pitch new incline's pitch
+     * @return the incline's pitch
      */
-    public void setPitch(float pitch) {
-        this.pitch = pitch;
+    public float getPitch() {
+        return pitch;
     }
 
     /**
-     * Gets the pitch of this location, measured in degrees.
+     * Sets the pitch of this location, measured in degrees.
      * <ul>
      * <li>A pitch of 0 represents level forward facing.
      * <li>A pitch of 90 represents downward facing, or negative y
-     *     direction.
+     * direction.
      * <li>A pitch of -90 represents upward facing, or positive y direction.
      * <ul>
      * Increasing pitch values the equivalent of looking down.
      *
-     * @return the incline's pitch
+     * @param pitch new incline's pitch
      */
-    public float getPitch() {
-        return pitch;
+    public void setPitch(float pitch) {
+        this.pitch = pitch;
     }
 
     /**
@@ -239,7 +251,7 @@ public class Location implements Cloneable {
      * facing.
      *
      * @return a vector pointing the direction of this location's {@link
-     *     #getPitch() pitch} and {@link #getYaw() yaw}
+     * #getPitch() pitch} and {@link #getYaw() yaw}
      */
     public Vector getDirection() {
         Vector vector = new Vector();
@@ -293,10 +305,10 @@ public class Location implements Cloneable {
     /**
      * Adds the location by another.
      *
-     * @see Vector
      * @param vec The other location
      * @return the same location
      * @throws IllegalArgumentException for differing worlds
+     * @see Vector
      */
     public Location add(Location vec) {
         if (vec == null || vec.getWorld() != getWorld()) {
@@ -312,9 +324,9 @@ public class Location implements Cloneable {
     /**
      * Adds the location by a vector.
      *
-     * @see Vector
      * @param vec Vector to use
      * @return the same location
+     * @see Vector
      */
     public Location add(Vector vec) {
         this.x += vec.getX();
@@ -326,11 +338,11 @@ public class Location implements Cloneable {
     /**
      * Adds the location by another. Not world-aware.
      *
-     * @see Vector
      * @param x X coordinate
      * @param y Y coordinate
      * @param z Z coordinate
      * @return the same location
+     * @see Vector
      */
     public Location add(double x, double y, double z) {
         this.x += x;
@@ -342,10 +354,10 @@ public class Location implements Cloneable {
     /**
      * Subtracts the location by another.
      *
-     * @see Vector
      * @param vec The other location
      * @return the same location
      * @throws IllegalArgumentException for differing worlds
+     * @see Vector
      */
     public Location subtract(Location vec) {
         if (vec == null || vec.getWorld() != getWorld()) {
@@ -361,9 +373,9 @@ public class Location implements Cloneable {
     /**
      * Subtracts the location by a vector.
      *
-     * @see Vector
      * @param vec The vector to use
      * @return the same location
+     * @see Vector
      */
     public Location subtract(Vector vec) {
         this.x -= vec.getX();
@@ -376,11 +388,11 @@ public class Location implements Cloneable {
      * Subtracts the location by another. Not world-aware and
      * orientation independent.
      *
-     * @see Vector
      * @param x X coordinate
      * @param y Y coordinate
      * @param z Z coordinate
      * @return the same location
+     * @see Vector
      */
     public Location subtract(double x, double y, double z) {
         this.x -= x;
@@ -397,8 +409,8 @@ public class Location implements Cloneable {
      * function overflows, which will be caused if the length is too long. Not
      * world-aware and orientation independent.
      *
-     * @see Vector
      * @return the magnitude
+     * @see Vector
      */
     public double length() {
         return Math.sqrt(NumberConversions.square(x) + NumberConversions.square(y) + NumberConversions.square(z));
@@ -408,8 +420,8 @@ public class Location implements Cloneable {
      * Gets the magnitude of the location squared. Not world-aware and
      * orientation independent.
      *
-     * @see Vector
      * @return the magnitude
+     * @see Vector
      */
     public double lengthSquared() {
         return NumberConversions.square(x) + NumberConversions.square(y) + NumberConversions.square(z);
@@ -422,10 +434,10 @@ public class Location implements Cloneable {
      * be returned if the inner result of the sqrt() function overflows, which
      * will be caused if the distance is too long.
      *
-     * @see Vector
      * @param o The other location
      * @return the distance
      * @throws IllegalArgumentException for differing worlds
+     * @see Vector
      */
     public double distance(Location o) {
         return Math.sqrt(distanceSquared(o));
@@ -434,10 +446,10 @@ public class Location implements Cloneable {
     /**
      * Get the squared distance between this location and another.
      *
-     * @see Vector
      * @param o The other location
      * @return the distance
      * @throws IllegalArgumentException for differing worlds
+     * @see Vector
      */
     public double distanceSquared(Location o) {
         if (o == null) {
@@ -456,8 +468,8 @@ public class Location implements Cloneable {
      * scalar. Not world-aware.
      *
      * @param m The factor
-     * @see Vector
      * @return the same location
+     * @see Vector
      */
     public Location multiply(double m) {
         x *= m;
@@ -469,8 +481,8 @@ public class Location implements Cloneable {
     /**
      * Zero this location's components. Not world-aware.
      *
-     * @see Vector
      * @return the same location
+     * @see Vector
      */
     public Location zero() {
         x = 0;
@@ -479,34 +491,52 @@ public class Location implements Cloneable {
         return this;
     }
 
+    /**
+     * Constructs a new {@link Vector} based on this Location
+     *
+     * @return New Vector containing the coordinates represented by this
+     * Location
+     */
+    public Vector toVector() {
+        return new Vector(x, y, z);
+    }
+
     @Override
     public boolean equals(Object obj) {
         if (obj == null) {
             return false;
         }
+
         if (getClass() != obj.getClass()) {
             return false;
         }
+
         final Location other = (Location) obj;
 
         if (this.world != other.world && (this.world == null || !this.world.equals(other.world))) {
             return false;
         }
+
         if (Double.doubleToLongBits(this.x) != Double.doubleToLongBits(other.x)) {
             return false;
         }
+
         if (Double.doubleToLongBits(this.y) != Double.doubleToLongBits(other.y)) {
             return false;
         }
+
         if (Double.doubleToLongBits(this.z) != Double.doubleToLongBits(other.z)) {
             return false;
         }
+
         if (Float.floatToIntBits(this.pitch) != Float.floatToIntBits(other.pitch)) {
             return false;
         }
+
         if (Float.floatToIntBits(this.yaw) != Float.floatToIntBits(other.yaw)) {
             return false;
         }
+
         return true;
     }
 
@@ -528,16 +558,6 @@ public class Location implements Cloneable {
         return "Location{" + "world=" + world + ",x=" + x + ",y=" + y + ",z=" + z + ",pitch=" + pitch + ",yaw=" + yaw + '}';
     }
 
-    /**
-     * Constructs a new {@link Vector} based on this Location
-     *
-     * @return New Vector containing the coordinates represented by this
-     *     Location
-     */
-    public Vector toVector() {
-        return new Vector(x, y, z);
-    }
-
     @Override
     public Location clone() {
         try {
@@ -546,15 +566,4 @@ public class Location implements Cloneable {
             throw new Error(e);
         }
     }
-
-    /**
-     * Safely converts a double (location coordinate) to an int (block
-     * coordinate)
-     *
-     * @param loc Precise coordinate
-     * @return Block coordinate
-     */
-    public static int locToBlock(double loc) {
-        return NumberConversions.floor(loc);
-    }
 }
diff --git a/src/main/java/org/bukkit/Material.java b/src/main/java/org/bukkit/Material.java
index c45c180..02414e1 100644
--- a/src/main/java/org/bukkit/Material.java
+++ b/src/main/java/org/bukkit/Material.java
@@ -1,67 +1,20 @@
 package org.bukkit;
 
-import java.lang.reflect.Constructor;
-import java.util.Map;
-
+import com.google.common.collect.Maps;
 import org.apache.commons.lang.Validate;
 import org.bukkit.map.MapView;
-import org.bukkit.material.Bed;
-import org.bukkit.material.Button;
-import org.bukkit.material.Cake;
-import org.bukkit.material.Cauldron;
-import org.bukkit.material.Chest;
-import org.bukkit.material.Coal;
-import org.bukkit.material.CocoaPlant;
-import org.bukkit.material.Command;
-import org.bukkit.material.Crops;
-import org.bukkit.material.DetectorRail;
-import org.bukkit.material.Diode;
-import org.bukkit.material.Dispenser;
-import org.bukkit.material.Door;
-import org.bukkit.material.Dye;
-import org.bukkit.material.EnderChest;
-import org.bukkit.material.FlowerPot;
-import org.bukkit.material.Furnace;
-import org.bukkit.material.Gate;
-import org.bukkit.material.Ladder;
-import org.bukkit.material.Lever;
-import org.bukkit.material.LongGrass;
-import org.bukkit.material.MaterialData;
-import org.bukkit.material.MonsterEggs;
-import org.bukkit.material.Mushroom;
-import org.bukkit.material.NetherWarts;
-import org.bukkit.material.PistonBaseMaterial;
-import org.bukkit.material.PistonExtensionMaterial;
-import org.bukkit.material.PoweredRail;
-import org.bukkit.material.PressurePlate;
-import org.bukkit.material.Pumpkin;
-import org.bukkit.material.Rails;
-import org.bukkit.material.RedstoneTorch;
-import org.bukkit.material.RedstoneWire;
-import org.bukkit.material.Sandstone;
-import org.bukkit.material.Sign;
-import org.bukkit.material.Skull;
-import org.bukkit.material.SmoothBrick;
-import org.bukkit.material.SpawnEgg;
-import org.bukkit.material.Stairs;
-import org.bukkit.material.Step;
-import org.bukkit.material.Torch;
-import org.bukkit.material.TrapDoor;
-import org.bukkit.material.Tree;
-import org.bukkit.material.Tripwire;
-import org.bukkit.material.TripwireHook;
-import org.bukkit.material.Vine;
-import org.bukkit.material.WoodenStep;
-import org.bukkit.material.Wool;
+import org.bukkit.material.*;
 import org.bukkit.potion.Potion;
 import org.bukkit.util.Java15Compat;
 
-import com.google.common.collect.Maps;
+import java.lang.reflect.Constructor;
+import java.util.Map;
 
 /**
  * An enum of all material IDs accepted by the official server and client
  */
 public enum Material {
+
     AIR(0, 0),
     STONE(1),
     GRASS(2),
@@ -412,40 +365,54 @@ public enum Material {
     RECORD_9(2264, 1),
     RECORD_10(2265, 1),
     RECORD_11(2266, 1),
-    RECORD_12(2267, 1),
-    ;
+    RECORD_12(2267, 1);
+
+    private final static Map<String, Material> BY_NAME = Maps.newHashMap();
+    private static Material[] byId = new Material[383];
+
+    static {
+        for (Material material : values()) {
+            if (byId.length > material.id) {
+                byId[material.id] = material;
+            } else {
+                byId = Java15Compat.Arrays_copyOfRange(byId, 0, material.id + 2);
+                byId[material.id] = material;
+            }
+
+            BY_NAME.put(material.name(), material);
+        }
+    }
 
     private final int id;
     private final Constructor<? extends MaterialData> ctor;
-    private static Material[] byId = new Material[383];
-    private final static Map<String, Material> BY_NAME = Maps.newHashMap();
     private final int maxStack;
     private final short durability;
 
-    private Material(final int id) {
+    Material(final int id) {
         this(id, 64);
     }
 
-    private Material(final int id, final int stack) {
+    Material(final int id, final int stack) {
         this(id, stack, MaterialData.class);
     }
 
-    private Material(final int id, final int stack, final int durability) {
+    Material(final int id, final int stack, final int durability) {
         this(id, stack, durability, MaterialData.class);
     }
 
-    private Material(final int id, final Class<? extends MaterialData> data) {
+    Material(final int id, final Class<? extends MaterialData> data) {
         this(id, 64, data);
     }
 
-    private Material(final int id, final int stack, final Class<? extends MaterialData> data) {
+    Material(final int id, final int stack, final Class<? extends MaterialData> data) {
         this(id, stack, 0, data);
     }
 
-    private Material(final int id, final int stack, final int durability, final Class<? extends MaterialData> data) {
+    Material(final int id, final int stack, final int durability, final Class<? extends MaterialData> data) {
         this.id = id;
         this.durability = (short) durability;
         this.maxStack = stack;
+
         // try to cache the constructor for this material
         try {
             this.ctor = data.getConstructor(int.class, byte.class);
@@ -457,6 +424,66 @@ public enum Material {
     }
 
     /**
+     * Attempts to get the Material with the given ID
+     *
+     * @param id ID of the material to get
+     * @return Material if found, or null
+     * @deprecated Magic value
+     */
+    @Deprecated
+    public static Material getMaterial(final int id) {
+        if (byId.length > id && id >= 0) {
+            return byId[id];
+        } else {
+            return null;
+        }
+    }
+
+    /**
+     * Attempts to get the Material with the given name.
+     * <p>
+     * This is a normal lookup, names must be the precise name they are given
+     * in the enum.
+     *
+     * @param name Name of the material to get
+     * @return Material if found, or null
+     */
+    public static Material getMaterial(final String name) {
+        return BY_NAME.get(name);
+    }
+
+    /**
+     * Attempts to match the Material with the given name.
+     * <p>
+     * This is a match lookup; names will be converted to uppercase, then
+     * stripped of special characters in an attempt to format it like the
+     * enum.
+     * <p>
+     * Using this for match by ID is deprecated.
+     *
+     * @param name Name of the material to get
+     * @return Material if found, or null
+     */
+    public static Material matchMaterial(final String name) {
+        Validate.notNull(name, "Name cannot be null");
+        Material result = null;
+
+        try {
+            result = getMaterial(Integer.parseInt(name));
+        } catch (NumberFormatException ignored) {
+        }
+
+        if (result == null) {
+            String filtered = name.toUpperCase();
+
+            filtered = filtered.replaceAll("\\s+", "_").replaceAll("\\W", "");
+            result = BY_NAME.get(filtered);
+        }
+
+        return result;
+    }
+
+    /**
      * Gets the item ID or block ID of this Material
      *
      * @return ID of this material
@@ -507,16 +534,16 @@ public enum Material {
         try {
             return ctor.newInstance(id, raw);
         } catch (InstantiationException ex) {
-            final Throwable t = ex.getCause();
-            if (t instanceof RuntimeException) {
-                throw (RuntimeException) t;
+            final Throwable throwable = ex.getCause();
+            if (throwable instanceof RuntimeException) {
+                throw (RuntimeException) throwable;
             }
-            if (t instanceof Error) {
-                throw (Error) t;
+            if (throwable instanceof Error) {
+                throw (Error) throwable;
             }
-            throw new AssertionError(t);
-        } catch (Throwable t) {
-            throw new AssertionError(t);
+            throw new AssertionError(throwable);
+        } catch (Throwable throwable) {
+            throw new AssertionError(throwable);
         }
     }
 
@@ -565,78 +592,6 @@ public enum Material {
     }
 
     /**
-     * Attempts to get the Material with the given ID
-     *
-     * @param id ID of the material to get
-     * @return Material if found, or null
-     * @deprecated Magic value
-     */
-    @Deprecated
-    public static Material getMaterial(final int id) {
-        if (byId.length > id && id >= 0) {
-            return byId[id];
-        } else {
-            return null;
-        }
-    }
-
-    /**
-     * Attempts to get the Material with the given name.
-     * <p>
-     * This is a normal lookup, names must be the precise name they are given
-     * in the enum.
-     *
-     * @param name Name of the material to get
-     * @return Material if found, or null
-     */
-    public static Material getMaterial(final String name) {
-        return BY_NAME.get(name);
-    }
-
-    /**
-     * Attempts to match the Material with the given name.
-     * <p>
-     * This is a match lookup; names will be converted to uppercase, then
-     * stripped of special characters in an attempt to format it like the
-     * enum.
-     * <p>
-     * Using this for match by ID is deprecated.
-     *
-     * @param name Name of the material to get
-     * @return Material if found, or null
-     */
-    public static Material matchMaterial(final String name) {
-        Validate.notNull(name, "Name cannot be null");
-
-        Material result = null;
-
-        try {
-            result = getMaterial(Integer.parseInt(name));
-        } catch (NumberFormatException ex) {}
-
-        if (result == null) {
-            String filtered = name.toUpperCase();
-
-            filtered = filtered.replaceAll("\\s+", "_").replaceAll("\\W", "");
-            result = BY_NAME.get(filtered);
-        }
-
-        return result;
-    }
-
-    static {
-        for (Material material : values()) {
-            if (byId.length > material.id) {
-                byId[material.id] = material;
-            } else {
-                byId = Java15Compat.Arrays_copyOfRange(byId, 0, material.id + 2);
-                byId[material.id] = material;
-            }
-            BY_NAME.put(material.name(), material);
-        }
-    }
-
-    /**
      * @return True if this material represents a playable music disk.
      */
     public boolean isRecord() {
@@ -653,6 +608,7 @@ public enum Material {
         if (!isBlock() || id == 0) {
             return false;
         }
+
         switch (this) {
             case STONE:
             case GRASS:
@@ -792,6 +748,7 @@ public enum Material {
         if (!isBlock()) {
             return false;
         }
+
         switch (this) {
             case AIR:
             case SAPLING:
@@ -852,6 +809,7 @@ public enum Material {
         if (!isBlock()) {
             return false;
         }
+
         switch (this) {
             case WOOD:
             case LOG:
@@ -904,6 +862,7 @@ public enum Material {
         if (!isBlock()) {
             return false;
         }
+
         switch (this) {
             case WOOD:
             case LOG:
@@ -943,6 +902,7 @@ public enum Material {
         if (!isBlock()) {
             return false;
         }
+
         switch (this) {
             case STONE:
             case GRASS:
@@ -1022,6 +982,7 @@ public enum Material {
         if (!isBlock()) {
             return false;
         }
+
         switch (this) {
             case SAND:
             case GRAVEL:
diff --git a/src/main/java/org/bukkit/NetherWartsState.java b/src/main/java/org/bukkit/NetherWartsState.java
index f43209c..de62ece 100644
--- a/src/main/java/org/bukkit/NetherWartsState.java
+++ b/src/main/java/org/bukkit/NetherWartsState.java
@@ -6,14 +6,17 @@ public enum NetherWartsState {
      * State when first seeded
      */
     SEEDED,
+
     /**
      * First growth stage
      */
     STAGE_ONE,
+
     /**
      * Second growth stage
      */
     STAGE_TWO,
+
     /**
      * Ready to harvest
      */
diff --git a/src/main/java/org/bukkit/Note.java b/src/main/java/org/bukkit/Note.java
index 417936f..9a25434 100644
--- a/src/main/java/org/bukkit/Note.java
+++ b/src/main/java/org/bukkit/Note.java
@@ -1,142 +1,34 @@
 package org.bukkit;
 
-import java.util.Map;
-
+import com.google.common.collect.Maps;
 import org.apache.commons.lang.Validate;
 
-import com.google.common.collect.Maps;
+import java.util.Map;
 
 /**
  * A note class to store a specific note.
  */
 public class Note {
 
-    /**
-     * An enum holding tones.
-     */
-    public enum Tone {
-        G(0x1, true),
-        A(0x3, true),
-        B(0x5, false),
-        C(0x6, true),
-        D(0x8, true),
-        E(0xA, false),
-        F(0xB, true);
-
-        private final boolean sharpable;
-        private final byte id;
-
-        private static final Map<Byte, Note.Tone> BY_DATA = Maps.newHashMap();
-        /** The number of tones including sharped tones. */
-        public static final byte TONES_COUNT = 12;
-
-        private Tone(int id, boolean sharpable) {
-            this.id = (byte) (id % TONES_COUNT);
-            this.sharpable = sharpable;
-        }
-
-        /**
-         * Returns the not sharped id of this tone.
-         *
-         * @return the not sharped id of this tone.
-         * @deprecated Magic value
-         */
-        @Deprecated
-        public byte getId() {
-            return getId(false);
-        }
-
-        /**
-         * Returns the id of this tone. These method allows to return the
-         * sharped id of the tone. If the tone couldn't be sharped it always
-         * return the not sharped id of this tone.
-         *
-         * @param sharped Set to true to return the sharped id.
-         * @return the id of this tone.
-         * @deprecated Magic value
-         */
-        @Deprecated
-        public byte getId(boolean sharped) {
-            byte id = (byte) (sharped && sharpable ? this.id + 1 : this.id);
-
-            return (byte) (id % TONES_COUNT);
-        }
-
-        /**
-         * Returns if this tone could be sharped.
-         *
-         * @return if this tone could be sharped.
-         */
-        public boolean isSharpable() {
-            return sharpable;
-        }
-
-        /**
-         * Returns if this tone id is the sharped id of the tone.
-         *
-         * @param id the id of the tone.
-         * @return if the tone id is the sharped id of the tone.
-         * @throws IllegalArgumentException if neither the tone nor the
-         *     semitone have the id.
-         * @deprecated Magic value
-         */
-        @Deprecated
-        public boolean isSharped(byte id) {
-            if (id == getId(false)) {
-                return false;
-            } else if (id == getId(true)) {
-                return true;
-            } else {
-                // The id isn't matching to the tone!
-                throw new IllegalArgumentException("The id isn't matching to the tone.");
-            }
-        }
-
-        /**
-         * Returns the tone to id. Also returning the semitones.
-         *
-         * @param id the id of the tone.
-         * @return the tone to id.
-         * @deprecated Magic value
-         */
-        @Deprecated
-        public static Tone getById(byte id) {
-            return BY_DATA.get(id);
-        }
-
-        static {
-            for (Tone tone : values()) {
-                int id = tone.id % TONES_COUNT;
-                BY_DATA.put((byte) id, tone);
-
-                if (tone.isSharpable()) {
-                    id = (id + 1) % TONES_COUNT;
-                    BY_DATA.put((byte) id, tone);
-                }
-            }
-        }
-    }
-
     private final byte note;
 
     /**
      * Creates a new note.
      *
      * @param note Internal note id. {@link #getId()} always return this
-     *     value. The value has to be in the interval [0;&nbsp;24].
+     *             value. The value has to be in the interval [0;&nbsp;24].
      */
     public Note(int note) {
         Validate.isTrue(note >= 0 && note <= 24, "The note value has to be between 0 and 24.");
-
         this.note = (byte) note;
     }
 
     /**
      * Creates a new note.
      *
-     * @param octave The octave where the note is in. Has to be 0 - 2.
-     * @param tone The tone within the octave. If the octave is 2 the note has
-     *     to be F#.
+     * @param octave  The octave where the note is in. Has to be 0 - 2.
+     * @param tone    The tone within the octave. If the octave is 2 the note has
+     *                to be F#.
      * @param sharped Set if the tone is sharped (e.g. for F#).
      */
     public Note(int octave, Tone tone, boolean sharped) {
@@ -144,6 +36,7 @@ public class Note {
             tone = Tone.values()[tone.ordinal() + 1];
             sharped = false;
         }
+
         if (octave < 0 || octave > 2 || (octave == 2 && !(tone == Tone.F && sharped))) {
             throw new IllegalArgumentException("Tone and octave have to be between F#0 and F#2");
         }
@@ -155,7 +48,7 @@ public class Note {
      * Creates a new note for a flat tone, such as A-flat.
      *
      * @param octave The octave where the note is in. Has to be 0 - 1.
-     * @param tone The tone within the octave.
+     * @param tone   The tone within the octave.
      * @return The new note.
      */
     public static Note flat(int octave, Tone tone) {
@@ -168,8 +61,8 @@ public class Note {
      * Creates a new note for a sharp tone, such as A-sharp.
      *
      * @param octave The octave where the note is in. Has to be 0 - 2.
-     * @param tone The tone within the octave. If the octave is 2 the note has
-     *     to be F#.
+     * @param tone   The tone within the octave. If the octave is 2 the note has
+     *               to be F#.
      * @return The new note.
      */
     public static Note sharp(int octave, Tone tone) {
@@ -180,7 +73,7 @@ public class Note {
      * Creates a new note for a natural tone, such as A-natural.
      *
      * @param octave The octave where the note is in. Has to be 0 - 1.
-     * @param tone The tone within the octave.
+     * @param tone   The tone within the octave.
      * @return The new note.
      */
     public static Note natural(int octave, Tone tone) {
@@ -248,29 +141,144 @@ public class Note {
     }
 
     @Override
-    public int hashCode() {
-        final int prime = 31;
-        int result = 1;
-        result = prime * result + note;
-        return result;
-    }
-
-    @Override
     public boolean equals(Object obj) {
-        if (this == obj)
+        if (this == obj) {
             return true;
-        if (obj == null)
+        }
+
+        if (obj == null) {
             return false;
-        if (getClass() != obj.getClass())
+        }
+
+        if (getClass() != obj.getClass()) {
             return false;
+        }
+
         Note other = (Note) obj;
-        if (note != other.note)
+        if (note != other.note) {
             return false;
+        }
+
         return true;
     }
 
     @Override
+    public int hashCode() {
+        final int prime = 31;
+        int result = 1;
+        result = prime * result + note;
+        return result;
+    }
+
+    @Override
     public String toString() {
         return "Note{" + getTone().toString() + (isSharped() ? "#" : "") + "}";
     }
+
+    /**
+     * An enum holding tones.
+     */
+    public enum Tone {
+        G(0x1, true),
+        A(0x3, true),
+        B(0x5, false),
+        C(0x6, true),
+        D(0x8, true),
+        E(0xA, false),
+        F(0xB, true);
+
+        /**
+         * The number of tones including sharped tones.
+         */
+        public static final byte TONES_COUNT = 12;
+        private static final Map<Byte, Note.Tone> BY_DATA = Maps.newHashMap();
+
+        static {
+            for (Tone tone : values()) {
+                int id = tone.id % TONES_COUNT;
+                BY_DATA.put((byte) id, tone);
+
+                if (tone.isSharpable()) {
+                    id = (id + 1) % TONES_COUNT;
+                    BY_DATA.put((byte) id, tone);
+                }
+            }
+        }
+
+        private final boolean sharpable;
+        private final byte id;
+
+        Tone(int id, boolean sharpable) {
+            this.id = (byte) (id % TONES_COUNT);
+            this.sharpable = sharpable;
+        }
+
+        /**
+         * Returns the tone to id. Also returning the semitones.
+         *
+         * @param id the id of the tone.
+         * @return the tone to id.
+         * @deprecated Magic value
+         */
+        @Deprecated
+        public static Tone getById(byte id) {
+            return BY_DATA.get(id);
+        }
+
+        /**
+         * Returns the not sharped id of this tone.
+         *
+         * @return the not sharped id of this tone.
+         * @deprecated Magic value
+         */
+        @Deprecated
+        public byte getId() {
+            return getId(false);
+        }
+
+        /**
+         * Returns the id of this tone. These method allows to return the
+         * sharped id of the tone. If the tone couldn't be sharped it always
+         * return the not sharped id of this tone.
+         *
+         * @param sharped Set to true to return the sharped id.
+         * @return the id of this tone.
+         * @deprecated Magic value
+         */
+        @Deprecated
+        public byte getId(boolean sharped) {
+            byte id = (byte) (sharped && sharpable ? this.id + 1 : this.id);
+            return (byte) (id % TONES_COUNT);
+        }
+
+        /**
+         * Returns if this tone could be sharped.
+         *
+         * @return if this tone could be sharped.
+         */
+        public boolean isSharpable() {
+            return sharpable;
+        }
+
+        /**
+         * Returns if this tone id is the sharped id of the tone.
+         *
+         * @param id the id of the tone.
+         * @return if the tone id is the sharped id of the tone.
+         * @throws IllegalArgumentException if neither the tone nor the
+         *                                  semitone have the id.
+         * @deprecated Magic value
+         */
+        @Deprecated
+        public boolean isSharped(byte id) {
+            if (id == getId(false)) {
+                return false;
+            } else if (id == getId(true)) {
+                return true;
+            } else {
+                // The id isn't matching to the tone!
+                throw new IllegalArgumentException("The id isn't matching to the tone.");
+            }
+        }
+    }
 }
diff --git a/src/main/java/org/bukkit/OfflinePlayer.java b/src/main/java/org/bukkit/OfflinePlayer.java
index e98706a..74b6652 100644
--- a/src/main/java/org/bukkit/OfflinePlayer.java
+++ b/src/main/java/org/bukkit/OfflinePlayer.java
@@ -1,13 +1,13 @@
 package org.bukkit;
 
-import java.util.Date;
-import java.util.UUID;
-
 import org.bukkit.configuration.serialization.ConfigurationSerializable;
 import org.bukkit.entity.AnimalTamer;
 import org.bukkit.entity.Player;
 import org.bukkit.permissions.ServerOperator;
 
+import java.util.Date;
+import java.util.UUID;
+
 public interface OfflinePlayer extends ServerOperator, AnimalTamer, ConfigurationSerializable {
 
     /**
@@ -15,7 +15,7 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      *
      * @return true if they are online
      */
-    public boolean isOnline();
+    boolean isOnline();
 
     /**
      * Returns the name of this player
@@ -25,46 +25,46 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      *
      * @return Player name or null if we have not seen a name for this player yet
      */
-    public String getName();
+    String getName();
 
     /**
      * Returns the UUID of this player
      *
      * @return Player UUID
      */
-    public UUID getUniqueId();
+    UUID getUniqueId();
 
     /**
      * Checks if this player is banned or not
      *
      * @return true if banned, otherwise false
      */
-    public boolean isBanned();
+    boolean isBanned();
 
     /**
      * Bans or unbans this player
      *
      * @param banned true if banned
      * @deprecated Use {@link org.bukkit.BanList#addBan(String, String, Date,
-     *     String)} or {@link org.bukkit.BanList#pardon(String)} to enhance
-     *     functionality
+     * String)} or {@link org.bukkit.BanList#pardon(String)} to enhance
+     * functionality
      */
     @Deprecated
-    public void setBanned(boolean banned);
+    void setBanned(boolean banned);
 
     /**
      * Checks if this player is whitelisted or not
      *
      * @return true if whitelisted
      */
-    public boolean isWhitelisted();
+    boolean isWhitelisted();
 
     /**
      * Sets if this player is whitelisted or not
      *
      * @param value true if whitelisted
      */
-    public void setWhitelisted(boolean value);
+    void setWhitelisted(boolean value);
 
     /**
      * Gets a {@link Player} object that this represents, if there is one
@@ -74,7 +74,7 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      *
      * @return Online player
      */
-    public Player getPlayer();
+    Player getPlayer();
 
     /**
      * Gets the first date and time that this player was witnessed on this
@@ -86,7 +86,7 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      *
      * @return Date of first log-in for this player, or 0
      */
-    public long getFirstPlayed();
+    long getFirstPlayed();
 
     /**
      * Gets the last date and time that this player was witnessed on this
@@ -98,14 +98,14 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      *
      * @return Date of last log-in for this player, or 0
      */
-    public long getLastPlayed();
+    long getLastPlayed();
 
     /**
      * Checks if this player has played on this server before.
      *
      * @return True if the player has played before, otherwise false
      */
-    public boolean hasPlayedBefore();
+    boolean hasPlayedBefore();
 
     /**
      * Gets the Location where the player will spawn at their bed, null if
@@ -113,6 +113,5 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      *
      * @return Bed Spawn Location if bed exists, otherwise null.
      */
-    public Location getBedSpawnLocation();
-
+    Location getBedSpawnLocation();
 }
diff --git a/src/main/java/org/bukkit/Rotation.java b/src/main/java/org/bukkit/Rotation.java
index dfdb0e5..cfe7bb7 100644
--- a/src/main/java/org/bukkit/Rotation.java
+++ b/src/main/java/org/bukkit/Rotation.java
@@ -11,21 +11,23 @@ public enum Rotation {
      * No rotation
      */
     NONE,
+
     /**
      * Rotated clockwise by 90 degrees
      */
     CLOCKWISE,
+
     /**
      * Flipped upside-down, a 180 degree rotation
      */
     FLIPPED,
+
     /**
      * Rotated counter-clockwise by 90 degrees
      */
-    COUNTER_CLOCKWISE,
-    ;
+    COUNTER_CLOCKWISE;
 
-    private static final Rotation [] rotations = values();
+    private static final Rotation[] rotations = values();
 
     /**
      * Rotate clockwise by 90 degrees.
diff --git a/src/main/java/org/bukkit/SandstoneType.java b/src/main/java/org/bukkit/SandstoneType.java
index a9ac16e..fc0a7da 100644
--- a/src/main/java/org/bukkit/SandstoneType.java
+++ b/src/main/java/org/bukkit/SandstoneType.java
@@ -1,33 +1,28 @@
 package org.bukkit;
 
-import java.util.Map;
-
 import com.google.common.collect.Maps;
 
+import java.util.Map;
+
 /**
  * Represents the three different types of Sandstone
  */
 public enum SandstoneType {
-    CRACKED(0x0),
-    GLYPHED(0x1),
-    SMOOTH(0x2);
 
-    private final byte data;
+    CRACKED(0x0), GLYPHED(0x1), SMOOTH(0x2);
+
     private final static Map<Byte, SandstoneType> BY_DATA = Maps.newHashMap();
 
-    private SandstoneType(final int data) {
-        this.data = (byte) data;
+    static {
+        for (SandstoneType type : values()) {
+            BY_DATA.put(type.data, type);
+        }
     }
 
-    /**
-     * Gets the associated data value representing this type of sandstone
-     *
-     * @return A byte containing the data value of this sandstone type
-     * @deprecated Magic value
-     */
-    @Deprecated
-    public byte getData() {
-        return data;
+    private final byte data;
+
+    private SandstoneType(final int data) {
+        this.data = (byte) data;
     }
 
     /**
@@ -35,7 +30,7 @@ public enum SandstoneType {
      *
      * @param data Data value to fetch
      * @return The {@link SandstoneType} representing the given value, or null
-     *     if it doesn't exist
+     * if it doesn't exist
      * @deprecated Magic value
      */
     @Deprecated
@@ -43,9 +38,14 @@ public enum SandstoneType {
         return BY_DATA.get(data);
     }
 
-    static {
-        for (SandstoneType type : values()) {
-            BY_DATA.put(type.data, type);
-        }
+    /**
+     * Gets the associated data value representing this type of sandstone
+     *
+     * @return A byte containing the data value of this sandstone type
+     * @deprecated Magic value
+     */
+    @Deprecated
+    public byte getData() {
+        return data;
     }
 }
diff --git a/src/main/java/org/bukkit/Server.java b/src/main/java/org/bukkit/Server.java
index af9a49e..81b504c 100644
--- a/src/main/java/org/bukkit/Server.java
+++ b/src/main/java/org/bukkit/Server.java
@@ -1,17 +1,7 @@
 package org.bukkit;
 
-import java.awt.image.BufferedImage;
-import java.io.File;
-import java.io.Serializable;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.UUID;
-import java.util.logging.Logger;
-
+import com.avaje.ebean.config.ServerConfig;
+import com.google.common.collect.ImmutableList;
 import net.md_5.bungee.api.chat.BaseComponent;
 import org.bukkit.Warning.WarningState;
 import org.bukkit.command.CommandException;
@@ -25,8 +15,10 @@ import org.bukkit.event.server.ServerListPingEvent;
 import org.bukkit.help.HelpMap;
 import org.bukkit.inventory.Inventory;
 import org.bukkit.inventory.InventoryHolder;
+import org.bukkit.inventory.ItemFactory;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.Recipe;
+import org.bukkit.inventory.meta.ItemMeta;
 import org.bukkit.map.MapView;
 import org.bukkit.permissions.Permissible;
 import org.bukkit.plugin.PluginManager;
@@ -37,11 +29,17 @@ import org.bukkit.scheduler.BukkitScheduler;
 import org.bukkit.scoreboard.ScoreboardManager;
 import org.bukkit.util.CachedServerIcon;
 
-import com.avaje.ebean.config.ServerConfig;
-import com.google.common.collect.ImmutableList;
-
-import org.bukkit.inventory.ItemFactory;
-import org.bukkit.inventory.meta.ItemMeta;
+import java.awt.image.BufferedImage;
+import java.io.File;
+import java.io.Serializable;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.UUID;
+import java.util.logging.Logger;
 
 /**
  * Represents a server implementation.
@@ -92,8 +90,8 @@ public interface Server extends PluginMessageRecipient {
      * compatibility. It will not exist at runtime and should not be used
      * under any circumstances.
      *
-     * @Deprecated superseded by {@link #getOnlinePlayers()}
      * @return an array of Players that are currently online
+     * @Deprecated superseded by {@link #getOnlinePlayers()}
      */
     @Deprecated
     public Player[] _INVALID_getOnlinePlayers();
@@ -116,7 +114,7 @@ public interface Server extends PluginMessageRecipient {
      * affect the collection are fully supported. The effects following
      * (non-exhaustive) {@link Entity#teleport(Location) teleportation},
      * {@link Player#setHealth(double) death}, and {@link Player#kickPlayer(
-     * String) kicking} are undefined. Any use of this collection from
+     *String) kicking} are undefined. Any use of this collection from
      * asynchronous threads is unsafe.
      * <p>
      * For safe consequential iteration or mimicking the old array behavior,
@@ -153,7 +151,7 @@ public interface Server extends PluginMessageRecipient {
      * specified.
      *
      * @return the IP string that this server is bound to, otherwise empty
-     *     string
+     * string
      */
     public String getIp();
 
@@ -268,9 +266,9 @@ public interface Server extends PluginMessageRecipient {
      * <b>Example Usage:</b>
      * <ul>
      * <li>A value of 1 will mean the server will attempt to spawn monsters
-     *     every tick.
+     * every tick.
      * <li>A value of 400 will mean the server will attempt to spawn monsters
-     *     every 400th tick.
+     * every 400th tick.
      * <li>A value below 0 will be reset back to Minecraft's default.
      * </ul>
      * <p>
@@ -289,9 +287,9 @@ public interface Server extends PluginMessageRecipient {
      * <b>Example Usage:</b>
      * <ul>
      * <li>A value of 1 will mean the server will attempt to spawn monsters
-     *     every tick.
+     * every tick.
      * <li>A value of 400 will mean the server will attempt to spawn monsters
-     *     every 400th tick.
+     * every 400th tick.
      * <li>A value below 0 will be reset back to Minecraft's default.
      * </ul>
      * <p>
@@ -395,7 +393,7 @@ public interface Server extends PluginMessageRecipient {
      * Unloads the given world.
      *
      * @param world the world to unload
-     * @param save whether to save the chunks before unloading
+     * @param save  whether to save the chunks before unloading
      * @return true if successful, false otherwise
      */
     public boolean unloadWorld(World world, boolean save);
@@ -462,12 +460,12 @@ public interface Server extends PluginMessageRecipient {
     /**
      * Dispatches a command on this server, and executes it if found.
      *
-     * @param sender the apparent sender of the command
+     * @param sender      the apparent sender of the command
      * @param commandLine the command + arguments. Example: <code>test abc
-     *     123</code>
+     *                    123</code>
      * @return returns false if no target is found
      * @throws CommandException thrown when the executor for the given command
-     *     fails with an unhandled exception
+     *                          fails with an unhandled exception
      */
     public boolean dispatchCommand(CommandSender sender, String commandLine) throws CommandException;
 
@@ -484,7 +482,7 @@ public interface Server extends PluginMessageRecipient {
      *
      * @param recipe the recipe to add
      * @return true if the recipe was added, false if it wasn't for some
-     *     reason
+     * reason
      */
     public boolean addRecipe(Recipe recipe);
 
@@ -558,15 +556,15 @@ public interface Server extends PluginMessageRecipient {
 
     /**
      * Gets whether to use vanilla (false) or exact behaviour (true).
-     *
+     * <p>
      * <ul>
      * <li>Vanilla behaviour: check for collisions and move the player if
-     *     needed.
+     * needed.
      * <li>Exact behaviour: spawn players exactly where they should be.
      * </ul>
      *
      * @return true if exact location locations are used for spawning, false
-     *     for vanilla collision detection or otherwise
+     * for vanilla collision detection or otherwise
      */
     public boolean useExactLoginLocation();
 
@@ -579,9 +577,9 @@ public interface Server extends PluginMessageRecipient {
      * Broadcasts the specified message to every user with the given
      * permission name.
      *
-     * @param message message to broadcast
+     * @param message    message to broadcast
      * @param permission the required permission {@link Permissible
-     *     permissibles} must have to receive the broadcast
+     *                   permissibles} must have to receive the broadcast
      * @return number of message recipients
      */
     public int broadcast(String message, String permission);
@@ -596,11 +594,11 @@ public interface Server extends PluginMessageRecipient {
      * This will return an object even if the player does not exist. To this
      * method, all players will exist.
      *
-     * @deprecated Persistent storage of users should be by UUID as names are no longer
-     *             unique past a single session.
      * @param name the name the player to retrieve
      * @return an offline player
      * @see #getOfflinePlayer(java.util.UUID)
+     * @deprecated Persistent storage of users should be by UUID as names are no longer
+     * unique past a single session.
      */
     @Deprecated
     public OfflinePlayer getOfflinePlayer(String name);
@@ -719,7 +717,7 @@ public interface Server extends PluginMessageRecipient {
      * new inventory has the normal size for its type.
      *
      * @param owner the holder of the inventory, or null to indicate no holder
-     * @param type the type of inventory to create
+     * @param type  the type of inventory to create
      * @return a new inventory
      */
     Inventory createInventory(InventoryHolder owner, InventoryType type);
@@ -732,7 +730,7 @@ public interface Server extends PluginMessageRecipient {
      * may not render with said titles on the Minecraft client.
      *
      * @param owner The holder of the inventory; can be null if there's no holder.
-     * @param type The type of inventory to create.
+     * @param type  The type of inventory to create.
      * @param title The title of the inventory, to be displayed when it is viewed.
      * @return The new inventory.
      */
@@ -743,7 +741,7 @@ public interface Server extends PluginMessageRecipient {
      * specified size.
      *
      * @param owner the holder of the inventory, or null to indicate no holder
-     * @param size a multiple of 9 as the size of inventory to create
+     * @param size  a multiple of 9 as the size of inventory to create
      * @return a new inventory
      * @throws IllegalArgumentException if the size is not a multiple of 9
      */
@@ -754,9 +752,9 @@ public interface Server extends PluginMessageRecipient {
      * specified size and title.
      *
      * @param owner the holder of the inventory, or null to indicate no holder
-     * @param size a multiple of 9 as the size of inventory to create
+     * @param size  a multiple of 9 as the size of inventory to create
      * @param title the title of the inventory, displayed when inventory is
-     *     viewed
+     *              viewed
      * @return a new inventory
      * @throws IllegalArgumentException if the size is not a multiple of 9
      */
@@ -804,7 +802,7 @@ public interface Server extends PluginMessageRecipient {
      * preclude</b> the same assumption.
      *
      * @return true if the current thread matches the expected primary thread,
-     *     false otherwise
+     * false otherwise
      */
     boolean isPrimaryThread();
 
@@ -850,8 +848,8 @@ public interface Server extends PluginMessageRecipient {
      * Gets an instance of the server's default server-icon.
      *
      * @return the default server-icon; null values may be used by the
-     *     implementation to indicate no defined icon, but this behavior is
-     *     not guaranteed
+     * implementation to indicate no defined icon, but this behavior is
+     * not guaranteed
      */
     CachedServerIcon getServerIcon();
 
@@ -863,13 +861,13 @@ public interface Server extends PluginMessageRecipient {
      * guaranteed to throw an implementation-defined {@link Exception}.
      *
      * @param file the file to load the from
-     * @throws IllegalArgumentException if image is null
-     * @throws Exception if the image does not meet current server server-icon
-     *     specifications
      * @return a cached server-icon that can be used for a {@link
-     *     ServerListPingEvent#setServerIcon(CachedServerIcon)}
+     * ServerListPingEvent#setServerIcon(CachedServerIcon)}
+     * @throws IllegalArgumentException if image is null
+     * @throws Exception                if the image does not meet current server server-icon
+     *                                  specifications
      */
-    CachedServerIcon loadServerIcon(File file) throws IllegalArgumentException, Exception;
+    CachedServerIcon loadServerIcon(File file) throws Exception;
 
     /**
      * Creates a cached server-icon for the specific image.
@@ -878,13 +876,20 @@ public interface Server extends PluginMessageRecipient {
      * guaranteed to throw an implementation-defined {@link Exception}.
      *
      * @param image the image to use
-     * @throws IllegalArgumentException if image is null
-     * @throws Exception if the image does not meet current server
-     *     server-icon specifications
      * @return a cached server-icon that can be used for a {@link
-     *     ServerListPingEvent#setServerIcon(CachedServerIcon)}
+     * ServerListPingEvent#setServerIcon(CachedServerIcon)}
+     * @throws IllegalArgumentException if image is null
+     * @throws Exception                if the image does not meet current server
+     *                                  server-icon specifications
+     */
+    CachedServerIcon loadServerIcon(BufferedImage image) throws Exception;
+
+    /**
+     * Gets the idle kick timeout.
+     *
+     * @return the idle timeout in minutes
      */
-    CachedServerIcon loadServerIcon(BufferedImage image) throws IllegalArgumentException, Exception;
+    public int getIdleTimeout();
 
     /**
      * Set the idle kick timeout. Any players idle for the specified amount of
@@ -897,43 +902,31 @@ public interface Server extends PluginMessageRecipient {
     public void setIdleTimeout(int threshold);
 
     /**
-     * Gets the idle kick timeout.
-     *
-     * @return the idle timeout in minutes
-     */
-    public int getIdleTimeout();
-
-    /**
      * @see UnsafeValues
      */
     @Deprecated
     UnsafeValues getUnsafe();
 
-    public class Spigot
-    {
+    Spigot spigot();
 
-        public org.bukkit.configuration.file.YamlConfiguration getConfig()
-        {
-            throw new UnsupportedOperationException( "Not supported yet." );
+    public class Spigot {
+
+        public org.bukkit.configuration.file.YamlConfiguration getConfig() {
+            throw new UnsupportedOperationException("Not supported yet.");
         }
 
-        public void broadcast(BaseComponent component)
-        {
-            throw new UnsupportedOperationException( "Not supported yet." );
+        public void broadcast(BaseComponent component) {
+            throw new UnsupportedOperationException("Not supported yet.");
         }
 
-        public void broadcast(BaseComponent... components)
-        {
-            throw new UnsupportedOperationException( "Not supported yet." );
+        public void broadcast(BaseComponent... components) {
+            throw new UnsupportedOperationException("Not supported yet.");
         }
 
         // PaperSpigot start - Add getTPS method
-        public double[] getTPS()
-        {
-            throw new UnsupportedOperationException( "Not supported yet." );
+        public double[] getTPS() {
+            throw new UnsupportedOperationException("Not supported yet.");
         }
         // PaperSpigot end
     }
-
-    Spigot spigot();
 }
diff --git a/src/main/java/org/bukkit/SkullType.java b/src/main/java/org/bukkit/SkullType.java
index abd07c2..9317f65 100644
--- a/src/main/java/org/bukkit/SkullType.java
+++ b/src/main/java/org/bukkit/SkullType.java
@@ -4,9 +4,6 @@ package org.bukkit;
  * Represents the different types of skulls.
  */
 public enum SkullType {
-    SKELETON,
-    WITHER,
-    ZOMBIE,
-    PLAYER,
-    CREEPER;
+
+    SKELETON, WITHER, ZOMBIE, PLAYER, CREEPER;
 }
diff --git a/src/main/java/org/bukkit/Sound.java b/src/main/java/org/bukkit/Sound.java
index 0913530..21d72f2 100644
--- a/src/main/java/org/bukkit/Sound.java
+++ b/src/main/java/org/bukkit/Sound.java
@@ -9,6 +9,7 @@ package org.bukkit;
  * not depend on the ordinal values of this class.
  */
 public enum Sound {
+
     AMBIENCE_CAVE,
     AMBIENCE_RAIN,
     AMBIENCE_THUNDER,
diff --git a/src/main/java/org/bukkit/Statistic.java b/src/main/java/org/bukkit/Statistic.java
index 57df72b..23506f1 100644
--- a/src/main/java/org/bukkit/Statistic.java
+++ b/src/main/java/org/bukkit/Statistic.java
@@ -4,6 +4,7 @@ package org.bukkit;
  * Represents a countable statistic, which is tracked by the server.
  */
 public enum Statistic {
+
     DAMAGE_DEALT,
     DAMAGE_TAKEN,
     DEATHS,
@@ -36,11 +37,11 @@ public enum Statistic {
 
     private final Type type;
 
-    private Statistic() {
+    Statistic() {
         this(Type.UNTYPED);
     }
 
-    private Statistic(Type type) {
+    Statistic(Type type) {
         this.type = type;
     }
 
@@ -82,9 +83,9 @@ public enum Statistic {
 
     /**
      * The type of statistic.
-     *
      */
     public enum Type {
+
         /**
          * Statistics of this type do not require a qualifier.
          */
diff --git a/src/main/java/org/bukkit/TravelAgent.java b/src/main/java/org/bukkit/TravelAgent.java
index 2dfeffa..ffcfe27 100644
--- a/src/main/java/org/bukkit/TravelAgent.java
+++ b/src/main/java/org/bukkit/TravelAgent.java
@@ -11,20 +11,27 @@ package org.bukkit;
 public interface TravelAgent {
 
     /**
+     * Gets the search radius value for finding an available portal.
+     *
+     * @return the currently set search radius
+     */
+    int getSearchRadius();
+
+    /**
      * Set the Block radius to search in for available portals.
      *
      * @param radius the radius in which to search for a portal from the
-     *     location
+     *               location
      * @return this travel agent
      */
-    public TravelAgent setSearchRadius(int radius);
+    TravelAgent setSearchRadius(int radius);
 
     /**
-     * Gets the search radius value for finding an available portal.
+     * Gets the maximum radius from the given location to create a portal.
      *
-     * @return the currently set search radius
+     * @return the currently set creation radius
      */
-    public int getSearchRadius();
+    int getCreationRadius();
 
     /**
      * Sets the maximum radius from the given location to create a portal.
@@ -32,32 +39,25 @@ public interface TravelAgent {
      * @param radius the radius in which to create a portal from the location
      * @return this travel agent
      */
-    public TravelAgent setCreationRadius(int radius);
-
-    /**
-     * Gets the maximum radius from the given location to create a portal.
-     *
-     * @return the currently set creation radius
-     */
-    public int getCreationRadius();
+    TravelAgent setCreationRadius(int radius);
 
     /**
      * Returns whether the TravelAgent will attempt to create a destination
      * portal or not.
      *
      * @return whether the TravelAgent should create a destination portal or
-     *     not
+     * not
      */
-    public boolean getCanCreatePortal();
+    boolean getCanCreatePortal();
 
     /**
      * Sets whether the TravelAgent should attempt to create a destination
      * portal or not.
      *
      * @param create Sets whether the TravelAgent should create a destination
-     *     portal or not
+     *               portal or not
      */
-    public void setCanCreatePortal(boolean create);
+    void setCanCreatePortal(boolean create);
 
     /**
      * Attempt to find a portal near the given location, if a portal is not
@@ -65,10 +65,10 @@ public interface TravelAgent {
      *
      * @param location the location where the search for a portal should begin
      * @return the location of a portal which has been found or returns the
-     *     location passed to the method if unsuccessful
+     * location passed to the method if unsuccessful
      * @see #createPortal(Location)
      */
-    public Location findOrCreate(Location location);
+    Location findOrCreate(Location location);
 
     /**
      * Attempt to find a portal near the given location.
@@ -90,5 +90,5 @@ public interface TravelAgent {
      * @param location the desired location of the portal
      * @return true if a portal was successfully created
      */
-    public boolean createPortal(Location location);
+    boolean createPortal(Location location);
 }
diff --git a/src/main/java/org/bukkit/TreeSpecies.java b/src/main/java/org/bukkit/TreeSpecies.java
index f29062a..6c7d3fe 100644
--- a/src/main/java/org/bukkit/TreeSpecies.java
+++ b/src/main/java/org/bukkit/TreeSpecies.java
@@ -1,9 +1,9 @@
 package org.bukkit;
 
-import java.util.Map;
-
 import com.google.common.collect.Maps;
 
+import java.util.Map;
+
 /**
  * Represents the different species of trees regardless of size.
  */
@@ -13,44 +13,44 @@ public enum TreeSpecies {
      * Represents the common tree species.
      */
     GENERIC(0x0),
+
     /**
      * Represents the darker barked/leaved tree species.
      */
     REDWOOD(0x1),
+
     /**
      * Represents birches.
      */
     BIRCH(0x2),
+
     /**
      * Represents jungle trees.
      */
     JUNGLE(0x3),
+
     /**
      * Represents acacia trees.
      */
     ACACIA(0x4),
+
     /**
      * Represents dark oak trees.
      */
-    DARK_OAK(0x5),
-    ;
+    DARK_OAK(0x5);
 
-    private final byte data;
     private final static Map<Byte, TreeSpecies> BY_DATA = Maps.newHashMap();
 
-    private TreeSpecies(final int data) {
-        this.data = (byte) data;
+    static {
+        for (TreeSpecies species : values()) {
+            BY_DATA.put(species.data, species);
+        }
     }
 
-    /**
-     * Gets the associated data value representing this species
-     *
-     * @return A byte containing the data value of this tree species
-     * @deprecated Magic value
-     */
-    @Deprecated
-    public byte getData() {
-        return data;
+    private final byte data;
+
+    TreeSpecies(final int data) {
+        this.data = (byte) data;
     }
 
     /**
@@ -58,7 +58,7 @@ public enum TreeSpecies {
      *
      * @param data Data value to fetch
      * @return The {@link TreeSpecies} representing the given value, or null
-     *     if it doesn't exist
+     * if it doesn't exist
      * @deprecated Magic value
      */
     @Deprecated
@@ -66,9 +66,14 @@ public enum TreeSpecies {
         return BY_DATA.get(data);
     }
 
-    static {
-        for (TreeSpecies species : values()) {
-            BY_DATA.put(species.data, species);
-        }
+    /**
+     * Gets the associated data value representing this species
+     *
+     * @return A byte containing the data value of this tree species
+     * @deprecated Magic value
+     */
+    @Deprecated
+    public byte getData() {
+        return data;
     }
 }
diff --git a/src/main/java/org/bukkit/TreeType.java b/src/main/java/org/bukkit/TreeType.java
index 5a5c4d9..16d02ff 100644
--- a/src/main/java/org/bukkit/TreeType.java
+++ b/src/main/java/org/bukkit/TreeType.java
@@ -9,62 +9,77 @@ public enum TreeType {
      * Regular tree, no branches
      */
     TREE,
+
     /**
      * Regular tree, extra tall with branches
      */
     BIG_TREE,
+
     /**
      * Redwood tree, shaped like a pine tree
      */
     REDWOOD,
+
     /**
      * Tall redwood tree with just a few leaves at the top
      */
     TALL_REDWOOD,
+
     /**
      * Birch tree
      */
     BIRCH,
+
     /**
      * Standard jungle tree; 4 blocks wide and tall
      */
     JUNGLE,
+
     /**
      * Smaller jungle tree; 1 block wide
      */
     SMALL_JUNGLE,
+
     /**
      * Jungle tree with cocoa plants; 1 block wide
      */
     COCOA_TREE,
+
     /**
      * Small bush that grows in the jungle
      */
     JUNGLE_BUSH,
+
     /**
      * Big red mushroom; short and fat
      */
     RED_MUSHROOM,
+
     /**
      * Big brown mushroom; tall and umbrella-like
      */
     BROWN_MUSHROOM,
+
     /**
      * Swamp tree (regular with vines on the side)
      */
     SWAMP,
+
     /**
      * Acacia tree.
      */
     ACACIA,
+
     /**
      * Dark Oak tree.
      */
     DARK_OAK,
+
     /**
      * Mega redwood tree; 4 blocks wide and tall
      */
     MEGA_REDWOOD,
+
     /**
      * Tall birch tree
      */
diff --git a/src/main/java/org/bukkit/UnsafeValues.java b/src/main/java/org/bukkit/UnsafeValues.java
index fc8a179..e5d53e6 100644
--- a/src/main/java/org/bukkit/UnsafeValues.java
+++ b/src/main/java/org/bukkit/UnsafeValues.java
@@ -1,9 +1,9 @@
 package org.bukkit;
 
-import java.util.List;
-
 import org.bukkit.inventory.ItemStack;
 
+import java.util.List;
+
 /**
  * This interface provides value conversions that may be specific to a
  * runtime, or have arbitrary meaning (read: magic values).
diff --git a/src/main/java/org/bukkit/Utility.java b/src/main/java/org/bukkit/Utility.java
index da66853..324dc1d 100644
--- a/src/main/java/org/bukkit/Utility.java
+++ b/src/main/java/org/bukkit/Utility.java
@@ -15,4 +15,5 @@ import java.lang.annotation.Target;
 @Target({ElementType.CONSTRUCTOR, ElementType.METHOD})
 @Retention(RetentionPolicy.SOURCE)
 public @interface Utility {
+
 }
diff --git a/src/main/java/org/bukkit/Warning.java b/src/main/java/org/bukkit/Warning.java
index 6a2a3b0..dc9cdc4 100644
--- a/src/main/java/org/bukkit/Warning.java
+++ b/src/main/java/org/bukkit/Warning.java
@@ -1,13 +1,13 @@
 package org.bukkit;
 
+import com.google.common.collect.ImmutableMap;
+
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 import java.util.Map;
 
-import com.google.common.collect.ImmutableMap;
-
 /**
  * This designates the warning state for a specific item.
  * <p>
@@ -19,9 +19,24 @@ import com.google.common.collect.ImmutableMap;
 public @interface Warning {
 
     /**
+     * This sets if the deprecation warnings when registering events gets
+     * printed when the setting is in the default state.
+     *
+     * @return false normally, or true to encourage warning printout
+     */
+    boolean value() default false;
+
+    /**
+     * This can provide detailed information on why the event is deprecated.
+     *
+     * @return The reason an event is deprecated
+     */
+    String reason() default "";
+
+    /**
      * This represents the states that server verbose for warnings may be.
      */
-    public enum WarningState {
+    enum WarningState {
 
         /**
          * Indicates all warnings should be printed for deprecated items.
@@ -37,7 +52,7 @@ public @interface Warning {
          */
         DEFAULT;
 
-        private static final Map<String, WarningState> values = ImmutableMap.<String,WarningState>builder()
+        private static final Map<String, WarningState> values = ImmutableMap.<String, WarningState>builder()
                 .put("off", OFF)
                 .put("false", OFF)
                 .put("f", OFF)
@@ -54,56 +69,44 @@ public @interface Warning {
                 .build();
 
         /**
-         * This method checks the provided warning should be printed for this
-         * state
-         *
-         * @param warning The warning annotation added to a deprecated item
-         * @return <ul>
-         *     <li>ON is always True
-         *     <li>OFF is always false
-         *     <li>DEFAULT is false if and only if annotation is not null and
-         *     specifies false for {@link Warning#value()}, true otherwise.
-         *     </ul>
-         */
-        public boolean printFor(Warning warning) {
-            if (this == DEFAULT) {
-                return warning == null || warning.value();
-            }
-            return this == ON;
-        }
-
-        /**
          * This method returns the corresponding warning state for the given
          * string value.
          *
          * @param value The string value to check
          * @return {@link #DEFAULT} if not found, or the respective
-         *     WarningState
+         * WarningState
          */
         public static WarningState value(final String value) {
             if (value == null) {
                 return DEFAULT;
             }
+
             WarningState state = values.get(value.toLowerCase());
             if (state == null) {
                 return DEFAULT;
             }
+
             return state;
         }
-    }
 
-    /**
-     * This sets if the deprecation warnings when registering events gets
-     * printed when the setting is in the default state.
-     *
-     * @return false normally, or true to encourage warning printout
-     */
-    boolean value() default false;
+        /**
+         * This method checks the provided warning should be printed for this
+         * state
+         *
+         * @param warning The warning annotation added to a deprecated item
+         * @return <ul>
+         * <li>ON is always True
+         * <li>OFF is always false
+         * <li>DEFAULT is false if and only if annotation is not null and
+         * specifies false for {@link Warning#value()}, true otherwise.
+         * </ul>
+         */
+        public boolean printFor(Warning warning) {
+            if (this == DEFAULT) {
+                return warning == null || warning.value();
+            }
 
-    /**
-     * This can provide detailed information on why the event is deprecated.
-     *
-     * @return The reason an event is deprecated
-     */
-    String reason() default "";
+            return this == ON;
+        }
+    }
 }
diff --git a/src/main/java/org/bukkit/WeatherType.java b/src/main/java/org/bukkit/WeatherType.java
index 36b993f..9071f0e 100644
--- a/src/main/java/org/bukkit/WeatherType.java
+++ b/src/main/java/org/bukkit/WeatherType.java
@@ -9,9 +9,9 @@ public enum WeatherType {
      * Raining or snowing depending on biome.
      */
     DOWNFALL,
+
     /**
      * Clear weather, clouds but no rain.
      */
-    CLEAR,
-    ;
+    CLEAR;
 }
diff --git a/src/main/java/org/bukkit/World.java b/src/main/java/org/bukkit/World.java
index c962e7d..cd2f660 100644
--- a/src/main/java/org/bukkit/World.java
+++ b/src/main/java/org/bukkit/World.java
@@ -1,22 +1,30 @@
 package org.bukkit;
 
-import java.io.File;
-import org.bukkit.generator.ChunkGenerator;
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.UUID;
-
 import org.bukkit.block.Biome;
 import org.bukkit.block.Block;
-import org.bukkit.entity.*;
+import org.bukkit.entity.Arrow;
+import org.bukkit.entity.CreatureType;
+import org.bukkit.entity.Entity;
+import org.bukkit.entity.EntityType;
+import org.bukkit.entity.FallingBlock;
+import org.bukkit.entity.Item;
+import org.bukkit.entity.LightningStrike;
+import org.bukkit.entity.LivingEntity;
+import org.bukkit.entity.Player;
 import org.bukkit.generator.BlockPopulator;
+import org.bukkit.generator.ChunkGenerator;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.metadata.Metadatable;
 import org.bukkit.plugin.messaging.PluginMessageRecipient;
 import org.bukkit.util.Vector;
 
+import java.io.File;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.UUID;
+
 /**
  * Represents a world, which may contain entities, chunks and blocks
  */
@@ -30,9 +38,9 @@ public interface World extends PluginMessageRecipient, Metadatable {
      * @param z Z-coordinate of the block
      * @return Block at the given coordinates
      * @see #getBlockTypeIdAt(int, int, int) Returns the current type ID of
-     *     the block
+     * the block
      */
-    public Block getBlockAt(int x, int y, int z);
+    Block getBlockAt(int x, int y, int z);
 
     /**
      * Gets the {@link Block} at the given {@link Location}
@@ -40,9 +48,9 @@ public interface World extends PluginMessageRecipient, Metadatable {
      * @param location Location of the block
      * @return Block at the given location
      * @see #getBlockTypeIdAt(org.bukkit.Location) Returns the current type ID
-     *     of the block
+     * of the block
      */
-    public Block getBlockAt(Location location);
+    Block getBlockAt(Location location);
 
     /**
      * Gets the block type ID at the given coordinates
@@ -52,11 +60,11 @@ public interface World extends PluginMessageRecipient, Metadatable {
      * @param z Z-coordinate of the block
      * @return Type ID of the block at the given coordinates
      * @see #getBlockAt(int, int, int) Returns a live Block object at the
-     *     given location
+     * given location
      * @deprecated Magic value
      */
     @Deprecated
-    public int getBlockTypeIdAt(int x, int y, int z);
+    int getBlockTypeIdAt(int x, int y, int z);
 
     /**
      * Gets the block type ID at the given {@link Location}
@@ -64,11 +72,11 @@ public interface World extends PluginMessageRecipient, Metadatable {
      * @param location Location of the block
      * @return Type ID of the block at the given location
      * @see #getBlockAt(org.bukkit.Location) Returns a live Block object at
-     *     the given location
+     * the given location
      * @deprecated Magic value
      */
     @Deprecated
-    public int getBlockTypeIdAt(Location location);
+    int getBlockTypeIdAt(Location location);
 
     /**
      * Gets the highest non-air coordinate at the given coordinates
@@ -77,7 +85,7 @@ public interface World extends PluginMessageRecipient, Metadatable {
      * @param z Z-coordinate of the blocks
      * @return Y-coordinate of the highest non-air block
      */
-    public int getHighestBlockYAt(int x, int z);
+    int getHighestBlockYAt(int x, int z);
 
     /**
      * Gets the highest non-air coordinate at the given {@link Location}
@@ -85,7 +93,7 @@ public interface World extends PluginMessageRecipient, Metadatable {
      * @param location Location of the blocks
      * @return Y-coordinate of the highest non-air block
      */
-    public int getHighestBlockYAt(Location location);
+    int getHighestBlockYAt(Location location);
 
     /**
      * Gets the highest non-empty block at the given coordinates
@@ -94,7 +102,7 @@ public interface World extends PluginMessageRecipient, Metadatable {
      * @param z Z-coordinate of the block
      * @return Highest non-empty block
      */
-    public Block getHighestBlockAt(int x, int z);
+    Block getHighestBlockAt(int x, int z);
 
     /**
      * Gets the highest non-empty block at the given coordinates
@@ -102,7 +110,7 @@ public interface World extends PluginMessageRecipient, Metadatable {
      * @param location Coordinates to get the highest block
      * @return Highest non-empty block
      */
-    public Block getHighestBlockAt(Location location);
+    Block getHighestBlockAt(Location location);
 
     /**
      * Gets the {@link Chunk} at the given coordinates
@@ -111,7 +119,7 @@ public interface World extends PluginMessageRecipient, Metadatable {
      * @param z Z-coordinate of the chunk
      * @return Chunk at the given coordinates
      */
-    public Chunk getChunkAt(int x, int z);
+    Chunk getChunkAt(int x, int z);
 
     /**
      * Gets the {@link Chunk} at the given {@link Location}
@@ -119,7 +127,7 @@ public interface World extends PluginMessageRecipient, Metadatable {
      * @param location Location of the chunk
      * @return Chunk at the given location
      */
-    public Chunk getChunkAt(Location location);
+    Chunk getChunkAt(Location location);
 
     /**
      * Gets the {@link Chunk} that contains the given {@link Block}
@@ -127,16 +135,13 @@ public interface World extends PluginMessageRecipient, Metadatable {
      * @param block Block to get the containing chunk from
      * @return The chunk that contains the given block
      */
-    public Chunk getChunkAt(Block block);
+    Chunk getChunkAt(Block block);
 
-    // PaperSpigot start - Async chunk load API
-    public static interface ChunkLoadCallback {
-        public void onLoad(Chunk chunk);
-    }
-    public void getChunkAtAsync(int x, int z, ChunkLoadCallback cb);
-    public void getChunkAtAsync(Location location, ChunkLoadCallback cb);
-    public void getChunkAtAsync(Block block, ChunkLoadCallback cb);
-    // PaperSpigot end
+    void getChunkAtAsync(int x, int z, ChunkLoadCallback cb);
+
+    void getChunkAtAsync(Location location, ChunkLoadCallback cb);
+
+    void getChunkAtAsync(Block block, ChunkLoadCallback cb);
 
     /**
      * Checks if the specified {@link Chunk} is loaded
@@ -144,21 +149,22 @@ public interface World extends PluginMessageRecipient, Metadatable {
      * @param chunk The chunk to check
      * @return true if the chunk is loaded, otherwise false
      */
-    public boolean isChunkLoaded(Chunk chunk);
+    boolean isChunkLoaded(Chunk chunk);
+    // PaperSpigot end
 
     /**
      * Gets an array of all loaded {@link Chunk}s
      *
      * @return Chunk[] containing all loaded chunks
      */
-    public Chunk[] getLoadedChunks();
+    Chunk[] getLoadedChunks();
 
     /**
      * Loads the specified {@link Chunk}
      *
      * @param chunk The chunk to load
      */
-    public void loadChunk(Chunk chunk);
+    void loadChunk(Chunk chunk);
 
     /**
      * Checks if the {@link Chunk} at the specified coordinates is loaded
@@ -167,7 +173,7 @@ public interface World extends PluginMessageRecipient, Metadatable {
      * @param z Z-coordinate of the chunk
      * @return true if the chunk is loaded, otherwise false
      */
-    public boolean isChunkLoaded(int x, int z);
+    boolean isChunkLoaded(int x, int z);
 
     /**
      * Checks if the {@link Chunk} at the specified coordinates is loaded and
@@ -176,9 +182,9 @@ public interface World extends PluginMessageRecipient, Metadatable {
      * @param x X-coordinate of the chunk
      * @param z Z-coordinate of the chunk
      * @return true if the chunk is loaded and in use by one or more players,
-     *     otherwise false
+     * otherwise false
      */
-    public boolean isChunkInUse(int x, int z);
+    boolean isChunkInUse(int x, int z);
 
     /**
      * Loads the {@link Chunk} at the specified coordinates
@@ -191,18 +197,18 @@ public interface World extends PluginMessageRecipient, Metadatable {
      * @param x X-coordinate of the chunk
      * @param z Z-coordinate of the chunk
      */
-    public void loadChunk(int x, int z);
+    void loadChunk(int x, int z);
 
     /**
      * Loads the {@link Chunk} at the specified coordinates
      *
-     * @param x X-coordinate of the chunk
-     * @param z Z-coordinate of the chunk
+     * @param x        X-coordinate of the chunk
+     * @param z        Z-coordinate of the chunk
      * @param generate Whether or not to generate a chunk if it doesn't
-     *     already exist
+     *                 already exist
      * @return true if the chunk has loaded successfully, otherwise false
      */
-    public boolean loadChunk(int x, int z, boolean generate);
+    boolean loadChunk(int x, int z, boolean generate);
 
     /**
      * Safely unloads and saves the {@link Chunk} at the specified coordinates
@@ -213,7 +219,7 @@ public interface World extends PluginMessageRecipient, Metadatable {
      * @param chunk the chunk to unload
      * @return true if the chunk has unloaded successfully, otherwise false
      */
-    public boolean unloadChunk(Chunk chunk);
+    boolean unloadChunk(Chunk chunk);
 
     /**
      * Safely unloads and saves the {@link Chunk} at the specified coordinates
@@ -225,7 +231,7 @@ public interface World extends PluginMessageRecipient, Metadatable {
      * @param z Z-coordinate of the chunk
      * @return true if the chunk has unloaded successfully, otherwise false
      */
-    public boolean unloadChunk(int x, int z);
+    boolean unloadChunk(int x, int z);
 
     /**
      * Safely unloads and optionally saves the {@link Chunk} at the specified
@@ -234,25 +240,25 @@ public interface World extends PluginMessageRecipient, Metadatable {
      * This method is analogous to {@link #unloadChunk(int, int, boolean,
      * boolean)} where save is true
      *
-     * @param x X-coordinate of the chunk
-     * @param z Z-coordinate of the chunk
+     * @param x    X-coordinate of the chunk
+     * @param z    Z-coordinate of the chunk
      * @param save Whether or not to save the chunk
      * @return true if the chunk has unloaded successfully, otherwise false
      */
-    public boolean unloadChunk(int x, int z, boolean save);
+    boolean unloadChunk(int x, int z, boolean save);
 
     /**
      * Unloads and optionally saves the {@link Chunk} at the specified
      * coordinates
      *
-     * @param x X-coordinate of the chunk
-     * @param z Z-coordinate of the chunk
+     * @param x    X-coordinate of the chunk
+     * @param z    Z-coordinate of the chunk
      * @param save Controls whether the chunk is saved
      * @param safe Controls whether to unload the chunk when players are
-     *     nearby
+     *             nearby
      * @return true if the chunk has unloaded successfully, otherwise false
      */
-    public boolean unloadChunk(int x, int z, boolean save, boolean safe);
+    boolean unloadChunk(int x, int z, boolean save, boolean safe);
 
     /**
      * Safely queues the {@link Chunk} at the specified coordinates for
@@ -265,17 +271,17 @@ public interface World extends PluginMessageRecipient, Metadatable {
      * @param z Z-coordinate of the chunk
      * @return true is the queue attempt was successful, otherwise false
      */
-    public boolean unloadChunkRequest(int x, int z);
+    boolean unloadChunkRequest(int x, int z);
 
     /**
      * Queues the {@link Chunk} at the specified coordinates for unloading
      *
-     * @param x X-coordinate of the chunk
-     * @param z Z-coordinate of the chunk
+     * @param x    X-coordinate of the chunk
+     * @param z    Z-coordinate of the chunk
      * @param safe Controls whether to queue the chunk when players are nearby
      * @return Whether the chunk was actually queued
      */
-    public boolean unloadChunkRequest(int x, int z, boolean safe);
+    boolean unloadChunkRequest(int x, int z, boolean safe);
 
     /**
      * Regenerates the {@link Chunk} at the specified coordinates
@@ -284,7 +290,7 @@ public interface World extends PluginMessageRecipient, Metadatable {
      * @param z Z-coordinate of the chunk
      * @return Whether the chunk was actually regenerated
      */
-    public boolean regenerateChunk(int x, int z);
+    boolean regenerateChunk(int x, int z);
 
     /**
      * Resends the {@link Chunk} to all clients
@@ -293,89 +299,89 @@ public interface World extends PluginMessageRecipient, Metadatable {
      * @param z Z-coordinate of the chunk
      * @return Whether the chunk was actually refreshed
      */
-    public boolean refreshChunk(int x, int z);
+    boolean refreshChunk(int x, int z);
 
     /**
      * Drops an item at the specified {@link Location}
      *
      * @param location Location to drop the item
-     * @param item ItemStack to drop
+     * @param item     ItemStack to drop
      * @return ItemDrop entity created as a result of this method
      */
-    public Item dropItem(Location location, ItemStack item);
+    Item dropItem(Location location, ItemStack item);
 
     /**
      * Drops an item at the specified {@link Location} with a random offset
      *
      * @param location Location to drop the item
-     * @param item ItemStack to drop
+     * @param item     ItemStack to drop
      * @return ItemDrop entity created as a result of this method
      */
-    public Item dropItemNaturally(Location location, ItemStack item);
+    Item dropItemNaturally(Location location, ItemStack item);
 
     /**
      * Creates an {@link Arrow} entity at the given {@link Location}
      *
-     * @param location Location to spawn the arrow
+     * @param location  Location to spawn the arrow
      * @param direction Direction to shoot the arrow in
-     * @param speed Speed of the arrow. A recommend speed is 0.6
-     * @param spread Spread of the arrow. A recommend spread is 12
+     * @param speed     Speed of the arrow. A recommend speed is 0.6
+     * @param spread    Spread of the arrow. A recommend spread is 12
      * @return Arrow entity spawned as a result of this method
      */
-    public Arrow spawnArrow(Location location, Vector direction, float speed, float spread);
+    Arrow spawnArrow(Location location, Vector direction, float speed, float spread);
 
     /**
      * Creates a tree at the given {@link Location}
      *
      * @param location Location to spawn the tree
-     * @param type Type of the tree to create
+     * @param type     Type of the tree to create
      * @return true if the tree was created successfully, otherwise false
      */
-    public boolean generateTree(Location location, TreeType type);
+    boolean generateTree(Location location, TreeType type);
 
     /**
      * Creates a tree at the given {@link Location}
      *
-     * @param loc Location to spawn the tree
-     * @param type Type of the tree to create
+     * @param loc      Location to spawn the tree
+     * @param type     Type of the tree to create
      * @param delegate A class to call for each block changed as a result of
-     *     this method
+     *                 this method
      * @return true if the tree was created successfully, otherwise false
      */
-    public boolean generateTree(Location loc, TreeType type, BlockChangeDelegate delegate);
+    boolean generateTree(Location loc, TreeType type, BlockChangeDelegate delegate);
 
     /**
      * Creates a entity at the given {@link Location}
      *
-     * @param loc The location to spawn the entity
+     * @param loc  The location to spawn the entity
      * @param type The entity to spawn
      * @return Resulting Entity of this method, or null if it was unsuccessful
      */
-    public Entity spawnEntity(Location loc, EntityType type);
+    Entity spawnEntity(Location loc, EntityType type);
 
     /**
      * Creates a creature at the given {@link Location}
      *
-     * @param loc The location to spawn the creature
+     * @param loc  The location to spawn the creature
      * @param type The creature to spawn
      * @return Resulting LivingEntity of this method, or null if it was
-     *     unsuccessful
+     * unsuccessful
      * @deprecated Has issues spawning non LivingEntities. Use {@link
-     *     #spawnEntity(Location, EntityType) spawnEntity} instead.
+     * #spawnEntity(Location, EntityType) spawnEntity} instead.
      */
     @Deprecated
-    public LivingEntity spawnCreature(Location loc, EntityType type);
+    LivingEntity spawnCreature(Location loc, EntityType type);
 
     /**
      * Creates a creature at the given {@link Location}
      *
-     * @param loc The location to spawn the creature
+     * @param loc  The location to spawn the creature
      * @param type The creature to spawn
      * @return Resulting LivingEntity of this method, or null if it was
-     *     unsuccessful
+     * unsuccessful
      */
     @Deprecated
-    public LivingEntity spawnCreature(Location loc, CreatureType type);
+    LivingEntity spawnCreature(Location loc, CreatureType type);
 
     /**
      * Strikes lightning at the given {@link Location}
@@ -383,7 +389,7 @@ public interface World extends PluginMessageRecipient, Metadatable {
      * @param loc The location to strike lightning
      * @return The lightning entity.
      */
-    public LightningStrike strikeLightning(Location loc);
+    LightningStrike strikeLightning(Location loc);
 
     /**
      * Strikes lightning at the given {@link Location} without doing damage
@@ -391,21 +397,21 @@ public interface World extends PluginMessageRecipient, Metadatable {
      * @param loc The location to strike lightning
      * @return The lightning entity.
      */
-    public LightningStrike strikeLightningEffect(Location loc);
+    LightningStrike strikeLightningEffect(Location loc);
 
     /**
      * Get a list of all entities in this World
      *
      * @return A List of all Entities currently residing in this world
      */
-    public List<Entity> getEntities();
+    List<Entity> getEntities();
 
     /**
      * Get a list of all living entities in this World
      *
      * @return A List of all LivingEntities currently residing in this world
      */
-    public List<LivingEntity> getLivingEntities();
+    List<LivingEntity> getLivingEntities();
 
     /**
      * Get a collection of all entities in this World matching the given
@@ -413,10 +419,10 @@ public interface World extends PluginMessageRecipient, Metadatable {
      *
      * @param classes The classes representing the types of entity to match
      * @return A List of all Entities currently residing in this world that
-     *     match the given class/interface
+     * match the given class/interface
      */
     @Deprecated
-    public <T extends Entity> Collection<T> getEntitiesByClass(Class<T>... classes);
+    <T extends Entity> Collection<T> getEntitiesByClass(Class<T>... classes);
 
     /**
      * Get a collection of all entities in this World matching the given
@@ -424,9 +430,9 @@ public interface World extends PluginMessageRecipient, Metadatable {
      *
      * @param cls The class representing the type of entity to match
      * @return A List of all Entities currently residing in this world that
-     *     match the given class/interface
+     * match the given class/interface
      */
-    public <T extends Entity> Collection<T> getEntitiesByClass(Class<T> cls);
+    <T extends Entity> Collection<T> getEntitiesByClass(Class<T> cls);
 
     /**
      * Get a collection of all entities in this World matching any of the
@@ -434,37 +440,37 @@ public interface World extends PluginMessageRecipient, Metadatable {
      *
      * @param classes The classes representing the types of entity to match
      * @return A List of all Entities currently residing in this world that
-     *     match one or more of the given classes/interfaces
+     * match one or more of the given classes/interfaces
      */
-    public Collection<Entity> getEntitiesByClasses(Class<?>... classes);
+    Collection<Entity> getEntitiesByClasses(Class<?>... classes);
 
     /**
      * Get a list of all players in this World
      *
      * @return A list of all Players currently residing in this world
      */
-    public List<Player> getPlayers();
+    List<Player> getPlayers();
 
     /**
      * Gets the unique name of this world
      *
      * @return Name of this world
      */
-    public String getName();
+    String getName();
 
     /**
      * Gets the Unique ID of this world
      *
      * @return Unique ID of this world.
      */
-    public UUID getUID();
+    UUID getUID();
 
     /**
      * Gets the default spawn {@link Location} of this world
      *
      * @return The spawn location of this world
      */
-    public Location getSpawnLocation();
+    Location getSpawnLocation();
 
     /**
      * Sets the spawn location of the world
@@ -474,7 +480,7 @@ public interface World extends PluginMessageRecipient, Metadatable {
      * @param z Z coordinate
      * @return True if it was successfully set.
      */
-    public boolean setSpawnLocation(int x, int y, int z);
+    boolean setSpawnLocation(int x, int y, int z);
 
     /**
      * Gets the relative in-game time of this world.
@@ -484,7 +490,7 @@ public interface World extends PluginMessageRecipient, Metadatable {
      * @return The current relative time
      * @see #getFullTime() Returns an absolute time of this world
      */
-    public long getTime();
+    long getTime();
 
     /**
      * Sets the relative in-game time on the server.
@@ -496,10 +502,10 @@ public interface World extends PluginMessageRecipient, Metadatable {
      * time, please see {@link #setFullTime(long)}
      *
      * @param time The new relative time to set the in-game time to (in
-     *     hours*1000)
+     *             hours*1000)
      * @see #setFullTime(long) Sets the absolute time of this world
      */
-    public void setTime(long time);
+    void setTime(long time);
 
     /**
      * Gets the full in-game time on this world
@@ -507,7 +513,7 @@ public interface World extends PluginMessageRecipient, Metadatable {
      * @return The current absolute time
      * @see #getTime() Returns a relative time of this world
      */
-    public long getFullTime();
+    long getFullTime();
 
     /**
      * Sets the in-game time on the server
@@ -518,14 +524,14 @@ public interface World extends PluginMessageRecipient, Metadatable {
      * @param time The new absolute time to set this world to
      * @see #setTime(long) Sets the relative time of this world
      */
-    public void setFullTime(long time);
+    void setFullTime(long time);
 
     /**
      * Returns whether the world has an ongoing storm.
      *
      * @return Whether there is an ongoing storm
      */
-    public boolean hasStorm();
+    boolean hasStorm();
 
     /**
      * Set whether there is a storm. A duration will be set for the new
@@ -533,114 +539,114 @@ public interface World extends PluginMessageRecipient, Metadatable {
      *
      * @param hasStorm Whether there is rain and snow
      */
-    public void setStorm(boolean hasStorm);
+    void setStorm(boolean hasStorm);
 
     /**
      * Get the remaining time in ticks of the current conditions.
      *
      * @return Time in ticks
      */
-    public int getWeatherDuration();
+    int getWeatherDuration();
 
     /**
      * Set the remaining time in ticks of the current conditions.
      *
      * @param duration Time in ticks
      */
-    public void setWeatherDuration(int duration);
+    void setWeatherDuration(int duration);
 
     /**
      * Returns whether there is thunder.
      *
      * @return Whether there is thunder
      */
-    public boolean isThundering();
+    boolean isThundering();
 
     /**
      * Set whether it is thundering.
      *
      * @param thundering Whether it is thundering
      */
-    public void setThundering(boolean thundering);
+    void setThundering(boolean thundering);
 
     /**
      * Get the thundering duration.
      *
      * @return Duration in ticks
      */
-    public int getThunderDuration();
+    int getThunderDuration();
 
     /**
      * Set the thundering duration.
      *
      * @param duration Duration in ticks
      */
-    public void setThunderDuration(int duration);
+    void setThunderDuration(int duration);
 
     /**
      * Creates explosion at given coordinates with given power
      *
-     * @param x X coordinate
-     * @param y Y coordinate
-     * @param z Z coordinate
+     * @param x     X coordinate
+     * @param y     Y coordinate
+     * @param z     Z coordinate
      * @param power The power of explosion, where 4F is TNT
      * @return false if explosion was canceled, otherwise true
      */
-    public boolean createExplosion(double x, double y, double z, float power);
+    boolean createExplosion(double x, double y, double z, float power);
 
     /**
      * Creates explosion at given coordinates with given power and optionally
      * setting blocks on fire.
      *
-     * @param x X coordinate
-     * @param y Y coordinate
-     * @param z Z coordinate
-     * @param power The power of explosion, where 4F is TNT
+     * @param x       X coordinate
+     * @param y       Y coordinate
+     * @param z       Z coordinate
+     * @param power   The power of explosion, where 4F is TNT
      * @param setFire Whether or not to set blocks on fire
      * @return false if explosion was canceled, otherwise true
      */
-    public boolean createExplosion(double x, double y, double z, float power, boolean setFire);
+    boolean createExplosion(double x, double y, double z, float power, boolean setFire);
 
     /**
      * Creates explosion at given coordinates with given power and optionally
      * setting blocks on fire or breaking blocks.
      *
-     * @param x X coordinate
-     * @param y Y coordinate
-     * @param z Z coordinate
-     * @param power The power of explosion, where 4F is TNT
-     * @param setFire Whether or not to set blocks on fire
+     * @param x           X coordinate
+     * @param y           Y coordinate
+     * @param z           Z coordinate
+     * @param power       The power of explosion, where 4F is TNT
+     * @param setFire     Whether or not to set blocks on fire
      * @param breakBlocks Whether or not to have blocks be destroyed
      * @return false if explosion was canceled, otherwise true
      */
-    public boolean createExplosion(double x, double y, double z, float power, boolean setFire, boolean breakBlocks);
+    boolean createExplosion(double x, double y, double z, float power, boolean setFire, boolean breakBlocks);
 
     /**
      * Creates explosion at given coordinates with given power
      *
-     * @param loc Location to blow up
+     * @param loc   Location to blow up
      * @param power The power of explosion, where 4F is TNT
      * @return false if explosion was canceled, otherwise true
      */
-    public boolean createExplosion(Location loc, float power);
+    boolean createExplosion(Location loc, float power);
 
     /**
      * Creates explosion at given coordinates with given power and optionally
      * setting blocks on fire.
      *
-     * @param loc Location to blow up
-     * @param power The power of explosion, where 4F is TNT
+     * @param loc     Location to blow up
+     * @param power   The power of explosion, where 4F is TNT
      * @param setFire Whether or not to set blocks on fire
      * @return false if explosion was canceled, otherwise true
      */
-    public boolean createExplosion(Location loc, float power, boolean setFire);
+    boolean createExplosion(Location loc, float power, boolean setFire);
 
     /**
      * Gets the {@link Environment} type of this world
      *
      * @return This worlds Environment type
      */
-    public Environment getEnvironment();
+    Environment getEnvironment();
 
     /**
      * Gets the Seed for this world.
@@ -686,11 +692,11 @@ public interface World extends PluginMessageRecipient, Metadatable {
      * Spawn an entity of a specific class at the given {@link Location}
      *
      * @param location the {@link Location} to spawn the entity at
-     * @param clazz the class of the {@link Entity} to spawn
-     * @param <T> the class of the {@link Entity} to spawn
+     * @param clazz    the class of the {@link Entity} to spawn
+     * @param <T>      the class of the {@link Entity} to spawn
      * @return an instance of the spawned {@link Entity}
      * @throws IllegalArgumentException if either parameter is null or the
-     *     {@link Entity} requested cannot be spawned
+     *                                  {@link Entity} requested cannot be spawned
      */
     public <T extends Entity> T spawn(Location location, Class<T> clazz) throws IllegalArgumentException;
 
@@ -704,10 +710,10 @@ public interface World extends PluginMessageRecipient, Metadatable {
      *
      * @param location The {@link Location} to spawn the FallingBlock
      * @param material The block {@link Material} type
-     * @param data The block data
+     * @param data     The block data
      * @return The spawned {@link FallingBlock} instance
      * @throws IllegalArgumentException if {@link Location} or {@link
-     *     Material} are null or {@link Material} is not a block
+     *                                  Material} are null or {@link Material} is not a block
      * @deprecated Magic value
      */
     @Deprecated
@@ -717,12 +723,12 @@ public interface World extends PluginMessageRecipient, Metadatable {
      * Spawn a {@link FallingBlock} entity at the given {@link Location} of
      * the specified blockId (converted to {@link Material})
      *
-     * @param location The {@link Location} to spawn the FallingBlock
-     * @param blockId The id of the intended material
+     * @param location  The {@link Location} to spawn the FallingBlock
+     * @param blockId   The id of the intended material
      * @param blockData The block data
      * @return The spawned FallingBlock instance
      * @throws IllegalArgumentException if location is null, or blockId is
-     *     invalid
+     *                                  invalid
      * @see #spawnFallingBlock(org.bukkit.Location, org.bukkit.Material, byte)
      * @deprecated Magic value
      */
@@ -734,9 +740,9 @@ public interface World extends PluginMessageRecipient, Metadatable {
      * location.
      *
      * @param location the {@link Location} around which players must be to
-     *     hear the sound
-     * @param effect the {@link Effect}
-     * @param data a data bit needed for some effects
+     *                 hear the sound
+     * @param effect   the {@link Effect}
+     * @param data     a data bit needed for some effects
      */
     public void playEffect(Location location, Effect effect, int data);
 
@@ -744,10 +750,10 @@ public interface World extends PluginMessageRecipient, Metadatable {
      * Plays an effect to all players within a given radius around a location.
      *
      * @param location the {@link Location} around which players must be to
-     *     hear the effect
-     * @param effect the {@link Effect}
-     * @param data a data bit needed for some effects
-     * @param radius the radius around the location
+     *                 hear the effect
+     * @param effect   the {@link Effect}
+     * @param data     a data bit needed for some effects
+     * @param radius   the radius around the location
      */
     public void playEffect(Location location, Effect effect, int data, int radius);
 
@@ -756,9 +762,9 @@ public interface World extends PluginMessageRecipient, Metadatable {
      * location.
      *
      * @param location the {@link Location} around which players must be to
-     *     hear the sound
-     * @param effect the {@link Effect}
-     * @param data a data bit needed for some effects
+     *                 hear the sound
+     * @param effect   the {@link Effect}
+     * @param data     a data bit needed for some effects
      */
     public <T> void playEffect(Location location, Effect effect, T data);
 
@@ -766,10 +772,10 @@ public interface World extends PluginMessageRecipient, Metadatable {
      * Plays an effect to all players within a given radius around a location.
      *
      * @param location the {@link Location} around which players must be to
-     *     hear the effect
-     * @param effect the {@link Effect}
-     * @param data a data bit needed for some effects
-     * @param radius the radius around the location
+     *                 hear the effect
+     * @param effect   the {@link Effect}
+     * @param data     a data bit needed for some effects
+     * @param radius   the radius around the location
      */
     public <T> void playEffect(Location location, Effect effect, T data, int radius);
 
@@ -778,12 +784,12 @@ public interface World extends PluginMessageRecipient, Metadatable {
      * including valid biome data. Used for representing an ungenerated chunk,
      * or for fetching only biome data without loading a chunk.
      *
-     * @param x - chunk x coordinate
-     * @param z - chunk z coordinate
-     * @param includeBiome - if true, snapshot includes per-coordinate biome
-     *     type
+     * @param x                    - chunk x coordinate
+     * @param z                    - chunk z coordinate
+     * @param includeBiome         - if true, snapshot includes per-coordinate biome
+     *                             type
      * @param includeBiomeTempRain - if true, snapshot includes per-coordinate
-     *     raw biome temperature and rainfall
+     *                             raw biome temperature and rainfall
      * @return The empty snapshot.
      */
     public ChunkSnapshot getEmptyChunkSnapshot(int x, int z, boolean includeBiome, boolean includeBiomeTempRain);
@@ -792,9 +798,9 @@ public interface World extends PluginMessageRecipient, Metadatable {
      * Sets the spawn flags for this.
      *
      * @param allowMonsters - if true, monsters are allowed to spawn in this
-     *     world.
-     * @param allowAnimals - if true, animals are allowed to spawn in this
-     *     world.
+     *                      world.
+     * @param allowAnimals  - if true, animals are allowed to spawn in this
+     *                      world.
      */
     public void setSpawnFlags(boolean allowMonsters, boolean allowAnimals);
 
@@ -824,8 +830,8 @@ public interface World extends PluginMessageRecipient, Metadatable {
     /**
      * Sets the biome for the given block coordinates
      *
-     * @param x X coordinate of the block
-     * @param z Z coordinate of the block
+     * @param x   X coordinate of the block
+     * @param z   Z coordinate of the block
      * @param bio new Biome type for this block
      */
     void setBiome(int x, int z, Biome bio);
@@ -885,7 +891,7 @@ public interface World extends PluginMessageRecipient, Metadatable {
      * or not.
      *
      * @param keepLoaded if true then the world's spawn area will be kept
-     *     loaded into memory.
+     *                   loaded into memory.
      */
     public void setKeepSpawnInMemory(boolean keepLoaded);
 
@@ -900,23 +906,23 @@ public interface World extends PluginMessageRecipient, Metadatable {
      * Sets whether or not the world will automatically save
      *
      * @param value true if the world should automatically save, otherwise
-     *     false
+     *              false
      */
     public void setAutoSave(boolean value);
 
     /**
-     * Sets the Difficulty of the world.
+     * Gets the Difficulty of the world.
      *
-     * @param difficulty the new difficulty you want to set the world to
+     * @return The difficulty of the world.
      */
-    public void setDifficulty(Difficulty difficulty);
+    public Difficulty getDifficulty();
 
     /**
-     * Gets the Difficulty of the world.
+     * Sets the Difficulty of the world.
      *
-     * @return The difficulty of the world.
+     * @param difficulty the new difficulty you want to set the world to
      */
-    public Difficulty getDifficulty();
+    public void setDifficulty(Difficulty difficulty);
 
     /**
      * Gets the folder of this world on disk.
@@ -948,9 +954,9 @@ public interface World extends PluginMessageRecipient, Metadatable {
      * <b>Example Usage:</b>
      * <ul>
      * <li>A value of 1 will mean the server will attempt to spawn animals in
-     *     this world every tick.
+     * this world every tick.
      * <li>A value of 400 will mean the server will attempt to spawn animals
-     *     in this world every 400th tick.
+     * in this world every 400th tick.
      * <li>A value below 0 will be reset back to Minecraft's default.
      * </ul>
      * <p>
@@ -974,9 +980,9 @@ public interface World extends PluginMessageRecipient, Metadatable {
      * <b>Example Usage:</b>
      * <ul>
      * <li>A value of 1 will mean the server will attempt to spawn animals in
-     *     this world every tick.
+     * this world every tick.
      * <li>A value of 400 will mean the server will attempt to spawn animals
-     *     in this world every 400th tick.
+     * in this world every 400th tick.
      * <li>A value below 0 will be reset back to Minecraft's default.
      * </ul>
      * <p>
@@ -988,7 +994,7 @@ public interface World extends PluginMessageRecipient, Metadatable {
      * Minecraft default: 400.
      *
      * @param ticksPerAnimalSpawns the ticks per animal spawns value you want
-     *     to set the world to
+     *                             to set the world to
      */
     public void setTicksPerAnimalSpawns(int ticksPerAnimalSpawns);
 
@@ -1001,9 +1007,9 @@ public interface World extends PluginMessageRecipient, Metadatable {
      * <b>Example Usage:</b>
      * <ul>
      * <li>A value of 1 will mean the server will attempt to spawn monsters in
-     *     this world every tick.
+     * this world every tick.
      * <li>A value of 400 will mean the server will attempt to spawn monsters
-     *     in this world every 400th tick.
+     * in this world every 400th tick.
      * <li>A value below 0 will be reset back to Minecraft's default.
      * </ul>
      * <p>
@@ -1027,9 +1033,9 @@ public interface World extends PluginMessageRecipient, Metadatable {
      * <b>Example Usage:</b>
      * <ul>
      * <li>A value of 1 will mean the server will attempt to spawn monsters in
-     *     this world on every tick.
+     * this world on every tick.
      * <li>A value of 400 will mean the server will attempt to spawn monsters
-     *     in this world every 400th tick.
+     * in this world every 400th tick.
      * <li>A value below 0 will be reset back to Minecraft's default.
      * </ul>
      * <p>
@@ -1041,7 +1047,7 @@ public interface World extends PluginMessageRecipient, Metadatable {
      * Minecraft default: 1.
      *
      * @param ticksPerMonsterSpawns the ticks per monster spawns value you
-     *     want to set the world to
+     *                              want to set the world to
      */
     public void setTicksPerMonsterSpawns(int ticksPerMonsterSpawns);
 
@@ -1119,9 +1125,9 @@ public interface World extends PluginMessageRecipient, Metadatable {
      * This function will fail silently if Location or Sound are null.
      *
      * @param location The location to play the sound
-     * @param sound The sound to play
-     * @param volume The volume of the sound
-     * @param pitch The pitch of the sound
+     * @param sound    The sound to play
+     * @param volume   The volume of the sound
+     * @param pitch    The pitch of the sound
      */
     void playSound(Location location, Sound sound, float volume, float pitch);
 
@@ -1150,7 +1156,7 @@ public interface World extends PluginMessageRecipient, Metadatable {
      * <p>
      * If rule is null, the function will return false.
      *
-     * @param rule Rule to set
+     * @param rule  Rule to set
      * @param value Value to set rule to
      * @return True if rule was set
      */
@@ -1164,79 +1170,7 @@ public interface World extends PluginMessageRecipient, Metadatable {
      */
     public boolean isGameRule(String rule);
 
-    // Spigot start
-    public class Spigot
-    {
-
-        /**
-         * Plays an effect to all players within a default radius around a given
-         * location.
-         *
-         * @param location the {@link Location} around which players must be to
-         * see the effect
-         * @param effect the {@link Effect}
-         * @throws IllegalArgumentException if the location or effect is null.
-         * It also throws when the effect requires a material or a material data
-         */
-        public void playEffect(Location location, Effect effect)
-        {
-            throw new UnsupportedOperationException( "Not supported yet." );
-        }
-
-        /**
-         * Plays an effect to all players within a default radius around a given
-         * location. The effect will use the provided material (and material
-         * data if required). The particle's position on the client will be the
-         * given location, adjusted on each axis by a normal distribution with
-         * mean 0 and standard deviation given in the offset parameters, each
-         * particle has independently calculated offsets. The effect will have
-         * the given speed and particle count if the effect is a particle. Some
-         * effect will create multiple particles.
-         *
-         * @param location the {@link Location} around which players must be to
-         * see the effect
-         * @param effect effect the {@link Effect}
-         * @param id the item/block/data id for the effect
-         * @param data the data value of the block/item for the effect
-         * @param offsetX the amount to be randomly offset by in the X axis
-         * @param offsetY the amount to be randomly offset by in the Y axis
-         * @param offsetZ the amount to be randomly offset by in the Z axis
-         * @param speed the speed of the particles
-         * @param particleCount the number of particles
-         * @param radius the radius around the location
-         */
-        public void playEffect(Location location, Effect effect, int id, int data, float offsetX, float offsetY, float offsetZ, float speed, int particleCount, int radius)
-        {
-            throw new UnsupportedOperationException( "Not supported yet." );
-        }
-        
-        /**
-         * Strikes lightning at the given {@link Location} and possibly without sound
-         *
-         * @param loc The location to strike lightning
-         * @param isSilent Whether this strike makes no sound
-         * @return The lightning entity.
-         */        
-        public LightningStrike strikeLightning(Location loc, boolean isSilent)
-        {
-            throw new UnsupportedOperationException( "Not supported yet." );
-        }
-        
-        /**
-         * Strikes lightning at the given {@link Location} without doing damage and possibly without sound
-         *
-         * @param loc The location to strike lightning
-         * @param isSilent Whether this strike makes no sound
-         * @return The lightning entity.
-         */
-        public LightningStrike strikeLightningEffect(Location loc, boolean isSilent)
-        {
-            throw new UnsupportedOperationException( "Not supported yet." );
-        }
-    }
-
     Spigot spigot();
-    // Spigot end
 
     /**
      * Represents various map environment types that a world may be
@@ -1256,14 +1190,33 @@ public interface World extends PluginMessageRecipient, Metadatable {
          */
         THE_END(1);
 
-        private final int id;
         private static final Map<Integer, Environment> lookup = new HashMap<Integer, Environment>();
 
+        static {
+            for (Environment env : values()) {
+                lookup.put(env.getId(), env);
+            }
+        }
+
+        private final int id;
+
         private Environment(int id) {
             this.id = id;
         }
 
         /**
+         * Get an environment by ID
+         *
+         * @param id The ID of the environment
+         * @return The environment
+         * @deprecated Magic value
+         */
+        @Deprecated
+        public static Environment getEnvironment(int id) {
+            return lookup.get(id);
+        }
+
+        /**
          * Gets the dimension ID of this environment
          *
          * @return dimension ID
@@ -1273,23 +1226,77 @@ public interface World extends PluginMessageRecipient, Metadatable {
         public int getId() {
             return id;
         }
+    }
+
+    // PaperSpigot start - Async chunk load API
+    interface ChunkLoadCallback {
+        void onLoad(Chunk chunk);
+    }
+    // Spigot end
+
+    // Spigot start
+    public class Spigot {
 
         /**
-         * Get an environment by ID
+         * Plays an effect to all players within a default radius around a given
+         * location.
          *
-         * @param id The ID of the environment
-         * @return The environment
-         * @deprecated Magic value
+         * @param location the {@link Location} around which players must be to
+         *                 see the effect
+         * @param effect   the {@link Effect}
+         * @throws IllegalArgumentException if the location or effect is null.
+         *                                  It also throws when the effect requires a material or a material data
          */
-        @Deprecated
-        public static Environment getEnvironment(int id) {
-            return lookup.get(id);
+        public void playEffect(Location location, Effect effect) {
+            throw new UnsupportedOperationException("Not supported yet.");
         }
 
-        static {
-            for (Environment env : values()) {
-                lookup.put(env.getId(), env);
-            }
+        /**
+         * Plays an effect to all players within a default radius around a given
+         * location. The effect will use the provided material (and material
+         * data if required). The particle's position on the client will be the
+         * given location, adjusted on each axis by a normal distribution with
+         * mean 0 and standard deviation given in the offset parameters, each
+         * particle has independently calculated offsets. The effect will have
+         * the given speed and particle count if the effect is a particle. Some
+         * effect will create multiple particles.
+         *
+         * @param location      the {@link Location} around which players must be to
+         *                      see the effect
+         * @param effect        effect the {@link Effect}
+         * @param id            the item/block/data id for the effect
+         * @param data          the data value of the block/item for the effect
+         * @param offsetX       the amount to be randomly offset by in the X axis
+         * @param offsetY       the amount to be randomly offset by in the Y axis
+         * @param offsetZ       the amount to be randomly offset by in the Z axis
+         * @param speed         the speed of the particles
+         * @param particleCount the number of particles
+         * @param radius        the radius around the location
+         */
+        public void playEffect(Location location, Effect effect, int id, int data, float offsetX, float offsetY, float offsetZ, float speed, int particleCount, int radius) {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        /**
+         * Strikes lightning at the given {@link Location} and possibly without sound
+         *
+         * @param loc      The location to strike lightning
+         * @param isSilent Whether this strike makes no sound
+         * @return The lightning entity.
+         */
+        public LightningStrike strikeLightning(Location loc, boolean isSilent) {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        /**
+         * Strikes lightning at the given {@link Location} without doing damage and possibly without sound
+         *
+         * @param loc      The location to strike lightning
+         * @param isSilent Whether this strike makes no sound
+         * @return The lightning entity.
+         */
+        public LightningStrike strikeLightningEffect(Location loc, boolean isSilent) {
+            throw new UnsupportedOperationException("Not supported yet.");
         }
     }
 }
diff --git a/src/main/java/org/bukkit/WorldCreator.java b/src/main/java/org/bukkit/WorldCreator.java
index 9a5afd2..f5db0db 100644
--- a/src/main/java/org/bukkit/WorldCreator.java
+++ b/src/main/java/org/bukkit/WorldCreator.java
@@ -1,14 +1,16 @@
 package org.bukkit;
 
-import java.util.Random;
 import org.bukkit.command.CommandSender;
 import org.bukkit.generator.ChunkGenerator;
 import org.bukkit.plugin.Plugin;
 
+import java.util.Random;
+
 /**
  * Represents various types of options that may be used to create a world.
  */
 public class WorldCreator {
+
     private final String name;
     private long seed;
     private World.Environment environment = World.Environment.NORMAL;
@@ -31,6 +33,60 @@ public class WorldCreator {
     }
 
     /**
+     * Creates a new {@link WorldCreator} for the given world name
+     *
+     * @param name Name of the world to load or create
+     * @return Resulting WorldCreator
+     */
+    public static WorldCreator name(String name) {
+        return new WorldCreator(name);
+    }
+
+    /**
+     * Attempts to get the {@link ChunkGenerator} with the given name.
+     * <p>
+     * If the generator is not found, null will be returned and a message will
+     * be printed to the specified {@link CommandSender} explaining why.
+     * <p>
+     * The name must be in the "plugin:id" notation, or optionally just
+     * "plugin", where "plugin" is the safe-name of a plugin and "id" is an
+     * optional unique identifier for the generator you wish to request from
+     * the plugin.
+     *
+     * @param world  Name of the world this will be used for
+     * @param name   Name of the generator to retrieve
+     * @param output Where to output if errors are present
+     * @return Resulting generator, or null
+     */
+    public static ChunkGenerator getGeneratorForName(String world, String name, CommandSender output) {
+        ChunkGenerator result = null;
+
+        if (world == null) {
+            throw new IllegalArgumentException("World name must be specified");
+        }
+
+        if (output == null) {
+            output = Bukkit.getConsoleSender();
+        }
+
+        if (name != null) {
+            String[] split = name.split(":", 2);
+            String id = (split.length > 1) ? split[1] : null;
+            Plugin plugin = Bukkit.getPluginManager().getPlugin(split[0]);
+
+            if (plugin == null) {
+                output.sendMessage("Could not set generator for world '" + world + "': Plugin '" + split[0] + "' does not exist");
+            } else if (!plugin.isEnabled()) {
+                output.sendMessage("Could not set generator for world '" + world + "': Plugin '" + plugin.getDescription().getFullName() + "' is not enabled");
+            } else {
+                result = plugin.getDefaultWorldGenerator(world, id);
+            }
+        }
+
+        return result;
+    }
+
+    /**
      * Copies the options from the specified world
      *
      * @param world World to copy options from
@@ -44,7 +100,6 @@ public class WorldCreator {
         seed = world.getSeed();
         environment = world.getEnvironment();
         generator = world.getGenerator();
-
         return this;
     }
 
@@ -62,7 +117,6 @@ public class WorldCreator {
         seed = creator.seed();
         environment = creator.environment();
         generator = creator.generator();
-
         return this;
     }
 
@@ -92,7 +146,6 @@ public class WorldCreator {
      */
     public WorldCreator seed(long seed) {
         this.seed = seed;
-
         return this;
     }
 
@@ -108,12 +161,11 @@ public class WorldCreator {
     /**
      * Sets the environment that will be used to create or load the world
      *
-     * @param env World environment
+     * @param environment World environment
      * @return This object, for chaining
      */
-    public WorldCreator environment(World.Environment env) {
-        this.environment = env;
-
+    public WorldCreator environment(World.Environment environment) {
+        this.environment = environment;
         return this;
     }
 
@@ -161,7 +213,6 @@ public class WorldCreator {
      */
     public WorldCreator generator(ChunkGenerator generator) {
         this.generator = generator;
-
         return this;
     }
 
@@ -180,7 +231,6 @@ public class WorldCreator {
      */
     public WorldCreator generator(String generator) {
         this.generator = getGeneratorForName(name, generator, Bukkit.getConsoleSender());
-
         return this;
     }
 
@@ -195,13 +245,12 @@ public class WorldCreator {
      * printed to the specified output
      *
      * @param generator Name of the generator to use, in "plugin:id" notation
-     * @param output {@link CommandSender} that will receive any error
-     *     messages
+     * @param output    {@link CommandSender} that will receive any error
+     *                  messages
      * @return This object, for chaining
      */
     public WorldCreator generator(String generator, CommandSender output) {
         this.generator = getGeneratorForName(name, generator, output);
-
         return this;
     }
 
@@ -214,7 +263,6 @@ public class WorldCreator {
      */
     public WorldCreator generateStructures(boolean generate) {
         this.generateStructures = generate;
-
         return this;
     }
 
@@ -238,58 +286,4 @@ public class WorldCreator {
     public World createWorld() {
         return Bukkit.createWorld(this);
     }
-
-    /**
-     * Creates a new {@link WorldCreator} for the given world name
-     *
-     * @param name Name of the world to load or create
-     * @return Resulting WorldCreator
-     */
-    public static WorldCreator name(String name) {
-        return new WorldCreator(name);
-    }
-
-    /**
-     * Attempts to get the {@link ChunkGenerator} with the given name.
-     * <p>
-     * If the generator is not found, null will be returned and a message will
-     * be printed to the specified {@link CommandSender} explaining why.
-     * <p>
-     * The name must be in the "plugin:id" notation, or optionally just
-     * "plugin", where "plugin" is the safe-name of a plugin and "id" is an
-     * optional unique identifier for the generator you wish to request from
-     * the plugin.
-     *
-     * @param world Name of the world this will be used for
-     * @param name Name of the generator to retrieve
-     * @param output Where to output if errors are present
-     * @return Resulting generator, or null
-     */
-    public static ChunkGenerator getGeneratorForName(String world, String name, CommandSender output) {
-        ChunkGenerator result = null;
-
-        if (world == null) {
-            throw new IllegalArgumentException("World name must be specified");
-        }
-
-        if (output == null) {
-            output = Bukkit.getConsoleSender();
-        }
-
-        if (name != null) {
-            String[] split = name.split(":", 2);
-            String id = (split.length > 1) ? split[1] : null;
-            Plugin plugin = Bukkit.getPluginManager().getPlugin(split[0]);
-
-            if (plugin == null) {
-                output.sendMessage("Could not set generator for world '" + world + "': Plugin '" + split[0] + "' does not exist");
-            } else if (!plugin.isEnabled()) {
-                output.sendMessage("Could not set generator for world '" + world + "': Plugin '" + plugin.getDescription().getFullName() + "' is not enabled");
-            } else {
-                result = plugin.getDefaultWorldGenerator(world, id);
-            }
-        }
-
-        return result;
-    }
 }
diff --git a/src/main/java/org/bukkit/WorldType.java b/src/main/java/org/bukkit/WorldType.java
index 201852d..c1b98d5 100644
--- a/src/main/java/org/bukkit/WorldType.java
+++ b/src/main/java/org/bukkit/WorldType.java
@@ -1,12 +1,14 @@
 package org.bukkit;
 
 import com.google.common.collect.Maps;
+
 import java.util.Map;
 
 /**
  * Represents various types of worlds that may exist
  */
 public enum WorldType {
+
     NORMAL("DEFAULT"),
     FLAT("FLAT"),
     VERSION_1_1("DEFAULT_1_1"),
@@ -14,6 +16,13 @@ public enum WorldType {
     AMPLIFIED("AMPLIFIED");
 
     private final static Map<String, WorldType> BY_NAME = Maps.newHashMap();
+
+    static {
+        for (WorldType type : values()) {
+            BY_NAME.put(type.name, type);
+        }
+    }
+
     private final String name;
 
     private WorldType(String name) {
@@ -21,15 +30,6 @@ public enum WorldType {
     }
 
     /**
-     * Gets the name of this WorldType
-     *
-     * @return Name of this type
-     */
-    public String getName() {
-        return name;
-    }
-
-    /**
      * Gets a Worldtype by its name
      *
      * @param name Name of the WorldType to get
@@ -39,9 +39,12 @@ public enum WorldType {
         return BY_NAME.get(name.toUpperCase());
     }
 
-    static {
-        for (WorldType type : values()) {
-            BY_NAME.put(type.name, type);
-        }
+    /**
+     * Gets the name of this WorldType
+     *
+     * @return Name of this type
+     */
+    public String getName() {
+        return name;
     }
 }
diff --git a/src/main/java/org/bukkit/block/Beacon.java b/src/main/java/org/bukkit/block/Beacon.java
index 2de0583..e55b71c 100644
--- a/src/main/java/org/bukkit/block/Beacon.java
+++ b/src/main/java/org/bukkit/block/Beacon.java
@@ -6,4 +6,5 @@ import org.bukkit.inventory.InventoryHolder;
  * Represents a beacon.
  */
 public interface Beacon extends BlockState, InventoryHolder {
+
 }
diff --git a/src/main/java/org/bukkit/block/Biome.java b/src/main/java/org/bukkit/block/Biome.java
index 8b902f4..bab3684 100644
--- a/src/main/java/org/bukkit/block/Biome.java
+++ b/src/main/java/org/bukkit/block/Biome.java
@@ -4,6 +4,7 @@ package org.bukkit.block;
  * Holds all accepted Biomes in the default server
  */
 public enum Biome {
+
     SWAMPLAND,
     FOREST,
     TAIGA,
@@ -64,5 +65,5 @@ public enum Biome {
     MEGA_SPRUCE_TAIGA,
     EXTREME_HILLS_MOUNTAINS,
     EXTREME_HILLS_PLUS_MOUNTAINS,
-    MEGA_SPRUCE_TAIGA_HILLS,
+    MEGA_SPRUCE_TAIGA_HILLS
 }
diff --git a/src/main/java/org/bukkit/block/Block.java b/src/main/java/org/bukkit/block/Block.java
index 4a53109..31c032b 100644
--- a/src/main/java/org/bukkit/block/Block.java
+++ b/src/main/java/org/bukkit/block/Block.java
@@ -1,14 +1,14 @@
 package org.bukkit.block;
 
-import java.util.Collection;
-
 import org.bukkit.Chunk;
+import org.bukkit.Location;
 import org.bukkit.Material;
 import org.bukkit.World;
-import org.bukkit.Location;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.metadata.Metadatable;
 
+import java.util.Collection;
+
 /**
  * Represents a block. This is a live object, and only one Block may exist for
  * any given location in a world. The state of the block may change
@@ -27,6 +27,15 @@ public interface Block extends Metadatable {
     byte getData();
 
     /**
+     * Sets the metadata for this block
+     *
+     * @param data New block specific metadata
+     * @deprecated Magic value
+     */
+    @Deprecated
+    void setData(byte data);
+
+    /**
      * Gets the block at the given offsets
      *
      * @param modX X-coordinate offset
@@ -52,14 +61,14 @@ public interface Block extends Metadatable {
      * <p>
      * For example, the following method places water at 100,102,100; two
      * blocks above 100,100,100.
-     *
+     * <p>
      * <pre>
      * Block block = world.getBlockAt(100, 100, 100);
      * Block shower = block.getRelative(BlockFace.UP, 2);
      * shower.setType(Material.WATER);
      * </pre>
      *
-     * @param face Face of this block to return
+     * @param face     Face of this block to return
      * @param distance Distance to get the block at
      * @return Block at the given face
      */
@@ -73,6 +82,13 @@ public interface Block extends Metadatable {
     Material getType();
 
     /**
+     * Sets the type of this block
+     *
+     * @param type Material to change this block to
+     */
+    void setType(Material type);
+
+    /**
      * Gets the type-id of this block
      *
      * @return block type-id
@@ -162,16 +178,7 @@ public interface Block extends Metadatable {
     /**
      * Sets the metadata for this block
      *
-     * @param data New block specific metadata
-     * @deprecated Magic value
-     */
-    @Deprecated
-    void setData(byte data);
-
-    /**
-     * Sets the metadata for this block
-     *
-     * @param data New block specific metadata
+     * @param data         New block specific metadata
      * @param applyPhysics False to cancel physics from the changed block.
      * @deprecated Magic value
      */
@@ -179,13 +186,6 @@ public interface Block extends Metadatable {
     void setData(byte data, boolean applyPhysics);
 
     /**
-     * Sets the type of this block
-     *
-     * @param type Material to change this block to
-     */
-    void setType(Material type);
-
-    /**
      * Sets the type-id of this block
      *
      * @param type Type-Id to change this block to
@@ -198,7 +198,7 @@ public interface Block extends Metadatable {
     /**
      * Sets the type-id of this block
      *
-     * @param type Type-Id to change this block to
+     * @param type         Type-Id to change this block to
      * @param applyPhysics False to cancel physics on the changed block.
      * @return whether the block was changed
      * @deprecated Magic value
@@ -209,8 +209,8 @@ public interface Block extends Metadatable {
     /**
      * Sets the type-id of this block
      *
-     * @param type Type-Id to change this block to
-     * @param data The data value to change this block to
+     * @param type         Type-Id to change this block to
+     * @param data         The data value to change this block to
      * @param applyPhysics False to cancel physics on the changed block
      * @return whether the block was changed
      * @deprecated Magic value
@@ -295,7 +295,7 @@ public interface Block extends Metadatable {
      * Returns the redstone power being provided to this block face
      *
      * @param face the face of the block to query or BlockFace.SELF for the
-     *     block itself
+     *             block itself
      * @return The power level.
      */
     int getBlockPower(BlockFace face);
@@ -380,5 +380,4 @@ public interface Block extends Metadatable {
      * @return a list of dropped items for this type of block
      */
     Collection<ItemStack> getDrops(ItemStack tool);
-
 }
diff --git a/src/main/java/org/bukkit/block/BlockFace.java b/src/main/java/org/bukkit/block/BlockFace.java
index 58fb195..6eeca13 100644
--- a/src/main/java/org/bukkit/block/BlockFace.java
+++ b/src/main/java/org/bukkit/block/BlockFace.java
@@ -4,6 +4,7 @@ package org.bukkit.block;
  * Represents the face of a block
  */
 public enum BlockFace {
+
     NORTH(0, 0, -1),
     EAST(1, 0, 0),
     SOUTH(0, 0, 1),
@@ -28,13 +29,13 @@ public enum BlockFace {
     private final int modY;
     private final int modZ;
 
-    private BlockFace(final int modX, final int modY, final int modZ) {
+    BlockFace(final int modX, final int modY, final int modZ) {
         this.modX = modX;
         this.modY = modY;
         this.modZ = modZ;
     }
 
-    private BlockFace(final BlockFace face1, final BlockFace face2) {
+    BlockFace(final BlockFace face1, final BlockFace face2) {
         this.modX = face1.getModX() + face2.getModX();
         this.modY = face1.getModY() + face2.getModY();
         this.modZ = face1.getModZ() + face2.getModZ();
@@ -69,64 +70,46 @@ public enum BlockFace {
 
     public BlockFace getOppositeFace() {
         switch (this) {
-        case NORTH:
-            return BlockFace.SOUTH;
-
-        case SOUTH:
-            return BlockFace.NORTH;
-
-        case EAST:
-            return BlockFace.WEST;
-
-        case WEST:
-            return BlockFace.EAST;
-
-        case UP:
-            return BlockFace.DOWN;
-
-        case DOWN:
-            return BlockFace.UP;
-
-        case NORTH_EAST:
-            return BlockFace.SOUTH_WEST;
-
-        case NORTH_WEST:
-            return BlockFace.SOUTH_EAST;
-
-        case SOUTH_EAST:
-            return BlockFace.NORTH_WEST;
-
-        case SOUTH_WEST:
-            return BlockFace.NORTH_EAST;
-
-        case WEST_NORTH_WEST:
-            return BlockFace.EAST_SOUTH_EAST;
-
-        case NORTH_NORTH_WEST:
-            return BlockFace.SOUTH_SOUTH_EAST;
-
-        case NORTH_NORTH_EAST:
-            return BlockFace.SOUTH_SOUTH_WEST;
-
-        case EAST_NORTH_EAST:
-            return BlockFace.WEST_SOUTH_WEST;
-
-        case EAST_SOUTH_EAST:
-            return BlockFace.WEST_NORTH_WEST;
-
-        case SOUTH_SOUTH_EAST:
-            return BlockFace.NORTH_NORTH_WEST;
-
-        case SOUTH_SOUTH_WEST:
-            return BlockFace.NORTH_NORTH_EAST;
-
-        case WEST_SOUTH_WEST:
-            return BlockFace.EAST_NORTH_EAST;
-
-        case SELF:
-            return BlockFace.SELF;
+            case NORTH:
+                return BlockFace.SOUTH;
+            case SOUTH:
+                return BlockFace.NORTH;
+            case EAST:
+                return BlockFace.WEST;
+            case WEST:
+                return BlockFace.EAST;
+            case UP:
+                return BlockFace.DOWN;
+            case DOWN:
+                return BlockFace.UP;
+            case NORTH_EAST:
+                return BlockFace.SOUTH_WEST;
+            case NORTH_WEST:
+                return BlockFace.SOUTH_EAST;
+            case SOUTH_EAST:
+                return BlockFace.NORTH_WEST;
+            case SOUTH_WEST:
+                return BlockFace.NORTH_EAST;
+            case WEST_NORTH_WEST:
+                return BlockFace.EAST_SOUTH_EAST;
+            case NORTH_NORTH_WEST:
+                return BlockFace.SOUTH_SOUTH_EAST;
+            case NORTH_NORTH_EAST:
+                return BlockFace.SOUTH_SOUTH_WEST;
+            case EAST_NORTH_EAST:
+                return BlockFace.WEST_SOUTH_WEST;
+            case EAST_SOUTH_EAST:
+                return BlockFace.WEST_NORTH_WEST;
+            case SOUTH_SOUTH_EAST:
+                return BlockFace.NORTH_NORTH_WEST;
+            case SOUTH_SOUTH_WEST:
+                return BlockFace.NORTH_NORTH_EAST;
+            case WEST_SOUTH_WEST:
+                return BlockFace.EAST_NORTH_EAST;
+            case SELF:
+                return BlockFace.SELF;
+            default:
+                return SELF;
         }
-
-        return BlockFace.SELF;
     }
 }
diff --git a/src/main/java/org/bukkit/block/BlockState.java b/src/main/java/org/bukkit/block/BlockState.java
index ca57173..548343f 100644
--- a/src/main/java/org/bukkit/block/BlockState.java
+++ b/src/main/java/org/bukkit/block/BlockState.java
@@ -33,6 +33,13 @@ public interface BlockState extends Metadatable {
     MaterialData getData();
 
     /**
+     * Sets the metadata for this block
+     *
+     * @param data New block specific metadata
+     */
+    void setData(MaterialData data);
+
+    /**
      * Gets the type of this block
      *
      * @return block type
@@ -40,6 +47,13 @@ public interface BlockState extends Metadatable {
     Material getType();
 
     /**
+     * Sets the type of this block
+     *
+     * @param type Material to change this block to
+     */
+    void setType(Material type);
+
+    /**
      * Gets the type-id of this block
      *
      * @return block type-id
@@ -108,20 +122,6 @@ public interface BlockState extends Metadatable {
     Chunk getChunk();
 
     /**
-     * Sets the metadata for this block
-     *
-     * @param data New block specific metadata
-     */
-    void setData(MaterialData data);
-
-    /**
-     * Sets the type of this block
-     *
-     * @param type Material to change this block to
-     */
-    void setType(Material type);
-
-    /**
      * Sets the type-id of this block
      *
      * @param type Type-Id to change this block to
@@ -171,9 +171,9 @@ public interface BlockState extends Metadatable {
      * If applyPhysics is true, it will trigger a physics update on
      * surrounding blocks which could cause them to update or disappear.
      *
-     * @param force true to forcefully set the state
+     * @param force        true to forcefully set the state
      * @param applyPhysics false to cancel updating physics on surrounding
-     *     blocks
+     *                     blocks
      * @return true if the update was successful, otherwise false
      */
     boolean update(boolean force, boolean applyPhysics);
@@ -183,12 +183,12 @@ public interface BlockState extends Metadatable {
      * @deprecated Magic value
      */
     @Deprecated
-    public byte getRawData();
+    byte getRawData();
 
     /**
      * @param data The new data value for the block.
      * @deprecated Magic value
      */
     @Deprecated
-    public void setRawData(byte data);
+    void setRawData(byte data);
 }
diff --git a/src/main/java/org/bukkit/block/CommandBlock.java b/src/main/java/org/bukkit/block/CommandBlock.java
index 85d5345..e53aeb7 100644
--- a/src/main/java/org/bukkit/block/CommandBlock.java
+++ b/src/main/java/org/bukkit/block/CommandBlock.java
@@ -9,7 +9,7 @@ public interface CommandBlock extends BlockState {
      *
      * @return Command that this CommandBlock will run when powered.
      */
-    public String getCommand();
+    String getCommand();
 
     /**
      * Sets the command that this CommandBlock will run when powered.
@@ -18,7 +18,7 @@ public interface CommandBlock extends BlockState {
      *
      * @param command Command that this CommandBlock will run when powered.
      */
-    public void setCommand(String command);
+    void setCommand(String command);
 
     /**
      * Gets the name of this CommandBlock.  The name is used with commands
@@ -27,7 +27,7 @@ public interface CommandBlock extends BlockState {
      *
      * @return Name of this CommandBlock.
      */
-    public String getName();
+    String getName();
 
     /**
      * Sets the name of this CommandBlock.  The name is used with commands
@@ -36,5 +36,5 @@ public interface CommandBlock extends BlockState {
      *
      * @param name New name for this CommandBlock.
      */
-    public void setName(String name);
+    void setName(String name);
 }
diff --git a/src/main/java/org/bukkit/block/ContainerBlock.java b/src/main/java/org/bukkit/block/ContainerBlock.java
index c69ac9e..514a5f5 100644
--- a/src/main/java/org/bukkit/block/ContainerBlock.java
+++ b/src/main/java/org/bukkit/block/ContainerBlock.java
@@ -8,4 +8,6 @@ import org.bukkit.inventory.InventoryHolder;
  * @deprecated in favour of {@link InventoryHolder}
  */
 @Deprecated
-public interface ContainerBlock extends InventoryHolder {}
+public interface ContainerBlock extends InventoryHolder {
+
+}
diff --git a/src/main/java/org/bukkit/block/CreatureSpawner.java b/src/main/java/org/bukkit/block/CreatureSpawner.java
index e54d997..1a85c3a 100644
--- a/src/main/java/org/bukkit/block/CreatureSpawner.java
+++ b/src/main/java/org/bukkit/block/CreatureSpawner.java
@@ -15,30 +15,30 @@ public interface CreatureSpawner extends BlockState {
      * @deprecated In favour of {@link #getSpawnedType()}.
      */
     @Deprecated
-    public CreatureType getCreatureType();
+    CreatureType getCreatureType();
 
     /**
-     * Get the spawner's creature type.
+     * Set the spawner creature type.
      *
-     * @return The creature type.
+     * @param creatureType The creature type.
+     * @deprecated In favour of {@link #setSpawnedType(EntityType)}.
      */
-    public EntityType getSpawnedType();
+    @Deprecated
+    void setCreatureType(CreatureType creatureType);
 
     /**
-     * Set the spawner's creature type.
+     * Get the spawner's creature type.
      *
-     * @param creatureType The creature type.
+     * @return The creature type.
      */
-    public void setSpawnedType(EntityType creatureType);
+    EntityType getSpawnedType();
 
     /**
-     * Set the spawner creature type.
+     * Set the spawner's creature type.
      *
      * @param creatureType The creature type.
-     * @deprecated In favour of {@link #setSpawnedType(EntityType)}.
      */
-    @Deprecated
-    public void setCreatureType(CreatureType creatureType);
+    void setSpawnedType(EntityType creatureType);
 
     /**
      * Get the spawner's creature type.
@@ -47,42 +47,42 @@ public interface CreatureSpawner extends BlockState {
      * @deprecated Use {@link #getCreatureTypeName()}.
      */
     @Deprecated
-    public String getCreatureTypeId();
+    String getCreatureTypeId();
 
     /**
      * Set the spawner mob type.
      *
      * @param creatureType The creature type's name.
+     * @deprecated Use {@link #setCreatureTypeByName(String)}.
      */
-    public void setCreatureTypeByName(String creatureType);
+    @Deprecated
+    void setCreatureTypeId(String creatureType);
 
     /**
-     * Get the spawner's creature type.
+     * Set the spawner mob type.
      *
-     * @return The creature type's name.
+     * @param creatureType The creature type's name.
      */
-    public String getCreatureTypeName();
+    void setCreatureTypeByName(String creatureType);
 
     /**
-     * Set the spawner mob type.
+     * Get the spawner's creature type.
      *
-     * @param creatureType The creature type's name.
-     * @deprecated Use {@link #setCreatureTypeByName(String)}.
+     * @return The creature type's name.
      */
-    @Deprecated
-    public void setCreatureTypeId(String creatureType);
+    String getCreatureTypeName();
 
     /**
      * Get the spawner's delay.
      *
      * @return The delay.
      */
-    public int getDelay();
+    int getDelay();
 
     /**
      * Set the spawner's delay.
      *
      * @param delay The delay.
      */
-    public void setDelay(int delay);
+    void setDelay(int delay);
 }
diff --git a/src/main/java/org/bukkit/block/Dispenser.java b/src/main/java/org/bukkit/block/Dispenser.java
index bba753e..e2dd08c 100644
--- a/src/main/java/org/bukkit/block/Dispenser.java
+++ b/src/main/java/org/bukkit/block/Dispenser.java
@@ -14,7 +14,7 @@ public interface Dispenser extends BlockState, ContainerBlock {
      *
      * @return a BlockProjectileSource if valid, otherwise null
      */
-    public BlockProjectileSource getBlockProjectileSource();
+    BlockProjectileSource getBlockProjectileSource();
 
     /**
      * Attempts to dispense the contents of this block.
@@ -23,5 +23,5 @@ public interface Dispenser extends BlockState, ContainerBlock {
      *
      * @return true if successful, otherwise false
      */
-    public boolean dispense();
+    boolean dispense();
 }
diff --git a/src/main/java/org/bukkit/block/DoubleChest.java b/src/main/java/org/bukkit/block/DoubleChest.java
index 148099c..ffa956e 100644
--- a/src/main/java/org/bukkit/block/DoubleChest.java
+++ b/src/main/java/org/bukkit/block/DoubleChest.java
@@ -10,6 +10,7 @@ import org.bukkit.inventory.InventoryHolder;
  * Represents a double chest.
  */
 public class DoubleChest implements InventoryHolder {
+
     private DoubleChestInventory inventory;
 
     public DoubleChest(DoubleChestInventory chest) {
@@ -33,18 +34,18 @@ public class DoubleChest implements InventoryHolder {
     }
 
     public World getWorld() {
-        return ((Chest)getLeftSide()).getWorld();
+        return ((Chest) getLeftSide()).getWorld();
     }
 
     public double getX() {
-        return 0.5 * (((Chest)getLeftSide()).getX() + ((Chest)getRightSide()).getX());
+        return 0.5 * (((Chest) getLeftSide()).getX() + ((Chest) getRightSide()).getX());
     }
 
     public double getY() {
-        return 0.5 * (((Chest)getLeftSide()).getY() + ((Chest)getRightSide()).getY());
+        return 0.5 * (((Chest) getLeftSide()).getY() + ((Chest) getRightSide()).getY());
     }
 
     public double getZ() {
-        return 0.5 * (((Chest)getLeftSide()).getZ() + ((Chest)getRightSide()).getZ());
+        return 0.5 * (((Chest) getLeftSide()).getZ() + ((Chest) getRightSide()).getZ());
     }
 }
diff --git a/src/main/java/org/bukkit/block/Dropper.java b/src/main/java/org/bukkit/block/Dropper.java
index 21fbedc..c55f22c 100644
--- a/src/main/java/org/bukkit/block/Dropper.java
+++ b/src/main/java/org/bukkit/block/Dropper.java
@@ -6,6 +6,7 @@ import org.bukkit.inventory.InventoryHolder;
  * Represents a dropper.
  */
 public interface Dropper extends BlockState, InventoryHolder {
+
     /**
      * Tries to drop a randomly selected item from the Dropper's inventory,
      * following the normal behavior of a Dropper.
@@ -13,7 +14,7 @@ public interface Dropper extends BlockState, InventoryHolder {
      * Normal behavior of a Dropper is as follows:
      * <p>
      * If the block that the Dropper is facing is an InventoryHolder or
-     * ContainerBlock the randomly selected ItemStack is placed within that 
+     * ContainerBlock the randomly selected ItemStack is placed within that
      * Inventory in the first slot that's available, starting with 0 and
      * counting up.  If the inventory is full, nothing happens.
      * <p>
@@ -21,5 +22,5 @@ public interface Dropper extends BlockState, InventoryHolder {
      * ContainerBlock, the randomly selected ItemStack is dropped on
      * the ground in the form of an {@link org.bukkit.entity.Item Item}.
      */
-     public void drop();
+    void drop();
 }
diff --git a/src/main/java/org/bukkit/block/Furnace.java b/src/main/java/org/bukkit/block/Furnace.java
index 94af85e..1bf37e8 100644
--- a/src/main/java/org/bukkit/block/Furnace.java
+++ b/src/main/java/org/bukkit/block/Furnace.java
@@ -12,28 +12,28 @@ public interface Furnace extends BlockState, ContainerBlock {
      *
      * @return Burn time
      */
-    public short getBurnTime();
+    short getBurnTime();
 
     /**
      * Set burn time.
      *
      * @param burnTime Burn time
      */
-    public void setBurnTime(short burnTime);
+    void setBurnTime(short burnTime);
 
     /**
      * Get cook time.
      *
      * @return Cook time
      */
-    public short getCookTime();
+    short getCookTime();
 
     /**
      * Set cook time.
      *
      * @param cookTime Cook time
      */
-    public void setCookTime(short cookTime);
+    void setCookTime(short cookTime);
 
-    public FurnaceInventory getInventory();
+    FurnaceInventory getInventory();
 }
diff --git a/src/main/java/org/bukkit/block/Jukebox.java b/src/main/java/org/bukkit/block/Jukebox.java
index 7b45b83..76ef428 100644
--- a/src/main/java/org/bukkit/block/Jukebox.java
+++ b/src/main/java/org/bukkit/block/Jukebox.java
@@ -6,31 +6,32 @@ import org.bukkit.Material;
  * Represents a Jukebox
  */
 public interface Jukebox extends BlockState {
+
     /**
      * Get the record currently playing
      *
      * @return The record Material, or AIR if none is playing
      */
-    public Material getPlaying();
+    Material getPlaying();
 
     /**
-     * Set the record currently playing
+     * Check if the jukebox is currently playing a record
      *
-     * @param record The record Material, or null/AIR to stop playing
+     * @return True if there is a record playing
      */
-    public void setPlaying(Material record);
+    boolean isPlaying();
 
     /**
-     * Check if the jukebox is currently playing a record
+     * Set the record currently playing
      *
-     * @return True if there is a record playing
+     * @param record The record Material, or null/AIR to stop playing
      */
-    public boolean isPlaying();
+    void setPlaying(Material record);
 
     /**
      * Stop the jukebox playing and eject the current record
      *
      * @return True if a record was ejected; false if there was none playing
      */
-    public boolean eject();
+    boolean eject();
 }
diff --git a/src/main/java/org/bukkit/block/NoteBlock.java b/src/main/java/org/bukkit/block/NoteBlock.java
index 8380068..44799a9 100644
--- a/src/main/java/org/bukkit/block/NoteBlock.java
+++ b/src/main/java/org/bukkit/block/NoteBlock.java
@@ -11,34 +11,34 @@ public interface NoteBlock extends BlockState {
     /**
      * Gets the note.
      *
-     * @return The note.
+     * @return The note ID.
+     * @deprecated Magic value
      */
-    public Note getNote();
+    @Deprecated
+    byte getRawNote();
 
     /**
-     * Gets the note.
+     * Set the note.
      *
-     * @return The note ID.
+     * @param note The note ID.
      * @deprecated Magic value
      */
     @Deprecated
-    public byte getRawNote();
+    void setRawNote(byte note);
 
     /**
-     * Set the note.
+     * Gets the note.
      *
-     * @param note The note.
+     * @return The note.
      */
-    public void setNote(Note note);
+    Note getNote();
 
     /**
      * Set the note.
      *
-     * @param note The note ID.
-     * @deprecated Magic value
+     * @param note The note.
      */
-    @Deprecated
-    public void setRawNote(byte note);
+    void setNote(Note note);
 
     /**
      * Attempts to play the note at block
@@ -47,26 +47,26 @@ public interface NoteBlock extends BlockState {
      *
      * @return true if successful, otherwise false
      */
-    public boolean play();
+    boolean play();
 
     /**
      * Plays an arbitrary note with an arbitrary instrument
      *
      * @param instrument Instrument ID
-     * @param note Note ID
+     * @param note       Note ID
      * @return true if successful, otherwise false
      * @deprecated Magic value
      */
     @Deprecated
-    public boolean play(byte instrument, byte note);
+    boolean play(byte instrument, byte note);
 
     /**
      * Plays an arbitrary note with an arbitrary instrument
      *
      * @param instrument The instrument
-     * @param note The note
+     * @param note       The note
      * @return true if successful, otherwise false
      * @see Instrument Note
      */
-    public boolean play(Instrument instrument, Note note);
+    boolean play(Instrument instrument, Note note);
 }
diff --git a/src/main/java/org/bukkit/block/PistonMoveReaction.java b/src/main/java/org/bukkit/block/PistonMoveReaction.java
index e5279f7..133f739 100644
--- a/src/main/java/org/bukkit/block/PistonMoveReaction.java
+++ b/src/main/java/org/bukkit/block/PistonMoveReaction.java
@@ -9,43 +9,47 @@ public enum PistonMoveReaction {
      * Indicates that the block can be pushed or pulled.
      */
     MOVE(0),
+
     /**
      * Indicates the block is fragile and will break if pushed on.
      */
     BREAK(1),
+
     /**
      * Indicates that the block will resist being pushed or pulled.
      */
     BLOCK(2);
 
-    private int id;
-    private static Map<Integer, PistonMoveReaction> byId = new HashMap<Integer, PistonMoveReaction>();
+    private static final Map<Integer, PistonMoveReaction> byId = new HashMap<Integer, PistonMoveReaction>();
+
     static {
         for (PistonMoveReaction reaction : PistonMoveReaction.values()) {
             byId.put(reaction.id, reaction);
         }
     }
 
-    private PistonMoveReaction(int id) {
+    private int id;
+
+    PistonMoveReaction(int id) {
         this.id = id;
     }
 
     /**
-     * @return The ID of the move reaction
+     * @param id An ID
+     * @return The move reaction with that ID
      * @deprecated Magic value
      */
     @Deprecated
-    public int getId() {
-        return this.id;
+    public static PistonMoveReaction getById(int id) {
+        return byId.get(id);
     }
 
     /**
-     * @param id An ID
-     * @return The move reaction with that ID
+     * @return The ID of the move reaction
      * @deprecated Magic value
      */
     @Deprecated
-    public static PistonMoveReaction getById(int id) {
-        return byId.get(id);
+    public int getId() {
+        return this.id;
     }
 }
diff --git a/src/main/java/org/bukkit/block/Sign.java b/src/main/java/org/bukkit/block/Sign.java
index 5d7a633..e409f0b 100644
--- a/src/main/java/org/bukkit/block/Sign.java
+++ b/src/main/java/org/bukkit/block/Sign.java
@@ -10,7 +10,7 @@ public interface Sign extends BlockState {
      *
      * @return Array of Strings containing each line of text
      */
-    public String[] getLines();
+    String[] getLines();
 
     /**
      * Gets the line of text at the specified index.
@@ -18,10 +18,10 @@ public interface Sign extends BlockState {
      * For example, getLine(0) will return the first line of text.
      *
      * @param index Line number to get the text from, starting at 0
-     * @throws IndexOutOfBoundsException Thrown when the line does not exist
      * @return Text on the given line
+     * @throws IndexOutOfBoundsException Thrown when the line does not exist
      */
-    public String getLine(int index) throws IndexOutOfBoundsException;
+    String getLine(int index) throws IndexOutOfBoundsException;
 
     /**
      * Sets the line of text at the specified index.
@@ -30,8 +30,8 @@ public interface Sign extends BlockState {
      * "Line One".
      *
      * @param index Line number to set the text at, starting from 0
-     * @param line New text to set at the specified index
+     * @param line  New text to set at the specified index
      * @throws IndexOutOfBoundsException If the index is out of the range 0..3
      */
-    public void setLine(int index, String line) throws IndexOutOfBoundsException;
+    void setLine(int index, String line) throws IndexOutOfBoundsException;
 }
diff --git a/src/main/java/org/bukkit/block/Skull.java b/src/main/java/org/bukkit/block/Skull.java
index 4f4896f..a5fcb2a 100644
--- a/src/main/java/org/bukkit/block/Skull.java
+++ b/src/main/java/org/bukkit/block/Skull.java
@@ -12,14 +12,14 @@ public interface Skull extends BlockState {
      *
      * @return true if the skull has an owner
      */
-    public boolean hasOwner();
+    boolean hasOwner();
 
     /**
      * Gets the owner of the skull, if one exists
      *
      * @return the owner of the skull or null if the skull does not have an owner
      */
-    public String getOwner();
+    String getOwner();
 
     /**
      * Sets the owner of the skull
@@ -30,33 +30,33 @@ public interface Skull extends BlockState {
      * @param name the new owner of the skull
      * @return true if the owner was successfully set
      */
-    public boolean setOwner(String name);
+    boolean setOwner(String name);
 
     /**
      * Gets the rotation of the skull in the world
      *
      * @return the rotation of the skull
      */
-    public BlockFace getRotation();
+    BlockFace getRotation();
 
     /**
      * Sets the rotation of the skull in the world
      *
      * @param rotation the rotation of the skull
      */
-    public void setRotation(BlockFace rotation);
+    void setRotation(BlockFace rotation);
 
     /**
      * Gets the type of skull
      *
      * @return the type of skull
      */
-    public SkullType getSkullType();
+    SkullType getSkullType();
 
     /**
      * Sets the type of skull
      *
      * @param skullType the type of skull
      */
-    public void setSkullType(SkullType skullType);
+    void setSkullType(SkullType skullType);
 }
diff --git a/src/main/java/org/bukkit/command/BlockCommandSender.java b/src/main/java/org/bukkit/command/BlockCommandSender.java
index ce229d2..881912d 100644
--- a/src/main/java/org/bukkit/command/BlockCommandSender.java
+++ b/src/main/java/org/bukkit/command/BlockCommandSender.java
@@ -9,5 +9,5 @@ public interface BlockCommandSender extends CommandSender {
      *
      * @return Block for the command sender
      */
-    public Block getBlock();
+    Block getBlock();
 }
diff --git a/src/main/java/org/bukkit/command/Command.java b/src/main/java/org/bukkit/command/Command.java
index 31e4f66..e89569b 100644
--- a/src/main/java/org/bukkit/command/Command.java
+++ b/src/main/java/org/bukkit/command/Command.java
@@ -1,10 +1,6 @@
 package org.bukkit.command;
 
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
-import java.util.Set;
-
+import com.google.common.collect.ImmutableList;
 import org.apache.commons.lang.Validate;
 import org.bukkit.Bukkit;
 import org.bukkit.ChatColor;
@@ -15,23 +11,27 @@ import org.bukkit.permissions.Permissible;
 import org.bukkit.plugin.PluginDescriptionFile;
 import org.bukkit.util.StringUtil;
 
-import com.google.common.collect.ImmutableList;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+import java.util.Set;
 
 /**
  * Represents a Command, which executes various tasks upon user input
  */
 public abstract class Command {
+
     private final String name;
+    public org.spigotmc.CustomTimingsHandler timings; // Spigot
+    protected String description = "";
+    protected String usageMessage;
     private String nextLabel;
     private String label;
     private List<String> aliases;
     private List<String> activeAliases;
     private CommandMap commandMap = null;
-    protected String description = "";
-    protected String usageMessage;
     private String permission;
     private String permissionMessage;
-    public org.spigotmc.CustomTimingsHandler timings; // Spigot
 
     protected Command(String name) {
         this(name, "", "/" + name, new ArrayList<String>());
@@ -48,12 +48,55 @@ public abstract class Command {
         this.timings = new org.spigotmc.CustomTimingsHandler("** Command: " + name); // Spigot
     }
 
+    public static void broadcastCommandMessage(CommandSender source, String message) {
+        broadcastCommandMessage(source, message, true);
+    }
+
+    public static void broadcastCommandMessage(CommandSender source, String message, boolean sendToSource) {
+        String result = source.getName() + ": " + message;
+
+        if (source instanceof BlockCommandSender) {
+            BlockCommandSender blockCommandSender = (BlockCommandSender) source;
+
+            if (blockCommandSender.getBlock().getWorld().getGameRuleValue("commandBlockOutput").equalsIgnoreCase("false")) {
+                Bukkit.getConsoleSender().sendMessage(result);
+                return;
+            }
+        } else if (source instanceof CommandMinecart) {
+            CommandMinecart commandMinecart = (CommandMinecart) source;
+
+            if (commandMinecart.getWorld().getGameRuleValue("commandBlockOutput").equalsIgnoreCase("false")) {
+                Bukkit.getConsoleSender().sendMessage(result);
+                return;
+            }
+        }
+
+        Set<Permissible> users = Bukkit.getPluginManager().getPermissionSubscriptions(Server.BROADCAST_CHANNEL_ADMINISTRATIVE);
+        String colored = ChatColor.GRAY + "" + ChatColor.ITALIC + "[" + result + ChatColor.GRAY + ChatColor.ITALIC + "]";
+
+        if (sendToSource && !(source instanceof ConsoleCommandSender)) {
+            source.sendMessage(message);
+        }
+
+        for (Permissible user : users) {
+            if (user instanceof CommandSender) {
+                CommandSender target = (CommandSender) user;
+
+                if (target instanceof ConsoleCommandSender) {
+                    target.sendMessage(result);
+                } else if (target != source) {
+                    target.sendMessage(colored);
+                }
+            }
+        }
+    }
+
     /**
      * Executes the command, returning its success
      *
-     * @param sender Source object which is executing this command
+     * @param sender       Source object which is executing this command
      * @param commandLabel The alias of the command used
-     * @param args All arguments passed to the command, split via ' '
+     * @param args         All arguments passed to the command, split via ' '
      * @return true if the command was successful, otherwise false
      */
     public abstract boolean execute(CommandSender sender, String commandLabel, String[] args);
@@ -71,10 +114,10 @@ public abstract class Command {
      * options the player can tab through.
      *
      * @param sender Source object which is executing this command
-     * @param alias the alias being used
-     * @param args All arguments passed to the command, split via ' '
+     * @param alias  the alias being used
+     * @param args   All arguments passed to the command, split via ' '
      * @return a list of tab-completions for the specified arguments. This
-     *     will never be null. List may be immutable.
+     * will never be null. List may be immutable.
      * @throws IllegalArgumentException if sender, alias, or args is null
      */
     public List<String> tabComplete(CommandSender sender, String alias, String[] args) throws IllegalArgumentException {
@@ -197,7 +240,7 @@ public abstract class Command {
      *
      * @param name The command's name
      * @return returns true if the name change happened instantly or false if
-     *     it was scheduled for re-registration
+     * it was scheduled for re-registration
      */
     public boolean setLabel(String name) {
         this.nextLabel = name;
@@ -215,7 +258,7 @@ public abstract class Command {
      *
      * @param commandMap the CommandMap to register this command to
      * @return true if the registration was successful (the current registered
-     *     CommandMap was the passed CommandMap or null) false otherwise
+     * CommandMap was the passed CommandMap or null) false otherwise
      */
     public boolean register(CommandMap commandMap) {
         if (allowChangesFrom(commandMap)) {
@@ -232,8 +275,8 @@ public abstract class Command {
      *
      * @param commandMap the CommandMap to unregister
      * @return true if the unregistration was successfull (the current
-     *     registered CommandMap was the passed CommandMap or null) false
-     *     otherwise
+     * registered CommandMap was the passed CommandMap or null) false
+     * otherwise
      */
     public boolean unregister(CommandMap commandMap) {
         if (allowChangesFrom(commandMap)) {
@@ -269,48 +312,51 @@ public abstract class Command {
     }
 
     /**
-     * Returns a message to be displayed on a failed permission check for this
-     * command
+     * Sets the list of aliases to request on registration for this command.
+     * This is not effective outside of defining aliases in the {@link
+     * PluginDescriptionFile#getCommands()} (under the
+     * `<code>aliases</code>' node) is equivalent to this method.
      *
-     * @return Permission check failed message
+     * @param aliases aliases to register to this command
+     * @return this command object, for chaining
      */
-    public String getPermissionMessage() {
-        return permissionMessage;
+    public Command setAliases(List<String> aliases) {
+        this.aliases = aliases;
+        if (!isRegistered()) {
+            this.activeAliases = new ArrayList<String>(aliases);
+        }
+        return this;
     }
 
     /**
-     * Gets a brief description of this command
+     * Returns a message to be displayed on a failed permission check for this
+     * command
      *
-     * @return Description of this command
+     * @return Permission check failed message
      */
-    public String getDescription() {
-        return description;
+    public String getPermissionMessage() {
+        return permissionMessage;
     }
 
     /**
-     * Gets an example usage of this command
+     * Sets the message sent when a permission check fails
      *
-     * @return One or more example usages
+     * @param permissionMessage new permission message, null to indicate
+     *                          default message, or an empty string to indicate no message
+     * @return this command object, for chaining
      */
-    public String getUsage() {
-        return usageMessage;
+    public Command setPermissionMessage(String permissionMessage) {
+        this.permissionMessage = permissionMessage;
+        return this;
     }
 
     /**
-     * Sets the list of aliases to request on registration for this command.
-     * This is not effective outside of defining aliases in the {@link
-     * PluginDescriptionFile#getCommands()} (under the
-     * `<code>aliases</code>' node) is equivalent to this method.
+     * Gets a brief description of this command
      *
-     * @param aliases aliases to register to this command
-     * @return this command object, for chaining
+     * @return Description of this command
      */
-    public Command setAliases(List<String> aliases) {
-        this.aliases = aliases;
-        if (!isRegistered()) {
-            this.activeAliases = new ArrayList<String>(aliases);
-        }
-        return this;
+    public String getDescription() {
+        return description;
     }
 
     /**
@@ -327,15 +373,12 @@ public abstract class Command {
     }
 
     /**
-     * Sets the message sent when a permission check fails
+     * Gets an example usage of this command
      *
-     * @param permissionMessage new permission message, null to indicate
-     *     default message, or an empty string to indicate no message
-     * @return this command object, for chaining
+     * @return One or more example usages
      */
-    public Command setPermissionMessage(String permissionMessage) {
-        this.permissionMessage = permissionMessage;
-        return this;
+    public String getUsage() {
+        return usageMessage;
     }
 
     /**
@@ -349,49 +392,6 @@ public abstract class Command {
         return this;
     }
 
-    public static void broadcastCommandMessage(CommandSender source, String message) {
-        broadcastCommandMessage(source, message, true);
-    }
-
-    public static void broadcastCommandMessage(CommandSender source, String message, boolean sendToSource) {
-        String result = source.getName() + ": " + message;
-
-        if (source instanceof BlockCommandSender) {
-            BlockCommandSender blockCommandSender = (BlockCommandSender) source;
-
-            if (blockCommandSender.getBlock().getWorld().getGameRuleValue("commandBlockOutput").equalsIgnoreCase("false")) {
-                Bukkit.getConsoleSender().sendMessage(result);
-                return;
-            }
-        } else if (source instanceof CommandMinecart) {
-            CommandMinecart commandMinecart = (CommandMinecart) source;
-
-            if (commandMinecart.getWorld().getGameRuleValue("commandBlockOutput").equalsIgnoreCase("false")) {
-                Bukkit.getConsoleSender().sendMessage(result);
-                return;
-            }
-        }
-
-        Set<Permissible> users = Bukkit.getPluginManager().getPermissionSubscriptions(Server.BROADCAST_CHANNEL_ADMINISTRATIVE);
-        String colored = ChatColor.GRAY + "" + ChatColor.ITALIC + "[" + result + ChatColor.GRAY + ChatColor.ITALIC + "]";
-
-        if (sendToSource && !(source instanceof ConsoleCommandSender)) {
-            source.sendMessage(message);
-        }
-
-        for (Permissible user : users) {
-            if (user instanceof CommandSender) {
-                CommandSender target = (CommandSender) user;
-
-                if (target instanceof ConsoleCommandSender) {
-                    target.sendMessage(result);
-                } else if (target != source) {
-                    target.sendMessage(colored);
-                }
-            }
-        }
-    }
-
     @Override
     public String toString() {
         return getClass().getName() + '(' + name + ')';
diff --git a/src/main/java/org/bukkit/command/CommandException.java b/src/main/java/org/bukkit/command/CommandException.java
index b63015f..e71752e 100644
--- a/src/main/java/org/bukkit/command/CommandException.java
+++ b/src/main/java/org/bukkit/command/CommandException.java
@@ -10,7 +10,9 @@ public class CommandException extends RuntimeException {
      * Creates a new instance of <code>CommandException</code> without detail
      * message.
      */
-    public CommandException() {}
+    public CommandException() {
+
+    }
 
     /**
      * Constructs an instance of <code>CommandException</code> with the
diff --git a/src/main/java/org/bukkit/command/CommandExecutor.java b/src/main/java/org/bukkit/command/CommandExecutor.java
index c75586f..d1fbbeb 100644
--- a/src/main/java/org/bukkit/command/CommandExecutor.java
+++ b/src/main/java/org/bukkit/command/CommandExecutor.java
@@ -8,11 +8,11 @@ public interface CommandExecutor {
     /**
      * Executes the given command, returning its success
      *
-     * @param sender Source of the command
+     * @param sender  Source of the command
      * @param command Command which was executed
-     * @param label Alias of the command which was used
-     * @param args Passed command arguments
+     * @param label   Alias of the command which was used
+     * @param args    Passed command arguments
      * @return true if a valid command, otherwise false
      */
-    public boolean onCommand(CommandSender sender, Command command, String label, String[] args);
+    boolean onCommand(CommandSender sender, Command command, String label, String[] args);
 }
diff --git a/src/main/java/org/bukkit/command/CommandMap.java b/src/main/java/org/bukkit/command/CommandMap.java
index e7e20d8..ea1bbd6 100644
--- a/src/main/java/org/bukkit/command/CommandMap.java
+++ b/src/main/java/org/bukkit/command/CommandMap.java
@@ -10,16 +10,16 @@ public interface CommandMap {
      * Caller can use:-
      * <ul>
      * <li>command.getName() to determine the label registered for this
-     *     command
+     * command
      * <li>command.getAliases() to determine the aliases which where
-     *     registered
+     * registered
      * </ul>
      *
      * @param fallbackPrefix a prefix which is prepended to each command with
-     *     a ':' one or more times to make the command unique
-     * @param commands a list of commands to register
+     *                       a ':' one or more times to make the command unique
+     * @param commands       a list of commands to register
      */
-    public void registerAll(String fallbackPrefix, List<Command> commands);
+    void registerAll(String fallbackPrefix, List<Command> commands);
 
     /**
      * Registers a command. Returns true on success; false if name is already
@@ -28,20 +28,20 @@ public interface CommandMap {
      * Caller can use:-
      * <ul>
      * <li>command.getName() to determine the label registered for this
-     *     command
+     * command
      * <li>command.getAliases() to determine the aliases which where
-     *     registered
+     * registered
      * </ul>
      *
-     * @param label the label of the command, without the '/'-prefix.
+     * @param label          the label of the command, without the '/'-prefix.
      * @param fallbackPrefix a prefix which is prepended to the command with a
-     *     ':' one or more times to make the command unique
-     * @param command the command to register
+     *                       ':' one or more times to make the command unique
+     * @param command        the command to register
      * @return true if command was registered with the passed in label, false
-     *     otherwise, which indicates the fallbackPrefix was used one or more
-     *     times
+     * otherwise, which indicates the fallbackPrefix was used one or more
+     * times
      */
-    public boolean register(String label, String fallbackPrefix, Command command);
+    boolean register(String label, String fallbackPrefix, Command command);
 
     /**
      * Registers a command. Returns true on success; false if name is already
@@ -50,60 +50,59 @@ public interface CommandMap {
      * Caller can use:-
      * <ul>
      * <li>command.getName() to determine the label registered for this
-     *     command
+     * command
      * <li>command.getAliases() to determine the aliases which where
-     *     registered
+     * registered
      * </ul>
      *
      * @param fallbackPrefix a prefix which is prepended to the command with a
-     *     ':' one or more times to make the command unique
-     * @param command the command to register, from which label is determined
-     *     from the command name
+     *                       ':' one or more times to make the command unique
+     * @param command        the command to register, from which label is determined
+     *                       from the command name
      * @return true if command was registered with the passed in label, false
-     *     otherwise, which indicates the fallbackPrefix was used one or more
-     *     times
+     * otherwise, which indicates the fallbackPrefix was used one or more
+     * times
      */
-    public boolean register(String fallbackPrefix, Command command);
+    boolean register(String fallbackPrefix, Command command);
 
     /**
      * Looks for the requested command and executes it if found.
      *
-     * @param sender The command's sender
+     * @param sender  The command's sender
      * @param cmdLine command + arguments. Example: "/test abc 123"
      * @return returns false if no target is found, true otherwise.
      * @throws CommandException Thrown when the executor for the given command
-     *     fails with an unhandled exception
+     *                          fails with an unhandled exception
      */
-    public boolean dispatch(CommandSender sender, String cmdLine) throws CommandException;
+    boolean dispatch(CommandSender sender, String cmdLine) throws CommandException;
 
     /**
      * Clears all registered commands.
      */
-    public void clearCommands();
+    void clearCommands();
 
     /**
      * Gets the command registered to the specified name
      *
      * @param name Name of the command to retrieve
      * @return Command with the specified name or null if a command with that
-     *     label doesn't exist
+     * label doesn't exist
      */
-    public Command getCommand(String name);
-
+    Command getCommand(String name);
 
     /**
      * Looks for the requested command and executes an appropriate
      * tab-completer if found. This method will also tab-complete partial
      * commands.
      *
-     * @param sender The command's sender.
+     * @param sender  The command's sender.
      * @param cmdLine The entire command string to tab-complete, excluding
-     *     initial slash.
+     *                initial slash.
      * @return a list of possible tab-completions. This list may be immutable.
-     *     Will be null if no matching command of which sender has permission.
-     * @throws CommandException Thrown when the tab-completer for the given
-     *     command fails with an unhandled exception
+     * Will be null if no matching command of which sender has permission.
+     * @throws CommandException         Thrown when the tab-completer for the given
+     *                                  command fails with an unhandled exception
      * @throws IllegalArgumentException if either sender or cmdLine are null
      */
-    public List<String> tabComplete(CommandSender sender, String cmdLine) throws IllegalArgumentException;
+    List<String> tabComplete(CommandSender sender, String cmdLine) throws IllegalArgumentException;
 }
diff --git a/src/main/java/org/bukkit/command/CommandSender.java b/src/main/java/org/bukkit/command/CommandSender.java
index 148756b..cfe1c6e 100644
--- a/src/main/java/org/bukkit/command/CommandSender.java
+++ b/src/main/java/org/bukkit/command/CommandSender.java
@@ -10,26 +10,26 @@ public interface CommandSender extends Permissible {
      *
      * @param message Message to be displayed
      */
-    public void sendMessage(String message);
+    void sendMessage(String message);
 
     /**
      * Sends this sender multiple messages
      *
      * @param messages An array of messages to be displayed
      */
-    public void sendMessage(String[] messages);
+    void sendMessage(String[] messages);
 
     /**
      * Returns the server instance that this command is running on
      *
      * @return Server instance
      */
-    public Server getServer();
+    Server getServer();
 
     /**
      * Gets the name of this command sender
      *
      * @return Name of the sender
      */
-    public String getName();
+    String getName();
 }
diff --git a/src/main/java/org/bukkit/command/ConsoleCommandSender.java b/src/main/java/org/bukkit/command/ConsoleCommandSender.java
index f309c2e..084fd21 100644
--- a/src/main/java/org/bukkit/command/ConsoleCommandSender.java
+++ b/src/main/java/org/bukkit/command/ConsoleCommandSender.java
@@ -3,4 +3,5 @@ package org.bukkit.command;
 import org.bukkit.conversations.Conversable;
 
 public interface ConsoleCommandSender extends CommandSender, Conversable {
+
 }
diff --git a/src/main/java/org/bukkit/command/FormattedCommandAlias.java b/src/main/java/org/bukkit/command/FormattedCommandAlias.java
index 3f07d7f..11b49f7 100644
--- a/src/main/java/org/bukkit/command/FormattedCommandAlias.java
+++ b/src/main/java/org/bukkit/command/FormattedCommandAlias.java
@@ -1,15 +1,11 @@
 package org.bukkit.command;
 
-import java.util.ArrayList;
-import java.util.logging.Level;
-
 import org.bukkit.Bukkit;
-import org.bukkit.entity.Player;
-import org.bukkit.event.player.PlayerCommandPreprocessEvent;
-import org.bukkit.event.server.RemoteServerCommandEvent;
-import org.bukkit.event.server.ServerCommandEvent;
+
+import java.util.ArrayList;
 
 public class FormattedCommandAlias extends Command {
+
     private final String[] formatStrings;
 
     public FormattedCommandAlias(String alias, String[] formatStrings) {
@@ -17,6 +13,10 @@ public class FormattedCommandAlias extends Command {
         this.formatStrings = formatStrings;
     }
 
+    private static boolean inRange(int i, int j, int k) {
+        return i >= j && i <= k;
+    }
+
     @Override
     public boolean execute(CommandSender sender, String commandLabel, String[] args) {
         boolean result = false;
@@ -117,8 +117,4 @@ public class FormattedCommandAlias extends Command {
 
         return formatString;
     }
-
-    private static boolean inRange(int i, int j, int k) {
-        return i >= j && i <= k;
-    }
 }
diff --git a/src/main/java/org/bukkit/command/MultipleCommandAlias.java b/src/main/java/org/bukkit/command/MultipleCommandAlias.java
index a0a4129..d978256 100644
--- a/src/main/java/org/bukkit/command/MultipleCommandAlias.java
+++ b/src/main/java/org/bukkit/command/MultipleCommandAlias.java
@@ -4,6 +4,7 @@ package org.bukkit.command;
  * Represents a command that delegates to one or more other commands
  */
 public class MultipleCommandAlias extends Command {
+
     private Command[] commands;
 
     public MultipleCommandAlias(String name, Command[] commands) {
diff --git a/src/main/java/org/bukkit/command/PluginCommand.java b/src/main/java/org/bukkit/command/PluginCommand.java
index 3bfa31f..c6f1d25 100644
--- a/src/main/java/org/bukkit/command/PluginCommand.java
+++ b/src/main/java/org/bukkit/command/PluginCommand.java
@@ -1,14 +1,15 @@
 package org.bukkit.command;
 
-import java.util.List;
-
 import org.apache.commons.lang.Validate;
 import org.bukkit.plugin.Plugin;
 
+import java.util.List;
+
 /**
  * Represents a {@link Command} belonging to a plugin
  */
 public final class PluginCommand extends Command implements PluginIdentifiableCommand {
+
     private final Plugin owningPlugin;
     private CommandExecutor executor;
     private TabCompleter completer;
@@ -23,9 +24,9 @@ public final class PluginCommand extends Command implements PluginIdentifiableCo
     /**
      * Executes the command, returning its success
      *
-     * @param sender Source object which is executing this command
+     * @param sender       Source object which is executing this command
      * @param commandLabel The alias of the command used
-     * @param args All arguments passed to the command, split via ' '
+     * @param args         All arguments passed to the command, split via ' '
      * @return true if the command was successful, otherwise false
      */
     @Override
@@ -56,6 +57,15 @@ public final class PluginCommand extends Command implements PluginIdentifiableCo
     }
 
     /**
+     * Gets the {@link CommandExecutor} associated with this command
+     *
+     * @return CommandExecutor object linked to this command
+     */
+    public CommandExecutor getExecutor() {
+        return executor;
+    }
+
+    /**
      * Sets the {@link CommandExecutor} to run when parsing this command
      *
      * @param executor New executor to run
@@ -65,12 +75,12 @@ public final class PluginCommand extends Command implements PluginIdentifiableCo
     }
 
     /**
-     * Gets the {@link CommandExecutor} associated with this command
+     * Gets the {@link TabCompleter} associated with this command.
      *
-     * @return CommandExecutor object linked to this command
+     * @return TabCompleter object linked to this command
      */
-    public CommandExecutor getExecutor() {
-        return executor;
+    public TabCompleter getTabCompleter() {
+        return completer;
     }
 
     /**
@@ -86,15 +96,6 @@ public final class PluginCommand extends Command implements PluginIdentifiableCo
     }
 
     /**
-     * Gets the {@link TabCompleter} associated with this command.
-     *
-     * @return TabCompleter object linked to this command
-     */
-    public TabCompleter getTabCompleter() {
-        return completer;
-    }
-
-    /**
      * Gets the owner of this PluginCommand
      *
      * @return Plugin that owns this command
@@ -116,8 +117,8 @@ public final class PluginCommand extends Command implements PluginIdentifiableCo
      * <p>
      * This method does not consider permissions.
      *
-     * @throws CommandException if the completer or executor throw an
-     *     exception during the process of tab-completing.
+     * @throws CommandException         if the completer or executor throw an
+     *                                  exception during the process of tab-completing.
      * @throws IllegalArgumentException if sender, alias, or args is null
      */
     @Override
@@ -147,6 +148,7 @@ public final class PluginCommand extends Command implements PluginIdentifiableCo
         if (completions == null) {
             return super.tabComplete(sender, alias, args);
         }
+
         return completions;
     }
 
diff --git a/src/main/java/org/bukkit/command/PluginCommandYamlParser.java b/src/main/java/org/bukkit/command/PluginCommandYamlParser.java
index 5854583..aa9adba 100644
--- a/src/main/java/org/bukkit/command/PluginCommandYamlParser.java
+++ b/src/main/java/org/bukkit/command/PluginCommandYamlParser.java
@@ -1,13 +1,13 @@
 package org.bukkit.command;
 
+import org.bukkit.Bukkit;
+import org.bukkit.plugin.Plugin;
+
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
 import java.util.Map.Entry;
 
-import org.bukkit.Bukkit;
-import org.bukkit.plugin.Plugin;
-
 public class PluginCommandYamlParser {
 
     public static List<Command> parse(Plugin plugin) {
diff --git a/src/main/java/org/bukkit/command/PluginIdentifiableCommand.java b/src/main/java/org/bukkit/command/PluginIdentifiableCommand.java
index c5e0d2c..5777b76 100644
--- a/src/main/java/org/bukkit/command/PluginIdentifiableCommand.java
+++ b/src/main/java/org/bukkit/command/PluginIdentifiableCommand.java
@@ -15,5 +15,5 @@ public interface PluginIdentifiableCommand {
      *
      * @return Plugin that owns this PluginIdentifiableCommand.
      */
-    public Plugin getPlugin();
+    Plugin getPlugin();
 }
diff --git a/src/main/java/org/bukkit/command/RemoteConsoleCommandSender.java b/src/main/java/org/bukkit/command/RemoteConsoleCommandSender.java
index dc3bc1d..5a50310 100644
--- a/src/main/java/org/bukkit/command/RemoteConsoleCommandSender.java
+++ b/src/main/java/org/bukkit/command/RemoteConsoleCommandSender.java
@@ -1,4 +1,5 @@
 package org.bukkit.command;
 
 public interface RemoteConsoleCommandSender extends CommandSender {
+
 }
diff --git a/src/main/java/org/bukkit/command/SimpleCommandMap.java b/src/main/java/org/bukkit/command/SimpleCommandMap.java
index f15b95d..7f3b1b6 100644
--- a/src/main/java/org/bukkit/command/SimpleCommandMap.java
+++ b/src/main/java/org/bukkit/command/SimpleCommandMap.java
@@ -1,6 +1,10 @@
 package org.bukkit.command;
 
-import static org.bukkit.util.Java15Compat.Arrays_copyOfRange;
+import org.apache.commons.lang.Validate;
+import org.bukkit.Server;
+import org.bukkit.command.defaults.*;
+import org.bukkit.entity.Player;
+import org.bukkit.util.StringUtil;
 
 import java.util.ArrayList;
 import java.util.Collection;
@@ -11,13 +15,10 @@ import java.util.List;
 import java.util.Map;
 import java.util.regex.Pattern;
 
-import org.apache.commons.lang.Validate;
-import org.bukkit.Server;
-import org.bukkit.command.defaults.*;
-import org.bukkit.entity.Player;
-import org.bukkit.util.StringUtil;
+import static org.bukkit.util.Java15Compat.Arrays_copyOfRange;
 
 public class SimpleCommandMap implements CommandMap {
+
     private static final Pattern PATTERN_ON_SPACE = Pattern.compile(" ", Pattern.LITERAL);
     protected final Map<String, Command> knownCommands = new HashMap<String, Command>();
     private final Server server;
@@ -126,11 +127,11 @@ public class SimpleCommandMap implements CommandMap {
      * Registers a command with the given name is possible. Also uses
      * fallbackPrefix to create a unique name.
      *
-     * @param label the name of the command, without the '/'-prefix.
-     * @param command the command to register
-     * @param isAlias whether the command is an alias
+     * @param label          the name of the command, without the '/'-prefix.
+     * @param command        the command to register
+     * @param isAlias        whether the command is an alias
      * @param fallbackPrefix a prefix which is prepended to the command for a
-     *     unique address
+     *                       unique address
      * @return true if command was registered, false otherwise.
      */
     private synchronized boolean register(String label, Command command, boolean isAlias, String fallbackPrefix) {
diff --git a/src/main/java/org/bukkit/command/TabCommandExecutor.java b/src/main/java/org/bukkit/command/TabCommandExecutor.java
index d24d795..6a4bcbd 100644
--- a/src/main/java/org/bukkit/command/TabCommandExecutor.java
+++ b/src/main/java/org/bukkit/command/TabCommandExecutor.java
@@ -5,12 +5,13 @@ import java.util.List;
 /**
  * Represents a class which can handle command tab completion and commands
  *
- * @deprecated Remains for plugins that would have implemented it even without
- *     functionality
  * @see TabExecutor
+ * @deprecated Remains for plugins that would have implemented it even without
+ * functionality
  */
 @Deprecated
 public interface TabCommandExecutor extends CommandExecutor {
-    public List<String> onTabComplete();
 
+    List<String> onTabComplete();
 }
+
diff --git a/src/main/java/org/bukkit/command/TabCompleter.java b/src/main/java/org/bukkit/command/TabCompleter.java
index 6d61e3a..8efb70e 100644
--- a/src/main/java/org/bukkit/command/TabCompleter.java
+++ b/src/main/java/org/bukkit/command/TabCompleter.java
@@ -10,13 +10,13 @@ public interface TabCompleter {
     /**
      * Requests a list of possible completions for a command argument.
      *
-     * @param sender Source of the command
+     * @param sender  Source of the command
      * @param command Command which was executed
-     * @param alias The alias used
-     * @param args The arguments passed to the command, including final
-     *     partial argument to be completed and command label
+     * @param alias   The alias used
+     * @param args    The arguments passed to the command, including final
+     *                partial argument to be completed and command label
      * @return A List of possible completions for the final argument, or null
-     *     to default to the command executor
+     * to default to the command executor
      */
-    public List<String> onTabComplete(CommandSender sender, Command command, String alias, String[] args);
+    List<String> onTabComplete(CommandSender sender, Command command, String alias, String[] args);
 }
diff --git a/src/main/java/org/bukkit/command/TabExecutor.java b/src/main/java/org/bukkit/command/TabExecutor.java
index 6b8e3fb..5030892 100644
--- a/src/main/java/org/bukkit/command/TabExecutor.java
+++ b/src/main/java/org/bukkit/command/TabExecutor.java
@@ -5,4 +5,5 @@ package org.bukkit.command;
  * CommandExecutor.
  */
 public interface TabExecutor extends TabCompleter, CommandExecutor {
+
 }
diff --git a/src/main/java/org/bukkit/command/defaults/AchievementCommand.java b/src/main/java/org/bukkit/command/defaults/AchievementCommand.java
index d490732..a5ccce9 100644
--- a/src/main/java/org/bukkit/command/defaults/AchievementCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/AchievementCommand.java
@@ -1,15 +1,12 @@
 package org.bukkit.command.defaults;
 
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-
+import com.google.common.collect.ImmutableList;
 import org.apache.commons.lang.Validate;
 import org.bukkit.Achievement;
 import org.bukkit.Bukkit;
 import org.bukkit.ChatColor;
-import org.bukkit.Statistic;
 import org.bukkit.Material;
+import org.bukkit.Statistic;
 import org.bukkit.Statistic.Type;
 import org.bukkit.command.Command;
 import org.bukkit.command.CommandSender;
@@ -18,9 +15,12 @@ import org.bukkit.entity.Player;
 import org.bukkit.event.player.PlayerAchievementAwardedEvent;
 import org.bukkit.event.player.PlayerStatisticIncrementEvent;
 
-import com.google.common.collect.ImmutableList;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
 
 public class AchievementCommand extends VanillaCommand {
+
     public AchievementCommand() {
         super("achievement");
         this.description = "Gives the specified player an achievement or changes a statistic value. Use '*' to give all achievements.";
@@ -61,12 +61,14 @@ public class AchievementCommand extends VanillaCommand {
                 if (player.hasAchievement(achievement)) {
                     continue;
                 }
+
                 PlayerAchievementAwardedEvent event = new PlayerAchievementAwardedEvent(player, achievement);
                 Bukkit.getServer().getPluginManager().callEvent(event);
                 if (!event.isCancelled()) {
                     player.awardAchievement(achievement);
                 }
             }
+
             Command.broadcastCommandMessage(sender, String.format("Successfully given all achievements to %s", player.getName()));
             return true;
         }
@@ -82,12 +84,13 @@ public class AchievementCommand extends VanillaCommand {
 
             PlayerAchievementAwardedEvent event = new PlayerAchievementAwardedEvent(player, achievement);
             Bukkit.getServer().getPluginManager().callEvent(event);
+
             if (event.isCancelled()) {
                 sender.sendMessage(String.format("Unable to award %s the achievement %s", player.getName(), statisticString));
                 return true;
             }
+
             player.awardAchievement(achievement);
-                
             Command.broadcastCommandMessage(sender, String.format("Successfully given %s the stat %s", player.getName(), statisticString));
             return true;
         }
@@ -100,10 +103,12 @@ public class AchievementCommand extends VanillaCommand {
         if (statistic.getType() == Type.UNTYPED) {
             PlayerStatisticIncrementEvent event = new PlayerStatisticIncrementEvent(player, statistic, player.getStatistic(statistic), player.getStatistic(statistic) + 1);
             Bukkit.getServer().getPluginManager().callEvent(event);
+
             if (event.isCancelled()) {
                 sender.sendMessage(String.format("Unable to increment %s for %s", statisticString, player.getName()));
                 return true;
             }
+
             player.incrementStatistic(statistic);
             Command.broadcastCommandMessage(sender, String.format("Successfully given %s the stat %s", player.getName(), statisticString));
             return true;
@@ -126,7 +131,7 @@ public class AchievementCommand extends VanillaCommand {
 
             try {
                 player.incrementStatistic(statistic, entityType);
-            } catch (IllegalArgumentException e) {
+            } catch (IllegalArgumentException ex) {
                 sender.sendMessage(String.format("Unknown achievement or statistic '%s'", statisticString));
                 return true;
             }
@@ -134,8 +139,8 @@ public class AchievementCommand extends VanillaCommand {
             int id;
             try {
                 id = getInteger(sender, statisticString.substring(statisticString.lastIndexOf(".") + 1), 0, Integer.MAX_VALUE, true);
-            } catch (NumberFormatException e) {
-                sender.sendMessage(e.getMessage());
+            } catch (NumberFormatException ex) {
+                sender.sendMessage(ex.getMessage());
                 return true;
             }
 
@@ -155,7 +160,7 @@ public class AchievementCommand extends VanillaCommand {
 
             try {
                 player.incrementStatistic(statistic, material);
-            } catch (IllegalArgumentException e) {
+            } catch (IllegalArgumentException ex) {
                 sender.sendMessage(String.format("Unknown achievement or statistic '%s'", statisticString));
                 return true;
             }
@@ -182,6 +187,7 @@ public class AchievementCommand extends VanillaCommand {
         if (args.length == 3) {
             return super.tabComplete(sender, alias, args);
         }
+
         return ImmutableList.of();
     }
 }
diff --git a/src/main/java/org/bukkit/command/defaults/BanCommand.java b/src/main/java/org/bukkit/command/defaults/BanCommand.java
index df891b8..a01e26e 100644
--- a/src/main/java/org/bukkit/command/defaults/BanCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/BanCommand.java
@@ -1,7 +1,6 @@
 package org.bukkit.command.defaults;
 
-import java.util.List;
-
+import com.google.common.collect.ImmutableList;
 import org.apache.commons.lang.StringUtils;
 import org.apache.commons.lang.Validate;
 import org.bukkit.BanList;
@@ -11,9 +10,10 @@ import org.bukkit.command.Command;
 import org.bukkit.command.CommandSender;
 import org.bukkit.entity.Player;
 
-import com.google.common.collect.ImmutableList;
+import java.util.List;
 
 public class BanCommand extends VanillaCommand {
+
     public BanCommand() {
         super("ban");
         this.description = "Prevents the specified player from using this server";
@@ -24,7 +24,7 @@ public class BanCommand extends VanillaCommand {
     @Override
     public boolean execute(CommandSender sender, String currentAlias, String[] args) {
         if (!testPermission(sender)) return true;
-        if (args.length == 0)  {
+        if (args.length == 0) {
             sender.sendMessage(ChatColor.RED + "Usage: " + usageMessage);
             return false;
         }
diff --git a/src/main/java/org/bukkit/command/defaults/BanIpCommand.java b/src/main/java/org/bukkit/command/defaults/BanIpCommand.java
index 6f7c8bd..206cdc6 100644
--- a/src/main/java/org/bukkit/command/defaults/BanIpCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/BanIpCommand.java
@@ -1,8 +1,6 @@
 package org.bukkit.command.defaults;
 
-import java.util.List;
-import java.util.regex.Pattern;
-
+import com.google.common.collect.ImmutableList;
 import org.apache.commons.lang.StringUtils;
 import org.apache.commons.lang.Validate;
 import org.bukkit.BanList;
@@ -12,9 +10,11 @@ import org.bukkit.command.Command;
 import org.bukkit.command.CommandSender;
 import org.bukkit.entity.Player;
 
-import com.google.common.collect.ImmutableList;
+import java.util.List;
+import java.util.regex.Pattern;
 
 public class BanIpCommand extends VanillaCommand {
+
     public static final Pattern ipValidity = Pattern.compile("^([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])$");
 
     public BanIpCommand() {
@@ -27,7 +27,7 @@ public class BanIpCommand extends VanillaCommand {
     @Override
     public boolean execute(CommandSender sender, String currentAlias, String[] args) {
         if (!testPermission(sender)) return true;
-        if (args.length < 1)  {
+        if (args.length < 1) {
             sender.sendMessage(ChatColor.RED + "Usage: " + usageMessage);
             return false;
         }
diff --git a/src/main/java/org/bukkit/command/defaults/BanListCommand.java b/src/main/java/org/bukkit/command/defaults/BanListCommand.java
index dfab7bc..673e219 100644
--- a/src/main/java/org/bukkit/command/defaults/BanListCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/BanListCommand.java
@@ -1,21 +1,19 @@
 package org.bukkit.command.defaults;
 
-import java.util.ArrayList;
-import java.util.List;
-import java.util.UUID;
-
+import com.google.common.collect.ImmutableList;
 import org.apache.commons.lang.Validate;
 import org.bukkit.BanEntry;
 import org.bukkit.BanList;
 import org.bukkit.Bukkit;
 import org.bukkit.ChatColor;
-import org.bukkit.OfflinePlayer;
 import org.bukkit.command.CommandSender;
 import org.bukkit.util.StringUtil;
 
-import com.google.common.collect.ImmutableList;
+import java.util.ArrayList;
+import java.util.List;
 
 public class BanListCommand extends VanillaCommand {
+
     private static final List<String> BANLIST_TYPES = ImmutableList.of("ips", "players");
 
     public BanListCommand() {
diff --git a/src/main/java/org/bukkit/command/defaults/BukkitCommand.java b/src/main/java/org/bukkit/command/defaults/BukkitCommand.java
index 23c8580..1c2ee86 100644
--- a/src/main/java/org/bukkit/command/defaults/BukkitCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/BukkitCommand.java
@@ -1,10 +1,11 @@
 package org.bukkit.command.defaults;
 
-import java.util.List;
-
 import org.bukkit.command.Command;
 
+import java.util.List;
+
 public abstract class BukkitCommand extends Command {
+
     protected BukkitCommand(String name) {
         super(name);
     }
diff --git a/src/main/java/org/bukkit/command/defaults/ClearCommand.java b/src/main/java/org/bukkit/command/defaults/ClearCommand.java
index a9df4f9..4271ba0 100644
--- a/src/main/java/org/bukkit/command/defaults/ClearCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/ClearCommand.java
@@ -15,12 +15,15 @@ import java.util.Collections;
 import java.util.List;
 
 public class ClearCommand extends VanillaCommand {
+
     private static List<String> materials;
+
     static {
         ArrayList<String> materialList = new ArrayList<String>();
         for (Material material : Material.values()) {
             materialList.add(material.name());
         }
+
         Collections.sort(materialList);
         materials = ImmutableList.copyOf(materialList);
     }
@@ -80,6 +83,7 @@ public class ClearCommand extends VanillaCommand {
         if (args.length == 1) {
             return super.tabComplete(sender, alias, args);
         }
+
         if (args.length == 2) {
             final String arg = args[1];
             final List<String> materials = ClearCommand.materials;
@@ -93,7 +97,7 @@ public class ClearCommand extends VanillaCommand {
                 i = -1 - i;
             }
 
-            for ( ; i < size; i++) {
+            for (; i < size; i++) {
                 String material = materials.get(i);
                 if (StringUtil.startsWithIgnoreCase(material, arg)) {
                     if (completion == null) {
@@ -109,6 +113,7 @@ public class ClearCommand extends VanillaCommand {
                 return completion;
             }
         }
+
         return ImmutableList.of();
     }
 }
diff --git a/src/main/java/org/bukkit/command/defaults/DefaultGameModeCommand.java b/src/main/java/org/bukkit/command/defaults/DefaultGameModeCommand.java
index 77ba678..bc7a1a4 100644
--- a/src/main/java/org/bukkit/command/defaults/DefaultGameModeCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/DefaultGameModeCommand.java
@@ -1,8 +1,6 @@
 package org.bukkit.command.defaults;
 
-import java.util.ArrayList;
-import java.util.List;
-
+import com.google.common.collect.ImmutableList;
 import org.apache.commons.lang.Validate;
 import org.bukkit.Bukkit;
 import org.bukkit.GameMode;
@@ -10,9 +8,11 @@ import org.bukkit.command.Command;
 import org.bukkit.command.CommandSender;
 import org.bukkit.util.StringUtil;
 
-import com.google.common.collect.ImmutableList;
+import java.util.ArrayList;
+import java.util.List;
 
 public class DefaultGameModeCommand extends VanillaCommand {
+
     private static final List<String> GAMEMODE_NAMES = ImmutableList.of("adventure", "creative", "survival");
 
     public DefaultGameModeCommand() {
@@ -35,7 +35,8 @@ public class DefaultGameModeCommand extends VanillaCommand {
 
         try {
             value = Integer.parseInt(modeArg);
-        } catch (NumberFormatException ex) {}
+        } catch (NumberFormatException ex) {
+        }
 
         GameMode mode = GameMode.getByValue(value);
 
diff --git a/src/main/java/org/bukkit/command/defaults/DeopCommand.java b/src/main/java/org/bukkit/command/defaults/DeopCommand.java
index c46750a..9523082 100644
--- a/src/main/java/org/bukkit/command/defaults/DeopCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/DeopCommand.java
@@ -1,8 +1,6 @@
 package org.bukkit.command.defaults;
 
-import java.util.ArrayList;
-import java.util.List;
-
+import com.google.common.collect.ImmutableList;
 import org.apache.commons.lang.Validate;
 import org.bukkit.Bukkit;
 import org.bukkit.ChatColor;
@@ -12,9 +10,11 @@ import org.bukkit.command.CommandSender;
 import org.bukkit.entity.Player;
 import org.bukkit.util.StringUtil;
 
-import com.google.common.collect.ImmutableList;
+import java.util.ArrayList;
+import java.util.List;
 
 public class DeopCommand extends VanillaCommand {
+
     public DeopCommand() {
         super("deop");
         this.description = "Takes the specified player's operator status";
@@ -57,6 +57,7 @@ public class DeopCommand extends VanillaCommand {
             }
             return completions;
         }
+
         return ImmutableList.of();
     }
 }
diff --git a/src/main/java/org/bukkit/command/defaults/DifficultyCommand.java b/src/main/java/org/bukkit/command/defaults/DifficultyCommand.java
index ca98559..10c92be 100644
--- a/src/main/java/org/bukkit/command/defaults/DifficultyCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/DifficultyCommand.java
@@ -4,15 +4,16 @@ import com.google.common.collect.ImmutableList;
 import org.apache.commons.lang.Validate;
 import org.bukkit.Bukkit;
 import org.bukkit.ChatColor;
+import org.bukkit.Difficulty;
 import org.bukkit.command.Command;
 import org.bukkit.command.CommandSender;
 import org.bukkit.util.StringUtil;
-import org.bukkit.Difficulty;
 
 import java.util.ArrayList;
 import java.util.List;
 
 public class DifficultyCommand extends VanillaCommand {
+
     private static final List<String> DIFFICULTY_NAMES = ImmutableList.of("peaceful", "easy", "normal", "hard");
 
     public DifficultyCommand() {
diff --git a/src/main/java/org/bukkit/command/defaults/EffectCommand.java b/src/main/java/org/bukkit/command/defaults/EffectCommand.java
index 7d0662e..66683eb 100644
--- a/src/main/java/org/bukkit/command/defaults/EffectCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/EffectCommand.java
@@ -1,8 +1,6 @@
 package org.bukkit.command.defaults;
 
 import com.google.common.collect.ImmutableList;
-import java.util.ArrayList;
-import java.util.List;
 import org.bukkit.ChatColor;
 import org.bukkit.command.CommandSender;
 import org.bukkit.entity.Player;
@@ -10,15 +8,12 @@ import org.bukkit.potion.PotionEffect;
 import org.bukkit.potion.PotionEffectType;
 import org.bukkit.util.StringUtil;
 
+import java.util.ArrayList;
+import java.util.List;
+
 public class EffectCommand extends VanillaCommand {
-    private static final List<String> effects;
 
-    public EffectCommand() {
-        super("effect");
-        this.description = "Adds/Removes effects on players";
-        this.usageMessage = "/effect <player> <effect|clear> [seconds] [amplifier]";
-        this.setPermission("bukkit.command.effect");
-    }
+    private static final List<String> effects;
 
     static {
         ImmutableList.Builder<String> builder = ImmutableList.<String>builder();
@@ -32,6 +27,13 @@ public class EffectCommand extends VanillaCommand {
         effects = builder.build();
     }
 
+    public EffectCommand() {
+        super("effect");
+        this.description = "Adds/Removes effects on players";
+        this.usageMessage = "/effect <player> <effect|clear> [seconds] [amplifier]";
+        this.setPermission("bukkit.command.effect");
+    }
+
     @Override
     public boolean execute(CommandSender sender, String commandLabel, String[] args) {
         if (!testPermission(sender)) {
@@ -50,7 +52,7 @@ public class EffectCommand extends VanillaCommand {
             return true;
         }
 
-        if ("clear".equalsIgnoreCase(args[1])) {
+        if (args[1].equalsIgnoreCase("clear")) {
             for (PotionEffect effect : player.getActivePotionEffects()) {
                 player.removePotionEffect(effect.getType());
             }
diff --git a/src/main/java/org/bukkit/command/defaults/EnchantCommand.java b/src/main/java/org/bukkit/command/defaults/EnchantCommand.java
index 2976649..aa7e47d 100644
--- a/src/main/java/org/bukkit/command/defaults/EnchantCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/EnchantCommand.java
@@ -1,14 +1,8 @@
 package org.bukkit.command.defaults;
 
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
-import java.util.Map;
-
+import com.google.common.collect.ImmutableList;
 import org.apache.commons.lang.Validate;
 import org.apache.commons.lang.WordUtils;
-import com.google.common.collect.ImmutableList;
-
 import org.bukkit.Bukkit;
 import org.bukkit.ChatColor;
 import org.bukkit.Material;
@@ -19,7 +13,13 @@ import org.bukkit.entity.Player;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.util.StringUtil;
 
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+import java.util.Map;
+
 public class EnchantCommand extends VanillaCommand {
+
     private static final List<String> ENCHANTMENT_NAMES = new ArrayList<String>();
 
     public EnchantCommand() {
@@ -29,6 +29,18 @@ public class EnchantCommand extends VanillaCommand {
         this.setPermission("bukkit.command.enchant");
     }
 
+    public static void buildEnchantments() {
+        if (!ENCHANTMENT_NAMES.isEmpty()) {
+            throw new IllegalStateException("Enchantments have already been built!");
+        }
+
+        for (Enchantment enchantment : Enchantment.values()) {
+            ENCHANTMENT_NAMES.add(enchantment.getName());
+        }
+
+        Collections.sort(ENCHANTMENT_NAMES);
+    }
+
     @Override
     public boolean execute(CommandSender sender, String commandLabel, String[] args) {
         if (!testPermission(sender)) return true;
@@ -56,7 +68,7 @@ public class EnchantCommand extends VanillaCommand {
                 Enchantment enchantment = getEnchantment(args[1].toUpperCase());
                 if (enchantment == null) {
                     sender.sendMessage(String.format("Enchantment does not exist: %s", args[1]));
-                }  else {
+                } else {
                     String enchantmentName = enchantment.getName().replaceAll("_", " ");
                     enchantmentName = WordUtils.capitalizeFully(enchantmentName);
 
@@ -85,7 +97,7 @@ public class EnchantCommand extends VanillaCommand {
                                 level = integer;
                             }
 
-                            if ("max".equals(args[2])) {
+                            if (args[2].equalsIgnoreCase("max")) {
                                 level = maxLevel;
                             }
                         }
@@ -119,7 +131,7 @@ public class EnchantCommand extends VanillaCommand {
         return true;
     }
 
-     @Override
+    @Override
     public List<String> tabComplete(CommandSender sender, String alias, String[] args) throws IllegalArgumentException {
         Validate.notNull(sender, "Sender cannot be null");
         Validate.notNull(args, "Arguments cannot be null");
@@ -140,7 +152,7 @@ public class EnchantCommand extends VanillaCommand {
         }
 
         return ImmutableList.of();
-     }
+    }
 
     private Enchantment getEnchantment(String lookup) {
         Enchantment enchantment = Enchantment.getByName(lookup);
@@ -154,16 +166,4 @@ public class EnchantCommand extends VanillaCommand {
 
         return enchantment;
     }
-
-    public static void buildEnchantments() {
-        if (!ENCHANTMENT_NAMES.isEmpty()) {
-            throw new IllegalStateException("Enchantments have already been built!");
-        }
-
-        for (Enchantment enchantment : Enchantment.values()) {
-            ENCHANTMENT_NAMES.add(enchantment.getName());
-        }
-
-        Collections.sort(ENCHANTMENT_NAMES);
-    }
 }
diff --git a/src/main/java/org/bukkit/command/defaults/ExpCommand.java b/src/main/java/org/bukkit/command/defaults/ExpCommand.java
index 2749760..22899f3 100644
--- a/src/main/java/org/bukkit/command/defaults/ExpCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/ExpCommand.java
@@ -1,7 +1,6 @@
 package org.bukkit.command.defaults;
 
-import java.util.List;
-
+import com.google.common.collect.ImmutableList;
 import org.apache.commons.lang.Validate;
 import org.bukkit.Bukkit;
 import org.bukkit.ChatColor;
@@ -9,9 +8,10 @@ import org.bukkit.command.Command;
 import org.bukkit.command.CommandSender;
 import org.bukkit.entity.Player;
 
-import com.google.common.collect.ImmutableList;
+import java.util.List;
 
 public class ExpCommand extends VanillaCommand {
+
     public ExpCommand() {
         super("xp");
         this.description = "Gives the specified player a certain amount of experience. Specify <amount>L to give levels instead, with a negative amount resulting in taking levels.";
@@ -84,6 +84,7 @@ public class ExpCommand extends VanillaCommand {
         if (args.length == 2) {
             return super.tabComplete(sender, alias, args);
         }
+
         return ImmutableList.of();
     }
 }
diff --git a/src/main/java/org/bukkit/command/defaults/GameModeCommand.java b/src/main/java/org/bukkit/command/defaults/GameModeCommand.java
index c58f906..e4f11ba 100644
--- a/src/main/java/org/bukkit/command/defaults/GameModeCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/GameModeCommand.java
@@ -1,8 +1,6 @@
 package org.bukkit.command.defaults;
 
-import java.util.ArrayList;
-import java.util.List;
-
+import com.google.common.collect.ImmutableList;
 import org.apache.commons.lang.Validate;
 import org.bukkit.Bukkit;
 import org.bukkit.ChatColor;
@@ -12,9 +10,11 @@ import org.bukkit.command.CommandSender;
 import org.bukkit.entity.Player;
 import org.bukkit.util.StringUtil;
 
-import com.google.common.collect.ImmutableList;
+import java.util.ArrayList;
+import java.util.List;
 
 public class GameModeCommand extends VanillaCommand {
+
     private static final List<String> GAMEMODE_NAMES = ImmutableList.of("adventure", "creative", "survival");
 
     public GameModeCommand() {
@@ -46,7 +46,9 @@ public class GameModeCommand extends VanillaCommand {
 
             try {
                 value = Integer.parseInt(modeArg);
-            } catch (NumberFormatException ex) {}
+            } catch (NumberFormatException ignored) {
+
+            }
 
             GameMode mode = GameMode.getByValue(value);
 
@@ -93,6 +95,7 @@ public class GameModeCommand extends VanillaCommand {
         } else if (args.length == 2) {
             return super.tabComplete(sender, alias, args);
         }
+
         return ImmutableList.of();
     }
 }
diff --git a/src/main/java/org/bukkit/command/defaults/GameRuleCommand.java b/src/main/java/org/bukkit/command/defaults/GameRuleCommand.java
index 40c531b..38af00a 100644
--- a/src/main/java/org/bukkit/command/defaults/GameRuleCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/GameRuleCommand.java
@@ -2,20 +2,21 @@ package org.bukkit.command.defaults;
 
 import com.google.common.collect.ImmutableList;
 import org.apache.commons.lang.Validate;
+import org.bukkit.Bukkit;
 import org.bukkit.ChatColor;
+import org.bukkit.World;
 import org.bukkit.command.BlockCommandSender;
 import org.bukkit.command.Command;
 import org.bukkit.command.CommandSender;
+import org.bukkit.entity.HumanEntity;
 import org.bukkit.util.StringUtil;
 
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
-import org.bukkit.Bukkit;
-import org.bukkit.World;
-import org.bukkit.entity.HumanEntity;
 
 public class GameRuleCommand extends VanillaCommand {
+
     private static final List<String> GAMERULE_STATES = ImmutableList.of("true", "false");
 
     public GameRuleCommand() {
diff --git a/src/main/java/org/bukkit/command/defaults/GiveCommand.java b/src/main/java/org/bukkit/command/defaults/GiveCommand.java
index 14f27be..ccc7e06 100644
--- a/src/main/java/org/bukkit/command/defaults/GiveCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/GiveCommand.java
@@ -1,10 +1,7 @@
 package org.bukkit.command.defaults;
 
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.List;
-
+import com.google.common.base.Joiner;
+import com.google.common.collect.ImmutableList;
 import org.apache.commons.lang.Validate;
 import org.bukkit.Bukkit;
 import org.bukkit.ChatColor;
@@ -15,11 +12,15 @@ import org.bukkit.entity.Player;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.util.StringUtil;
 
-import com.google.common.base.Joiner;
-import com.google.common.collect.ImmutableList;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.List;
 
 public class GiveCommand extends VanillaCommand {
+
     private static List<String> materials;
+
     static {
         ArrayList<String> materialList = new ArrayList<String>();
         for (Material material : Material.values()) {
@@ -63,7 +64,9 @@ public class GiveCommand extends VanillaCommand {
                     if (args.length >= 4) {
                         try {
                             data = Short.parseShort(args[3]);
-                        } catch (NumberFormatException ex) {}
+                        } catch (NumberFormatException ignored) {
+
+                        }
                     }
                 }
 
@@ -72,7 +75,7 @@ public class GiveCommand extends VanillaCommand {
                 if (args.length >= 5) {
                     try {
                         stack = Bukkit.getUnsafe().modifyItemStack(stack, Joiner.on(' ').join(Arrays.asList(args).subList(4, args.length)));
-                    } catch (Throwable t) {
+                    } catch (Throwable throwable) {
                         player.sendMessage("Not a valid tag");
                         return true;
                     }
@@ -100,6 +103,7 @@ public class GiveCommand extends VanillaCommand {
         if (args.length == 1) {
             return super.tabComplete(sender, alias, args);
         }
+
         if (args.length == 2) {
             final String arg = args[1];
             final List<String> materials = GiveCommand.materials;
@@ -113,7 +117,7 @@ public class GiveCommand extends VanillaCommand {
                 i = -1 - i;
             }
 
-            for ( ; i < size; i++) {
+            for (; i < size; i++) {
                 String material = materials.get(i);
                 if (StringUtil.startsWithIgnoreCase(material, arg)) {
                     completion.add(material);
@@ -124,6 +128,7 @@ public class GiveCommand extends VanillaCommand {
 
             return Bukkit.getUnsafe().tabCompleteInternalMaterialName(arg, completion);
         }
+
         return ImmutableList.of();
     }
 }
diff --git a/src/main/java/org/bukkit/command/defaults/HelpCommand.java b/src/main/java/org/bukkit/command/defaults/HelpCommand.java
index ff73b26..70706ee 100644
--- a/src/main/java/org/bukkit/command/defaults/HelpCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/HelpCommand.java
@@ -1,13 +1,6 @@
 package org.bukkit.command.defaults;
 
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.TreeSet;
-
+import com.google.common.collect.ImmutableList;
 import org.apache.commons.lang.ArrayUtils;
 import org.apache.commons.lang.StringUtils;
 import org.apache.commons.lang.Validate;
@@ -22,17 +15,87 @@ import org.bukkit.help.HelpTopicComparator;
 import org.bukkit.help.IndexHelpTopic;
 import org.bukkit.util.ChatPaginator;
 
-import com.google.common.collect.ImmutableList;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.TreeSet;
 
 public class HelpCommand extends VanillaCommand {
+
     public HelpCommand() {
         super("help");
         this.description = "Shows the help menu";
         this.usageMessage = "/help <pageNumber>\n/help <topic>\n/help <topic> <pageNumber>";
-        this.setAliases(Arrays.asList(new String[] { "?" }));
+        this.setAliases(Arrays.asList("?"));
         this.setPermission("bukkit.command.help");
     }
 
+    /**
+     * Computes the Dameraur-Levenshtein Distance between two strings. Adapted
+     * from the algorithm at <a href="http://en.wikipedia.org/wiki/Damerau–Levenshtein_distance">Wikipedia: Damerau–Levenshtein distance</a>
+     *
+     * @param s1 The first string being compared.
+     * @param s2 The second string being compared.
+     * @return The number of substitutions, deletions, insertions, and
+     * transpositions required to get from s1 to s2.
+     */
+    protected static int damerauLevenshteinDistance(String s1, String s2) {
+        if (s1 == null && s2 == null) {
+            return 0;
+        }
+        if (s1 != null && s2 == null) {
+            return s1.length();
+        }
+        if (s1 == null && s2 != null) {
+            return s2.length();
+        }
+
+        int s1Len = s1.length();
+        int s2Len = s2.length();
+        int[][] H = new int[s1Len + 2][s2Len + 2];
+
+        int INF = s1Len + s2Len;
+        H[0][0] = INF;
+        for (int i = 0; i <= s1Len; i++) {
+            H[i + 1][1] = i;
+            H[i + 1][0] = INF;
+        }
+        for (int j = 0; j <= s2Len; j++) {
+            H[1][j + 1] = j;
+            H[0][j + 1] = INF;
+        }
+
+        Map<Character, Integer> sd = new HashMap<Character, Integer>();
+        for (char Letter : (s1 + s2).toCharArray()) {
+            if (!sd.containsKey(Letter)) {
+                sd.put(Letter, 0);
+            }
+        }
+
+        for (int i = 1; i <= s1Len; i++) {
+            int DB = 0;
+            for (int j = 1; j <= s2Len; j++) {
+                int i1 = sd.get(s2.charAt(j - 1));
+                int j1 = DB;
+
+                if (s1.charAt(i - 1) == s2.charAt(j - 1)) {
+                    H[i + 1][j + 1] = H[i][j];
+                    DB = j;
+                } else {
+                    H[i + 1][j + 1] = Math.min(H[i][j], Math.min(H[i + 1][j], H[i][j + 1])) + 1;
+                }
+
+                H[i + 1][j + 1] = Math.min(H[i + 1][j + 1], H[i1][j1] + (i - i1 - 1) + 1 + (j - j1 - 1));
+            }
+            sd.put(s1.charAt(i - 1), i);
+        }
+
+        return H[s1Len + 1][s2Len + 1];
+    }
+
     @Override
     public boolean execute(CommandSender sender, String currentAlias, String[] args) {
         if (!testPermission(sender)) return true;
@@ -162,67 +225,4 @@ public class HelpCommand extends VanillaCommand {
             return null;
         }
     }
-
-    /**
-     * Computes the Dameraur-Levenshtein Distance between two strings. Adapted
-     * from the algorithm at <a href="http://en.wikipedia.org/wiki/Damerau–Levenshtein_distance">Wikipedia: Damerau–Levenshtein distance</a>
-     *
-     * @param s1 The first string being compared.
-     * @param s2 The second string being compared.
-     * @return The number of substitutions, deletions, insertions, and
-     * transpositions required to get from s1 to s2.
-     */
-    protected static int damerauLevenshteinDistance(String s1, String s2) {
-        if (s1 == null && s2 == null) {
-            return 0;
-        }
-        if (s1 != null && s2 == null) {
-            return s1.length();
-        }
-        if (s1 == null && s2 != null) {
-            return s2.length();
-        }
-
-        int s1Len = s1.length();
-        int s2Len = s2.length();
-        int[][] H = new int[s1Len + 2][s2Len + 2];
-
-        int INF = s1Len + s2Len;
-        H[0][0] = INF;
-        for (int i = 0; i <= s1Len; i++) {
-            H[i + 1][1] = i;
-            H[i + 1][0] = INF;
-        }
-        for (int j = 0; j <= s2Len; j++) {
-            H[1][j + 1] = j;
-            H[0][j + 1] = INF;
-        }
-
-        Map<Character, Integer> sd = new HashMap<Character, Integer>();
-        for (char Letter : (s1 + s2).toCharArray()) {
-            if (!sd.containsKey(Letter)) {
-                sd.put(Letter, 0);
-            }
-        }
-
-        for (int i = 1; i <= s1Len; i++) {
-            int DB = 0;
-            for (int j = 1; j <= s2Len; j++) {
-                int i1 = sd.get(s2.charAt(j - 1));
-                int j1 = DB;
-
-                if (s1.charAt(i - 1) == s2.charAt(j - 1)) {
-                    H[i + 1][j + 1] = H[i][j];
-                    DB = j;
-                } else {
-                    H[i + 1][j + 1] = Math.min(H[i][j], Math.min(H[i + 1][j], H[i][j + 1])) + 1;
-                }
-
-                H[i + 1][j + 1] = Math.min(H[i + 1][j + 1], H[i1][j1] + (i - i1 - 1) + 1 + (j - j1 - 1));
-            }
-            sd.put(s1.charAt(i - 1), i);
-        }
-
-        return H[s1Len + 1][s2Len + 1];
-    }
 }
diff --git a/src/main/java/org/bukkit/command/defaults/KickCommand.java b/src/main/java/org/bukkit/command/defaults/KickCommand.java
index b6c3f79..a5036d9 100644
--- a/src/main/java/org/bukkit/command/defaults/KickCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/KickCommand.java
@@ -1,7 +1,6 @@
 package org.bukkit.command.defaults;
 
-import java.util.List;
-
+import com.google.common.collect.ImmutableList;
 import org.apache.commons.lang.Validate;
 import org.bukkit.Bukkit;
 import org.bukkit.ChatColor;
@@ -9,9 +8,10 @@ import org.bukkit.command.Command;
 import org.bukkit.command.CommandSender;
 import org.bukkit.entity.Player;
 
-import com.google.common.collect.ImmutableList;
+import java.util.List;
 
 public class KickCommand extends VanillaCommand {
+
     public KickCommand() {
         super("kick");
         this.description = "Removes the specified player from the server";
@@ -39,7 +39,7 @@ public class KickCommand extends VanillaCommand {
             player.kickPlayer(reason);
             Command.broadcastCommandMessage(sender, "Kicked player " + player.getName() + ". With reason:\n" + reason);
         } else {
-            sender.sendMessage( args[0] + " not found.");
+            sender.sendMessage(args[0] + " not found.");
         }
 
         return true;
@@ -54,6 +54,7 @@ public class KickCommand extends VanillaCommand {
         if (args.length >= 1) {
             return super.tabComplete(sender, alias, args);
         }
+
         return ImmutableList.of();
     }
 }
diff --git a/src/main/java/org/bukkit/command/defaults/KillCommand.java b/src/main/java/org/bukkit/command/defaults/KillCommand.java
index 3270db5..b6f2066 100644
--- a/src/main/java/org/bukkit/command/defaults/KillCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/KillCommand.java
@@ -1,16 +1,16 @@
 package org.bukkit.command.defaults;
 
-import java.util.List;
-
+import com.google.common.collect.ImmutableList;
 import org.apache.commons.lang.Validate;
 import org.bukkit.Bukkit;
 import org.bukkit.command.CommandSender;
 import org.bukkit.entity.Player;
 import org.bukkit.event.entity.EntityDamageEvent;
 
-import com.google.common.collect.ImmutableList;
+import java.util.List;
 
 public class KillCommand extends VanillaCommand {
+
     public KillCommand() {
         super("kill");
         this.description = "Commits suicide, only usable as a player";
diff --git a/src/main/java/org/bukkit/command/defaults/ListCommand.java b/src/main/java/org/bukkit/command/defaults/ListCommand.java
index eb8a6a9..933c539 100644
--- a/src/main/java/org/bukkit/command/defaults/ListCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/ListCommand.java
@@ -1,16 +1,16 @@
 package org.bukkit.command.defaults;
 
-import java.util.Collection;
-import java.util.List;
-
+import com.google.common.collect.ImmutableList;
 import org.apache.commons.lang.Validate;
 import org.bukkit.Bukkit;
 import org.bukkit.command.CommandSender;
 import org.bukkit.entity.Player;
 
-import com.google.common.collect.ImmutableList;
+import java.util.Collection;
+import java.util.List;
 
 public class ListCommand extends VanillaCommand {
+
     public ListCommand() {
         super("list");
         this.description = "Lists all online players";
@@ -39,7 +39,6 @@ public class ListCommand extends VanillaCommand {
         }
 
         sender.sendMessage("There are " + players.size() + "/" + Bukkit.getMaxPlayers() + " players online:\n" + online.toString());
-
         return true;
     }
 
@@ -48,7 +47,6 @@ public class ListCommand extends VanillaCommand {
         Validate.notNull(sender, "Sender cannot be null");
         Validate.notNull(args, "Arguments cannot be null");
         Validate.notNull(alias, "Alias cannot be null");
-
         return ImmutableList.of();
     }
 }
diff --git a/src/main/java/org/bukkit/command/defaults/MeCommand.java b/src/main/java/org/bukkit/command/defaults/MeCommand.java
index ddcd9ad..c3cc597 100644
--- a/src/main/java/org/bukkit/command/defaults/MeCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/MeCommand.java
@@ -5,6 +5,7 @@ import org.bukkit.ChatColor;
 import org.bukkit.command.CommandSender;
 
 public class MeCommand extends VanillaCommand {
+
     public MeCommand() {
         super("me");
         this.description = "Performs the specified action in chat";
@@ -15,7 +16,7 @@ public class MeCommand extends VanillaCommand {
     @Override
     public boolean execute(CommandSender sender, String currentAlias, String[] args) {
         if (!testPermission(sender)) return true;
-        if (args.length < 1)  {
+        if (args.length < 1) {
             sender.sendMessage(ChatColor.RED + "Usage: " + usageMessage);
             return false;
         }
@@ -29,7 +30,6 @@ public class MeCommand extends VanillaCommand {
         }
 
         Bukkit.broadcastMessage("* " + message.toString());
-
         return true;
     }
 }
diff --git a/src/main/java/org/bukkit/command/defaults/OpCommand.java b/src/main/java/org/bukkit/command/defaults/OpCommand.java
index e1f8452..c3800f8 100644
--- a/src/main/java/org/bukkit/command/defaults/OpCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/OpCommand.java
@@ -1,9 +1,6 @@
 package org.bukkit.command.defaults;
 
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
-
+import com.google.common.collect.ImmutableList;
 import org.apache.commons.lang.Validate;
 import org.bukkit.Bukkit;
 import org.bukkit.ChatColor;
@@ -13,9 +10,12 @@ import org.bukkit.command.CommandSender;
 import org.bukkit.entity.Player;
 import org.bukkit.util.StringUtil;
 
-import com.google.common.collect.ImmutableList;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
 
 public class OpCommand extends VanillaCommand {
+
     public OpCommand() {
         super("op");
         this.description = "Gives the specified player operator status";
@@ -26,7 +26,7 @@ public class OpCommand extends VanillaCommand {
     @Override
     public boolean execute(CommandSender sender, String currentAlias, String[] args) {
         if (!testPermission(sender)) return true;
-        if (args.length != 1 || args[0].length() == 0)  {
+        if (args.length != 1 || args[0].length() == 0) {
             sender.sendMessage(ChatColor.RED + "Usage: " + usageMessage);
             return false;
         }
@@ -70,6 +70,7 @@ public class OpCommand extends VanillaCommand {
             Collections.sort(matchedPlayers, String.CASE_INSENSITIVE_ORDER);
             return matchedPlayers;
         }
+
         return ImmutableList.of();
     }
 }
diff --git a/src/main/java/org/bukkit/command/defaults/PardonCommand.java b/src/main/java/org/bukkit/command/defaults/PardonCommand.java
index 82c7a95..30f681b 100644
--- a/src/main/java/org/bukkit/command/defaults/PardonCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/PardonCommand.java
@@ -1,8 +1,6 @@
 package org.bukkit.command.defaults;
 
-import java.util.ArrayList;
-import java.util.List;
-
+import com.google.common.collect.ImmutableList;
 import org.apache.commons.lang.Validate;
 import org.bukkit.BanList;
 import org.bukkit.Bukkit;
@@ -12,9 +10,11 @@ import org.bukkit.command.Command;
 import org.bukkit.command.CommandSender;
 import org.bukkit.util.StringUtil;
 
-import com.google.common.collect.ImmutableList;
+import java.util.ArrayList;
+import java.util.List;
 
 public class PardonCommand extends VanillaCommand {
+
     public PardonCommand() {
         super("pardon");
         this.description = "Allows the specified player to use this server";
@@ -25,7 +25,7 @@ public class PardonCommand extends VanillaCommand {
     @Override
     public boolean execute(CommandSender sender, String currentAlias, String[] args) {
         if (!testPermission(sender)) return true;
-        if (args.length != 1)  {
+        if (args.length != 1) {
             sender.sendMessage(ChatColor.RED + "Usage: " + usageMessage);
             return false;
         }
@@ -51,6 +51,7 @@ public class PardonCommand extends VanillaCommand {
             }
             return completions;
         }
+
         return ImmutableList.of();
     }
 }
diff --git a/src/main/java/org/bukkit/command/defaults/PardonIpCommand.java b/src/main/java/org/bukkit/command/defaults/PardonIpCommand.java
index 689a0bd..f0eceac 100644
--- a/src/main/java/org/bukkit/command/defaults/PardonIpCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/PardonIpCommand.java
@@ -1,8 +1,6 @@
 package org.bukkit.command.defaults;
 
-import java.util.ArrayList;
-import java.util.List;
-
+import com.google.common.collect.ImmutableList;
 import org.apache.commons.lang.Validate;
 import org.bukkit.Bukkit;
 import org.bukkit.ChatColor;
@@ -10,9 +8,11 @@ import org.bukkit.command.Command;
 import org.bukkit.command.CommandSender;
 import org.bukkit.util.StringUtil;
 
-import com.google.common.collect.ImmutableList;
+import java.util.ArrayList;
+import java.util.List;
 
 public class PardonIpCommand extends VanillaCommand {
+
     public PardonIpCommand() {
         super("pardon-ip");
         this.description = "Allows the specified IP address to use this server";
@@ -23,7 +23,7 @@ public class PardonIpCommand extends VanillaCommand {
     @Override
     public boolean execute(CommandSender sender, String currentAlias, String[] args) {
         if (!testPermission(sender)) return true;
-        if (args.length != 1)  {
+        if (args.length != 1) {
             sender.sendMessage(ChatColor.RED + "Usage: " + usageMessage);
             return false;
         }
diff --git a/src/main/java/org/bukkit/command/defaults/PlaySoundCommand.java b/src/main/java/org/bukkit/command/defaults/PlaySoundCommand.java
index 0cb5ca2..55fcf39 100644
--- a/src/main/java/org/bukkit/command/defaults/PlaySoundCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/PlaySoundCommand.java
@@ -7,6 +7,7 @@ import org.bukkit.command.CommandSender;
 import org.bukkit.entity.Player;
 
 public class PlaySoundCommand extends VanillaCommand {
+
     public PlaySoundCommand() {
         super("playsound");
         this.description = "Plays a sound to a given player";
@@ -43,21 +44,21 @@ public class PlaySoundCommand extends VanillaCommand {
         double minimumVolume = 0.0D;
 
         switch (args.length) {
-        default:
-        case 8:
-            minimumVolume = getDouble(sender, args[7], 0.0D, 1.0D);
-        case 7:
-            pitch = getDouble(sender, args[6], 0.0D, 2.0D);
-        case 6:
-            volume = getDouble(sender, args[5], 0.0D, Float.MAX_VALUE);
-        case 5:
-            z = getRelativeDouble(z, sender, args[4]);
-        case 4:
-            y = getRelativeDouble(y, sender, args[3]);
-        case 3:
-            x = getRelativeDouble(x, sender, args[2]);
-        case 2:
-            // Noop
+            default:
+            case 8:
+                minimumVolume = getDouble(sender, args[7], 0.0D, 1.0D);
+            case 7:
+                pitch = getDouble(sender, args[6], 0.0D, 2.0D);
+            case 6:
+                volume = getDouble(sender, args[5], 0.0D, Float.MAX_VALUE);
+            case 5:
+                z = getRelativeDouble(z, sender, args[4]);
+            case 4:
+                y = getRelativeDouble(y, sender, args[3]);
+            case 3:
+                x = getRelativeDouble(x, sender, args[2]);
+            case 2:
+                // Noop
         }
 
         final double fixedVolume = volume > 1.0D ? volume * 16.0D : 16.0D;
@@ -81,6 +82,7 @@ public class PlaySoundCommand extends VanillaCommand {
         } else {
             player.playSound(soundLocation, soundArg, (float) volume, (float) pitch);
         }
+
         sender.sendMessage(String.format("Played '%s' to %s", soundArg, playerArg));
         return true;
     }
diff --git a/src/main/java/org/bukkit/command/defaults/PluginsCommand.java b/src/main/java/org/bukkit/command/defaults/PluginsCommand.java
index e21d167..e5fb68b 100644
--- a/src/main/java/org/bukkit/command/defaults/PluginsCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/PluginsCommand.java
@@ -1,13 +1,14 @@
 package org.bukkit.command.defaults;
 
-import java.util.Arrays;
-
 import org.bukkit.Bukkit;
 import org.bukkit.ChatColor;
 import org.bukkit.command.CommandSender;
 import org.bukkit.plugin.Plugin;
 
+import java.util.Arrays;
+
 public class PluginsCommand extends BukkitCommand {
+
     public PluginsCommand(String name) {
         super(name);
         this.description = "Gets a list of plugins running on the server";
@@ -43,8 +44,7 @@ public class PluginsCommand extends BukkitCommand {
 
     // Spigot Start
     @Override
-    public java.util.List<String> tabComplete(CommandSender sender, String alias, String[] args) throws IllegalArgumentException
-    {
+    public java.util.List<String> tabComplete(CommandSender sender, String alias, String[] args) throws IllegalArgumentException {
         return java.util.Collections.emptyList();
     }
     // Spigot End
diff --git a/src/main/java/org/bukkit/command/defaults/ReloadCommand.java b/src/main/java/org/bukkit/command/defaults/ReloadCommand.java
index a08ae80..b3f07ee 100644
--- a/src/main/java/org/bukkit/command/defaults/ReloadCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/ReloadCommand.java
@@ -1,13 +1,14 @@
 package org.bukkit.command.defaults;
 
-import java.util.Arrays;
-
 import org.bukkit.Bukkit;
 import org.bukkit.ChatColor;
 import org.bukkit.command.Command;
 import org.bukkit.command.CommandSender;
 
+import java.util.Arrays;
+
 public class ReloadCommand extends BukkitCommand {
+
     public ReloadCommand(String name) {
         super(name);
         this.description = "Reloads the server configuration and plugins";
@@ -28,8 +29,7 @@ public class ReloadCommand extends BukkitCommand {
 
     // Spigot Start
     @Override
-    public java.util.List<String> tabComplete(CommandSender sender, String alias, String[] args) throws IllegalArgumentException
-    {
+    public java.util.List<String> tabComplete(CommandSender sender, String alias, String[] args) throws IllegalArgumentException {
         return java.util.Collections.emptyList();
     }
     // Spigot End
diff --git a/src/main/java/org/bukkit/command/defaults/SaveCommand.java b/src/main/java/org/bukkit/command/defaults/SaveCommand.java
index 8a44f9c..001b92e 100644
--- a/src/main/java/org/bukkit/command/defaults/SaveCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/SaveCommand.java
@@ -1,16 +1,16 @@
 package org.bukkit.command.defaults;
 
-import java.util.List;
-
+import com.google.common.collect.ImmutableList;
 import org.apache.commons.lang.Validate;
 import org.bukkit.Bukkit;
 import org.bukkit.World;
 import org.bukkit.command.Command;
 import org.bukkit.command.CommandSender;
 
-import com.google.common.collect.ImmutableList;
+import java.util.List;
 
 public class SaveCommand extends VanillaCommand {
+
     public SaveCommand() {
         super("save-all");
         this.description = "Saves the server to disk";
@@ -23,7 +23,6 @@ public class SaveCommand extends VanillaCommand {
         if (!testPermission(sender)) return true;
 
         Command.broadcastCommandMessage(sender, "Forcing save..");
-
         Bukkit.savePlayers();
 
         for (World world : Bukkit.getWorlds()) {
@@ -31,7 +30,6 @@ public class SaveCommand extends VanillaCommand {
         }
 
         Command.broadcastCommandMessage(sender, "Save complete.");
-
         return true;
     }
 
@@ -40,7 +38,6 @@ public class SaveCommand extends VanillaCommand {
         Validate.notNull(sender, "Sender cannot be null");
         Validate.notNull(args, "Arguments cannot be null");
         Validate.notNull(alias, "Alias cannot be null");
-
         return ImmutableList.of();
     }
 }
diff --git a/src/main/java/org/bukkit/command/defaults/SaveOffCommand.java b/src/main/java/org/bukkit/command/defaults/SaveOffCommand.java
index 1fbb3f0..f0f7c12 100644
--- a/src/main/java/org/bukkit/command/defaults/SaveOffCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/SaveOffCommand.java
@@ -1,16 +1,16 @@
 package org.bukkit.command.defaults;
 
-import java.util.List;
-
+import com.google.common.collect.ImmutableList;
 import org.apache.commons.lang.Validate;
 import org.bukkit.Bukkit;
 import org.bukkit.World;
 import org.bukkit.command.Command;
 import org.bukkit.command.CommandSender;
 
-import com.google.common.collect.ImmutableList;
+import java.util.List;
 
 public class SaveOffCommand extends VanillaCommand {
+
     public SaveOffCommand() {
         super("save-off");
         this.description = "Disables server autosaving";
@@ -35,7 +35,6 @@ public class SaveOffCommand extends VanillaCommand {
         Validate.notNull(sender, "Sender cannot be null");
         Validate.notNull(args, "Arguments cannot be null");
         Validate.notNull(alias, "Alias cannot be null");
-
         return ImmutableList.of();
     }
 }
diff --git a/src/main/java/org/bukkit/command/defaults/SaveOnCommand.java b/src/main/java/org/bukkit/command/defaults/SaveOnCommand.java
index 9774f67..f92550d 100644
--- a/src/main/java/org/bukkit/command/defaults/SaveOnCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/SaveOnCommand.java
@@ -1,16 +1,16 @@
 package org.bukkit.command.defaults;
 
-import java.util.List;
-
+import com.google.common.collect.ImmutableList;
 import org.apache.commons.lang.Validate;
 import org.bukkit.Bukkit;
 import org.bukkit.World;
 import org.bukkit.command.Command;
 import org.bukkit.command.CommandSender;
 
-import com.google.common.collect.ImmutableList;
+import java.util.List;
 
 public class SaveOnCommand extends VanillaCommand {
+
     public SaveOnCommand() {
         super("save-on");
         this.description = "Enables server autosaving";
@@ -35,7 +35,6 @@ public class SaveOnCommand extends VanillaCommand {
         Validate.notNull(sender, "Sender cannot be null");
         Validate.notNull(args, "Arguments cannot be null");
         Validate.notNull(alias, "Alias cannot be null");
-
         return ImmutableList.of();
     }
 }
diff --git a/src/main/java/org/bukkit/command/defaults/SayCommand.java b/src/main/java/org/bukkit/command/defaults/SayCommand.java
index 658fe21..1fed6de 100644
--- a/src/main/java/org/bukkit/command/defaults/SayCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/SayCommand.java
@@ -1,7 +1,6 @@
 package org.bukkit.command.defaults;
 
-import java.util.List;
-
+import com.google.common.collect.ImmutableList;
 import org.apache.commons.lang.Validate;
 import org.bukkit.Bukkit;
 import org.bukkit.ChatColor;
@@ -9,9 +8,10 @@ import org.bukkit.command.CommandSender;
 import org.bukkit.command.ConsoleCommandSender;
 import org.bukkit.entity.Player;
 
-import com.google.common.collect.ImmutableList;
+import java.util.List;
 
 public class SayCommand extends VanillaCommand {
+
     public SayCommand() {
         super("say");
         this.description = "Broadcasts the given message as the sender";
@@ -22,7 +22,7 @@ public class SayCommand extends VanillaCommand {
     @Override
     public boolean execute(CommandSender sender, String currentAlias, String[] args) {
         if (!testPermission(sender)) return true;
-        if (args.length == 0)  {
+        if (args.length == 0) {
             sender.sendMessage(ChatColor.RED + "Usage: " + usageMessage);
             return false;
         }
@@ -57,6 +57,7 @@ public class SayCommand extends VanillaCommand {
         if (args.length >= 1) {
             return super.tabComplete(sender, alias, args);
         }
+
         return ImmutableList.of();
     }
 }
diff --git a/src/main/java/org/bukkit/command/defaults/ScoreboardCommand.java b/src/main/java/org/bukkit/command/defaults/ScoreboardCommand.java
index f0490cf..47ebac2 100644
--- a/src/main/java/org/bukkit/command/defaults/ScoreboardCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/ScoreboardCommand.java
@@ -1,13 +1,7 @@
 package org.bukkit.command.defaults;
 
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-
+import com.google.common.collect.ImmutableList;
+import com.google.common.collect.ImmutableMap;
 import org.apache.commons.lang.ArrayUtils;
 import org.apache.commons.lang.StringUtils;
 import org.apache.commons.lang.Validate;
@@ -23,8 +17,13 @@ import org.bukkit.scoreboard.Scoreboard;
 import org.bukkit.scoreboard.Team;
 import org.bukkit.util.StringUtil;
 
-import com.google.common.collect.ImmutableList;
-import com.google.common.collect.ImmutableMap;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
 
 public class ScoreboardCommand extends VanillaCommand {
 
@@ -42,7 +41,7 @@ public class ScoreboardCommand extends VanillaCommand {
             .put("bold", ChatColor.BOLD)
             .put("dark_aqua", ChatColor.DARK_AQUA)
             .put("dark_blue", ChatColor.DARK_BLUE)
-            .put("dark_gray",  ChatColor.DARK_GRAY)
+            .put("dark_gray", ChatColor.DARK_GRAY)
             .put("dark_green", ChatColor.DARK_GREEN)
             .put("dark_purple", ChatColor.DARK_PURPLE)
             .put("dark_red", ChatColor.DARK_RED)
@@ -68,6 +67,36 @@ public class ScoreboardCommand extends VanillaCommand {
         this.setPermission("bukkit.command.scoreboard");
     }
 
+    private static String offlinePlayerSetToString(Set<OfflinePlayer> set) {
+        StringBuilder string = new StringBuilder();
+        String lastValue = null;
+        for (OfflinePlayer value : set) {
+            string.append(lastValue = value.getName()).append(", ");
+        }
+
+        string.delete(string.length() - 2, Integer.MAX_VALUE);
+        if (string.length() != lastValue.length()) {
+            string.insert(string.length() - lastValue.length(), "and ");
+        }
+
+        return string.toString();
+    }
+
+    private static String stringCollectionToString(Collection<String> set) {
+        StringBuilder string = new StringBuilder();
+        String lastValue = null;
+        for (String value : set) {
+            string.append(lastValue = value).append(", ");
+        }
+
+        string.delete(string.length() - 2, Integer.MAX_VALUE);
+        if (string.length() != lastValue.length()) {
+            string.insert(string.length() - lastValue.length(), "and ");
+        }
+
+        return string.toString();
+    }
+
     @Override
     public boolean execute(CommandSender sender, String currentAlias, String[] args) {
         if (!testPermission(sender))
@@ -195,7 +224,7 @@ public class ScoreboardCommand extends VanillaCommand {
                 int value;
                 try {
                     value = Integer.parseInt(valueString);
-                } catch (NumberFormatException e) {
+                } catch (NumberFormatException ex) {
                     sender.sendMessage(ChatColor.RED + "'" + valueString + "' is not a valid number");
                     return false;
                 }
@@ -561,38 +590,12 @@ public class ScoreboardCommand extends VanillaCommand {
         return ImmutableList.of();
     }
 
-    private static String offlinePlayerSetToString(Set<OfflinePlayer> set) {
-        StringBuilder string = new StringBuilder();
-        String lastValue = null;
-        for (OfflinePlayer value : set) {
-            string.append(lastValue = value.getName()).append(", ");
-        }
-        string.delete(string.length() - 2, Integer.MAX_VALUE);
-        if (string.length() != lastValue.length()) {
-            string.insert(string.length() - lastValue.length(), "and ");
-        }
-        return string.toString();
-
-    }
-
-    private static String stringCollectionToString(Collection<String> set) {
-        StringBuilder string = new StringBuilder();
-        String lastValue = null;
-        for (String value : set) {
-            string.append(lastValue = value).append(", ");
-        }
-        string.delete(string.length() - 2, Integer.MAX_VALUE);
-        if (string.length() != lastValue.length()) {
-            string.insert(string.length() - lastValue.length(), "and ");
-        }
-        return string.toString();
-    }
-
     private List<String> getCurrentObjectives() {
         List<String> list = new ArrayList<String>();
         for (Objective objective : Bukkit.getScoreboardManager().getMainScoreboard().getObjectives()) {
             list.add(objective.getName());
         }
+
         Collections.sort(list, String.CASE_INSENSITIVE_ORDER);
         return list;
     }
@@ -602,6 +605,7 @@ public class ScoreboardCommand extends VanillaCommand {
         for (String entry : Bukkit.getScoreboardManager().getMainScoreboard().getEntries()) {
             list.add(entry);
         }
+
         Collections.sort(list, String.CASE_INSENSITIVE_ORDER);
         return list;
     }
@@ -611,6 +615,7 @@ public class ScoreboardCommand extends VanillaCommand {
         for (Team team : Bukkit.getScoreboardManager().getMainScoreboard().getTeams()) {
             list.add(team.getName());
         }
+
         Collections.sort(list, String.CASE_INSENSITIVE_ORDER);
         return list;
     }
diff --git a/src/main/java/org/bukkit/command/defaults/SeedCommand.java b/src/main/java/org/bukkit/command/defaults/SeedCommand.java
index b64fd40..d142f55 100644
--- a/src/main/java/org/bukkit/command/defaults/SeedCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/SeedCommand.java
@@ -1,15 +1,15 @@
 package org.bukkit.command.defaults;
 
-import java.util.List;
-
+import com.google.common.collect.ImmutableList;
 import org.apache.commons.lang.Validate;
 import org.bukkit.Bukkit;
 import org.bukkit.command.CommandSender;
 import org.bukkit.entity.Player;
 
-import com.google.common.collect.ImmutableList;
+import java.util.List;
 
 public class SeedCommand extends VanillaCommand {
+
     public SeedCommand() {
         super("seed");
         this.description = "Shows the world seed";
@@ -35,7 +35,6 @@ public class SeedCommand extends VanillaCommand {
         Validate.notNull(sender, "Sender cannot be null");
         Validate.notNull(args, "Arguments cannot be null");
         Validate.notNull(alias, "Alias cannot be null");
-
         return ImmutableList.of();
     }
 }
diff --git a/src/main/java/org/bukkit/command/defaults/SetIdleTimeoutCommand.java b/src/main/java/org/bukkit/command/defaults/SetIdleTimeoutCommand.java
index 6b8bb2d..dca5b39 100644
--- a/src/main/java/org/bukkit/command/defaults/SetIdleTimeoutCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/SetIdleTimeoutCommand.java
@@ -1,7 +1,6 @@
 package org.bukkit.command.defaults;
 
 import com.google.common.collect.ImmutableList;
-
 import org.apache.commons.lang.Validate;
 import org.bukkit.Bukkit;
 import org.bukkit.ChatColor;
@@ -38,6 +37,7 @@ public class SetIdleTimeoutCommand extends VanillaCommand {
             Command.broadcastCommandMessage(sender, "Successfully set the idle timeout to " + minutes + " minutes.");
             return true;
         }
+
         sender.sendMessage(ChatColor.RED + "Usage: " + usageMessage);
         return false;
     }
@@ -47,7 +47,6 @@ public class SetIdleTimeoutCommand extends VanillaCommand {
         Validate.notNull(sender, "Sender cannot be null");
         Validate.notNull(args, "Arguments cannot be null");
         Validate.notNull(alias, "Alias cannot be null");
-
         return ImmutableList.of();
     }
 }
diff --git a/src/main/java/org/bukkit/command/defaults/SetWorldSpawnCommand.java b/src/main/java/org/bukkit/command/defaults/SetWorldSpawnCommand.java
index 59c5059..d44562f 100644
--- a/src/main/java/org/bukkit/command/defaults/SetWorldSpawnCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/SetWorldSpawnCommand.java
@@ -73,7 +73,6 @@ public class SetWorldSpawnCommand extends VanillaCommand {
         Validate.notNull(sender, "Sender cannot be null");
         Validate.notNull(args, "Arguments cannot be null");
         Validate.notNull(alias, "Alias cannot be null");
-
         return ImmutableList.of();
     }
 }
diff --git a/src/main/java/org/bukkit/command/defaults/SpawnpointCommand.java b/src/main/java/org/bukkit/command/defaults/SpawnpointCommand.java
index 4214bee..202c8e7 100644
--- a/src/main/java/org/bukkit/command/defaults/SpawnpointCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/SpawnpointCommand.java
@@ -52,7 +52,7 @@ public class SpawnpointCommand extends VanillaCommand {
                     x = getInteger(sender, args[pos++], MIN_COORD, MAX_COORD, true);
                     y = getInteger(sender, args[pos++], 0, world.getMaxHeight());
                     z = getInteger(sender, args[pos], MIN_COORD, MAX_COORD, true);
-                } catch(NumberFormatException ex) {
+                } catch (NumberFormatException ex) {
                     sender.sendMessage(ex.getMessage());
                     return true;
                 }
diff --git a/src/main/java/org/bukkit/command/defaults/SpreadPlayersCommand.java b/src/main/java/org/bukkit/command/defaults/SpreadPlayersCommand.java
index 5297cf7..9381f14 100644
--- a/src/main/java/org/bukkit/command/defaults/SpreadPlayersCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/SpreadPlayersCommand.java
@@ -3,11 +3,6 @@ package org.bukkit.command.defaults;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
-import java.util.List;
-import java.util.Map;
-import java.util.Random;
-import java.util.Set;
-
 import org.bukkit.Bukkit;
 import org.bukkit.ChatColor;
 import org.bukkit.Location;
@@ -16,6 +11,11 @@ import org.bukkit.command.CommandSender;
 import org.bukkit.entity.Player;
 import org.bukkit.scoreboard.Team;
 
+import java.util.List;
+import java.util.Map;
+import java.util.Random;
+import java.util.Set;
+
 public class SpreadPlayersCommand extends VanillaCommand {
     private static final Random random = new Random();
 
@@ -92,7 +92,7 @@ public class SpreadPlayersCommand extends VanillaCommand {
         final int rangeSpread = range(world, distance, xRangeMin, zRangeMin, xRangeMax, zRangeMax, locations);
 
         if (rangeSpread == -1) {
-            sender.sendMessage(String.format("Could not spread %d %s around %s,%s (too many players for space - try using spread of at most %s)", spreadSize, teams ? "teams" : "players", x, z));
+            sender.sendMessage(String.format("Could not spread %d %s around %s,%s (too many players for space - try using spread of at most %s)", spreadSize, teams ? "teams" : "players", x, z, 0));
             return false;
         }
 
@@ -100,8 +100,9 @@ public class SpreadPlayersCommand extends VanillaCommand {
 
         sender.sendMessage(String.format("Succesfully spread %d %s around %s,%s", locations.length, teams ? "teams" : "players", x, z));
         if (locations.length > 1) {
-            sender.sendMessage(String.format("(Average distance between %s is %s blocks apart after %s iterations)", teams ? "teams" : "players",  String.format("%.2f", distanceSpread), rangeSpread));
+            sender.sendMessage(String.format("(Average distance between %s is %s blocks apart after %s iterations)", teams ? "teams" : "players", String.format("%.2f", distanceSpread), rangeSpread));
         }
+
         return true;
     }
 
@@ -179,11 +180,10 @@ public class SpreadPlayersCommand extends VanillaCommand {
             }
 
             if (!flag) {
-                Location[] locs = locations;
                 int i1 = locations.length;
 
                 for (j = 0; j < i1; ++j) {
-                    loc1 = locs[j];
+                    loc1 = locations[j];
                     if (world.getHighestBlockYAt(loc1) == 0) {
                         double x = xRangeMin >= xRangeMax ? xRangeMin : random.nextDouble() * (xRangeMax - xRangeMin) + xRangeMin;
                         double z = zRangeMin >= zRangeMax ? zRangeMin : random.nextDouble() * (zRangeMax - zRangeMin) + zRangeMin;
@@ -208,8 +208,7 @@ public class SpreadPlayersCommand extends VanillaCommand {
         int i = 0;
         Map<Team, Location> hashmap = Maps.newHashMap();
 
-        for (int j = 0; j < list.size(); ++j) {
-            Player player = list.get(j);
+        for (Player player : list) {
             Location location;
 
             if (teams) {
@@ -227,9 +226,9 @@ public class SpreadPlayersCommand extends VanillaCommand {
             player.teleport(new Location(world, Math.floor(location.getX()) + 0.5D, world.getHighestBlockYAt((int) location.getX(), (int) location.getZ()), Math.floor(location.getZ()) + 0.5D));
             double value = Double.MAX_VALUE;
 
-            for (int k = 0; k < locations.length; ++k) {
-                if (location != locations[k]) {
-                    double d = location.distanceSquared(locations[k]);
+            for (Location location1 : locations) {
+                if (location != location1) {
+                    double d = location.distanceSquared(location1);
                     value = Math.min(d, value);
                 }
             }
@@ -243,7 +242,6 @@ public class SpreadPlayersCommand extends VanillaCommand {
 
     private int getTeams(List<Player> players) {
         Set<Team> teams = Sets.newHashSet();
-
         for (Player player : players) {
             teams.add(player.getScoreboard().getPlayerTeam(player));
         }
diff --git a/src/main/java/org/bukkit/command/defaults/StopCommand.java b/src/main/java/org/bukkit/command/defaults/StopCommand.java
index be70e63..749b52f 100644
--- a/src/main/java/org/bukkit/command/defaults/StopCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/StopCommand.java
@@ -1,18 +1,17 @@
 package org.bukkit.command.defaults;
 
-import java.util.List;
-
+import com.google.common.collect.ImmutableList;
 import org.apache.commons.lang.StringUtils;
 import org.apache.commons.lang.Validate;
-
 import org.bukkit.Bukkit;
 import org.bukkit.command.Command;
 import org.bukkit.command.CommandSender;
 import org.bukkit.entity.Player;
 
-import com.google.common.collect.ImmutableList;
+import java.util.List;
 
 public class StopCommand extends VanillaCommand {
+
     public StopCommand() {
         super("stop");
         this.description = "Stops the server with optional reason";
@@ -42,7 +41,6 @@ public class StopCommand extends VanillaCommand {
         Validate.notNull(sender, "Sender cannot be null");
         Validate.notNull(args, "Arguments cannot be null");
         Validate.notNull(alias, "Alias cannot be null");
-
         return ImmutableList.of();
     }
 }
diff --git a/src/main/java/org/bukkit/command/defaults/TeleportCommand.java b/src/main/java/org/bukkit/command/defaults/TeleportCommand.java
index fd1b9bd..b1a61e3 100644
--- a/src/main/java/org/bukkit/command/defaults/TeleportCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/TeleportCommand.java
@@ -1,7 +1,6 @@
 package org.bukkit.command.defaults;
 
-import java.util.List;
-
+import com.google.common.collect.ImmutableList;
 import org.apache.commons.lang.Validate;
 import org.bukkit.Bukkit;
 import org.bukkit.ChatColor;
@@ -11,7 +10,7 @@ import org.bukkit.command.CommandSender;
 import org.bukkit.entity.Player;
 import org.bukkit.event.player.PlayerTeleportEvent.TeleportCause;
 
-import com.google.common.collect.ImmutableList;
+import java.util.List;
 
 public class TeleportCommand extends VanillaCommand {
 
@@ -119,6 +118,7 @@ public class TeleportCommand extends VanillaCommand {
         if (args.length == 1 || args.length == 2) {
             return super.tabComplete(sender, alias, args);
         }
+
         return ImmutableList.of();
     }
 }
diff --git a/src/main/java/org/bukkit/command/defaults/TellCommand.java b/src/main/java/org/bukkit/command/defaults/TellCommand.java
index fc49207..27fb7aa 100644
--- a/src/main/java/org/bukkit/command/defaults/TellCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/TellCommand.java
@@ -1,25 +1,26 @@
 package org.bukkit.command.defaults;
 
-import java.util.Arrays;
-
 import org.bukkit.Bukkit;
 import org.bukkit.ChatColor;
 import org.bukkit.command.CommandSender;
 import org.bukkit.entity.Player;
 
+import java.util.Arrays;
+
 public class TellCommand extends VanillaCommand {
+
     public TellCommand() {
         super("tell");
         this.description = "Sends a private message to the given player";
         this.usageMessage = "/tell <player> <message>";
-        this.setAliases(Arrays.asList(new String[] { "w", "msg" }));
+        this.setAliases(Arrays.asList("w", "msg"));
         this.setPermission("bukkit.command.tell");
     }
 
     @Override
     public boolean execute(CommandSender sender, String currentAlias, String[] args) {
         if (!testPermission(sender)) return true;
-        if (args.length < 2)  {
+        if (args.length < 2) {
             sender.sendMessage(ChatColor.RED + "Usage: " + usageMessage);
             return false;
         }
@@ -48,12 +49,11 @@ public class TellCommand extends VanillaCommand {
 
     // Spigot Start
     @Override
-    public java.util.List<String> tabComplete(CommandSender sender, String alias, String[] args) throws IllegalArgumentException
-    {
-        if ( args.length == 0 )
-        {
-            return super.tabComplete( sender, alias, args );
+    public java.util.List<String> tabComplete(CommandSender sender, String alias, String[] args) throws IllegalArgumentException {
+        if (args.length == 0) {
+            return super.tabComplete(sender, alias, args);
         }
+
         return java.util.Collections.emptyList();
     }
     // Spigot End
diff --git a/src/main/java/org/bukkit/command/defaults/TestForCommand.java b/src/main/java/org/bukkit/command/defaults/TestForCommand.java
index a687fef..8ad5004 100644
--- a/src/main/java/org/bukkit/command/defaults/TestForCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/TestForCommand.java
@@ -1,10 +1,10 @@
 package org.bukkit.command.defaults;
 
-import org.bukkit.Bukkit;
 import org.bukkit.ChatColor;
 import org.bukkit.command.CommandSender;
 
 public class TestForCommand extends VanillaCommand {
+
     public TestForCommand() {
         super("testfor");
         this.description = "Tests whether a specifed player is online";
@@ -15,7 +15,7 @@ public class TestForCommand extends VanillaCommand {
     @Override
     public boolean execute(CommandSender sender, String currentAlias, String[] args) {
         if (!testPermission(sender)) return true;
-        if (args.length < 1)  {
+        if (args.length < 1) {
             sender.sendMessage(ChatColor.RED + "Usage: " + usageMessage);
             return false;
         }
@@ -26,12 +26,11 @@ public class TestForCommand extends VanillaCommand {
 
     // Spigot Start
     @Override
-    public java.util.List<String> tabComplete(CommandSender sender, String alias, String[] args) throws IllegalArgumentException
-    {
-        if ( args.length == 0 )
-        {
-            return super.tabComplete( sender, alias, args );
+    public java.util.List<String> tabComplete(CommandSender sender, String alias, String[] args) throws IllegalArgumentException {
+        if (args.length == 0) {
+            return super.tabComplete(sender, alias, args);
         }
+
         return java.util.Collections.emptyList();
     }
     // Spigot End
diff --git a/src/main/java/org/bukkit/command/defaults/TimeCommand.java b/src/main/java/org/bukkit/command/defaults/TimeCommand.java
index 86083b4..9af6534 100644
--- a/src/main/java/org/bukkit/command/defaults/TimeCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/TimeCommand.java
@@ -1,8 +1,6 @@
 package org.bukkit.command.defaults;
 
-import java.util.ArrayList;
-import java.util.List;
-
+import com.google.common.collect.ImmutableList;
 import org.apache.commons.lang.Validate;
 import org.bukkit.Bukkit;
 import org.bukkit.ChatColor;
@@ -11,9 +9,11 @@ import org.bukkit.command.Command;
 import org.bukkit.command.CommandSender;
 import org.bukkit.util.StringUtil;
 
-import com.google.common.collect.ImmutableList;
+import java.util.ArrayList;
+import java.util.List;
 
 public class TimeCommand extends VanillaCommand {
+
     private static final List<String> TABCOMPLETE_ADD_SET = ImmutableList.of("add", "set");
     private static final List<String> TABCOMPLETE_DAY_NIGHT = ImmutableList.of("day", "night");
 
@@ -33,15 +33,15 @@ public class TimeCommand extends VanillaCommand {
 
         int value;
 
-        if (args[0].equals("set")) {
+        if (args[0].equalsIgnoreCase("set")) {
             if (!sender.hasPermission("bukkit.command.time.set")) {
                 sender.sendMessage(ChatColor.RED + "You don't have permission to set the time");
                 return true;
             }
 
-            if (args[1].equals("day")) {
+            if (args[1].equalsIgnoreCase("day")) {
                 value = 0;
-            } else if (args[1].equals("night")) {
+            } else if (args[1].equalsIgnoreCase("night")) {
                 value = 12500;
             } else {
                 value = getInteger(sender, args[1], 0);
@@ -52,7 +52,7 @@ public class TimeCommand extends VanillaCommand {
             }
 
             Command.broadcastCommandMessage(sender, "Set time to " + value);
-        } else if (args[0].equals("add")) {
+        } else if (args[0].equalsIgnoreCase("add")) {
             if (!sender.hasPermission("bukkit.command.time.add")) {
                 sender.sendMessage(ChatColor.RED + "You don't have permission to set the time");
                 return true;
@@ -83,6 +83,7 @@ public class TimeCommand extends VanillaCommand {
         } else if (args.length == 2 && args[0].equalsIgnoreCase("set")) {
             return StringUtil.copyPartialMatches(args[1], TABCOMPLETE_DAY_NIGHT, new ArrayList<String>(TABCOMPLETE_DAY_NIGHT.size()));
         }
+
         return ImmutableList.of();
     }
 }
diff --git a/src/main/java/org/bukkit/command/defaults/TimingsCommand.java b/src/main/java/org/bukkit/command/defaults/TimingsCommand.java
index 94ce5dc..7d468f4 100644
--- a/src/main/java/org/bukkit/command/defaults/TimingsCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/TimingsCommand.java
@@ -1,38 +1,37 @@
 package org.bukkit.command.defaults;
 
-import java.io.File;
-import java.io.IOException;
-import java.io.PrintStream;
-import java.util.ArrayList;
-import java.util.List;
-
+import com.google.common.collect.ImmutableList;
 import org.apache.commons.lang.Validate;
 import org.bukkit.Bukkit;
 import org.bukkit.ChatColor;
 import org.bukkit.command.CommandSender;
+import org.bukkit.command.RemoteConsoleCommandSender;
 import org.bukkit.event.Event;
 import org.bukkit.event.HandlerList;
 import org.bukkit.plugin.Plugin;
 import org.bukkit.plugin.RegisteredListener;
+import org.bukkit.plugin.SimplePluginManager;
 import org.bukkit.plugin.TimedRegisteredListener;
 import org.bukkit.util.StringUtil;
+import org.spigotmc.CustomTimingsHandler;
 
-import com.google.common.collect.ImmutableList;
-
-// Spigot start
 import java.io.ByteArrayOutputStream;
+import java.io.File;
+import java.io.IOException;
 import java.io.OutputStream;
+import java.io.PrintStream;
 import java.net.HttpURLConnection;
 import java.net.URL;
 import java.net.URLEncoder;
+import java.util.ArrayList;
+import java.util.List;
 import java.util.logging.Level;
 
-import org.bukkit.command.RemoteConsoleCommandSender;
-import org.bukkit.plugin.SimplePluginManager;
-import org.spigotmc.CustomTimingsHandler;
+// Spigot start
 // Spigot end
 
 public class TimingsCommand extends BukkitCommand {
+
     private static final List<String> TIMINGS_SUBCOMMANDS = ImmutableList.of("report", "reset", "on", "off", "paste"); // Spigot
     public static long timingStart = 0; // Spigot
 
@@ -45,61 +44,58 @@ public class TimingsCommand extends BukkitCommand {
 
     // Spigot start - redesigned Timings Command
     public void executeSpigotTimings(CommandSender sender, String[] args) {
-        if ( "on".equals( args[0] ) )
-        {
-            ( (SimplePluginManager) Bukkit.getPluginManager() ).useTimings( true );
+        if (args[0].equalsIgnoreCase("on")) {
+            ((SimplePluginManager) Bukkit.getPluginManager()).useTimings(true);
             CustomTimingsHandler.reload();
-            sender.sendMessage( "Enabled Timings & Reset" );
+            sender.sendMessage("Enabled Timings & Reset");
             return;
-        } else if ( "off".equals( args[0] ) )
-        {
-            ( (SimplePluginManager) Bukkit.getPluginManager() ).useTimings( false );
-            sender.sendMessage( "Disabled Timings" );
+        } else if (args[0].equalsIgnoreCase("off")) {
+            ((SimplePluginManager) Bukkit.getPluginManager()).useTimings(false);
+            sender.sendMessage("Disabled Timings");
             return;
         }
 
-        if ( !Bukkit.getPluginManager().useTimings() )
-        {
-            sender.sendMessage( "Please enable timings by typing /timings on" );
+        if (!Bukkit.getPluginManager().useTimings()) {
+            sender.sendMessage("Please enable timings by typing /timings on");
             return;
         }
 
-        boolean paste = "paste".equals( args[0] );
-        if ("reset".equals(args[0])) {
+        boolean paste = args[0].equalsIgnoreCase("paste");
+        if (args[0].equalsIgnoreCase("reset")) {
             CustomTimingsHandler.reload();
             sender.sendMessage("Timings reset");
-        } else if ("merged".equals(args[0]) || "report".equals(args[0]) || paste) {
+        } else if (args[0].equalsIgnoreCase("merged") || args[0].equalsIgnoreCase("report") || paste) {
             long sampleTime = System.nanoTime() - timingStart;
             int index = 0;
             File timingFolder = new File("timings");
-            timingFolder.mkdirs();
-            File timings = new File(timingFolder, "timings.txt");
-            ByteArrayOutputStream bout = ( paste ) ? new ByteArrayOutputStream() : null;
-            while (timings.exists()) timings = new File(timingFolder, "timings" + (++index) + ".txt");
-            PrintStream fileTimings = null;
-            try {
-                fileTimings = ( paste ) ? new PrintStream( bout ) : new PrintStream( timings );
-
-                CustomTimingsHandler.printTimings(fileTimings);
-                fileTimings.println( "Sample time " + sampleTime + " (" + sampleTime / 1E9 + "s)" );
-
-                fileTimings.println( "<spigotConfig>" );
-                fileTimings.println( Bukkit.spigot().getConfig().saveToString() );
-                fileTimings.println( "</spigotConfig>" );
-
-                if ( paste )
-                {
-                    new PasteThread( sender, bout ).start();
-                    return;
-                }
+            if (timingFolder.mkdirs()) {
+                File timings = new File(timingFolder, "timings.txt");
+                ByteArrayOutputStream bout = (paste) ? new ByteArrayOutputStream() : null;
+                while (timings.exists()) timings = new File(timingFolder, "timings" + (++index) + ".txt");
+                PrintStream fileTimings = null;
+                try {
+                    fileTimings = (paste) ? new PrintStream(bout) : new PrintStream(timings);
+
+                    CustomTimingsHandler.printTimings(fileTimings);
+                    fileTimings.println("Sample time " + sampleTime + " (" + sampleTime / 1E9 + "s)");
+
+                    fileTimings.println("<spigotConfig>");
+                    fileTimings.println(Bukkit.spigot().getConfig().saveToString());
+                    fileTimings.println("</spigotConfig>");
+
+                    if (paste) {
+                        new PasteThread(sender, bout).start();
+                        return;
+                    }
 
-                sender.sendMessage("Timings written to " + timings.getPath());
-                sender.sendMessage( "Paste contents of file into form at http://aikar.co/timings.php to read results." );
+                    sender.sendMessage("Timings written to " + timings.getPath());
+                    sender.sendMessage("Paste contents of file into form at http://aikar.co/timings.php to read results.");
+                } catch (IOException ignored) {
 
-            } catch (IOException e) {
-            } finally {
-                if (fileTimings != null) {
-                    fileTimings.close();
+                } finally {
+                    if (fileTimings != null) {
+                        fileTimings.close();
+                    }
                 }
             }
         }
@@ -109,79 +105,88 @@ public class TimingsCommand extends BukkitCommand {
     @Override
     public boolean execute(CommandSender sender, String currentAlias, String[] args) {
         if (!testPermission(sender)) return true;
-        if (args.length < 1)  { // Spigot
+
+        if (args.length < 1) { // Spigot
             sender.sendMessage(ChatColor.RED + "Usage: " + usageMessage);
             return false;
         }
-        if (true) { executeSpigotTimings(sender, args); return true; } // Spigot
+
+        if (true) {
+            executeSpigotTimings(sender, args);
+            return true;
+        }
+
+        // Spigot
         if (!sender.getServer().getPluginManager().useTimings()) {
             sender.sendMessage("Please enable timings by setting \"settings.plugin-profiling\" to true in bukkit.yml");
             return true;
         }
 
-        boolean separate = "separate".equals(args[0]);
-        if ("reset".equals(args[0])) {
+        boolean separate = args[0].equalsIgnoreCase("seperate");
+        if (args[0].equalsIgnoreCase("reset")) {
             for (HandlerList handlerList : HandlerList.getHandlerLists()) {
                 for (RegisteredListener listener : handlerList.getRegisteredListeners()) {
                     if (listener instanceof TimedRegisteredListener) {
-                        ((TimedRegisteredListener)listener).reset();
+                        ((TimedRegisteredListener) listener).reset();
                     }
                 }
             }
-            sender.sendMessage("Timings reset");
-        } else if ("merged".equals(args[0]) || separate) {
 
+            sender.sendMessage("Timings reset");
+        } else if (args[0].equalsIgnoreCase("merged") || separate) {
             int index = 0;
             int pluginIdx = 0;
             File timingFolder = new File("timings");
-            timingFolder.mkdirs();
-            File timings = new File(timingFolder, "timings.txt");
-            File names = null;
-            while (timings.exists()) timings = new File(timingFolder, "timings" + (++index) + ".txt");
-            PrintStream fileTimings = null;
-            PrintStream fileNames = null;
-            try {
-                fileTimings = new PrintStream(timings);
-                if (separate) {
-                    names = new File(timingFolder, "names" + index + ".txt");
-                    fileNames = new PrintStream(names);
-                }
-                for (Plugin plugin : Bukkit.getPluginManager().getPlugins()) {
-                    pluginIdx++;
-                    long totalTime = 0;
+            if (timingFolder.mkdirs()) {
+                File timings = new File(timingFolder, "timings.txt");
+                File names = null;
+                while (timings.exists()) timings = new File(timingFolder, "timings" + (++index) + ".txt");
+                PrintStream fileTimings = null;
+                PrintStream fileNames = null;
+                try {
+                    fileTimings = new PrintStream(timings);
                     if (separate) {
-                        fileNames.println(pluginIdx + " " + plugin.getDescription().getFullName());
-                        fileTimings.println("Plugin " + pluginIdx);
+                        names = new File(timingFolder, "names" + index + ".txt");
+                        fileNames = new PrintStream(names);
                     }
-                    else fileTimings.println(plugin.getDescription().getFullName());
-                    for (RegisteredListener listener : HandlerList.getRegisteredListeners(plugin)) {
-                        if (listener instanceof TimedRegisteredListener) {
-                            TimedRegisteredListener trl = (TimedRegisteredListener) listener;
-                            long time = trl.getTotalTime();
-                            int count = trl.getCount();
-                            if (count == 0) continue;
-                            long avg = time / count;
-                            totalTime += time;
-                            Class<? extends Event> eventClass = trl.getEventClass();
-                            if (count > 0 && eventClass != null) {
-                                fileTimings.println("    " + eventClass.getSimpleName() + (trl.hasMultiple() ? " (and sub-classes)" : "") + " Time: " + time + " Count: " + count + " Avg: " + avg);
+                    for (Plugin plugin : Bukkit.getPluginManager().getPlugins()) {
+                        pluginIdx++;
+                        long totalTime = 0;
+                        if (separate) {
+                            fileNames.println(pluginIdx + " " + plugin.getDescription().getFullName());
+                            fileTimings.println("Plugin " + pluginIdx);
+                        } else fileTimings.println(plugin.getDescription().getFullName());
+                        for (RegisteredListener listener : HandlerList.getRegisteredListeners(plugin)) {
+                            if (listener instanceof TimedRegisteredListener) {
+                                TimedRegisteredListener trl = (TimedRegisteredListener) listener;
+                                long time = trl.getTotalTime();
+                                int count = trl.getCount();
+                                if (count == 0) continue;
+                                long avg = time / count;
+                                totalTime += time;
+                                Class<? extends Event> eventClass = trl.getEventClass();
+                                if (count > 0 && eventClass != null) {
+                                    fileTimings.println("    " + eventClass.getSimpleName() + (trl.hasMultiple() ? " (and sub-classes)" : "") + " Time: " + time + " Count: " + count + " Avg: " + avg);
+                                }
                             }
                         }
+                        fileTimings.println("    Total time " + totalTime + " (" + totalTime / 1000000000 + "s)");
+                    }
+                    sender.sendMessage("Timings written to " + timings.getPath());
+                    if (separate) sender.sendMessage("Names written to " + names.getPath());
+                } catch (IOException ignored) {
+
+                } finally {
+                    if (fileTimings != null) {
+                        fileTimings.close();
+                    }
+                    if (fileNames != null) {
+                        fileNames.close();
                     }
-                    fileTimings.println("    Total time " + totalTime + " (" + totalTime / 1000000000 + "s)");
-                }
-                sender.sendMessage("Timings written to " + timings.getPath());
-                if (separate) sender.sendMessage("Names written to " + names.getPath());
-            } catch (IOException e) {
-            } finally {
-                if (fileTimings != null) {
-                    fileTimings.close();
-                }
-                if (fileNames != null) {
-                    fileNames.close();
                 }
             }
         }
+
         return true;
     }
 
@@ -194,19 +199,18 @@ public class TimingsCommand extends BukkitCommand {
         if (args.length == 1) {
             return StringUtil.copyPartialMatches(args[0], TIMINGS_SUBCOMMANDS, new ArrayList<String>(TIMINGS_SUBCOMMANDS.size()));
         }
+
         return ImmutableList.of();
     }
 
     // Spigot start
-    private static class PasteThread extends Thread
-    {
+    private static class PasteThread extends Thread {
 
         private final CommandSender sender;
         private final ByteArrayOutputStream bout;
 
-        public PasteThread(CommandSender sender, ByteArrayOutputStream bout)
-        {
-            super( "Timings paste thread" );
+        public PasteThread(CommandSender sender, ByteArrayOutputStream bout) {
+            super("Timings paste thread");
             this.sender = sender;
             this.bout = bout;
         }
@@ -221,28 +225,25 @@ public class TimingsCommand extends BukkitCommand {
         }
 
         @Override
-        public void run()
-        {
-            try
-            {
-                HttpURLConnection con = (HttpURLConnection) new URL( "http://paste.ubuntu.com/" ).openConnection();
-                con.setDoOutput( true );
-                con.setRequestMethod( "POST" );
-                con.setInstanceFollowRedirects( false );
+        public void run() {
+            try {
+                HttpURLConnection con = (HttpURLConnection) new URL("http://paste.ubuntu.com/").openConnection();
+                con.setDoOutput(true);
+                con.setRequestMethod("POST");
+                con.setInstanceFollowRedirects(false);
 
                 OutputStream out = con.getOutputStream();
-                out.write( "poster=Spigot&syntax=text&content=".getBytes( "UTF-8" ) );
-                out.write( URLEncoder.encode( bout.toString( "UTF-8" ), "UTF-8" ).getBytes( "UTF-8" ) );
+                out.write("poster=Spigot&syntax=text&content=".getBytes("UTF-8"));
+                out.write(URLEncoder.encode(bout.toString("UTF-8"), "UTF-8").getBytes("UTF-8"));
                 out.close();
                 con.getInputStream().close();
 
-                String location = con.getHeaderField( "Location" );
-                String pasteID = location.substring( "http://paste.ubuntu.com/".length(), location.length() - 1 );
-                sender.sendMessage( ChatColor.GREEN + "View timings results can be viewed at http://aikar.co/timings.php?url=" + pasteID );
-            } catch ( IOException ex )
-            {
-                sender.sendMessage( ChatColor.RED + "Error pasting timings, check your console for more information" );
-                Bukkit.getServer().getLogger().log( Level.WARNING, "Could not paste timings", ex );
+                String location = con.getHeaderField("Location");
+                String pasteID = location.substring("http://paste.ubuntu.com/".length(), location.length() - 1);
+                sender.sendMessage(ChatColor.GREEN + "View timings results can be viewed at http://aikar.co/timings.php?url=" + pasteID);
+            } catch (IOException ex) {
+                sender.sendMessage(ChatColor.RED + "Error pasting timings, check your console for more information");
+                Bukkit.getServer().getLogger().log(Level.WARNING, "Could not paste timings", ex);
             }
         }
     }
diff --git a/src/main/java/org/bukkit/command/defaults/ToggleDownfallCommand.java b/src/main/java/org/bukkit/command/defaults/ToggleDownfallCommand.java
index ac78bfb..5edc195 100644
--- a/src/main/java/org/bukkit/command/defaults/ToggleDownfallCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/ToggleDownfallCommand.java
@@ -1,7 +1,6 @@
 package org.bukkit.command.defaults;
 
-import java.util.List;
-
+import com.google.common.collect.ImmutableList;
 import org.apache.commons.lang.Validate;
 import org.bukkit.Bukkit;
 import org.bukkit.ChatColor;
@@ -10,9 +9,10 @@ import org.bukkit.command.Command;
 import org.bukkit.command.CommandSender;
 import org.bukkit.entity.Player;
 
-import com.google.common.collect.ImmutableList;
+import java.util.List;
 
 public class ToggleDownfallCommand extends VanillaCommand {
+
     public ToggleDownfallCommand() {
         super("toggledownfall");
         this.description = "Toggles rain on/off on a given world";
@@ -24,7 +24,7 @@ public class ToggleDownfallCommand extends VanillaCommand {
     public boolean execute(CommandSender sender, String currentAlias, String[] args) {
         if (!testPermission(sender)) return true;
 
-        World world = null;
+        World world;
 
         if (args.length == 1) {
             world = Bukkit.getWorld(args[0]);
@@ -41,7 +41,6 @@ public class ToggleDownfallCommand extends VanillaCommand {
 
         Command.broadcastCommandMessage(sender, "Toggling downfall " + (world.hasStorm() ? "off" : "on") + " for world '" + world.getName() + "'");
         world.setStorm(!world.hasStorm());
-
         return true;
     }
 
@@ -50,7 +49,6 @@ public class ToggleDownfallCommand extends VanillaCommand {
         Validate.notNull(sender, "Sender cannot be null");
         Validate.notNull(args, "Arguments cannot be null");
         Validate.notNull(alias, "Alias cannot be null");
-
         return ImmutableList.of();
     }
 }
diff --git a/src/main/java/org/bukkit/command/defaults/VanillaCommand.java b/src/main/java/org/bukkit/command/defaults/VanillaCommand.java
index 9b13ac6..fc86c35 100644
--- a/src/main/java/org/bukkit/command/defaults/VanillaCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/VanillaCommand.java
@@ -1,11 +1,12 @@
 package org.bukkit.command.defaults;
 
-import java.util.List;
-
 import org.bukkit.command.Command;
 import org.bukkit.command.CommandSender;
 
+import java.util.List;
+
 public abstract class VanillaCommand extends Command {
+
     static final int MAX_COORD = 30000000;
     static final int MIN_COORD_MINUS_ONE = -30000001;
     static final int MIN_COORD = -30000000;
@@ -18,6 +19,39 @@ public abstract class VanillaCommand extends Command {
         super(name, description, usageMessage, aliases);
     }
 
+    public static double getRelativeDouble(double original, CommandSender sender, String input) {
+        if (input.startsWith("~")) {
+            double value = getDouble(sender, input.substring(1));
+            if (value == MIN_COORD_MINUS_ONE) {
+                return MIN_COORD_MINUS_ONE;
+            }
+            return original + value;
+        } else {
+            return getDouble(sender, input);
+        }
+    }
+
+    public static double getDouble(CommandSender sender, String input) {
+        try {
+            return Double.parseDouble(input);
+        } catch (NumberFormatException ex) {
+            return MIN_COORD_MINUS_ONE;
+        }
+    }
+
+    public static double getDouble(CommandSender sender, String input, double min, double max) {
+        double result = getDouble(sender, input);
+
+        // TODO: This should throw an exception instead.
+        if (result < min) {
+            result = min;
+        } else if (result > max) {
+            result = max;
+        }
+
+        return result;
+    }
+
     public boolean matches(String input) {
         return input.equalsIgnoreCase(this.getName());
     }
@@ -58,39 +92,6 @@ public abstract class VanillaCommand extends Command {
         }
     }
 
-    public static double getRelativeDouble(double original, CommandSender sender, String input) {
-        if (input.startsWith("~")) {
-            double value = getDouble(sender, input.substring(1));
-            if (value == MIN_COORD_MINUS_ONE) {
-                return MIN_COORD_MINUS_ONE;
-            }
-            return original + value;
-        } else {
-            return getDouble(sender, input);
-        }
-    }
-
-    public static double getDouble(CommandSender sender, String input) {
-        try {
-            return Double.parseDouble(input);
-        } catch (NumberFormatException ex) {
-            return MIN_COORD_MINUS_ONE;
-        }
-    }
-
-    public static double getDouble(CommandSender sender, String input, double min, double max) {
-        double result = getDouble(sender, input);
-
-        // TODO: This should throw an exception instead.
-        if (result < min) {
-            result = min;
-        } else if (result > max) {
-            result = max;
-        }
-
-        return result;
-    }
-
     String createString(String[] args, int start) {
         return createString(args, start, " ");
     }
diff --git a/src/main/java/org/bukkit/command/defaults/VersionCommand.java b/src/main/java/org/bukkit/command/defaults/VersionCommand.java
index 902f9d1..a63a870 100644
--- a/src/main/java/org/bukkit/command/defaults/VersionCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/VersionCommand.java
@@ -1,9 +1,6 @@
 package org.bukkit.command.defaults;
 
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-
+import com.google.common.collect.ImmutableList;
 import org.apache.commons.lang.Validate;
 import org.bukkit.Bukkit;
 import org.bukkit.ChatColor;
@@ -12,9 +9,12 @@ import org.bukkit.plugin.Plugin;
 import org.bukkit.plugin.PluginDescriptionFile;
 import org.bukkit.util.StringUtil;
 
-import com.google.common.collect.ImmutableList;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
 
 public class VersionCommand extends BukkitCommand {
+
     public VersionCommand(String name) {
         super(name);
 
@@ -124,6 +124,7 @@ public class VersionCommand extends BukkitCommand {
             }
             return completions;
         }
+
         return ImmutableList.of();
     }
 }
diff --git a/src/main/java/org/bukkit/command/defaults/WeatherCommand.java b/src/main/java/org/bukkit/command/defaults/WeatherCommand.java
index a39c1b0..138decb 100644
--- a/src/main/java/org/bukkit/command/defaults/WeatherCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/WeatherCommand.java
@@ -14,6 +14,8 @@ import java.util.List;
 import java.util.Random;
 
 public class WeatherCommand extends VanillaCommand {
+
+    private static final int TICKS_PER_SECOND = 20;
     private static final List<String> WEATHER_TYPES = ImmutableList.of("clear", "rain", "thunder");
 
     public WeatherCommand() {
@@ -31,9 +33,9 @@ public class WeatherCommand extends VanillaCommand {
             return false;
         }
 
-        int duration = (300 + new Random().nextInt(600)) * 20;
+        int duration = (300 + new Random().nextInt(600)) * TICKS_PER_SECOND;
         if (args.length >= 2) {
-            duration = getInteger(sender, args[1], 1, 1000000) * 20;
+            duration = getInteger(sender, args[1], 1, 1000000) * TICKS_PER_SECOND;
         }
 
         World world = Bukkit.getWorlds().get(0);
@@ -41,18 +43,18 @@ public class WeatherCommand extends VanillaCommand {
         world.setWeatherDuration(duration);
         world.setThunderDuration(duration);
 
-        if ("clear".equalsIgnoreCase(args[0])) {
+        if (args[0].equalsIgnoreCase("clear")) {
             world.setStorm(false);
             world.setThundering(false);
-            Command.broadcastCommandMessage(sender, "Changed weather to clear for " + (duration / 20) + " seconds.");
-        } else if ("rain".equalsIgnoreCase(args[0])) {
+            Command.broadcastCommandMessage(sender, "Changed weather to clear for " + (duration / TICKS_PER_SECOND) + " seconds.");
+        } else if (args[0].equalsIgnoreCase("rain")) {
             world.setStorm(true);
             world.setThundering(false);
-            Command.broadcastCommandMessage(sender, "Changed weather to rainy for " + (duration / 20) + " seconds.");
-        } else if ("thunder".equalsIgnoreCase(args[0])) {
+            Command.broadcastCommandMessage(sender, "Changed weather to rainy for " + (duration / TICKS_PER_SECOND) + " seconds.");
+        } else if (args[0].equalsIgnoreCase("thunder")) {
             world.setStorm(true);
             world.setThundering(true);
-            Command.broadcastCommandMessage(sender, "Changed weather to thundering " + (duration / 20) + " seconds.");
+            Command.broadcastCommandMessage(sender, "Changed weather to thundering " + (duration / TICKS_PER_SECOND) + " seconds.");
         }
 
         return true;
diff --git a/src/main/java/org/bukkit/command/defaults/WhitelistCommand.java b/src/main/java/org/bukkit/command/defaults/WhitelistCommand.java
index 6559b33..dce3bc1 100644
--- a/src/main/java/org/bukkit/command/defaults/WhitelistCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/WhitelistCommand.java
@@ -1,8 +1,6 @@
 package org.bukkit.command.defaults;
 
-import java.util.ArrayList;
-import java.util.List;
-
+import com.google.common.collect.ImmutableList;
 import org.apache.commons.lang.Validate;
 import org.bukkit.Bukkit;
 import org.bukkit.ChatColor;
@@ -11,9 +9,11 @@ import org.bukkit.command.Command;
 import org.bukkit.command.CommandSender;
 import org.bukkit.util.StringUtil;
 
-import com.google.common.collect.ImmutableList;
+import java.util.ArrayList;
+import java.util.List;
 
 public class WhitelistCommand extends VanillaCommand {
+
     private static final List<String> WHITELIST_SUBCOMMANDS = ImmutableList.of("add", "remove", "on", "off", "list", "reload");
 
     public WhitelistCommand() {
diff --git a/src/main/java/org/bukkit/configuration/Configuration.java b/src/main/java/org/bukkit/configuration/Configuration.java
index 9289c21..d7d8016 100644
--- a/src/main/java/org/bukkit/configuration/Configuration.java
+++ b/src/main/java/org/bukkit/configuration/Configuration.java
@@ -6,6 +6,7 @@ import java.util.Map;
  * Represents a source of configurable options and settings
  */
 public interface Configuration extends ConfigurationSection {
+
     /**
      * Sets the default value of the given path as provided.
      * <p>
@@ -16,11 +17,11 @@ public interface Configuration extends ConfigurationSection {
      * If value is null, the value will be removed from the default
      * Configuration source.
      *
-     * @param path Path of the value to set.
+     * @param path  Path of the value to set.
      * @param value Value to set the default to.
      * @throws IllegalArgumentException Thrown if path is null.
      */
-    public void addDefault(String path, Object value);
+    void addDefault(String path, Object value);
 
     /**
      * Sets the default values of the given paths as provided.
@@ -32,7 +33,7 @@ public interface Configuration extends ConfigurationSection {
      * @param defaults A map of Path->Values to add to defaults.
      * @throws IllegalArgumentException Thrown if defaults is null.
      */
-    public void addDefaults(Map<String, Object> defaults);
+    void addDefaults(Map<String, Object> defaults);
 
     /**
      * Sets the default values of the given paths as provided.
@@ -49,18 +50,7 @@ public interface Configuration extends ConfigurationSection {
      * @param defaults A configuration holding a list of defaults to copy.
      * @throws IllegalArgumentException Thrown if defaults is null or this.
      */
-    public void addDefaults(Configuration defaults);
-
-    /**
-     * Sets the source of all default values for this {@link Configuration}.
-     * <p>
-     * If a previous source was set, or previous default values were defined,
-     * then they will not be copied to the new source.
-     *
-     * @param defaults New source of default values for this configuration.
-     * @throws IllegalArgumentException Thrown if defaults is null or this.
-     */
-    public void setDefaults(Configuration defaults);
+    void addDefaults(Configuration defaults);
 
     /**
      * Gets the source {@link Configuration} for this configuration.
@@ -71,7 +61,18 @@ public interface Configuration extends ConfigurationSection {
      *
      * @return Configuration source for default values, or null if none exist.
      */
-    public Configuration getDefaults();
+    Configuration getDefaults();
+
+    /**
+     * Sets the source of all default values for this {@link Configuration}.
+     * <p>
+     * If a previous source was set, or previous default values were defined,
+     * then they will not be copied to the new source.
+     *
+     * @param defaults New source of default values for this configuration.
+     * @throws IllegalArgumentException Thrown if defaults is null or this.
+     */
+    void setDefaults(Configuration defaults);
 
     /**
      * Gets the {@link ConfigurationOptions} for this {@link Configuration}.
@@ -80,5 +81,5 @@ public interface Configuration extends ConfigurationSection {
      *
      * @return Options for this configuration
      */
-    public ConfigurationOptions options();
+    ConfigurationOptions options();
 }
diff --git a/src/main/java/org/bukkit/configuration/ConfigurationOptions.java b/src/main/java/org/bukkit/configuration/ConfigurationOptions.java
index 2f59382..8fbd53f 100644
--- a/src/main/java/org/bukkit/configuration/ConfigurationOptions.java
+++ b/src/main/java/org/bukkit/configuration/ConfigurationOptions.java
@@ -5,9 +5,10 @@ package org.bukkit.configuration;
  * Configuration}
  */
 public class ConfigurationOptions {
+
+    private final Configuration configuration;
     private char pathSeparator = '.';
     private boolean copyDefaults = false;
-    private final Configuration configuration;
 
     protected ConfigurationOptions(Configuration configuration) {
         this.configuration = configuration;
diff --git a/src/main/java/org/bukkit/configuration/ConfigurationSection.java b/src/main/java/org/bukkit/configuration/ConfigurationSection.java
index 9afc1dc..5fbbf43 100644
--- a/src/main/java/org/bukkit/configuration/ConfigurationSection.java
+++ b/src/main/java/org/bukkit/configuration/ConfigurationSection.java
@@ -1,18 +1,19 @@
 package org.bukkit.configuration;
 
-import java.util.Map;
-import java.util.Set;
-import java.util.List;
-
 import org.bukkit.Color;
 import org.bukkit.OfflinePlayer;
-import org.bukkit.util.Vector;
 import org.bukkit.inventory.ItemStack;
+import org.bukkit.util.Vector;
+
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
 
 /**
  * Represents a section of a {@link Configuration}
  */
 public interface ConfigurationSection {
+
     /**
      * Gets a set containing all keys in this section.
      * <p>
@@ -24,10 +25,10 @@ public interface ConfigurationSection {
      * direct children, and not their own children.
      *
      * @param deep Whether or not to get a deep list, as opposed to a shallow
-     *     list.
+     *             list.
      * @return Set of keys contained within this ConfigurationSection.
      */
-    public Set<String> getKeys(boolean deep);
+    Set<String> getKeys(boolean deep);
 
     /**
      * Gets a Map containing all keys and their values for this section.
@@ -40,10 +41,10 @@ public interface ConfigurationSection {
      * values of any direct children, and not their own children.
      *
      * @param deep Whether or not to get a deep list, as opposed to a shallow
-     *     list.
+     *             list.
      * @return Map of keys and values of this section.
      */
-    public Map<String, Object> getValues(boolean deep);
+    Map<String, Object> getValues(boolean deep);
 
     /**
      * Checks if this {@link ConfigurationSection} contains the given path.
@@ -53,10 +54,10 @@ public interface ConfigurationSection {
      *
      * @param path Path to check for existence.
      * @return True if this section contains the requested path, either via
-     *     default or being set.
+     * default or being set.
      * @throws IllegalArgumentException Thrown when path is null.
      */
-    public boolean contains(String path);
+    boolean contains(String path);
 
     /**
      * Checks if this {@link ConfigurationSection} has a value set for the
@@ -67,10 +68,10 @@ public interface ConfigurationSection {
      *
      * @param path Path to check for existence.
      * @return True if this section contains the requested path, regardless of
-     *     having a default.
+     * having a default.
      * @throws IllegalArgumentException Thrown when path is null.
      */
-    public boolean isSet(String path);
+    boolean isSet(String path);
 
     /**
      * Gets the path of this {@link ConfigurationSection} from its root {@link
@@ -87,7 +88,7 @@ public interface ConfigurationSection {
      *
      * @return Path of this section relative to its root
      */
-    public String getCurrentPath();
+    String getCurrentPath();
 
     /**
      * Gets the name of this individual {@link ConfigurationSection}, in the
@@ -98,7 +99,7 @@ public interface ConfigurationSection {
      *
      * @return Name of this section
      */
-    public String getName();
+    String getName();
 
     /**
      * Gets the root {@link Configuration} that contains this {@link
@@ -112,7 +113,7 @@ public interface ConfigurationSection {
      *
      * @return Root configuration containing this section.
      */
-    public Configuration getRoot();
+    Configuration getRoot();
 
     /**
      * Gets the parent {@link ConfigurationSection} that directly contains
@@ -125,7 +126,7 @@ public interface ConfigurationSection {
      *
      * @return Parent section containing this section.
      */
-    public ConfigurationSection getParent();
+    ConfigurationSection getParent();
 
     /**
      * Gets the requested Object by path.
@@ -137,7 +138,7 @@ public interface ConfigurationSection {
      * @param path Path of the Object to get.
      * @return Requested Object.
      */
-    public Object get(String path);
+    Object get(String path);
 
     /**
      * Gets the requested Object by path, returning a default value if not
@@ -148,10 +149,10 @@ public interface ConfigurationSection {
      * {@link Configuration}.
      *
      * @param path Path of the Object to get.
-     * @param def The default value to return if the path is not found.
+     * @param def  The default value to return if the path is not found.
      * @return Requested Object.
      */
-    public Object get(String path, Object def);
+    Object get(String path, Object def);
 
     /**
      * Sets the specified path to the given value.
@@ -164,10 +165,10 @@ public interface ConfigurationSection {
      * you to store {@link Configuration}s or {@link ConfigurationSection}s,
      * please use {@link #createSection(java.lang.String)} for that.
      *
-     * @param path Path of the object to set.
+     * @param path  Path of the object to set.
      * @param value New value to set the path to.
      */
-    public void set(String path, Object value);
+    void set(String path, Object value);
 
     /**
      * Creates an empty {@link ConfigurationSection} at the specified path.
@@ -179,7 +180,7 @@ public interface ConfigurationSection {
      * @param path Path to create the section at.
      * @return Newly created section
      */
-    public ConfigurationSection createSection(String path);
+    ConfigurationSection createSection(String path);
 
     /**
      * Creates a {@link ConfigurationSection} at the specified path, with
@@ -190,12 +191,13 @@ public interface ConfigurationSection {
      * be orphaned.
      *
      * @param path Path to create the section at.
-     * @param map The values to used.
+     * @param map  The values to used.
      * @return Newly created section
      */
-    public ConfigurationSection createSection(String path, Map<?, ?> map);
+    ConfigurationSection createSection(String path, Map<?, ?> map);
 
     // Primitives
+
     /**
      * Gets the requested String by path.
      * <p>
@@ -206,7 +208,7 @@ public interface ConfigurationSection {
      * @param path Path of the String to get.
      * @return Requested String.
      */
-    public String getString(String path);
+    String getString(String path);
 
     /**
      * Gets the requested String by path, returning a default value if not
@@ -217,11 +219,11 @@ public interface ConfigurationSection {
      * {@link Configuration}.
      *
      * @param path Path of the String to get.
-     * @param def The default value to return if the path is not found or is
-     *     not a String.
+     * @param def  The default value to return if the path is not found or is
+     *             not a String.
      * @return Requested String.
      */
-    public String getString(String path, String def);
+    String getString(String path, String def);
 
     /**
      * Checks if the specified path is a String.
@@ -234,7 +236,7 @@ public interface ConfigurationSection {
      * @param path Path of the String to check.
      * @return Whether or not the specified path is a String.
      */
-    public boolean isString(String path);
+    boolean isString(String path);
 
     /**
      * Gets the requested int by path.
@@ -246,7 +248,7 @@ public interface ConfigurationSection {
      * @param path Path of the int to get.
      * @return Requested int.
      */
-    public int getInt(String path);
+    int getInt(String path);
 
     /**
      * Gets the requested int by path, returning a default value if not found.
@@ -256,11 +258,11 @@ public interface ConfigurationSection {
      * {@link Configuration}.
      *
      * @param path Path of the int to get.
-     * @param def The default value to return if the path is not found or is
-     *     not an int.
+     * @param def  The default value to return if the path is not found or is
+     *             not an int.
      * @return Requested int.
      */
-    public int getInt(String path, int def);
+    int getInt(String path, int def);
 
     /**
      * Checks if the specified path is an int.
@@ -273,7 +275,7 @@ public interface ConfigurationSection {
      * @param path Path of the int to check.
      * @return Whether or not the specified path is an int.
      */
-    public boolean isInt(String path);
+    boolean isInt(String path);
 
     /**
      * Gets the requested boolean by path.
@@ -285,7 +287,7 @@ public interface ConfigurationSection {
      * @param path Path of the boolean to get.
      * @return Requested boolean.
      */
-    public boolean getBoolean(String path);
+    boolean getBoolean(String path);
 
     /**
      * Gets the requested boolean by path, returning a default value if not
@@ -296,11 +298,11 @@ public interface ConfigurationSection {
      * {@link Configuration}.
      *
      * @param path Path of the boolean to get.
-     * @param def The default value to return if the path is not found or is
-     *     not a boolean.
+     * @param def  The default value to return if the path is not found or is
+     *             not a boolean.
      * @return Requested boolean.
      */
-    public boolean getBoolean(String path, boolean def);
+    boolean getBoolean(String path, boolean def);
 
     /**
      * Checks if the specified path is a boolean.
@@ -313,7 +315,7 @@ public interface ConfigurationSection {
      * @param path Path of the boolean to check.
      * @return Whether or not the specified path is a boolean.
      */
-    public boolean isBoolean(String path);
+    boolean isBoolean(String path);
 
     /**
      * Gets the requested double by path.
@@ -325,7 +327,7 @@ public interface ConfigurationSection {
      * @param path Path of the double to get.
      * @return Requested double.
      */
-    public double getDouble(String path);
+    double getDouble(String path);
 
     /**
      * Gets the requested double by path, returning a default value if not
@@ -336,11 +338,11 @@ public interface ConfigurationSection {
      * {@link Configuration}.
      *
      * @param path Path of the double to get.
-     * @param def The default value to return if the path is not found or is
-     *     not a double.
+     * @param def  The default value to return if the path is not found or is
+     *             not a double.
      * @return Requested double.
      */
-    public double getDouble(String path, double def);
+    double getDouble(String path, double def);
 
     /**
      * Checks if the specified path is a double.
@@ -353,9 +355,10 @@ public interface ConfigurationSection {
      * @param path Path of the double to check.
      * @return Whether or not the specified path is a double.
      */
-    public boolean isDouble(String path);
+    boolean isDouble(String path);
 
     // PaperSpigot start - Add getFloat
+
     /**
      * Gets the requested float by path.
      * <p>
@@ -366,7 +369,7 @@ public interface ConfigurationSection {
      * @param path Path of the float to get.
      * @return Requested float.
      */
-     public float getFloat(String path);
+    float getFloat(String path);
 
     /**
      * Gets the requested float by path, returning a default value if not
@@ -377,11 +380,11 @@ public interface ConfigurationSection {
      * {@link Configuration}.
      *
      * @param path Path of the float to get.
-     * @param def The default value to return if the path is not found or is
-     *     not a float.
+     * @param def  The default value to return if the path is not found or is
+     *             not a float.
      * @return Requested float.
      */
-    public float getFloat(String path, float def);
+    float getFloat(String path, float def);
 
     /**
      * Checks if the specified path is a float.
@@ -394,7 +397,7 @@ public interface ConfigurationSection {
      * @param path Path of the float to check.
      * @return Whether or not the specified path is a float.
      */
-    public boolean isFloat(String path);
+    boolean isFloat(String path);
     // PaperSpigot end
 
     /**
@@ -407,7 +410,7 @@ public interface ConfigurationSection {
      * @param path Path of the long to get.
      * @return Requested long.
      */
-    public long getLong(String path);
+    long getLong(String path);
 
     /**
      * Gets the requested long by path, returning a default value if not
@@ -418,11 +421,11 @@ public interface ConfigurationSection {
      * {@link Configuration}.
      *
      * @param path Path of the long to get.
-     * @param def The default value to return if the path is not found or is
-     *     not a long.
+     * @param def  The default value to return if the path is not found or is
+     *             not a long.
      * @return Requested long.
      */
-    public long getLong(String path, long def);
+    long getLong(String path, long def);
 
     /**
      * Checks if the specified path is a long.
@@ -435,9 +438,10 @@ public interface ConfigurationSection {
      * @param path Path of the long to check.
      * @return Whether or not the specified path is a long.
      */
-    public boolean isLong(String path);
+    boolean isLong(String path);
 
     // Java
+
     /**
      * Gets the requested List by path.
      * <p>
@@ -448,7 +452,7 @@ public interface ConfigurationSection {
      * @param path Path of the List to get.
      * @return Requested List.
      */
-    public List<?> getList(String path);
+    List<?> getList(String path);
 
     /**
      * Gets the requested List by path, returning a default value if not
@@ -459,11 +463,11 @@ public interface ConfigurationSection {
      * {@link Configuration}.
      *
      * @param path Path of the List to get.
-     * @param def The default value to return if the path is not found or is
-     *     not a List.
+     * @param def  The default value to return if the path is not found or is
+     *             not a List.
      * @return Requested List.
      */
-    public List<?> getList(String path, List<?> def);
+    List<?> getList(String path, List<?> def);
 
     /**
      * Checks if the specified path is a List.
@@ -476,7 +480,7 @@ public interface ConfigurationSection {
      * @param path Path of the List to check.
      * @return Whether or not the specified path is a List.
      */
-    public boolean isList(String path);
+    boolean isList(String path);
 
     /**
      * Gets the requested List of String by path.
@@ -491,7 +495,7 @@ public interface ConfigurationSection {
      * @param path Path of the List to get.
      * @return Requested List of String.
      */
-    public List<String> getStringList(String path);
+    List<String> getStringList(String path);
 
     /**
      * Gets the requested List of Integer by path.
@@ -506,7 +510,7 @@ public interface ConfigurationSection {
      * @param path Path of the List to get.
      * @return Requested List of Integer.
      */
-    public List<Integer> getIntegerList(String path);
+    List<Integer> getIntegerList(String path);
 
     /**
      * Gets the requested List of Boolean by path.
@@ -521,7 +525,7 @@ public interface ConfigurationSection {
      * @param path Path of the List to get.
      * @return Requested List of Boolean.
      */
-    public List<Boolean> getBooleanList(String path);
+    List<Boolean> getBooleanList(String path);
 
     /**
      * Gets the requested List of Double by path.
@@ -536,7 +540,7 @@ public interface ConfigurationSection {
      * @param path Path of the List to get.
      * @return Requested List of Double.
      */
-    public List<Double> getDoubleList(String path);
+    List<Double> getDoubleList(String path);
 
     /**
      * Gets the requested List of Float by path.
@@ -551,7 +555,7 @@ public interface ConfigurationSection {
      * @param path Path of the List to get.
      * @return Requested List of Float.
      */
-    public List<Float> getFloatList(String path);
+    List<Float> getFloatList(String path);
 
     /**
      * Gets the requested List of Long by path.
@@ -566,7 +570,7 @@ public interface ConfigurationSection {
      * @param path Path of the List to get.
      * @return Requested List of Long.
      */
-    public List<Long> getLongList(String path);
+    List<Long> getLongList(String path);
 
     /**
      * Gets the requested List of Byte by path.
@@ -581,7 +585,7 @@ public interface ConfigurationSection {
      * @param path Path of the List to get.
      * @return Requested List of Byte.
      */
-    public List<Byte> getByteList(String path);
+    List<Byte> getByteList(String path);
 
     /**
      * Gets the requested List of Character by path.
@@ -596,7 +600,7 @@ public interface ConfigurationSection {
      * @param path Path of the List to get.
      * @return Requested List of Character.
      */
-    public List<Character> getCharacterList(String path);
+    List<Character> getCharacterList(String path);
 
     /**
      * Gets the requested List of Short by path.
@@ -611,7 +615,7 @@ public interface ConfigurationSection {
      * @param path Path of the List to get.
      * @return Requested List of Short.
      */
-    public List<Short> getShortList(String path);
+    List<Short> getShortList(String path);
 
     /**
      * Gets the requested List of Maps by path.
@@ -626,9 +630,10 @@ public interface ConfigurationSection {
      * @param path Path of the List to get.
      * @return Requested List of Maps.
      */
-    public List<Map<?, ?>> getMapList(String path);
+    List<Map<?, ?>> getMapList(String path);
 
     // Bukkit
+
     /**
      * Gets the requested Vector by path.
      * <p>
@@ -639,7 +644,7 @@ public interface ConfigurationSection {
      * @param path Path of the Vector to get.
      * @return Requested Vector.
      */
-    public Vector getVector(String path);
+    Vector getVector(String path);
 
     /**
      * Gets the requested {@link Vector} by path, returning a default value if
@@ -650,11 +655,11 @@ public interface ConfigurationSection {
      * {@link Configuration}.
      *
      * @param path Path of the Vector to get.
-     * @param def The default value to return if the path is not found or is
-     *     not a Vector.
+     * @param def  The default value to return if the path is not found or is
+     *             not a Vector.
      * @return Requested Vector.
      */
-    public Vector getVector(String path, Vector def);
+    Vector getVector(String path, Vector def);
 
     /**
      * Checks if the specified path is a Vector.
@@ -667,7 +672,7 @@ public interface ConfigurationSection {
      * @param path Path of the Vector to check.
      * @return Whether or not the specified path is a Vector.
      */
-    public boolean isVector(String path);
+    boolean isVector(String path);
 
     /**
      * Gets the requested OfflinePlayer by path.
@@ -680,7 +685,7 @@ public interface ConfigurationSection {
      * @param path Path of the OfflinePlayer to get.
      * @return Requested OfflinePlayer.
      */
-    public OfflinePlayer getOfflinePlayer(String path);
+    OfflinePlayer getOfflinePlayer(String path);
 
     /**
      * Gets the requested {@link OfflinePlayer} by path, returning a default
@@ -691,11 +696,11 @@ public interface ConfigurationSection {
      * root {@link Configuration}.
      *
      * @param path Path of the OfflinePlayer to get.
-     * @param def The default value to return if the path is not found or is
-     *     not an OfflinePlayer.
+     * @param def  The default value to return if the path is not found or is
+     *             not an OfflinePlayer.
      * @return Requested OfflinePlayer.
      */
-    public OfflinePlayer getOfflinePlayer(String path, OfflinePlayer def);
+    OfflinePlayer getOfflinePlayer(String path, OfflinePlayer def);
 
     /**
      * Checks if the specified path is an OfflinePlayer.
@@ -708,7 +713,7 @@ public interface ConfigurationSection {
      * @param path Path of the OfflinePlayer to check.
      * @return Whether or not the specified path is an OfflinePlayer.
      */
-    public boolean isOfflinePlayer(String path);
+    boolean isOfflinePlayer(String path);
 
     /**
      * Gets the requested ItemStack by path.
@@ -720,7 +725,7 @@ public interface ConfigurationSection {
      * @param path Path of the ItemStack to get.
      * @return Requested ItemStack.
      */
-    public ItemStack getItemStack(String path);
+    ItemStack getItemStack(String path);
 
     /**
      * Gets the requested {@link ItemStack} by path, returning a default value
@@ -731,11 +736,11 @@ public interface ConfigurationSection {
      * {@link Configuration}.
      *
      * @param path Path of the ItemStack to get.
-     * @param def The default value to return if the path is not found or is
-     *     not an ItemStack.
+     * @param def  The default value to return if the path is not found or is
+     *             not an ItemStack.
      * @return Requested ItemStack.
      */
-    public ItemStack getItemStack(String path, ItemStack def);
+    ItemStack getItemStack(String path, ItemStack def);
 
     /**
      * Checks if the specified path is an ItemStack.
@@ -748,7 +753,7 @@ public interface ConfigurationSection {
      * @param path Path of the ItemStack to check.
      * @return Whether or not the specified path is an ItemStack.
      */
-    public boolean isItemStack(String path);
+    boolean isItemStack(String path);
 
     /**
      * Gets the requested Color by path.
@@ -760,7 +765,7 @@ public interface ConfigurationSection {
      * @param path Path of the Color to get.
      * @return Requested Color.
      */
-    public Color getColor(String path);
+    Color getColor(String path);
 
     /**
      * Gets the requested {@link Color} by path, returning a default value if
@@ -771,11 +776,11 @@ public interface ConfigurationSection {
      * {@link Configuration}.
      *
      * @param path Path of the Color to get.
-     * @param def The default value to return if the path is not found or is
-     *     not a Color.
+     * @param def  The default value to return if the path is not found or is
+     *             not a Color.
      * @return Requested Color.
      */
-    public Color getColor(String path, Color def);
+    Color getColor(String path, Color def);
 
     /**
      * Checks if the specified path is a Color.
@@ -788,7 +793,7 @@ public interface ConfigurationSection {
      * @param path Path of the Color to check.
      * @return Whether or not the specified path is a Color.
      */
-    public boolean isColor(String path);
+    boolean isColor(String path);
 
     /**
      * Gets the requested ConfigurationSection by path.
@@ -801,7 +806,7 @@ public interface ConfigurationSection {
      * @param path Path of the ConfigurationSection to get.
      * @return Requested ConfigurationSection.
      */
-    public ConfigurationSection getConfigurationSection(String path);
+    ConfigurationSection getConfigurationSection(String path);
 
     /**
      * Checks if the specified path is a ConfigurationSection.
@@ -815,7 +820,7 @@ public interface ConfigurationSection {
      * @param path Path of the ConfigurationSection to check.
      * @return Whether or not the specified path is a ConfigurationSection.
      */
-    public boolean isConfigurationSection(String path);
+    boolean isConfigurationSection(String path);
 
     /**
      * Gets the equivalent {@link ConfigurationSection} from the default
@@ -827,7 +832,7 @@ public interface ConfigurationSection {
      *
      * @return Equivalent section in root configuration
      */
-    public ConfigurationSection getDefaultSection();
+    ConfigurationSection getDefaultSection();
 
     /**
      * Sets the default value in the root at the given path as provided.
@@ -843,9 +848,9 @@ public interface ConfigurationSection {
      * this will create a new section at the path, replacing anything that may
      * have existed there previously.
      *
-     * @param path Path of the value to set.
+     * @param path  Path of the value to set.
      * @param value Value to set the default to.
      * @throws IllegalArgumentException Thrown if path is null.
      */
-    public void addDefault(String path, Object value);
+    void addDefault(String path, Object value);
 }
diff --git a/src/main/java/org/bukkit/configuration/InvalidConfigurationException.java b/src/main/java/org/bukkit/configuration/InvalidConfigurationException.java
index d23480e..6043333 100644
--- a/src/main/java/org/bukkit/configuration/InvalidConfigurationException.java
+++ b/src/main/java/org/bukkit/configuration/InvalidConfigurationException.java
@@ -10,7 +10,9 @@ public class InvalidConfigurationException extends Exception {
      * Creates a new instance of InvalidConfigurationException without a
      * message or cause.
      */
-    public InvalidConfigurationException() {}
+    public InvalidConfigurationException() {
+
+    }
 
     /**
      * Constructs an instance of InvalidConfigurationException with the
@@ -37,7 +39,7 @@ public class InvalidConfigurationException extends Exception {
      * specified message and cause.
      *
      * @param cause The cause of the exception.
-     * @param msg The details of the exception.
+     * @param msg   The details of the exception.
      */
     public InvalidConfigurationException(String msg, Throwable cause) {
         super(msg, cause);
diff --git a/src/main/java/org/bukkit/configuration/MemoryConfiguration.java b/src/main/java/org/bukkit/configuration/MemoryConfiguration.java
index 19c27a1..45490d6 100644
--- a/src/main/java/org/bukkit/configuration/MemoryConfiguration.java
+++ b/src/main/java/org/bukkit/configuration/MemoryConfiguration.java
@@ -1,22 +1,25 @@
 package org.bukkit.configuration;
 
-import java.util.Map;
-
 import org.apache.commons.lang.Validate;
 
+import java.util.Map;
+
 /**
  * This is a {@link Configuration} implementation that does not save or load
  * from any source, and stores all values in memory only.
  * This is useful for temporary Configurations for providing defaults.
  */
 public class MemoryConfiguration extends MemorySection implements Configuration {
+
     protected Configuration defaults;
     protected MemoryConfigurationOptions options;
 
     /**
      * Creates an empty {@link MemoryConfiguration} with no default values.
      */
-    public MemoryConfiguration() {}
+    public MemoryConfiguration() {
+
+    }
 
     /**
      * Creates an empty {@link MemoryConfiguration} using the specified {@link
@@ -50,20 +53,18 @@ public class MemoryConfiguration extends MemorySection implements Configuration
 
     public void addDefaults(Configuration defaults) {
         Validate.notNull(defaults, "Defaults may not be null");
-
         addDefaults(defaults.getValues(true));
     }
 
+    public Configuration getDefaults() {
+        return defaults;
+    }
+
     public void setDefaults(Configuration defaults) {
         Validate.notNull(defaults, "Defaults may not be null");
-
         this.defaults = defaults;
     }
 
-    public Configuration getDefaults() {
-        return defaults;
-    }
-
     @Override
     public ConfigurationSection getParent() {
         return null;
diff --git a/src/main/java/org/bukkit/configuration/MemoryConfigurationOptions.java b/src/main/java/org/bukkit/configuration/MemoryConfigurationOptions.java
index 44c046c..e161616 100644
--- a/src/main/java/org/bukkit/configuration/MemoryConfigurationOptions.java
+++ b/src/main/java/org/bukkit/configuration/MemoryConfigurationOptions.java
@@ -5,6 +5,7 @@ package org.bukkit.configuration;
  * MemoryConfiguration}
  */
 public class MemoryConfigurationOptions extends ConfigurationOptions {
+
     protected MemoryConfigurationOptions(MemoryConfiguration configuration) {
         super(configuration);
     }
diff --git a/src/main/java/org/bukkit/configuration/MemorySection.java b/src/main/java/org/bukkit/configuration/MemorySection.java
index 0e2b26a..30734ca 100644
--- a/src/main/java/org/bukkit/configuration/MemorySection.java
+++ b/src/main/java/org/bukkit/configuration/MemorySection.java
@@ -1,6 +1,10 @@
 package org.bukkit.configuration;
 
-import static org.bukkit.util.NumberConversions.*;
+import org.apache.commons.lang.Validate;
+import org.bukkit.Color;
+import org.bukkit.OfflinePlayer;
+import org.bukkit.inventory.ItemStack;
+import org.bukkit.util.Vector;
 
 import java.util.ArrayList;
 import java.util.LinkedHashMap;
@@ -9,17 +13,15 @@ import java.util.List;
 import java.util.Map;
 import java.util.Set;
 
-import org.apache.commons.lang.Validate;
-import org.bukkit.Color;
-import org.bukkit.OfflinePlayer;
-import org.bukkit.inventory.ItemStack;
-import org.bukkit.util.Vector;
+import static org.bukkit.util.NumberConversions.*;
 
 /**
  * A type of {@link ConfigurationSection} that is stored in memory.
  */
 public class MemorySection implements ConfigurationSection {
+
     protected final Map<String, Object> map = new LinkedHashMap<String, Object>();
+
     private final Configuration root;
     private final ConfigurationSection parent;
     private final String path;
@@ -33,7 +35,7 @@ public class MemorySection implements ConfigurationSection {
      * will throw an exception!
      *
      * @throws IllegalStateException Thrown if this is not a {@link
-     *     Configuration} root.
+     *                               Configuration} root.
      */
     protected MemorySection() {
         if (!(this instanceof Configuration)) {
@@ -50,10 +52,10 @@ public class MemorySection implements ConfigurationSection {
      * Creates an empty MemorySection with the specified parent and path.
      *
      * @param parent Parent section that contains this own section.
-     * @param path Path that you may access this section from via the root
-     *     {@link Configuration}.
+     * @param path   Path that you may access this section from via the root
+     *               {@link Configuration}.
      * @throws IllegalArgumentException Thrown is parent or path is null, or
-     *     if parent contains no root Configuration.
+     *                                  if parent contains no root Configuration.
      */
     protected MemorySection(ConfigurationSection parent, String path) {
         Validate.notNull(parent, "Parent cannot be null");
@@ -68,9 +70,65 @@ public class MemorySection implements ConfigurationSection {
         this.fullPath = createPath(parent, path);
     }
 
+    /**
+     * Creates a full path to the given {@link ConfigurationSection} from its
+     * root {@link Configuration}.
+     * <p>
+     * You may use this method for any given {@link ConfigurationSection}, not
+     * only {@link MemorySection}.
+     *
+     * @param section Section to create a path for.
+     * @param key     Name of the specified section.
+     * @return Full path of the section from its root.
+     */
+    public static String createPath(ConfigurationSection section, String key) {
+        return createPath(section, key, (section == null) ? null : section.getRoot());
+    }
+
+    /**
+     * Creates a relative path to the given {@link ConfigurationSection} from
+     * the given relative section.
+     * <p>
+     * You may use this method for any given {@link ConfigurationSection}, not
+     * only {@link MemorySection}.
+     *
+     * @param section    Section to create a path for.
+     * @param key        Name of the specified section.
+     * @param relativeTo Section to create the path relative to.
+     * @return Full path of the section from its root.
+     */
+    public static String createPath(ConfigurationSection section, String key, ConfigurationSection relativeTo) {
+        Validate.notNull(section, "Cannot create path without a section");
+        Configuration root = section.getRoot();
+
+        if (root == null) {
+            throw new IllegalStateException("Cannot create path without a root");
+        }
+
+        char separator = root.options().pathSeparator();
+
+        StringBuilder builder = new StringBuilder();
+        for (ConfigurationSection parent = section; (parent != null) && (parent != relativeTo); parent = parent.getParent()) {
+            if (builder.length() > 0) {
+                builder.insert(0, separator);
+            }
+
+            builder.insert(0, parent.getName());
+        }
+
+        if (key != null && !key.isEmpty()) {
+            if (builder.length() > 0) {
+                builder.append(separator);
+            }
+
+            builder.append(key);
+        }
+
+        return builder.toString();
+    }
+
     public Set<String> getKeys(boolean deep) {
         Set<String> result = new LinkedHashSet<String>();
-
         Configuration root = getRoot();
         if (root != null && root.options().copyDefaults()) {
             ConfigurationSection defaults = getDefaultSection();
@@ -81,7 +139,6 @@ public class MemorySection implements ConfigurationSection {
         }
 
         mapChildrenKeys(result, this, deep);
-
         return result;
     }
 
@@ -98,7 +155,6 @@ public class MemorySection implements ConfigurationSection {
         }
 
         mapChildrenValues(result, this, deep);
-
         return result;
     }
 
@@ -111,9 +167,11 @@ public class MemorySection implements ConfigurationSection {
         if (root == null) {
             return false;
         }
+
         if (root.options().copyDefaults()) {
             return contains(path);
         }
+
         return get(path, null) != null;
     }
 
@@ -140,9 +198,11 @@ public class MemorySection implements ConfigurationSection {
         if (root == null) {
             throw new IllegalStateException("Cannot add default without root");
         }
+
         if (root == this) {
             throw new UnsupportedOperationException("Unsupported addDefault(String, Object) implementation");
         }
+
         root.addDefault(createPath(this, path), value);
     }
 
@@ -227,6 +287,7 @@ public class MemorySection implements ConfigurationSection {
             Object result = map.get(key);
             return (result == null) ? def : result;
         }
+
         return section.get(key, def);
     }
 
@@ -238,6 +299,7 @@ public class MemorySection implements ConfigurationSection {
         }
 
         final char separator = root.options().pathSeparator();
+
         // i1 is the leading (higher) index
         // i2 is the trailing (lower) index
         int i1 = -1, i2;
@@ -258,12 +320,12 @@ public class MemorySection implements ConfigurationSection {
             map.put(key, result);
             return result;
         }
+
         return section.createSection(key);
     }
 
     public ConfigurationSection createSection(String path, Map<?, ?> map) {
         ConfigurationSection section = createSection(path);
-
         for (Map.Entry<?, ?> entry : map.entrySet()) {
             if (entry.getValue() instanceof Map) {
                 section.createSection(entry.getKey().toString(), (Map<?, ?>) entry.getValue());
@@ -341,6 +403,7 @@ public class MemorySection implements ConfigurationSection {
         Object def = getDefault(path);
         return getFloat(path, (def instanceof Float) ? toFloat(def) : 0);
     }
+    // PaperSpigot end
 
     public float getFloat(String path, float def) {
         Object val = get(path, def);
@@ -351,7 +414,6 @@ public class MemorySection implements ConfigurationSection {
         Object val = get(path);
         return val instanceof Float;
     }
-    // PaperSpigot end
 
     public long getLong(String path) {
         Object def = getDefault(path);
@@ -417,10 +479,10 @@ public class MemorySection implements ConfigurationSection {
             } else if (object instanceof String) {
                 try {
                     result.add(Integer.valueOf((String) object));
-                } catch (Exception ex) {
+                } catch (Exception ignored) {
                 }
             } else if (object instanceof Character) {
-                result.add((int) ((Character) object).charValue());
+                result.add((int) (Character) object);
             } else if (object instanceof Number) {
                 result.add(((Number) object).intValue());
             }
@@ -437,7 +499,6 @@ public class MemorySection implements ConfigurationSection {
         }
 
         List<Boolean> result = new ArrayList<Boolean>();
-
         for (Object object : list) {
             if (object instanceof Boolean) {
                 result.add((Boolean) object);
@@ -471,7 +532,7 @@ public class MemorySection implements ConfigurationSection {
                 } catch (Exception ex) {
                 }
             } else if (object instanceof Character) {
-                result.add((double) ((Character) object).charValue());
+                result.add((double) (Character) object);
             } else if (object instanceof Number) {
                 result.add(((Number) object).doubleValue());
             }
@@ -495,10 +556,10 @@ public class MemorySection implements ConfigurationSection {
             } else if (object instanceof String) {
                 try {
                     result.add(Float.valueOf((String) object));
-                } catch (Exception ex) {
+                } catch (Exception ignored) {
                 }
             } else if (object instanceof Character) {
-                result.add((float) ((Character) object).charValue());
+                result.add((float) (Character) object);
             } else if (object instanceof Number) {
                 result.add(((Number) object).floatValue());
             }
@@ -525,7 +586,7 @@ public class MemorySection implements ConfigurationSection {
                 } catch (Exception ex) {
                 }
             } else if (object instanceof Character) {
-                result.add((long) ((Character) object).charValue());
+                result.add((long) (Character) object);
             } else if (object instanceof Number) {
                 result.add(((Number) object).longValue());
             }
@@ -542,14 +603,13 @@ public class MemorySection implements ConfigurationSection {
         }
 
         List<Byte> result = new ArrayList<Byte>();
-
         for (Object object : list) {
             if (object instanceof Byte) {
                 result.add((Byte) object);
             } else if (object instanceof String) {
                 try {
                     result.add(Byte.valueOf((String) object));
-                } catch (Exception ex) {
+                } catch (Exception ignored) {
                 }
             } else if (object instanceof Character) {
                 result.add((byte) ((Character) object).charValue());
@@ -569,13 +629,11 @@ public class MemorySection implements ConfigurationSection {
         }
 
         List<Character> result = new ArrayList<Character>();
-
         for (Object object : list) {
             if (object instanceof Character) {
                 result.add((Character) object);
             } else if (object instanceof String) {
                 String str = (String) object;
-
                 if (str.length() == 1) {
                     result.add(str.charAt(0));
                 }
@@ -595,14 +653,13 @@ public class MemorySection implements ConfigurationSection {
         }
 
         List<Short> result = new ArrayList<Short>();
-
         for (Object object : list) {
             if (object instanceof Short) {
                 result.add((Short) object);
             } else if (object instanceof String) {
                 try {
                     result.add(Short.valueOf((String) object));
-                } catch (Exception ex) {
+                } catch (Exception ignored) {
                 }
             } else if (object instanceof Character) {
                 result.add((short) ((Character) object).charValue());
@@ -758,80 +815,22 @@ public class MemorySection implements ConfigurationSection {
             }
         } else {
             Map<String, Object> values = section.getValues(deep);
-
             for (Map.Entry<String, Object> entry : values.entrySet()) {
                 output.put(createPath(section, entry.getKey(), this), entry.getValue());
             }
         }
     }
 
-    /**
-     * Creates a full path to the given {@link ConfigurationSection} from its
-     * root {@link Configuration}.
-     * <p>
-     * You may use this method for any given {@link ConfigurationSection}, not
-     * only {@link MemorySection}.
-     *
-     * @param section Section to create a path for.
-     * @param key Name of the specified section.
-     * @return Full path of the section from its root.
-     */
-    public static String createPath(ConfigurationSection section, String key) {
-        return createPath(section, key, (section == null) ? null : section.getRoot());
-    }
-
-    /**
-     * Creates a relative path to the given {@link ConfigurationSection} from
-     * the given relative section.
-     * <p>
-     * You may use this method for any given {@link ConfigurationSection}, not
-     * only {@link MemorySection}.
-     *
-     * @param section Section to create a path for.
-     * @param key Name of the specified section.
-     * @param relativeTo Section to create the path relative to.
-     * @return Full path of the section from its root.
-     */
-    public static String createPath(ConfigurationSection section, String key, ConfigurationSection relativeTo) {
-        Validate.notNull(section, "Cannot create path without a section");
-        Configuration root = section.getRoot();
-        if (root == null) {
-            throw new IllegalStateException("Cannot create path without a root");
-        }
-        char separator = root.options().pathSeparator();
-
-        StringBuilder builder = new StringBuilder();
-        if (section != null) {
-            for (ConfigurationSection parent = section; (parent != null) && (parent != relativeTo); parent = parent.getParent()) {
-                if (builder.length() > 0) {
-                    builder.insert(0, separator);
-                }
-
-                builder.insert(0, parent.getName());
-            }
-        }
-
-        if ((key != null) && (key.length() > 0)) {
-            if (builder.length() > 0) {
-                builder.append(separator);
-            }
-
-            builder.append(key);
-        }
-
-        return builder.toString();
-    }
-
     @Override
     public String toString() {
         Configuration root = getRoot();
         return new StringBuilder()
-            .append(getClass().getSimpleName())
-            .append("[path='")
-            .append(getCurrentPath())
-            .append("', root='")
-            .append(root == null ? null : root.getClass().getSimpleName())
-            .append("']")
-            .toString();
+                .append(getClass().getSimpleName())
+                .append("[path='")
+                .append(getCurrentPath())
+                .append("', root='")
+                .append(root == null ? null : root.getClass().getSimpleName())
+                .append("']")
+                .toString();
     }
 }
diff --git a/src/main/java/org/bukkit/configuration/file/FileConfiguration.java b/src/main/java/org/bukkit/configuration/file/FileConfiguration.java
index 9d6d1c6..1fdd2b4 100644
--- a/src/main/java/org/bukkit/configuration/file/FileConfiguration.java
+++ b/src/main/java/org/bukkit/configuration/file/FileConfiguration.java
@@ -2,9 +2,11 @@ package org.bukkit.configuration.file;
 
 import com.google.common.base.Charsets;
 import com.google.common.io.Files;
-
 import org.apache.commons.lang.Validate;
+import org.bukkit.configuration.Configuration;
 import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.configuration.MemoryConfiguration;
+import org.yaml.snakeyaml.external.biz.base64Coder.Base64Coder;
 
 import java.io.BufferedReader;
 import java.io.File;
@@ -19,15 +21,12 @@ import java.io.Reader;
 import java.io.Writer;
 import java.nio.charset.Charset;
 
-import org.bukkit.configuration.Configuration;
-import org.bukkit.configuration.MemoryConfiguration;
-import org.yaml.snakeyaml.external.biz.base64Coder.Base64Coder;
-
 /**
  * This is a base class for all File based implementations of {@link
  * Configuration}
  */
 public abstract class FileConfiguration extends MemoryConfiguration {
+
     /**
      * This value specified that the system default encoding should be
      * completely ignored, as it cannot handle the ASCII character set, or it
@@ -37,6 +36,7 @@ public abstract class FileConfiguration extends MemoryConfiguration {
      */
     @Deprecated
     public static final boolean UTF8_OVERRIDE;
+
     /**
      * This value specifies if the system default encoding is unicode, but
      * cannot parse standard ASCII.
@@ -45,6 +45,7 @@ public abstract class FileConfiguration extends MemoryConfiguration {
      */
     @Deprecated
     public static final boolean UTF_BIG;
+
     /**
      * This value specifies if the system supports unicode.
      *
@@ -52,6 +53,7 @@ public abstract class FileConfiguration extends MemoryConfiguration {
      */
     @Deprecated
     public static final boolean SYSTEM_UTF;
+
     static {
         final byte[] testBytes = Base64Coder.decode("ICEiIyQlJicoKSorLC0uLzAxMjM0NTY3ODk6Ozw9Pj9AQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpbXF1eX2BhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ent8fX4NCg==");
         final String testString = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\r\n";
@@ -91,8 +93,8 @@ public abstract class FileConfiguration extends MemoryConfiguration {
      * using UTF8.
      *
      * @param file File to save to.
-     * @throws IOException Thrown when the given file cannot be written to for
-     *     any reason.
+     * @throws IOException              Thrown when the given file cannot be written to for
+     *                                  any reason.
      * @throws IllegalArgumentException Thrown when file is null.
      */
     public void save(File file) throws IOException {
@@ -122,13 +124,12 @@ public abstract class FileConfiguration extends MemoryConfiguration {
      * using UTF8.
      *
      * @param file File to save to.
-     * @throws IOException Thrown when the given file cannot be written to for
-     *     any reason.
+     * @throws IOException              Thrown when the given file cannot be written to for
+     *                                  any reason.
      * @throws IllegalArgumentException Thrown when file is null.
      */
     public void save(String file) throws IOException {
         Validate.notNull(file, "File cannot be null");
-
         save(new File(file));
     }
 
@@ -154,18 +155,16 @@ public abstract class FileConfiguration extends MemoryConfiguration {
      * specified.
      *
      * @param file File to load from.
-     * @throws FileNotFoundException Thrown when the given file cannot be
-     *     opened.
-     * @throws IOException Thrown when the given file cannot be read.
+     * @throws FileNotFoundException         Thrown when the given file cannot be
+     *                                       opened.
+     * @throws IOException                   Thrown when the given file cannot be read.
      * @throws InvalidConfigurationException Thrown when the given file is not
-     *     a valid Configuration.
-     * @throws IllegalArgumentException Thrown when file is null.
+     *                                       a valid Configuration.
+     * @throws IllegalArgumentException      Thrown when file is null.
      */
-    public void load(File file) throws FileNotFoundException, IOException, InvalidConfigurationException {
+    public void load(File file) throws IOException, InvalidConfigurationException {
         Validate.notNull(file, "File cannot be null");
-
         final FileInputStream stream = new FileInputStream(file);
-
         load(new InputStreamReader(stream, UTF8_OVERRIDE && !UTF_BIG ? Charsets.UTF_8 : Charset.defaultCharset()));
     }
 
@@ -180,17 +179,16 @@ public abstract class FileConfiguration extends MemoryConfiguration {
      * {@link #UTF8_OVERRIDE} or {@link #UTF_BIG} is specified.
      *
      * @param stream Stream to load from
-     * @throws IOException Thrown when the given file cannot be read.
+     * @throws IOException                   Thrown when the given file cannot be read.
      * @throws InvalidConfigurationException Thrown when the given file is not
-     *     a valid Configuration.
-     * @throws IllegalArgumentException Thrown when stream is null.
-     * @deprecated This does not consider encoding
+     *                                       a valid Configuration.
+     * @throws IllegalArgumentException      Thrown when stream is null.
      * @see #load(Reader)
+     * @deprecated This does not consider encoding
      */
     @Deprecated
     public void load(InputStream stream) throws IOException, InvalidConfigurationException {
         Validate.notNull(stream, "Stream cannot be null");
-
         load(new InputStreamReader(stream, UTF8_OVERRIDE ? Charsets.UTF_8 : Charset.defaultCharset()));
     }
 
@@ -202,28 +200,26 @@ public abstract class FileConfiguration extends MemoryConfiguration {
      * from the given stream.
      *
      * @param reader the reader to load from
-     * @throws IOException thrown when underlying reader throws an IOException
+     * @throws IOException                   thrown when underlying reader throws an IOException
      * @throws InvalidConfigurationException thrown when the reader does not
-     *      represent a valid Configuration
-     * @throws IllegalArgumentException thrown when reader is null
+     *                                       represent a valid Configuration
+     * @throws IllegalArgumentException      thrown when reader is null
      */
     public void load(Reader reader) throws IOException, InvalidConfigurationException {
         BufferedReader input = reader instanceof BufferedReader ? (BufferedReader) reader : new BufferedReader(reader);
 
-        StringBuilder builder = new StringBuilder();
-
         try {
+            StringBuilder builder = new StringBuilder();
             String line;
-
             while ((line = input.readLine()) != null) {
                 builder.append(line);
                 builder.append('\n');
             }
+
+            loadFromString(builder.toString());
         } finally {
             input.close();
         }
-
-        loadFromString(builder.toString());
     }
 
     /**
@@ -237,16 +233,15 @@ public abstract class FileConfiguration extends MemoryConfiguration {
      * thrown.
      *
      * @param file File to load from.
-     * @throws FileNotFoundException Thrown when the given file cannot be
-     *     opened.
-     * @throws IOException Thrown when the given file cannot be read.
+     * @throws FileNotFoundException         Thrown when the given file cannot be
+     *                                       opened.
+     * @throws IOException                   Thrown when the given file cannot be read.
      * @throws InvalidConfigurationException Thrown when the given file is not
-     *     a valid Configuration.
-     * @throws IllegalArgumentException Thrown when file is null.
+     *                                       a valid Configuration.
+     * @throws IllegalArgumentException      Thrown when file is null.
      */
-    public void load(String file) throws FileNotFoundException, IOException, InvalidConfigurationException {
+    public void load(String file) throws IOException, InvalidConfigurationException {
         Validate.notNull(file, "File cannot be null");
-
         load(new File(file));
     }
 
@@ -262,8 +257,8 @@ public abstract class FileConfiguration extends MemoryConfiguration {
      *
      * @param contents Contents of a Configuration to load.
      * @throws InvalidConfigurationException Thrown if the specified string is
-     *     invalid.
-     * @throws IllegalArgumentException Thrown if contents is null.
+     *                                       invalid.
+     * @throws IllegalArgumentException      Thrown if contents is null.
      */
     public abstract void loadFromString(String contents) throws InvalidConfigurationException;
 
diff --git a/src/main/java/org/bukkit/configuration/file/FileConfigurationOptions.java b/src/main/java/org/bukkit/configuration/file/FileConfigurationOptions.java
index ccf81e0..a600004 100644
--- a/src/main/java/org/bukkit/configuration/file/FileConfigurationOptions.java
+++ b/src/main/java/org/bukkit/configuration/file/FileConfigurationOptions.java
@@ -1,12 +1,14 @@
 package org.bukkit.configuration.file;
 
-import org.bukkit.configuration.*;
+import org.bukkit.configuration.MemoryConfiguration;
+import org.bukkit.configuration.MemoryConfigurationOptions;
 
 /**
  * Various settings for controlling the input and output of a {@link
  * FileConfiguration}
  */
 public class FileConfigurationOptions extends MemoryConfigurationOptions {
+
     private String header = null;
     private boolean copyHeader = true;
 
@@ -112,7 +114,6 @@ public class FileConfigurationOptions extends MemoryConfigurationOptions {
      */
     public FileConfigurationOptions copyHeader(boolean value) {
         copyHeader = value;
-
         return this;
     }
 }
diff --git a/src/main/java/org/bukkit/configuration/file/YamlConfiguration.java b/src/main/java/org/bukkit/configuration/file/YamlConfiguration.java
index ea4c2b3..5269f26 100644
--- a/src/main/java/org/bukkit/configuration/file/YamlConfiguration.java
+++ b/src/main/java/org/bukkit/configuration/file/YamlConfiguration.java
@@ -1,13 +1,5 @@
 package org.bukkit.configuration.file;
 
-import java.io.File;
-import java.io.FileNotFoundException;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.Reader;
-import java.util.Map;
-import java.util.logging.Level;
-
 import org.apache.commons.lang.Validate;
 import org.bukkit.Bukkit;
 import org.bukkit.configuration.Configuration;
@@ -18,17 +10,115 @@ import org.yaml.snakeyaml.Yaml;
 import org.yaml.snakeyaml.error.YAMLException;
 import org.yaml.snakeyaml.representer.Representer;
 
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.Reader;
+import java.util.Map;
+import java.util.logging.Level;
+
 /**
  * An implementation of {@link Configuration} which saves all files in Yaml.
  * Note that this implementation is not synchronized.
  */
 public class YamlConfiguration extends FileConfiguration {
+
     protected static final String COMMENT_PREFIX = "# ";
     protected static final String BLANK_CONFIG = "{}\n";
+
     private final DumperOptions yamlOptions = new DumperOptions();
     private final Representer yamlRepresenter = new YamlRepresenter();
     private final Yaml yaml = new Yaml(new YamlConstructor(), yamlRepresenter, yamlOptions);
 
+    /**
+     * Creates a new {@link YamlConfiguration}, loading from the given file.
+     * <p>
+     * Any errors loading the Configuration will be logged and then ignored.
+     * If the specified input is not a valid config, a blank config will be
+     * returned.
+     * <p>
+     * The encoding used may follow the system dependent default.
+     *
+     * @param file Input file
+     * @return Resulting configuration
+     * @throws IllegalArgumentException Thrown if file is null
+     */
+    public static YamlConfiguration loadConfiguration(File file) {
+        Validate.notNull(file, "File cannot be null");
+
+        YamlConfiguration config = new YamlConfiguration();
+
+        try {
+            config.load(file);
+        } catch (FileNotFoundException ignored) {
+        } catch (IOException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Cannot load " + file, ex);
+        } catch (InvalidConfigurationException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Cannot load " + file, ex);
+        }
+
+        return config;
+    }
+
+    /**
+     * Creates a new {@link YamlConfiguration}, loading from the given stream.
+     * <p>
+     * Any errors loading the Configuration will be logged and then ignored.
+     * If the specified input is not a valid config, a blank config will be
+     * returned.
+     *
+     * @param stream Input stream
+     * @return Resulting configuration
+     * @throws IllegalArgumentException Thrown if stream is null
+     * @see #load(InputStream)
+     * @see #loadConfiguration(Reader)
+     * @deprecated does not properly consider encoding
+     */
+    @Deprecated
+    public static YamlConfiguration loadConfiguration(InputStream stream) {
+        Validate.notNull(stream, "Stream cannot be null");
+
+        YamlConfiguration config = new YamlConfiguration();
+
+        try {
+            config.load(stream);
+        } catch (IOException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Cannot load configuration from stream", ex);
+        } catch (InvalidConfigurationException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Cannot load configuration from stream", ex);
+        }
+
+        return config;
+    }
+
+    /**
+     * Creates a new {@link YamlConfiguration}, loading from the given reader.
+     * <p>
+     * Any errors loading the Configuration will be logged and then ignored.
+     * If the specified input is not a valid config, a blank config will be
+     * returned.
+     *
+     * @param reader input
+     * @return resulting configuration
+     * @throws IllegalArgumentException Thrown if stream is null
+     */
+    public static YamlConfiguration loadConfiguration(Reader reader) {
+        Validate.notNull(reader, "Stream cannot be null");
+
+        YamlConfiguration config = new YamlConfiguration();
+
+        try {
+            config.load(reader);
+        } catch (IOException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Cannot load configuration from stream", ex);
+        } catch (InvalidConfigurationException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Cannot load configuration from stream", ex);
+        }
+
+        return config;
+    }
+
     @Override
     public String saveToString() {
         yamlOptions.setIndent(options().indent());
@@ -157,93 +247,4 @@ public class YamlConfiguration extends FileConfiguration {
 
         return (YamlConfigurationOptions) options;
     }
-
-    /**
-     * Creates a new {@link YamlConfiguration}, loading from the given file.
-     * <p>
-     * Any errors loading the Configuration will be logged and then ignored.
-     * If the specified input is not a valid config, a blank config will be
-     * returned.
-     * <p>
-     * The encoding used may follow the system dependent default.
-     *
-     * @param file Input file
-     * @return Resulting configuration
-     * @throws IllegalArgumentException Thrown if file is null
-     */
-    public static YamlConfiguration loadConfiguration(File file) {
-        Validate.notNull(file, "File cannot be null");
-
-        YamlConfiguration config = new YamlConfiguration();
-
-        try {
-            config.load(file);
-        } catch (FileNotFoundException ex) {
-        } catch (IOException ex) {
-            Bukkit.getLogger().log(Level.SEVERE, "Cannot load " + file, ex);
-        } catch (InvalidConfigurationException ex) {
-            Bukkit.getLogger().log(Level.SEVERE, "Cannot load " + file , ex);
-        }
-
-        return config;
-    }
-
-    /**
-     * Creates a new {@link YamlConfiguration}, loading from the given stream.
-     * <p>
-     * Any errors loading the Configuration will be logged and then ignored.
-     * If the specified input is not a valid config, a blank config will be
-     * returned.
-     *
-     * @param stream Input stream
-     * @return Resulting configuration
-     * @throws IllegalArgumentException Thrown if stream is null
-     * @deprecated does not properly consider encoding
-     * @see #load(InputStream)
-     * @see #loadConfiguration(Reader)
-     */
-    @Deprecated
-    public static YamlConfiguration loadConfiguration(InputStream stream) {
-        Validate.notNull(stream, "Stream cannot be null");
-
-        YamlConfiguration config = new YamlConfiguration();
-
-        try {
-            config.load(stream);
-        } catch (IOException ex) {
-            Bukkit.getLogger().log(Level.SEVERE, "Cannot load configuration from stream", ex);
-        } catch (InvalidConfigurationException ex) {
-            Bukkit.getLogger().log(Level.SEVERE, "Cannot load configuration from stream", ex);
-        }
-
-        return config;
-    }
-
-
-    /**
-     * Creates a new {@link YamlConfiguration}, loading from the given reader.
-     * <p>
-     * Any errors loading the Configuration will be logged and then ignored.
-     * If the specified input is not a valid config, a blank config will be
-     * returned.
-     *
-     * @param reader input
-     * @return resulting configuration
-     * @throws IllegalArgumentException Thrown if stream is null
-     */
-    public static YamlConfiguration loadConfiguration(Reader reader) {
-        Validate.notNull(reader, "Stream cannot be null");
-
-        YamlConfiguration config = new YamlConfiguration();
-
-        try {
-            config.load(reader);
-        } catch (IOException ex) {
-            Bukkit.getLogger().log(Level.SEVERE, "Cannot load configuration from stream", ex);
-        } catch (InvalidConfigurationException ex) {
-            Bukkit.getLogger().log(Level.SEVERE, "Cannot load configuration from stream", ex);
-        }
-
-        return config;
-    }
 }
diff --git a/src/main/java/org/bukkit/configuration/file/YamlConfigurationOptions.java b/src/main/java/org/bukkit/configuration/file/YamlConfigurationOptions.java
index 57894e3..03bbe44 100644
--- a/src/main/java/org/bukkit/configuration/file/YamlConfigurationOptions.java
+++ b/src/main/java/org/bukkit/configuration/file/YamlConfigurationOptions.java
@@ -7,6 +7,7 @@ import org.apache.commons.lang.Validate;
  * YamlConfiguration}
  */
 public class YamlConfigurationOptions extends FileConfigurationOptions {
+
     private int indent = 2;
 
     protected YamlConfigurationOptions(YamlConfiguration configuration) {
diff --git a/src/main/java/org/bukkit/configuration/file/YamlConstructor.java b/src/main/java/org/bukkit/configuration/file/YamlConstructor.java
index 73ad722..d85b026 100644
--- a/src/main/java/org/bukkit/configuration/file/YamlConstructor.java
+++ b/src/main/java/org/bukkit/configuration/file/YamlConstructor.java
@@ -1,14 +1,13 @@
 package org.bukkit.configuration.file;
 
-import java.util.LinkedHashMap;
-import java.util.Map;
-
-import org.yaml.snakeyaml.nodes.Node;
+import org.bukkit.configuration.serialization.ConfigurationSerialization;
 import org.yaml.snakeyaml.constructor.SafeConstructor;
 import org.yaml.snakeyaml.error.YAMLException;
+import org.yaml.snakeyaml.nodes.Node;
 import org.yaml.snakeyaml.nodes.Tag;
 
-import org.bukkit.configuration.serialization.ConfigurationSerialization;
+import java.util.LinkedHashMap;
+import java.util.Map;
 
 public class YamlConstructor extends SafeConstructor {
 
diff --git a/src/main/java/org/bukkit/configuration/file/YamlRepresenter.java b/src/main/java/org/bukkit/configuration/file/YamlRepresenter.java
index bc9c098..4811e90 100644
--- a/src/main/java/org/bukkit/configuration/file/YamlRepresenter.java
+++ b/src/main/java/org/bukkit/configuration/file/YamlRepresenter.java
@@ -1,15 +1,14 @@
 package org.bukkit.configuration.file;
 
-import java.util.LinkedHashMap;
-import java.util.Map;
-
 import org.bukkit.configuration.ConfigurationSection;
 import org.bukkit.configuration.serialization.ConfigurationSerializable;
 import org.bukkit.configuration.serialization.ConfigurationSerialization;
-
 import org.yaml.snakeyaml.nodes.Node;
 import org.yaml.snakeyaml.representer.Representer;
 
+import java.util.LinkedHashMap;
+import java.util.Map;
+
 public class YamlRepresenter extends Representer {
 
     public YamlRepresenter() {
diff --git a/src/main/java/org/bukkit/configuration/serialization/ConfigurationSerializable.java b/src/main/java/org/bukkit/configuration/serialization/ConfigurationSerializable.java
index ba3c8c4..cd1f2a5 100644
--- a/src/main/java/org/bukkit/configuration/serialization/ConfigurationSerializable.java
+++ b/src/main/java/org/bukkit/configuration/serialization/ConfigurationSerializable.java
@@ -31,5 +31,5 @@ public interface ConfigurationSerializable {
      *
      * @return Map containing the current state of this class
      */
-    public Map<String, Object> serialize();
+    Map<String, Object> serialize();
 }
diff --git a/src/main/java/org/bukkit/configuration/serialization/ConfigurationSerialization.java b/src/main/java/org/bukkit/configuration/serialization/ConfigurationSerialization.java
index 96a806f..af23811 100644
--- a/src/main/java/org/bukkit/configuration/serialization/ConfigurationSerialization.java
+++ b/src/main/java/org/bukkit/configuration/serialization/ConfigurationSerialization.java
@@ -1,14 +1,5 @@
 package org.bukkit.configuration.serialization;
 
-import java.lang.reflect.Constructor;
-import java.lang.reflect.InvocationTargetException;
-import java.lang.reflect.Method;
-import java.lang.reflect.Modifier;
-import java.util.HashMap;
-import java.util.Map;
-import java.util.logging.Level;
-import java.util.logging.Logger;
-
 import org.apache.commons.lang.Validate;
 import org.bukkit.Color;
 import org.bukkit.FireworkEffect;
@@ -18,12 +9,21 @@ import org.bukkit.potion.PotionEffect;
 import org.bukkit.util.BlockVector;
 import org.bukkit.util.Vector;
 
+import java.lang.reflect.Constructor;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+
 /**
  * Utility class for storing and retrieving classes for {@link Configuration}.
  */
 public class ConfigurationSerialization {
+
     public static final String SERIALIZED_TYPE_KEY = "==";
-    private final Class<? extends ConfigurationSerializable> clazz;
     private static Map<String, Class<? extends ConfigurationSerializable>> aliases = new HashMap<String, Class<? extends ConfigurationSerializable>>();
 
     static {
@@ -35,104 +35,12 @@ public class ConfigurationSerialization {
         registerClass(FireworkEffect.class);
     }
 
+    private final Class<? extends ConfigurationSerializable> clazz;
+
     protected ConfigurationSerialization(Class<? extends ConfigurationSerializable> clazz) {
         this.clazz = clazz;
     }
 
-    protected Method getMethod(String name, boolean isStatic) {
-        try {
-            Method method = clazz.getDeclaredMethod(name, Map.class);
-
-            if (!ConfigurationSerializable.class.isAssignableFrom(method.getReturnType())) {
-                return null;
-            }
-            if (Modifier.isStatic(method.getModifiers()) != isStatic) {
-                return null;
-            }
-
-            return method;
-        } catch (NoSuchMethodException ex) {
-            return null;
-        } catch (SecurityException ex) {
-            return null;
-        }
-    }
-
-    protected Constructor<? extends ConfigurationSerializable> getConstructor() {
-        try {
-            return clazz.getConstructor(Map.class);
-        } catch (NoSuchMethodException ex) {
-            return null;
-        } catch (SecurityException ex) {
-            return null;
-        }
-    }
-
-    protected ConfigurationSerializable deserializeViaMethod(Method method, Map<String, ?> args) {
-        try {
-            ConfigurationSerializable result = (ConfigurationSerializable) method.invoke(null, args);
-
-            if (result == null) {
-                Logger.getLogger(ConfigurationSerialization.class.getName()).log(Level.SEVERE, "Could not call method '" + method.toString() + "' of " + clazz + " for deserialization: method returned null");
-            } else {
-                return result;
-            }
-        } catch (Throwable ex) {
-            Logger.getLogger(ConfigurationSerialization.class.getName()).log(
-                    Level.SEVERE,
-                    "Could not call method '" + method.toString() + "' of " + clazz + " for deserialization",
-                    ex instanceof InvocationTargetException ? ex.getCause() : ex);
-        }
-
-        return null;
-    }
-
-    protected ConfigurationSerializable deserializeViaCtor(Constructor<? extends ConfigurationSerializable> ctor, Map<String, ?> args) {
-        try {
-            return ctor.newInstance(args);
-        } catch (Throwable ex) {
-            Logger.getLogger(ConfigurationSerialization.class.getName()).log(
-                    Level.SEVERE,
-                    "Could not call constructor '" + ctor.toString() + "' of " + clazz + " for deserialization",
-                    ex instanceof InvocationTargetException ? ex.getCause() : ex);
-        }
-
-        return null;
-    }
-
-    public ConfigurationSerializable deserialize(Map<String, ?> args) {
-        Validate.notNull(args, "Args must not be null");
-
-        ConfigurationSerializable result = null;
-        Method method = null;
-
-        if (result == null) {
-            method = getMethod("deserialize", true);
-
-            if (method != null) {
-                result = deserializeViaMethod(method, args);
-            }
-        }
-
-        if (result == null) {
-            method = getMethod("valueOf", true);
-
-            if (method != null) {
-                result = deserializeViaMethod(method, args);
-            }
-        }
-
-        if (result == null) {
-            Constructor<? extends ConfigurationSerializable> constructor = getConstructor();
-
-            if (constructor != null) {
-                result = deserializeViaCtor(constructor, args);
-            }
-        }
-
-        return result;
-    }
-
     /**
      * Attempts to deserialize the given arguments into a new instance of the
      * given class.
@@ -144,7 +52,7 @@ public class ConfigurationSerialization {
      * If a new instance could not be made, an example being the class not
      * fully implementing the interface, null will be returned.
      *
-     * @param args Arguments for deserialization
+     * @param args  Arguments for deserialization
      * @param clazz Class to deserialize into
      * @return New instance of the specified class
      */
@@ -278,4 +186,93 @@ public class ConfigurationSerialization {
 
         return clazz.getName();
     }
+
+    protected Method getMethod(String name, boolean isStatic) {
+        try {
+            Method method = clazz.getDeclaredMethod(name, Map.class);
+
+            if (!ConfigurationSerializable.class.isAssignableFrom(method.getReturnType())) {
+                return null;
+            }
+            if (Modifier.isStatic(method.getModifiers()) != isStatic) {
+                return null;
+            }
+
+            return method;
+        } catch (NoSuchMethodException ex) {
+            return null;
+        } catch (SecurityException ex) {
+            return null;
+        }
+    }
+
+    protected Constructor<? extends ConfigurationSerializable> getConstructor() {
+        try {
+            return clazz.getConstructor(Map.class);
+        } catch (NoSuchMethodException ex) {
+            return null;
+        } catch (SecurityException ex) {
+            return null;
+        }
+    }
+
+    protected ConfigurationSerializable deserializeViaMethod(Method method, Map<String, ?> args) {
+        try {
+            ConfigurationSerializable result = (ConfigurationSerializable) method.invoke(null, args);
+
+            if (result == null) {
+                Logger.getLogger(ConfigurationSerialization.class.getName()).log(Level.SEVERE, "Could not call method '" + method.toString() + "' of " + clazz + " for deserialization: method returned null");
+            } else {
+                return result;
+            }
+        } catch (Throwable ex) {
+            Logger.getLogger(ConfigurationSerialization.class.getName()).log(
+                    Level.SEVERE,
+                    "Could not call method '" + method.toString() + "' of " + clazz + " for deserialization",
+                    ex instanceof InvocationTargetException ? ex.getCause() : ex);
+        }
+
+        return null;
+    }
+
+    protected ConfigurationSerializable deserializeViaCtor(Constructor<? extends ConfigurationSerializable> ctor, Map<String, ?> args) {
+        try {
+            return ctor.newInstance(args);
+        } catch (Throwable ex) {
+            Logger.getLogger(ConfigurationSerialization.class.getName()).log(
+                    Level.SEVERE,
+                    "Could not call constructor '" + ctor.toString() + "' of " + clazz + " for deserialization",
+                    ex instanceof InvocationTargetException ? ex.getCause() : ex);
+        }
+
+        return null;
+    }
+
+    public ConfigurationSerializable deserialize(Map<String, ?> args) {
+        Validate.notNull(args, "Args must not be null");
+
+        ConfigurationSerializable result = null;
+        Method method = getMethod("deserialize", true);
+        if (method != null) {
+            result = deserializeViaMethod(method, args);
+        }
+
+        if (result == null) {
+            method = getMethod("valueOf", true);
+
+            if (method != null) {
+                result = deserializeViaMethod(method, args);
+            }
+        }
+
+        if (result == null) {
+            Constructor<? extends ConfigurationSerializable> constructor = getConstructor();
+
+            if (constructor != null) {
+                result = deserializeViaCtor(constructor, args);
+            }
+        }
+
+        return result;
+    }
 }
diff --git a/src/main/java/org/bukkit/configuration/serialization/DelegateDeserialization.java b/src/main/java/org/bukkit/configuration/serialization/DelegateDeserialization.java
index 1cfae94..f14d6cf 100644
--- a/src/main/java/org/bukkit/configuration/serialization/DelegateDeserialization.java
+++ b/src/main/java/org/bukkit/configuration/serialization/DelegateDeserialization.java
@@ -12,11 +12,12 @@ import java.lang.annotation.Target;
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.TYPE)
 public @interface DelegateDeserialization {
+
     /**
      * Which class should be used as a delegate for this classes
      * deserialization
      *
      * @return Delegate class
      */
-    public Class<? extends ConfigurationSerializable> value();
+    Class<? extends ConfigurationSerializable> value();
 }
diff --git a/src/main/java/org/bukkit/configuration/serialization/SerializableAs.java b/src/main/java/org/bukkit/configuration/serialization/SerializableAs.java
index c5ee998..99022ce 100644
--- a/src/main/java/org/bukkit/configuration/serialization/SerializableAs.java
+++ b/src/main/java/org/bukkit/configuration/serialization/SerializableAs.java
@@ -22,6 +22,7 @@ import java.lang.annotation.Target;
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.TYPE)
 public @interface SerializableAs {
+
     /**
      * This is the name your class will be stored and retrieved as.
      * <p>
@@ -30,5 +31,5 @@ public @interface SerializableAs {
      *
      * @return Name to serialize the class as.
      */
-    public String value();
+    String value();
 }
diff --git a/src/main/java/org/bukkit/conversations/BooleanPrompt.java b/src/main/java/org/bukkit/conversations/BooleanPrompt.java
index 81ef78c..4e64446 100644
--- a/src/main/java/org/bukkit/conversations/BooleanPrompt.java
+++ b/src/main/java/org/bukkit/conversations/BooleanPrompt.java
@@ -7,7 +7,7 @@ import org.apache.commons.lang.BooleanUtils;
  * BooleanPrompt is the base class for any prompt that requires a boolean
  * response from the user.
  */
-public abstract class BooleanPrompt extends ValidatingPrompt{
+public abstract class BooleanPrompt extends ValidatingPrompt {
 
     public BooleanPrompt() {
         super();
@@ -21,7 +21,10 @@ public abstract class BooleanPrompt extends ValidatingPrompt{
 
     @Override
     protected Prompt acceptValidatedInput(ConversationContext context, String input) {
-        if (input.equalsIgnoreCase("y") || input.equals("1") || input.equalsIgnoreCase("right") || input.equalsIgnoreCase("correct") || input.equalsIgnoreCase("valid")) input = "true"; // Spigot
+        if (input.equalsIgnoreCase("y") || input.equals("1") || input.equalsIgnoreCase("right") || input.equalsIgnoreCase("correct") || input.equalsIgnoreCase("valid")) {
+            input = "true"; // Spigot
+        }
+
         return acceptValidatedInput(context, BooleanUtils.toBoolean(input));
     }
 
@@ -30,7 +33,7 @@ public abstract class BooleanPrompt extends ValidatingPrompt{
      * response.
      *
      * @param context Context information about the conversation.
-     * @param input The user's boolean response.
+     * @param input   The user's boolean response.
      * @return The next {@link Prompt} in the prompt graph.
      */
     protected abstract Prompt acceptValidatedInput(ConversationContext context, boolean input);
diff --git a/src/main/java/org/bukkit/conversations/Conversable.java b/src/main/java/org/bukkit/conversations/Conversable.java
index 55674b5..641c399 100644
--- a/src/main/java/org/bukkit/conversations/Conversable.java
+++ b/src/main/java/org/bukkit/conversations/Conversable.java
@@ -1,7 +1,5 @@
 package org.bukkit.conversations;
 
-import org.bukkit.command.CommandSender;
-
 /**
  * The Conversable interface is used to indicate objects that can have
  * conversations.
@@ -14,7 +12,7 @@ public interface Conversable {
      *
      * @return True if a conversation is in progress
      */
-    public boolean isConversing();
+    boolean isConversing();
 
     /**
      * Accepts input into the active conversation. If no conversation is in
@@ -22,36 +20,36 @@ public interface Conversable {
      *
      * @param input The input message into the conversation
      */
-    public void acceptConversationInput(String input);
+    void acceptConversationInput(String input);
 
     /**
      * Enters into a dialog with a Conversation object.
      *
      * @param conversation The conversation to begin
      * @return True if the conversation should proceed, false if it has been
-     *     enqueued
+     * enqueued
      */
-    public boolean beginConversation(Conversation conversation);
+    boolean beginConversation(Conversation conversation);
 
     /**
      * Abandons an active conversation.
      *
      * @param conversation The conversation to abandon
      */
-    public void abandonConversation(Conversation conversation);
+    void abandonConversation(Conversation conversation);
 
     /**
      * Abandons an active conversation.
      *
      * @param conversation The conversation to abandon
-     * @param details Details about why the conversation was abandoned
+     * @param details      Details about why the conversation was abandoned
      */
-    public void abandonConversation(Conversation conversation, ConversationAbandonedEvent details);
+    void abandonConversation(Conversation conversation, ConversationAbandonedEvent details);
 
     /**
      * Sends this sender a message raw
      *
      * @param message Message to be displayed
      */
-    public void sendRawMessage(String message);
+    void sendRawMessage(String message);
 }
diff --git a/src/main/java/org/bukkit/conversations/Conversation.java b/src/main/java/org/bukkit/conversations/Conversation.java
index 46912c8..2774c7c 100644
--- a/src/main/java/org/bukkit/conversations/Conversation.java
+++ b/src/main/java/org/bukkit/conversations/Conversation.java
@@ -34,8 +34,6 @@ import java.util.Map;
  */
 public class Conversation {
 
-    private Prompt firstPrompt;
-    private boolean abandoned;
     protected Prompt currentPrompt;
     protected ConversationContext context;
     protected boolean modal;
@@ -43,12 +41,14 @@ public class Conversation {
     protected ConversationPrefix prefix;
     protected List<ConversationCanceller> cancellers;
     protected List<ConversationAbandonedListener> abandonedListeners;
+    private Prompt firstPrompt;
+    private boolean abandoned;
 
     /**
      * Initializes a new Conversation.
      *
-     * @param plugin The plugin that owns this conversation.
-     * @param forWhom The entity for whom this conversation is mediating.
+     * @param plugin      The plugin that owns this conversation.
+     * @param forWhom     The entity for whom this conversation is mediating.
      * @param firstPrompt The first prompt in the conversation graph.
      */
     public Conversation(Plugin plugin, Conversable forWhom, Prompt firstPrompt) {
@@ -58,11 +58,11 @@ public class Conversation {
     /**
      * Initializes a new Conversation.
      *
-     * @param plugin The plugin that owns this conversation.
-     * @param forWhom The entity for whom this conversation is mediating.
-     * @param firstPrompt The first prompt in the conversation graph.
+     * @param plugin             The plugin that owns this conversation.
+     * @param forWhom            The entity for whom this conversation is mediating.
+     * @param firstPrompt        The first prompt in the conversation graph.
      * @param initialSessionData Any initial values to put in the conversation
-     *     context sessionData map.
+     *                           context sessionData map.
      */
     public Conversation(Plugin plugin, Conversable forWhom, Prompt firstPrompt, Map<Object, Object> initialSessionData) {
         this.firstPrompt = firstPrompt;
@@ -210,29 +210,28 @@ public class Conversation {
      */
     public void acceptInput(String input) {
         try { // Spigot
-        if (currentPrompt != null) {
+            if (currentPrompt != null) {
 
-            // Echo the user's input
-            if (localEchoEnabled) {
-                context.getForWhom().sendRawMessage(prefix.getPrefix(context) + input);
-            }
+                // Echo the user's input
+                if (localEchoEnabled) {
+                    context.getForWhom().sendRawMessage(prefix.getPrefix(context) + input);
+                }
 
-            // Test for conversation abandonment based on input
-            for(ConversationCanceller canceller : cancellers) {
-                if (canceller.cancelBasedOnInput(context, input)) {
-                    abandon(new ConversationAbandonedEvent(this, canceller));
-                    return;
+                // Test for conversation abandonment based on input
+                for (ConversationCanceller canceller : cancellers) {
+                    if (canceller.cancelBasedOnInput(context, input)) {
+                        abandon(new ConversationAbandonedEvent(this, canceller));
+                        return;
+                    }
                 }
-            }
 
-            // Not abandoned, output the next prompt
-            currentPrompt = currentPrompt.acceptInput(context, input);
-            outputNextPrompt();
-        }
-        // Spigot Start
-        } catch ( Throwable t )
-        {
-            org.bukkit.Bukkit.getLogger().log( java.util.logging.Level.SEVERE, "Error handling conversation prompt", t );
+                // Not abandoned, output the next prompt
+                currentPrompt = currentPrompt.acceptInput(context, input);
+                outputNextPrompt();
+            }
+            // Spigot Start
+        } catch (Throwable t) {
+            org.bukkit.Bukkit.getLogger().log(java.util.logging.Level.SEVERE, "Error handling conversation prompt", t);
         }
         // Spigot End
     }
diff --git a/src/main/java/org/bukkit/conversations/ConversationAbandonedEvent.java b/src/main/java/org/bukkit/conversations/ConversationAbandonedEvent.java
index 63c4a2a..42d72a2 100644
--- a/src/main/java/org/bukkit/conversations/ConversationAbandonedEvent.java
+++ b/src/main/java/org/bukkit/conversations/ConversationAbandonedEvent.java
@@ -44,8 +44,8 @@ public class ConversationAbandonedEvent extends EventObject {
      * prompt chain or prematurely via a {@link ConversationCanceller}.
      *
      * @return True if the conversation is abandoned gracefully by a {@link
-     *     Prompt} returning null or the next prompt. False of the
-     *     conversations is abandoned prematurely by a ConversationCanceller.
+     * Prompt} returning null or the next prompt. False of the
+     * conversations is abandoned prematurely by a ConversationCanceller.
      */
     public boolean gracefulExit() {
         return canceller == null;
diff --git a/src/main/java/org/bukkit/conversations/ConversationAbandonedListener.java b/src/main/java/org/bukkit/conversations/ConversationAbandonedListener.java
index dc046b1..9c54eea 100644
--- a/src/main/java/org/bukkit/conversations/ConversationAbandonedListener.java
+++ b/src/main/java/org/bukkit/conversations/ConversationAbandonedListener.java
@@ -5,11 +5,12 @@ import java.util.EventListener;
 /**
  */
 public interface ConversationAbandonedListener extends EventListener {
+
     /**
      * Called whenever a {@link Conversation} is abandoned.
      *
      * @param abandonedEvent Contains details about the abandoned
-     *     conversation.
+     *                       conversation.
      */
-    public void conversationAbandoned(ConversationAbandonedEvent abandonedEvent);
+    void conversationAbandoned(ConversationAbandonedEvent abandonedEvent);
 }
diff --git a/src/main/java/org/bukkit/conversations/ConversationCanceller.java b/src/main/java/org/bukkit/conversations/ConversationCanceller.java
index db43bb1..656b279 100644
--- a/src/main/java/org/bukkit/conversations/ConversationCanceller.java
+++ b/src/main/java/org/bukkit/conversations/ConversationCanceller.java
@@ -11,16 +11,16 @@ public interface ConversationCanceller extends Cloneable {
      *
      * @param conversation A conversation.
      */
-    public void setConversation(Conversation conversation);
+    void setConversation(Conversation conversation);
 
     /**
      * Cancels a conversation based on user input.
      *
      * @param context Context information about the conversation.
-     * @param input The input text from the user.
+     * @param input   The input text from the user.
      * @return True to cancel the conversation, False otherwise.
      */
-    public boolean cancelBasedOnInput(ConversationContext context, String input);
+    boolean cancelBasedOnInput(ConversationContext context, String input);
 
     /**
      * Allows the {@link ConversationFactory} to duplicate this
@@ -30,5 +30,5 @@ public interface ConversationCanceller extends Cloneable {
      *
      * @return A clone.
      */
-    public ConversationCanceller clone();
+    ConversationCanceller clone();
 }
diff --git a/src/main/java/org/bukkit/conversations/ConversationContext.java b/src/main/java/org/bukkit/conversations/ConversationContext.java
index 7390a77..e738267 100644
--- a/src/main/java/org/bukkit/conversations/ConversationContext.java
+++ b/src/main/java/org/bukkit/conversations/ConversationContext.java
@@ -11,15 +11,15 @@ import java.util.Map;
  * invocations.
  */
 public class ConversationContext {
+
     private Conversable forWhom;
     private Map<Object, Object> sessionData;
     private Plugin plugin;
 
     /**
-     * @param plugin The owning plugin.
-     * @param forWhom The subject of the conversation.
-     * @param initialSessionData Any initial values to put in the sessionData
-     *     map.
+     * @param plugin             The owning plugin.
+     * @param forWhom            The subject of the conversation.
+     * @param initialSessionData Any initial values to put in the sessionData map.
      */
     public ConversationContext(Plugin plugin, Conversable forWhom, Map<Object, Object> initialSessionData) {
         this.plugin = plugin;
@@ -47,6 +47,7 @@ public class ConversationContext {
 
     /**
      * Gets the entire sessionData map.
+     *
      * @return The full sessionData map.
      */
     public Map<Object, Object> getAllSessionData() {
@@ -70,7 +71,7 @@ public class ConversationContext {
      * this as a way to pass data through each prompt as the conversation
      * develops.
      *
-     * @param key The session data key.
+     * @param key   The session data key.
      * @param value The session data value.
      */
     public void setSessionData(Object key, Object value) {
diff --git a/src/main/java/org/bukkit/conversations/ConversationFactory.java b/src/main/java/org/bukkit/conversations/ConversationFactory.java
index e7cbd52..244ca85 100644
--- a/src/main/java/org/bukkit/conversations/ConversationFactory.java
+++ b/src/main/java/org/bukkit/conversations/ConversationFactory.java
@@ -20,6 +20,9 @@ import java.util.Map;
  */
 public class ConversationFactory {
 
+    protected final List<ConversationCanceller> cancellers;
+    protected final List<ConversationAbandonedListener> abandonedListeners;
+
     protected Plugin plugin;
     protected boolean isModal;
     protected boolean localEchoEnabled;
@@ -27,16 +30,13 @@ public class ConversationFactory {
     protected Prompt firstPrompt;
     protected Map<Object, Object> initialSessionData;
     protected String playerOnlyMessage;
-    protected List<ConversationCanceller> cancellers;
-    protected List<ConversationAbandonedListener> abandonedListeners;
 
     /**
      * Constructs a ConversationFactory.
      *
      * @param plugin The plugin that owns the factory.
      */
-    public ConversationFactory(Plugin plugin)
-    {
+    public ConversationFactory(Plugin plugin) {
         this.plugin = plugin;
         isModal = true;
         localEchoEnabled = true;
@@ -58,8 +58,7 @@ public class ConversationFactory {
      * @param modal The modality of all conversations to be created.
      * @return This object.
      */
-    public ConversationFactory withModality(boolean modal)
-    {
+    public ConversationFactory withModality(boolean modal) {
         isModal = modal;
         return this;
     }
@@ -122,7 +121,7 @@ public class ConversationFactory {
      * sessionData map.
      *
      * @param initialSessionData The conversation context's initial
-     *     sessionData.
+     *                           sessionData.
      * @return This object.
      */
     public ConversationFactory withInitialSessionData(Map<Object, Object> initialSessionData) {
@@ -158,7 +157,7 @@ public class ConversationFactory {
      * {@link Conversable} objects.
      *
      * @param playerOnlyMessage The message to return to a non-play in lieu of
-     *     starting a conversation.
+     *                          starting a conversation.
      * @return This object.
      */
     public ConversationFactory thatExcludesNonPlayersWithMessage(String playerOnlyMessage) {
diff --git a/src/main/java/org/bukkit/conversations/ConversationPrefix.java b/src/main/java/org/bukkit/conversations/ConversationPrefix.java
index 9889f17..3febfa6 100644
--- a/src/main/java/org/bukkit/conversations/ConversationPrefix.java
+++ b/src/main/java/org/bukkit/conversations/ConversationPrefix.java
@@ -1,7 +1,5 @@
 package org.bukkit.conversations;
 
-import org.bukkit.command.CommandSender;
-
 /**
  * A ConversationPrefix implementation prepends all output from the
  * conversation to the player. The ConversationPrefix can be used to display
diff --git a/src/main/java/org/bukkit/conversations/ExactMatchConversationCanceller.java b/src/main/java/org/bukkit/conversations/ExactMatchConversationCanceller.java
index 327b9d9..201b2c1 100644
--- a/src/main/java/org/bukkit/conversations/ExactMatchConversationCanceller.java
+++ b/src/main/java/org/bukkit/conversations/ExactMatchConversationCanceller.java
@@ -5,19 +5,21 @@ package org.bukkit.conversations;
  * enters an exact input string
  */
 public class ExactMatchConversationCanceller implements ConversationCanceller {
+
     private String escapeSequence;
 
     /**
      * Builds an ExactMatchConversationCanceller.
      *
      * @param escapeSequence The string that, if entered by the user, will
-     *     cancel the conversation.
+     *                       cancel the conversation.
      */
     public ExactMatchConversationCanceller(String escapeSequence) {
         this.escapeSequence = escapeSequence;
     }
-    
-    public void setConversation(Conversation conversation) {}
+
+    public void setConversation(Conversation conversation) {
+    }
 
     public boolean cancelBasedOnInput(ConversationContext context, String input) {
         return input.equals(escapeSequence);
diff --git a/src/main/java/org/bukkit/conversations/FixedSetPrompt.java b/src/main/java/org/bukkit/conversations/FixedSetPrompt.java
index b867c11..58a6cd6 100644
--- a/src/main/java/org/bukkit/conversations/FixedSetPrompt.java
+++ b/src/main/java/org/bukkit/conversations/FixedSetPrompt.java
@@ -10,24 +10,26 @@ import java.util.List;
  * response from the user.
  */
 public abstract class FixedSetPrompt extends ValidatingPrompt {
-    
+
     protected List<String> fixedSet;
 
+    private FixedSetPrompt() {
+
+    }
+
     /**
      * Creates a FixedSetPrompt from a set of strings.
      * <p>
      * foo = new FixedSetPrompt("bar", "cheese", "panda");
      *
      * @param fixedSet A fixed set of strings, one of which the user must
-     *     type.
+     *                 type.
      */
     public FixedSetPrompt(String... fixedSet) {
         super();
         this.fixedSet = Arrays.asList(fixedSet);
     }
 
-    private FixedSetPrompt() {}
-
     @Override
     protected boolean isInputValid(ConversationContext context, String input) {
         return fixedSet.contains(input);
@@ -38,7 +40,7 @@ public abstract class FixedSetPrompt extends ValidatingPrompt {
      * options declared in the constructor.
      *
      * @return the options formatted like "[bar, cheese, panda]" if bar,
-     *     cheese, and panda were the options used
+     * cheese, and panda were the options used
      */
     protected String formatFixedSet() {
         return "[" + StringUtils.join(fixedSet, ", ") + "]";
diff --git a/src/main/java/org/bukkit/conversations/InactivityConversationCanceller.java b/src/main/java/org/bukkit/conversations/InactivityConversationCanceller.java
index 760a518..8fc1ee2 100644
--- a/src/main/java/org/bukkit/conversations/InactivityConversationCanceller.java
+++ b/src/main/java/org/bukkit/conversations/InactivityConversationCanceller.java
@@ -1,6 +1,5 @@
 package org.bukkit.conversations;
 
-import org.bukkit.Server;
 import org.bukkit.plugin.Plugin;
 
 /**
@@ -8,15 +7,17 @@ import org.bukkit.plugin.Plugin;
  * a period of inactivity by the user.
  */
 public class InactivityConversationCanceller implements ConversationCanceller {
+
     protected Plugin plugin;
     protected int timeoutSeconds;
     protected Conversation conversation;
+
     private int taskId = -1;
 
     /**
      * Creates an InactivityConversationCanceller.
      *
-     * @param plugin The owning plugin.
+     * @param plugin         The owning plugin.
      * @param timeoutSeconds The number of seconds of inactivity to wait.
      */
     public InactivityConversationCanceller(Plugin plugin, int timeoutSeconds) {
@@ -48,7 +49,7 @@ public class InactivityConversationCanceller implements ConversationCanceller {
             public void run() {
                 if (conversation.getState() == Conversation.ConversationState.UNSTARTED) {
                     startTimer();
-                } else if (conversation.getState() ==  Conversation.ConversationState.STARTED) {
+                } else if (conversation.getState() == Conversation.ConversationState.STARTED) {
                     cancelling(conversation);
                     conversation.abandon(new ConversationAbandonedEvent(conversation, InactivityConversationCanceller.this));
                 }
diff --git a/src/main/java/org/bukkit/conversations/ManuallyAbandonedConversationCanceller.java b/src/main/java/org/bukkit/conversations/ManuallyAbandonedConversationCanceller.java
index 3e80de1..41068a1 100644
--- a/src/main/java/org/bukkit/conversations/ManuallyAbandonedConversationCanceller.java
+++ b/src/main/java/org/bukkit/conversations/ManuallyAbandonedConversationCanceller.java
@@ -5,7 +5,8 @@ package org.bukkit.conversations;
  * ConversationAbandonedEvent} to indicate that the conversation was manually
  * abandoned by programmatically calling the abandon() method on it.
  */
-public class ManuallyAbandonedConversationCanceller implements ConversationCanceller{
+public class ManuallyAbandonedConversationCanceller implements ConversationCanceller {
+
     public void setConversation(Conversation conversation) {
         throw new UnsupportedOperationException();
     }
diff --git a/src/main/java/org/bukkit/conversations/MessagePrompt.java b/src/main/java/org/bukkit/conversations/MessagePrompt.java
index fa1775a..5bb7839 100644
--- a/src/main/java/org/bukkit/conversations/MessagePrompt.java
+++ b/src/main/java/org/bukkit/conversations/MessagePrompt.java
@@ -4,7 +4,7 @@ package org.bukkit.conversations;
  * MessagePrompt is the base class for any prompt that only displays a message
  * to the user and requires no input.
  */
-public abstract class MessagePrompt implements Prompt{
+public abstract class MessagePrompt implements Prompt {
 
     public MessagePrompt() {
         super();
@@ -25,7 +25,7 @@ public abstract class MessagePrompt implements Prompt{
      * prompt graph instead.
      *
      * @param context Context information about the conversation.
-     * @param input Ignored.
+     * @param input   Ignored.
      * @return The next prompt in the prompt graph.
      */
     public Prompt acceptInput(ConversationContext context, String input) {
diff --git a/src/main/java/org/bukkit/conversations/NullConversationPrefix.java b/src/main/java/org/bukkit/conversations/NullConversationPrefix.java
index 7d8a7d8..57d777e 100644
--- a/src/main/java/org/bukkit/conversations/NullConversationPrefix.java
+++ b/src/main/java/org/bukkit/conversations/NullConversationPrefix.java
@@ -1,12 +1,10 @@
 package org.bukkit.conversations;
 
-import org.bukkit.command.CommandSender;
-
 /**
  * NullConversationPrefix is a {@link ConversationPrefix} implementation that
  * displays nothing in front of conversation output.
  */
-public class NullConversationPrefix implements ConversationPrefix{
+public class NullConversationPrefix implements ConversationPrefix {
 
     /**
      * Prepends each conversation message with an empty string.
diff --git a/src/main/java/org/bukkit/conversations/NumericPrompt.java b/src/main/java/org/bukkit/conversations/NumericPrompt.java
index f0fdea1..fd7427f 100644
--- a/src/main/java/org/bukkit/conversations/NumericPrompt.java
+++ b/src/main/java/org/bukkit/conversations/NumericPrompt.java
@@ -6,7 +6,8 @@ import org.apache.commons.lang.math.NumberUtils;
  * NumericPrompt is the base class for any prompt that requires a {@link
  * Number} response from the user.
  */
-public abstract class NumericPrompt extends ValidatingPrompt{
+public abstract class NumericPrompt extends ValidatingPrompt {
+
     public NumericPrompt() {
         super();
     }
@@ -21,7 +22,7 @@ public abstract class NumericPrompt extends ValidatingPrompt{
      * input after the input has been determined to actually be a number.
      *
      * @param context Context information about the conversation.
-     * @param input The number the player provided.
+     * @param input   The number the player provided.
      * @return The validity of the player's input.
      */
     protected boolean isNumberValid(ConversationContext context, Number input) {
@@ -30,10 +31,9 @@ public abstract class NumericPrompt extends ValidatingPrompt{
 
     @Override
     protected Prompt acceptValidatedInput(ConversationContext context, String input) {
-        try
-        {
+        try {
             return acceptValidatedInput(context, NumberUtils.createNumber(input));
-        } catch (NumberFormatException e) {
+        } catch (NumberFormatException ex) {
             return acceptValidatedInput(context, NumberUtils.INTEGER_ZERO);
         }
     }
@@ -43,7 +43,7 @@ public abstract class NumericPrompt extends ValidatingPrompt{
      * response.
      *
      * @param context Context information about the conversation.
-     * @param input The user's response as a {@link Number}.
+     * @param input   The user's response as a {@link Number}.
      * @return The next {@link Prompt} in the prompt graph.
      */
     protected abstract Prompt acceptValidatedInput(ConversationContext context, Number input);
@@ -61,7 +61,7 @@ public abstract class NumericPrompt extends ValidatingPrompt{
      * Optionally override this method to display an additional message if the
      * user enters an invalid number.
      *
-     * @param context Context information about the conversation.
+     * @param context      Context information about the conversation.
      * @param invalidInput The invalid input provided by the user.
      * @return A message explaining how to correct the input.
      */
@@ -73,7 +73,7 @@ public abstract class NumericPrompt extends ValidatingPrompt{
      * Optionally override this method to display an additional message if the
      * user enters an invalid numeric input.
      *
-     * @param context Context information about the conversation.
+     * @param context      Context information about the conversation.
      * @param invalidInput The invalid input provided by the user.
      * @return A message explaining how to correct the input.
      */
diff --git a/src/main/java/org/bukkit/conversations/PlayerNamePrompt.java b/src/main/java/org/bukkit/conversations/PlayerNamePrompt.java
index feeb715..d3ad0c9 100644
--- a/src/main/java/org/bukkit/conversations/PlayerNamePrompt.java
+++ b/src/main/java/org/bukkit/conversations/PlayerNamePrompt.java
@@ -7,7 +7,8 @@ import org.bukkit.plugin.Plugin;
  * PlayerNamePrompt is the base class for any prompt that requires the player
  * to enter another player's name.
  */
-public abstract class PlayerNamePrompt extends ValidatingPrompt{
+public abstract class PlayerNamePrompt extends ValidatingPrompt {
+
     private Plugin plugin;
 
     public PlayerNamePrompt(Plugin plugin) {
@@ -18,7 +19,7 @@ public abstract class PlayerNamePrompt extends ValidatingPrompt{
     @Override
     protected boolean isInputValid(ConversationContext context, String input) {
         return plugin.getServer().getPlayer(input) != null;
-        
+
     }
 
     @Override
@@ -31,7 +32,7 @@ public abstract class PlayerNamePrompt extends ValidatingPrompt{
      * response.
      *
      * @param context Context information about the conversation.
-     * @param input The user's player name response.
+     * @param input   The user's player name response.
      * @return The next {@link Prompt} in the prompt graph.
      */
     protected abstract Prompt acceptValidatedInput(ConversationContext context, Player input);
diff --git a/src/main/java/org/bukkit/conversations/PluginNameConversationPrefix.java b/src/main/java/org/bukkit/conversations/PluginNameConversationPrefix.java
index 2290979..5bc0f9d 100644
--- a/src/main/java/org/bukkit/conversations/PluginNameConversationPrefix.java
+++ b/src/main/java/org/bukkit/conversations/PluginNameConversationPrefix.java
@@ -1,7 +1,6 @@
 package org.bukkit.conversations;
 
 import org.bukkit.ChatColor;
-import org.bukkit.command.CommandSender;
 import org.bukkit.plugin.Plugin;
 
 /**
@@ -9,17 +8,17 @@ import org.bukkit.plugin.Plugin;
  * that displays the plugin name in front of conversation output.
  */
 public class PluginNameConversationPrefix implements ConversationPrefix {
-    
+
     protected String separator;
     protected ChatColor prefixColor;
     protected Plugin plugin;
-    
+
     private String cachedPrefix;
-    
+
     public PluginNameConversationPrefix(Plugin plugin) {
         this(plugin, " > ", ChatColor.LIGHT_PURPLE);
     }
-    
+
     public PluginNameConversationPrefix(Plugin plugin, String separator, ChatColor prefixColor) {
         this.separator = separator;
         this.prefixColor = prefixColor;
diff --git a/src/main/java/org/bukkit/conversations/Prompt.java b/src/main/java/org/bukkit/conversations/Prompt.java
index 7519c84..63d63f0 100644
--- a/src/main/java/org/bukkit/conversations/Prompt.java
+++ b/src/main/java/org/bukkit/conversations/Prompt.java
@@ -12,7 +12,7 @@ public interface Prompt extends Cloneable {
     /**
      * A convenience constant for indicating the end of a conversation.
      */
-    static final Prompt END_OF_CONVERSATION = null;
+    Prompt END_OF_CONVERSATION = null;
 
     /**
      * Gets the text to display to the user when this prompt is first
@@ -29,7 +29,7 @@ public interface Prompt extends Cloneable {
      *
      * @param context Context information about the conversation.
      * @return If true, the {@link Conversation} will wait for input before
-     *     continuing.
+     * continuing.
      */
     boolean blocksForInput(ConversationContext context);
 
@@ -38,7 +38,7 @@ public interface Prompt extends Cloneable {
      * Prompt in the prompt graph is returned.
      *
      * @param context Context information about the conversation.
-     * @param input The input text from the user.
+     * @param input   The input text from the user.
      * @return The next Prompt in the prompt graph.
      */
     Prompt acceptInput(ConversationContext context, String input);
diff --git a/src/main/java/org/bukkit/conversations/RegexPrompt.java b/src/main/java/org/bukkit/conversations/RegexPrompt.java
index a3c7d1f..9a82502 100644
--- a/src/main/java/org/bukkit/conversations/RegexPrompt.java
+++ b/src/main/java/org/bukkit/conversations/RegexPrompt.java
@@ -10,6 +10,10 @@ public abstract class RegexPrompt extends ValidatingPrompt {
 
     private Pattern pattern;
 
+    private RegexPrompt() {
+
+    }
+
     public RegexPrompt(String regex) {
         this(Pattern.compile(regex));
     }
@@ -19,8 +23,6 @@ public abstract class RegexPrompt extends ValidatingPrompt {
         this.pattern = pattern;
     }
 
-    private RegexPrompt() {}
-
     @Override
     protected boolean isInputValid(ConversationContext context, String input) {
         return pattern.matcher(input).matches();
diff --git a/src/main/java/org/bukkit/conversations/StringPrompt.java b/src/main/java/org/bukkit/conversations/StringPrompt.java
index 2934459..3e3e5e9 100644
--- a/src/main/java/org/bukkit/conversations/StringPrompt.java
+++ b/src/main/java/org/bukkit/conversations/StringPrompt.java
@@ -4,7 +4,7 @@ package org.bukkit.conversations;
  * StringPrompt is the base class for any prompt that accepts an arbitrary
  * string from the user.
  */
-public abstract class StringPrompt implements Prompt{
+public abstract class StringPrompt implements Prompt {
 
     /**
      * Ensures that the prompt waits for the user to provide input.
diff --git a/src/main/java/org/bukkit/conversations/ValidatingPrompt.java b/src/main/java/org/bukkit/conversations/ValidatingPrompt.java
index f41adb4..f800257 100644
--- a/src/main/java/org/bukkit/conversations/ValidatingPrompt.java
+++ b/src/main/java/org/bukkit/conversations/ValidatingPrompt.java
@@ -8,6 +8,7 @@ import org.bukkit.ChatColor;
  * a valid response.
  */
 public abstract class ValidatingPrompt implements Prompt {
+
     public ValidatingPrompt() {
         super();
     }
@@ -18,7 +19,7 @@ public abstract class ValidatingPrompt implements Prompt {
      * the next Prompt in the prompt graph is returned.
      *
      * @param context Context information about the conversation.
-     * @param input The input text from the user.
+     * @param input   The input text from the user.
      * @return This prompt or the next Prompt in the prompt graph.
      */
     public Prompt acceptInput(ConversationContext context, String input) {
@@ -48,7 +49,7 @@ public abstract class ValidatingPrompt implements Prompt {
      * Override this method to check the validity of the player's input.
      *
      * @param context Context information about the conversation.
-     * @param input The player's raw console input.
+     * @param input   The player's raw console input.
      * @return True or false depending on the validity of the input.
      */
     protected abstract boolean isInputValid(ConversationContext context, String input);
@@ -59,7 +60,7 @@ public abstract class ValidatingPrompt implements Prompt {
      * be returned.
      *
      * @param context Context information about the conversation.
-     * @param input The validated input text from the user.
+     * @param input   The validated input text from the user.
      * @return The next Prompt in the prompt graph.
      */
     protected abstract Prompt acceptValidatedInput(ConversationContext context, String input);
@@ -68,7 +69,7 @@ public abstract class ValidatingPrompt implements Prompt {
      * Optionally override this method to display an additional message if the
      * user enters an invalid input.
      *
-     * @param context Context information about the conversation.
+     * @param context      Context information about the conversation.
      * @param invalidInput The invalid input provided by the user.
      * @return A message explaining how to correct the input.
      */
diff --git a/src/main/java/org/bukkit/enchantments/Enchantment.java b/src/main/java/org/bukkit/enchantments/Enchantment.java
index e038412..fec8da1 100644
--- a/src/main/java/org/bukkit/enchantments/Enchantment.java
+++ b/src/main/java/org/bukkit/enchantments/Enchantment.java
@@ -1,15 +1,16 @@
 package org.bukkit.enchantments;
 
-import java.util.HashMap;
-import java.util.Map;
-
 import org.bukkit.command.defaults.EnchantCommand;
 import org.bukkit.inventory.ItemStack;
 
+import java.util.HashMap;
+import java.util.Map;
+
 /**
  * The various type of enchantments that may be added to armour or weapons
  */
 public abstract class Enchantment {
+
     /**
      * Provides protection against environmental damage
      */
@@ -141,6 +142,72 @@ public abstract class Enchantment {
     }
 
     /**
+     * Registers an enchantment with the given ID and object.
+     * <p>
+     * Generally not to be used from within a plugin.
+     *
+     * @param enchantment Enchantment to register
+     */
+    public static void registerEnchantment(Enchantment enchantment) {
+        if (byId.containsKey(enchantment.id) || byName.containsKey(enchantment.getName())) {
+            throw new IllegalArgumentException("Cannot set already-set enchantment");
+        } else if (!isAcceptingRegistrations()) {
+            throw new IllegalStateException("No longer accepting new enchantments (can only be done by the server implementation)");
+        }
+
+        byId.put(enchantment.id, enchantment);
+        byName.put(enchantment.getName(), enchantment);
+    }
+
+    /**
+     * Checks if this is accepting Enchantment registrations.
+     *
+     * @return True if the server Implementation may add enchantments
+     */
+    public static boolean isAcceptingRegistrations() {
+        return acceptingNew;
+    }
+
+    /**
+     * Stops accepting any enchantment registrations
+     */
+    public static void stopAcceptingRegistrations() {
+        acceptingNew = false;
+        EnchantCommand.buildEnchantments();
+    }
+
+    /**
+     * Gets the Enchantment at the specified ID
+     *
+     * @param id ID to fetch
+     * @return Resulting Enchantment, or null if not found
+     * @deprecated Magic value
+     */
+    @Deprecated
+    public static Enchantment getById(int id) {
+        return byId.get(id);
+    }
+
+    /**
+     * Gets the Enchantment at the specified name
+     *
+     * @param name Name to fetch
+     * @return Resulting Enchantment, or null if not found
+     */
+    public static Enchantment getByName(String name) {
+        return byName.get(name);
+    }
+
+    /**
+     * Gets an array of all the registered {@link Enchantment}s
+     *
+     * @return Array of enchantments
+     */
+    public static Enchantment[] values() {
+        return byId.values().toArray(new Enchantment[byId.size()]);
+    }
+
+    /**
      * Gets the unique ID of this enchantment
      *
      * @return Unique ID
@@ -223,70 +290,4 @@ public abstract class Enchantment {
     public String toString() {
         return "Enchantment[" + id + ", " + getName() + "]";
     }
-
-    /**
-     * Registers an enchantment with the given ID and object.
-     * <p>
-     * Generally not to be used from within a plugin.
-     *
-     * @param enchantment Enchantment to register
-     */
-    public static void registerEnchantment(Enchantment enchantment) {
-        if (byId.containsKey(enchantment.id) || byName.containsKey(enchantment.getName())) {
-            throw new IllegalArgumentException("Cannot set already-set enchantment");
-        } else if (!isAcceptingRegistrations()) {
-            throw new IllegalStateException("No longer accepting new enchantments (can only be done by the server implementation)");
-        }
-
-        byId.put(enchantment.id, enchantment);
-        byName.put(enchantment.getName(), enchantment);
-    }
-
-    /**
-     * Checks if this is accepting Enchantment registrations.
-     *
-     * @return True if the server Implementation may add enchantments
-     */
-    public static boolean isAcceptingRegistrations() {
-        return acceptingNew;
-    }
-
-    /**
-     * Stops accepting any enchantment registrations
-     */
-    public static void stopAcceptingRegistrations() {
-        acceptingNew = false;
-        EnchantCommand.buildEnchantments();
-    }
-
-    /**
-     * Gets the Enchantment at the specified ID
-     *
-     * @param id ID to fetch
-     * @return Resulting Enchantment, or null if not found
-     * @deprecated Magic value
-     */
-    @Deprecated
-    public static Enchantment getById(int id) {
-        return byId.get(id);
-    }
-
-    /**
-     * Gets the Enchantment at the specified name
-     *
-     * @param name Name to fetch
-     * @return Resulting Enchantment, or null if not found
-     */
-    public static Enchantment getByName(String name) {
-        return byName.get(name);
-    }
-
-    /**
-     * Gets an array of all the registered {@link Enchantment}s
-     *
-     * @return Array of enchantments
-     */
-    public static Enchantment[] values() {
-        return byId.values().toArray(new Enchantment[byId.size()]);
-    }
 }
diff --git a/src/main/java/org/bukkit/enchantments/EnchantmentTarget.java b/src/main/java/org/bukkit/enchantments/EnchantmentTarget.java
index d9b98ed..08ea1e2 100644
--- a/src/main/java/org/bukkit/enchantments/EnchantmentTarget.java
+++ b/src/main/java/org/bukkit/enchantments/EnchantmentTarget.java
@@ -7,6 +7,7 @@ import org.bukkit.inventory.ItemStack;
  * Represents the applicable target for a {@link Enchantment}
  */
 public enum EnchantmentTarget {
+
     /**
      * Allows the Enchantment to be placed on all items
      */
@@ -24,9 +25,9 @@ public enum EnchantmentTarget {
         @Override
         public boolean includes(Material item) {
             return ARMOR_FEET.includes(item)
-                || ARMOR_LEGS.includes(item)
-                || ARMOR_HEAD.includes(item)
-                || ARMOR_TORSO.includes(item);
+                    || ARMOR_LEGS.includes(item)
+                    || ARMOR_HEAD.includes(item)
+                    || ARMOR_TORSO.includes(item);
         }
     },
 
@@ -37,10 +38,10 @@ public enum EnchantmentTarget {
         @Override
         public boolean includes(Material item) {
             return item.equals(Material.LEATHER_BOOTS)
-                || item.equals(Material.CHAINMAIL_BOOTS)
-                || item.equals(Material.IRON_BOOTS)
-                || item.equals(Material.DIAMOND_BOOTS)
-                || item.equals(Material.GOLD_BOOTS);
+                    || item.equals(Material.CHAINMAIL_BOOTS)
+                    || item.equals(Material.IRON_BOOTS)
+                    || item.equals(Material.DIAMOND_BOOTS)
+                    || item.equals(Material.GOLD_BOOTS);
         }
     },
 
@@ -51,10 +52,10 @@ public enum EnchantmentTarget {
         @Override
         public boolean includes(Material item) {
             return item.equals(Material.LEATHER_LEGGINGS)
-                || item.equals(Material.CHAINMAIL_LEGGINGS)
-                || item.equals(Material.IRON_LEGGINGS)
-                || item.equals(Material.DIAMOND_LEGGINGS)
-                || item.equals(Material.GOLD_LEGGINGS);
+                    || item.equals(Material.CHAINMAIL_LEGGINGS)
+                    || item.equals(Material.IRON_LEGGINGS)
+                    || item.equals(Material.DIAMOND_LEGGINGS)
+                    || item.equals(Material.GOLD_LEGGINGS);
         }
     },
 
@@ -65,10 +66,10 @@ public enum EnchantmentTarget {
         @Override
         public boolean includes(Material item) {
             return item.equals(Material.LEATHER_CHESTPLATE)
-                || item.equals(Material.CHAINMAIL_CHESTPLATE)
-                || item.equals(Material.IRON_CHESTPLATE)
-                || item.equals(Material.DIAMOND_CHESTPLATE)
-                || item.equals(Material.GOLD_CHESTPLATE);
+                    || item.equals(Material.CHAINMAIL_CHESTPLATE)
+                    || item.equals(Material.IRON_CHESTPLATE)
+                    || item.equals(Material.DIAMOND_CHESTPLATE)
+                    || item.equals(Material.GOLD_CHESTPLATE);
         }
     },
 
@@ -79,10 +80,10 @@ public enum EnchantmentTarget {
         @Override
         public boolean includes(Material item) {
             return item.equals(Material.LEATHER_HELMET)
-                || item.equals(Material.CHAINMAIL_HELMET)
-                || item.equals(Material.DIAMOND_HELMET)
-                || item.equals(Material.IRON_HELMET)
-                || item.equals(Material.GOLD_HELMET);
+                    || item.equals(Material.CHAINMAIL_HELMET)
+                    || item.equals(Material.DIAMOND_HELMET)
+                    || item.equals(Material.IRON_HELMET)
+                    || item.equals(Material.GOLD_HELMET);
         }
     },
 
@@ -93,10 +94,10 @@ public enum EnchantmentTarget {
         @Override
         public boolean includes(Material item) {
             return item.equals(Material.WOOD_SWORD)
-                || item.equals(Material.STONE_SWORD)
-                || item.equals(Material.IRON_SWORD)
-                || item.equals(Material.DIAMOND_SWORD)
-                || item.equals(Material.GOLD_SWORD);
+                    || item.equals(Material.STONE_SWORD)
+                    || item.equals(Material.IRON_SWORD)
+                    || item.equals(Material.DIAMOND_SWORD)
+                    || item.equals(Material.GOLD_SWORD);
         }
     },
 
@@ -108,27 +109,27 @@ public enum EnchantmentTarget {
         @Override
         public boolean includes(Material item) {
             return item.equals(Material.WOOD_SPADE)
-                || item.equals(Material.STONE_SPADE)
-                || item.equals(Material.IRON_SPADE)
-                || item.equals(Material.DIAMOND_SPADE)
-                || item.equals(Material.GOLD_SPADE)
-                || item.equals(Material.WOOD_PICKAXE)
-                || item.equals(Material.STONE_PICKAXE)
-                || item.equals(Material.IRON_PICKAXE)
-                || item.equals(Material.DIAMOND_PICKAXE)
-                || item.equals(Material.GOLD_PICKAXE)
-                || item.equals(Material.WOOD_HOE)         // NOTE: No vanilla enchantments for this
-                || item.equals(Material.STONE_HOE)        // NOTE: No vanilla enchantments for this
-                || item.equals(Material.IRON_HOE)         // NOTE: No vanilla enchantments for this
-                || item.equals(Material.DIAMOND_HOE)      // NOTE: No vanilla enchantments for this
-                || item.equals(Material.GOLD_HOE)         // NOTE: No vanilla enchantments for this
-                || item.equals(Material.WOOD_AXE)
-                || item.equals(Material.STONE_AXE)
-                || item.equals(Material.IRON_AXE)
-                || item.equals(Material.DIAMOND_AXE)
-                || item.equals(Material.GOLD_AXE)
-                || item.equals(Material.SHEARS)           // NOTE: No vanilla enchantments for this
-                || item.equals(Material.FLINT_AND_STEEL); // NOTE: No vanilla enchantments for this
+                    || item.equals(Material.STONE_SPADE)
+                    || item.equals(Material.IRON_SPADE)
+                    || item.equals(Material.DIAMOND_SPADE)
+                    || item.equals(Material.GOLD_SPADE)
+                    || item.equals(Material.WOOD_PICKAXE)
+                    || item.equals(Material.STONE_PICKAXE)
+                    || item.equals(Material.IRON_PICKAXE)
+                    || item.equals(Material.DIAMOND_PICKAXE)
+                    || item.equals(Material.GOLD_PICKAXE)
+                    || item.equals(Material.WOOD_HOE)         // NOTE: No vanilla enchantments for this
+                    || item.equals(Material.STONE_HOE)        // NOTE: No vanilla enchantments for this
+                    || item.equals(Material.IRON_HOE)         // NOTE: No vanilla enchantments for this
+                    || item.equals(Material.DIAMOND_HOE)      // NOTE: No vanilla enchantments for this
+                    || item.equals(Material.GOLD_HOE)         // NOTE: No vanilla enchantments for this
+                    || item.equals(Material.WOOD_AXE)
+                    || item.equals(Material.STONE_AXE)
+                    || item.equals(Material.IRON_AXE)
+                    || item.equals(Material.DIAMOND_AXE)
+                    || item.equals(Material.GOLD_AXE)
+                    || item.equals(Material.SHEARS)           // NOTE: No vanilla enchantments for this
+                    || item.equals(Material.FLINT_AND_STEEL); // NOTE: No vanilla enchantments for this
         }
     },
 
diff --git a/src/main/java/org/bukkit/enchantments/EnchantmentWrapper.java b/src/main/java/org/bukkit/enchantments/EnchantmentWrapper.java
index 6a0aeb3..ee36ec7 100644
--- a/src/main/java/org/bukkit/enchantments/EnchantmentWrapper.java
+++ b/src/main/java/org/bukkit/enchantments/EnchantmentWrapper.java
@@ -6,6 +6,7 @@ import org.bukkit.inventory.ItemStack;
  * A simple wrapper for ease of selecting {@link Enchantment}s
  */
 public class EnchantmentWrapper extends Enchantment {
+
     public EnchantmentWrapper(int id) {
         super(id);
     }
diff --git a/src/main/java/org/bukkit/entity/Ageable.java b/src/main/java/org/bukkit/entity/Ageable.java
index e9fccb2..b5c201c 100644
--- a/src/main/java/org/bukkit/entity/Ageable.java
+++ b/src/main/java/org/bukkit/entity/Ageable.java
@@ -3,59 +3,60 @@ package org.bukkit.entity;
 /**
  * Represents an entity that can age and breed.
  */
-public interface Ageable extends Creature {    
+public interface Ageable extends Creature {
+
     /**
      * Gets the age of this animal.
      *
      * @return Age
      */
-    public int getAge();
+    int getAge();
 
     /**
      * Sets the age of this animal.
      *
      * @param age New age
      */
-    public void setAge(int age);
-
-    /**
-     * Lock the age of the animal, setting this will prevent the animal from
-     * maturing or getting ready for mating.
-     *
-     * @param lock new lock
-     */
-    public void setAgeLock(boolean lock);
+    void setAge(int age);
 
     /**
      * Gets the current agelock.
      *
      * @return the current agelock
      */
-    public boolean getAgeLock();
+    boolean getAgeLock();
 
     /**
-     * Sets the age of the animal to a baby
+     * Lock the age of the animal, setting this will prevent the animal from
+     * maturing or getting ready for mating.
+     *
+     * @param lock new lock
      */
-    public void setBaby();
+    void setAgeLock(boolean lock);
 
     /**
-     * Sets the age of the animal to an adult
+     * Sets the age of the animal to a baby
      */
-    public void setAdult();
+    void setBaby();
 
     /**
      * Returns true if the animal is an adult.
      *
      * @return return true if the animal is an adult
      */
-    public boolean isAdult();
-    
+    boolean isAdult();
+
+    /**
+     * Sets the age of the animal to an adult
+     */
+    void setAdult();
+
     /**
      * Return the ability to breed of the animal.
      *
      * @return the ability to breed of the animal
      */
-    public boolean canBreed();
+    boolean canBreed();
 
     /**
      * Set breedability of the animal, if the animal is a baby and set to
@@ -63,5 +64,5 @@ public interface Ageable extends Creature {
      *
      * @param breed breedability of the animal
      */
-    public void setBreed(boolean breed);
+    void setBreed(boolean breed);
 }
diff --git a/src/main/java/org/bukkit/entity/Ambient.java b/src/main/java/org/bukkit/entity/Ambient.java
index 779e389..622b680 100644
--- a/src/main/java/org/bukkit/entity/Ambient.java
+++ b/src/main/java/org/bukkit/entity/Ambient.java
@@ -3,4 +3,6 @@ package org.bukkit.entity;
 /**
  * Represents an ambient mob
  */
-public interface Ambient extends LivingEntity {}
+public interface Ambient extends LivingEntity {
+
+}
diff --git a/src/main/java/org/bukkit/entity/AnimalTamer.java b/src/main/java/org/bukkit/entity/AnimalTamer.java
index 5f74f0d..5eb87cc 100644
--- a/src/main/java/org/bukkit/entity/AnimalTamer.java
+++ b/src/main/java/org/bukkit/entity/AnimalTamer.java
@@ -9,12 +9,12 @@ public interface AnimalTamer {
      *
      * @return The name to reference on tamed animals or null if a name cannot be obtained
      */
-    public String getName();
+    String getName();
 
     /**
      * This is the UUID of the specified AnimalTamer.
      *
      * @return The UUID to reference on tamed animals
      */
-    public UUID getUniqueId();
+    UUID getUniqueId();
 }
diff --git a/src/main/java/org/bukkit/entity/Animals.java b/src/main/java/org/bukkit/entity/Animals.java
index f0dc157..93d8c9f 100644
--- a/src/main/java/org/bukkit/entity/Animals.java
+++ b/src/main/java/org/bukkit/entity/Animals.java
@@ -3,4 +3,6 @@ package org.bukkit.entity;
 /**
  * Represents an Animal.
  */
-public interface Animals extends Ageable {}
+public interface Animals extends Ageable {
+
+}
diff --git a/src/main/java/org/bukkit/entity/Arrow.java b/src/main/java/org/bukkit/entity/Arrow.java
index e7a32f7..cac2e23 100644
--- a/src/main/java/org/bukkit/entity/Arrow.java
+++ b/src/main/java/org/bukkit/entity/Arrow.java
@@ -12,14 +12,14 @@ public interface Arrow extends Projectile {
      *
      * @return the knockback strength value
      */
-    public int getKnockbackStrength();
+    int getKnockbackStrength();
 
     /**
      * Sets the knockback strength for an arrow.
      *
      * @param knockbackStrength the knockback strength value
      */
-    public void setKnockbackStrength(int knockbackStrength);
+    void setKnockbackStrength(int knockbackStrength);
 
     /**
      * Gets whether this arrow is critical.
@@ -31,28 +31,25 @@ public interface Arrow extends Projectile {
      *
      * @return true if it is critical
      */
-    public boolean isCritical();
+    boolean isCritical();
 
     /**
      * Sets whether or not this arrow should be critical.
      *
      * @param critical whether or not it should be critical
      */
-    public void setCritical(boolean critical);
+    void setCritical(boolean critical);
 
-    public class Spigot extends Entity.Spigot
-    {
+    Spigot spigot();
+
+    class Spigot extends Entity.Spigot {
 
-        public double getDamage()
-        {
-            throw new UnsupportedOperationException( "Not supported yet." );
+        public double getDamage() {
+            throw new UnsupportedOperationException("Not supported yet.");
         }
 
-        public void setDamage(double damage)
-        {
-            throw new UnsupportedOperationException( "Not supported yet." );
+        public void setDamage(double damage) {
+            throw new UnsupportedOperationException("Not supported yet.");
         }
     }
-
-    Spigot spigot();
 }
diff --git a/src/main/java/org/bukkit/entity/Bat.java b/src/main/java/org/bukkit/entity/Bat.java
index bd73f22..ed08477 100644
--- a/src/main/java/org/bukkit/entity/Bat.java
+++ b/src/main/java/org/bukkit/entity/Bat.java
@@ -11,7 +11,7 @@ public interface Bat extends Ambient {
      * This does not imply any persistence of state past the method call.
      *
      * @return true if the bat is awake or false if it is currently hanging
-     *     from a block
+     * from a block
      */
     boolean isAwake();
 
diff --git a/src/main/java/org/bukkit/entity/Boat.java b/src/main/java/org/bukkit/entity/Boat.java
index ed2d178..1395cd3 100644
--- a/src/main/java/org/bukkit/entity/Boat.java
+++ b/src/main/java/org/bukkit/entity/Boat.java
@@ -11,14 +11,14 @@ public interface Boat extends Vehicle {
      *
      * @return The max speed.
      */
-    public double getMaxSpeed();
+    double getMaxSpeed();
 
     /**
      * Sets the maximum speed of a boat. Must be nonnegative. Default is 0.4D.
      *
      * @param speed The max speed.
      */
-    public void setMaxSpeed(double speed);
+    void setMaxSpeed(double speed);
 
     /**
      * Gets the deceleration rate (newSpeed = curSpeed * rate) of occupied
@@ -26,7 +26,7 @@ public interface Boat extends Vehicle {
      *
      * @return The rate of deceleration
      */
-    public double getOccupiedDeceleration();
+    double getOccupiedDeceleration();
 
     /**
      * Sets the deceleration rate (newSpeed = curSpeed * rate) of occupied
@@ -35,7 +35,7 @@ public interface Boat extends Vehicle {
      *
      * @param rate deceleration rate
      */
-    public void setOccupiedDeceleration(double rate);
+    void setOccupiedDeceleration(double rate);
 
     /**
      * Gets the deceleration rate (newSpeed = curSpeed * rate) of unoccupied
@@ -44,7 +44,7 @@ public interface Boat extends Vehicle {
      *
      * @return The rate of deceleration
      */
-    public double getUnoccupiedDeceleration();
+    double getUnoccupiedDeceleration();
 
     /**
      * Sets the deceleration rate (newSpeed = curSpeed * rate) of unoccupied
@@ -54,19 +54,19 @@ public interface Boat extends Vehicle {
      *
      * @param rate deceleration rate
      */
-    public void setUnoccupiedDeceleration(double rate);
+    void setUnoccupiedDeceleration(double rate);
 
     /**
      * Get whether boats can work on land.
      *
      * @return whether boats can work on land
      */
-    public boolean getWorkOnLand();
+    boolean getWorkOnLand();
 
     /**
      * Set whether boats can work on land.
      *
      * @param workOnLand whether boats can work on land
      */
-    public void setWorkOnLand(boolean workOnLand);
+    void setWorkOnLand(boolean workOnLand);
 }
diff --git a/src/main/java/org/bukkit/entity/CaveSpider.java b/src/main/java/org/bukkit/entity/CaveSpider.java
index 9c37646..ac9d519 100644
--- a/src/main/java/org/bukkit/entity/CaveSpider.java
+++ b/src/main/java/org/bukkit/entity/CaveSpider.java
@@ -3,4 +3,6 @@ package org.bukkit.entity;
 /**
  * Represents a Spider.
  */
-public interface CaveSpider extends Spider {}
+public interface CaveSpider extends Spider {
+
+}
diff --git a/src/main/java/org/bukkit/entity/Chicken.java b/src/main/java/org/bukkit/entity/Chicken.java
index cb3ec6e..5c7dce8 100644
--- a/src/main/java/org/bukkit/entity/Chicken.java
+++ b/src/main/java/org/bukkit/entity/Chicken.java
@@ -3,4 +3,6 @@ package org.bukkit.entity;
 /**
  * Represents a Chicken.
  */
-public interface Chicken extends Animals {}
+public interface Chicken extends Animals {
+
+}
diff --git a/src/main/java/org/bukkit/entity/ComplexEntityPart.java b/src/main/java/org/bukkit/entity/ComplexEntityPart.java
index f4ab0bb..ced75ec 100644
--- a/src/main/java/org/bukkit/entity/ComplexEntityPart.java
+++ b/src/main/java/org/bukkit/entity/ComplexEntityPart.java
@@ -10,5 +10,5 @@ public interface ComplexEntityPart extends Entity {
      *
      * @return Parent complex entity
      */
-    public ComplexLivingEntity getParent();
+    ComplexLivingEntity getParent();
 }
diff --git a/src/main/java/org/bukkit/entity/ComplexLivingEntity.java b/src/main/java/org/bukkit/entity/ComplexLivingEntity.java
index f74411c..05a01e3 100644
--- a/src/main/java/org/bukkit/entity/ComplexLivingEntity.java
+++ b/src/main/java/org/bukkit/entity/ComplexLivingEntity.java
@@ -3,14 +3,14 @@ package org.bukkit.entity;
 import java.util.Set;
 
 /**
- * Represents a complex living entity - one that is made up of various smaller
- * parts
+ * Represents a complex living entity - one that is made up of various smaller parts
  */
 public interface ComplexLivingEntity extends LivingEntity {
+
     /**
      * Gets a list of parts that belong to this complex entity
      *
      * @return List of parts
      */
-    public Set<ComplexEntityPart> getParts();
+    Set<ComplexEntityPart> getParts();
 }
diff --git a/src/main/java/org/bukkit/entity/Cow.java b/src/main/java/org/bukkit/entity/Cow.java
index cd4ed4d..f6ac09b 100644
--- a/src/main/java/org/bukkit/entity/Cow.java
+++ b/src/main/java/org/bukkit/entity/Cow.java
@@ -3,4 +3,6 @@ package org.bukkit.entity;
 /**
  * Represents a Cow.
  */
-public interface Cow extends Animals {}
+public interface Cow extends Animals {
+
+}
diff --git a/src/main/java/org/bukkit/entity/Creature.java b/src/main/java/org/bukkit/entity/Creature.java
index f223f55..8dfa8f7 100644
--- a/src/main/java/org/bukkit/entity/Creature.java
+++ b/src/main/java/org/bukkit/entity/Creature.java
@@ -7,6 +7,13 @@ package org.bukkit.entity;
 public interface Creature extends LivingEntity {
 
     /**
+     * Gets the current target of this Creature
+     *
+     * @return Current target of this creature, or null if none exists
+     */
+    LivingEntity getTarget();
+
+    /**
      * Instructs this Creature to set the specified LivingEntity as its
      * target.
      * <p>
@@ -15,12 +22,5 @@ public interface Creature extends LivingEntity {
      *
      * @param target New LivingEntity to target, or null to clear the target
      */
-    public void setTarget(LivingEntity target);
-
-    /**
-     * Gets the current target of this Creature
-     *
-     * @return Current target of this creature, or null if none exists
-     */
-    public LivingEntity getTarget();
+    void setTarget(LivingEntity target);
 }
diff --git a/src/main/java/org/bukkit/entity/CreatureType.java b/src/main/java/org/bukkit/entity/CreatureType.java
index fd23093..7b0e8e0 100644
--- a/src/main/java/org/bukkit/entity/CreatureType.java
+++ b/src/main/java/org/bukkit/entity/CreatureType.java
@@ -11,6 +11,7 @@ import java.util.Map;
  */
 @Deprecated
 public enum CreatureType {
+
     // These strings MUST match the strings in nms.EntityTypes and are case sensitive.
     CREEPER("Creeper", Creeper.class, 50),
     SKELETON("Skeleton", Skeleton.class, 51),
@@ -36,10 +37,6 @@ public enum CreatureType {
     SNOWMAN("SnowMan", Snowman.class, 97),
     VILLAGER("Villager", Villager.class, 120);
 
-    private String name;
-    private Class<? extends Entity> clazz;
-    private short typeId;
-
     private static final Map<String, CreatureType> NAME_MAP = new HashMap<String, CreatureType>();
     private static final Map<Short, CreatureType> ID_MAP = new HashMap<Short, CreatureType>();
 
@@ -52,51 +49,54 @@ public enum CreatureType {
         }
     }
 
-    private CreatureType(String name, Class<? extends Entity> clazz, int typeId) {
+    private String name;
+    private Class<? extends Entity> clazz;
+    private short typeId;
+
+    CreatureType(String name, Class<? extends Entity> clazz, int typeId) {
         this.name = name;
         this.clazz = clazz;
         this.typeId = (short) typeId;
     }
 
-    public String getName() {
-        return name;
-    }
-
-    public Class<? extends Entity> getEntityClass() {
-        return clazz;
+    public static CreatureType fromName(String name) {
+        return NAME_MAP.get(name);
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
-    public short getTypeId() {
-        return typeId;
+    public static CreatureType fromId(int id) {
+        if (id > Short.MAX_VALUE) {
+            return null;
+        }
+
+        return ID_MAP.get((short) id);
     }
 
-    public static CreatureType fromName(String name) {
-        return NAME_MAP.get(name);
+    public static CreatureType fromEntityType(EntityType creatureType) {
+        return fromName(creatureType.getName());
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public Class<? extends Entity> getEntityClass() {
+        return clazz;
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
-    public static CreatureType fromId(int id) {
-        if (id > Short.MAX_VALUE) {
-            return null;
-        }
-        return ID_MAP.get((short) id);
+    public short getTypeId() {
+        return typeId;
     }
 
     @Deprecated
     public EntityType toEntityType() {
         return EntityType.fromName(getName());
     }
-
-    public static CreatureType fromEntityType(EntityType creatureType) {
-        return fromName(creatureType.getName());
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/org/bukkit/entity/Creeper.java b/src/main/java/org/bukkit/entity/Creeper.java
index a2f7809..c31505a 100644
--- a/src/main/java/org/bukkit/entity/Creeper.java
+++ b/src/main/java/org/bukkit/entity/Creeper.java
@@ -10,12 +10,12 @@ public interface Creeper extends Monster {
      *
      * @return true if this creeper is powered
      */
-    public boolean isPowered();
+    boolean isPowered();
 
     /**
      * Sets the Powered status of this Creeper
      *
      * @param value New Powered status
      */
-    public void setPowered(boolean value);
+    void setPowered(boolean value);
 }
diff --git a/src/main/java/org/bukkit/entity/Damageable.java b/src/main/java/org/bukkit/entity/Damageable.java
index 53877a8..417666d 100644
--- a/src/main/java/org/bukkit/entity/Damageable.java
+++ b/src/main/java/org/bukkit/entity/Damageable.java
@@ -4,6 +4,7 @@ package org.bukkit.entity;
  * Represents an {@link Entity} that has health and can take damage.
  */
 public interface Damageable extends Entity {
+
     /**
      * Deals the given amount of damage to this entity.
      *
@@ -44,20 +45,12 @@ public interface Damageable extends Entity {
     double getHealth();
 
     /**
-     * This method exists for legacy reasons to provide backwards
-     * compatibility. It will not exist at runtime and should not be used
-     * under any circumstances.
-     */
-    @Deprecated
-    int _INVALID_getHealth();
-
-    /**
      * Sets the entity's health from 0 to {@link #getMaxHealth()}, where 0 is
      * dead.
      *
      * @param health New health represented from 0 to max
      * @throws IllegalArgumentException Thrown if the health is < 0 or >
-     *     {@link #getMaxHealth()}
+     *                                  {@link #getMaxHealth()}
      */
     void setHealth(double health);
 
@@ -67,6 +60,14 @@ public interface Damageable extends Entity {
      * under any circumstances.
      */
     @Deprecated
+    int _INVALID_getHealth();
+
+    /**
+     * This method exists for legacy reasons to provide backwards
+     * compatibility. It will not exist at runtime and should not be used
+     * under any circumstances.
+     */
+    @Deprecated
     void _INVALID_setHealth(int health);
 
     /**
@@ -77,14 +78,6 @@ public interface Damageable extends Entity {
     double getMaxHealth();
 
     /**
-     * This method exists for legacy reasons to provide backwards
-     * compatibility. It will not exist at runtime and should not be used
-     * under any circumstances.
-     */
-    @Deprecated
-    int _INVALID_getMaxHealth();
-
-    /**
      * Sets the maximum health this entity can have.
      * <p>
      * If the health of the entity is above the value provided it will be set
@@ -103,6 +96,14 @@ public interface Damageable extends Entity {
      * under any circumstances.
      */
     @Deprecated
+    int _INVALID_getMaxHealth();
+
+    /**
+     * This method exists for legacy reasons to provide backwards
+     * compatibility. It will not exist at runtime and should not be used
+     * under any circumstances.
+     */
+    @Deprecated
     void _INVALID_setMaxHealth(int health);
 
     /**
diff --git a/src/main/java/org/bukkit/entity/Egg.java b/src/main/java/org/bukkit/entity/Egg.java
index 2dcc00b..c5e2cda 100644
--- a/src/main/java/org/bukkit/entity/Egg.java
+++ b/src/main/java/org/bukkit/entity/Egg.java
@@ -3,4 +3,6 @@ package org.bukkit.entity;
 /**
  * Represents a thrown egg.
  */
-public interface Egg extends Projectile {}
+public interface Egg extends Projectile {
+
+}
diff --git a/src/main/java/org/bukkit/entity/EnderCrystal.java b/src/main/java/org/bukkit/entity/EnderCrystal.java
index bac547e..707620b 100644
--- a/src/main/java/org/bukkit/entity/EnderCrystal.java
+++ b/src/main/java/org/bukkit/entity/EnderCrystal.java
@@ -4,4 +4,5 @@ package org.bukkit.entity;
  * A crystal that heals nearby EnderDragons
  */
 public interface EnderCrystal extends Entity {
+
 }
diff --git a/src/main/java/org/bukkit/entity/EnderDragonPart.java b/src/main/java/org/bukkit/entity/EnderDragonPart.java
index 9516f56..c34b46a 100644
--- a/src/main/java/org/bukkit/entity/EnderDragonPart.java
+++ b/src/main/java/org/bukkit/entity/EnderDragonPart.java
@@ -4,5 +4,6 @@ package org.bukkit.entity;
  * Represents an ender dragon part
  */
 public interface EnderDragonPart extends ComplexEntityPart, Damageable {
-    public EnderDragon getParent();
+
+    EnderDragon getParent();
 }
diff --git a/src/main/java/org/bukkit/entity/Enderman.java b/src/main/java/org/bukkit/entity/Enderman.java
index 0b66a92..3e286ea 100644
--- a/src/main/java/org/bukkit/entity/Enderman.java
+++ b/src/main/java/org/bukkit/entity/Enderman.java
@@ -12,12 +12,12 @@ public interface Enderman extends Monster {
      *
      * @return MaterialData containing the id and data of the block
      */
-    public MaterialData getCarriedMaterial();
+    MaterialData getCarriedMaterial();
 
     /**
      * Set the id and data of the block that the Enderman is carring.
      *
      * @param material data to set the carried block to
      */
-    public void setCarriedMaterial(MaterialData material);
+    void setCarriedMaterial(MaterialData material);
 }
diff --git a/src/main/java/org/bukkit/entity/Entity.java b/src/main/java/org/bukkit/entity/Entity.java
index 5a1e895..f94a214 100644
--- a/src/main/java/org/bukkit/entity/Entity.java
+++ b/src/main/java/org/bukkit/entity/Entity.java
@@ -1,16 +1,16 @@
 package org.bukkit.entity;
 
-import org.bukkit.Location;
 import org.bukkit.EntityEffect;
+import org.bukkit.Location;
 import org.bukkit.Server;
 import org.bukkit.World;
 import org.bukkit.event.entity.EntityDamageEvent;
+import org.bukkit.event.player.PlayerTeleportEvent.TeleportCause;
 import org.bukkit.metadata.Metadatable;
 import org.bukkit.util.Vector;
 
 import java.util.List;
 import java.util.UUID;
-import org.bukkit.event.player.PlayerTeleportEvent.TeleportCause;
 
 /**
  * Represents a base entity in the world
@@ -22,7 +22,7 @@ public interface Entity extends Metadatable {
      *
      * @return a new copy of Location containing the position of this entity
      */
-    public Location getLocation();
+    Location getLocation();
 
     /**
      * Stores the entity's current position in the provided Location object.
@@ -32,21 +32,21 @@ public interface Entity extends Metadatable {
      *
      * @return The Location object provided or null
      */
-    public Location getLocation(Location loc);
+    Location getLocation(Location loc);
 
     /**
-     * Sets this entity's velocity
+     * Gets this entity's current velocity
      *
-     * @param velocity New velocity to travel with
+     * @return Current travelling velocity of this entity
      */
-    public void setVelocity(Vector velocity);
+    Vector getVelocity();
 
     /**
-     * Gets this entity's current velocity
+     * Sets this entity's velocity
      *
-     * @return Current travelling velocity of this entity
+     * @param velocity New velocity to travel with
      */
-    public Vector getVelocity();
+    void setVelocity(Vector velocity);
 
     /**
      * Returns true if the entity is supported by a block. This value is a
@@ -55,14 +55,14 @@ public interface Entity extends Metadatable {
      *
      * @return True if entity is on ground.
      */
-    public boolean isOnGround();
+    boolean isOnGround();
 
     /**
      * Gets the current world this entity resides in
      *
      * @return World
      */
-    public World getWorld();
+    World getWorld();
 
     /**
      * Teleports this entity to the given location. If this entity is riding a
@@ -71,17 +71,17 @@ public interface Entity extends Metadatable {
      * @param location New location to teleport this entity to
      * @return <code>true</code> if the teleport was successful
      */
-    public boolean teleport(Location location);
+    boolean teleport(Location location);
 
     /**
      * Teleports this entity to the given location. If this entity is riding a
      * vehicle, it will be dismounted prior to teleportation.
      *
      * @param location New location to teleport this entity to
-     * @param cause The cause of this teleportation
+     * @param cause    The cause of this teleportation
      * @return <code>true</code> if the teleport was successful
      */
-    public boolean teleport(Location location, TeleportCause cause);
+    boolean teleport(Location location, TeleportCause cause);
 
     /**
      * Teleports this entity to the target Entity. If this entity is riding a
@@ -90,17 +90,17 @@ public interface Entity extends Metadatable {
      * @param destination Entity to teleport this entity to
      * @return <code>true</code> if the teleport was successful
      */
-    public boolean teleport(Entity destination);
+    boolean teleport(Entity destination);
 
     /**
      * Teleports this entity to the target Entity. If this entity is riding a
      * vehicle, it will be dismounted prior to teleportation.
      *
      * @param destination Entity to teleport this entity to
-     * @param cause The cause of this teleportation
+     * @param cause       The cause of this teleportation
      * @return <code>true</code> if the teleport was successful
      */
-    public boolean teleport(Entity destination, TeleportCause cause);
+    boolean teleport(Entity destination, TeleportCause cause);
 
     /**
      * Returns a list of entities within a bounding box centered around this
@@ -111,14 +111,14 @@ public interface Entity extends Metadatable {
      * @param z 1/2 the size of the box along z axis
      * @return List<Entity> List of entities nearby
      */
-    public List<org.bukkit.entity.Entity> getNearbyEntities(double x, double y, double z);
+    List<org.bukkit.entity.Entity> getNearbyEntities(double x, double y, double z);
 
     /**
      * Returns a unique id for this entity
      *
      * @return Entity id
      */
-    public int getEntityId();
+    int getEntityId();
 
     /**
      * Returns the entity's current fire ticks (ticks before the entity stops
@@ -126,34 +126,34 @@ public interface Entity extends Metadatable {
      *
      * @return int fireTicks
      */
-    public int getFireTicks();
+    int getFireTicks();
 
     /**
-     * Returns the entity's maximum fire ticks.
+     * Sets the entity's current fire ticks (ticks before the entity stops
+     * being on fire).
      *
-     * @return int maxFireTicks
+     * @param ticks Current ticks remaining
      */
-    public int getMaxFireTicks();
+    void setFireTicks(int ticks);
 
     /**
-     * Sets the entity's current fire ticks (ticks before the entity stops
-     * being on fire).
+     * Returns the entity's maximum fire ticks.
      *
-     * @param ticks Current ticks remaining
+     * @return int maxFireTicks
      */
-    public void setFireTicks(int ticks);
+    int getMaxFireTicks();
 
     /**
      * Mark the entity's removal.
      */
-    public void remove();
+    void remove();
 
     /**
      * Returns true if this entity has been marked for removal.
      *
      * @return True if it is dead.
      */
-    public boolean isDead();
+    boolean isDead();
 
     /**
      * Returns false if the entity has died or been despawned for some other
@@ -161,14 +161,14 @@ public interface Entity extends Metadatable {
      *
      * @return True if valid.
      */
-    public boolean isValid();
+    boolean isValid();
 
     /**
      * Gets the {@link Server} that contains this Entity
      *
      * @return Server instance running this Entity
      */
-    public Server getServer();
+    Server getServer();
 
     /**
      * Gets the primary passenger of a vehicle. For vehicles that could have
@@ -176,7 +176,7 @@ public interface Entity extends Metadatable {
      *
      * @return an entity
      */
-    public abstract Entity getPassenger();
+    Entity getPassenger();
 
     /**
      * Set the passenger of a vehicle.
@@ -184,51 +184,51 @@ public interface Entity extends Metadatable {
      * @param passenger The new passenger.
      * @return false if it could not be done for whatever reason
      */
-    public abstract boolean setPassenger(Entity passenger);
+    boolean setPassenger(Entity passenger);
 
     /**
      * Check if a vehicle has passengers.
      *
      * @return True if the vehicle has no passengers.
      */
-    public abstract boolean isEmpty();
+    boolean isEmpty();
 
     /**
      * Eject any passenger.
      *
      * @return True if there was a passenger.
      */
-    public abstract boolean eject();
+    boolean eject();
 
     /**
      * Returns the distance this entity has fallen
      *
      * @return The distance.
      */
-    public float getFallDistance();
+    float getFallDistance();
 
     /**
      * Sets the fall distance for this entity
      *
      * @param distance The new distance.
      */
-    public void setFallDistance(float distance);
+    void setFallDistance(float distance);
 
     /**
-     * Record the last {@link EntityDamageEvent} inflicted on this entity
+     * Retrieve the last {@link EntityDamageEvent} inflicted on this entity.
+     * This event may have been cancelled.
      *
-     * @param event a {@link EntityDamageEvent}
+     * @return the last known {@link EntityDamageEvent} or null if hitherto
+     * unharmed
      */
-    public void setLastDamageCause(EntityDamageEvent event);
+    EntityDamageEvent getLastDamageCause();
 
     /**
-     * Retrieve the last {@link EntityDamageEvent} inflicted on this entity.
-     * This event may have been cancelled.
+     * Record the last {@link EntityDamageEvent} inflicted on this entity
      *
-     * @return the last known {@link EntityDamageEvent} or null if hitherto
-     *     unharmed
+     * @param event a {@link EntityDamageEvent}
      */
-    public EntityDamageEvent getLastDamageCause();
+    void setLastDamageCause(EntityDamageEvent event);
 
     /**
      * Returns a unique and persistent id for this entity
@@ -244,7 +244,7 @@ public interface Entity extends Metadatable {
      *
      * @return Age of entity
      */
-    public int getTicksLived();
+    int getTicksLived();
 
     /**
      * Sets the amount of ticks this entity has lived for.
@@ -254,7 +254,7 @@ public interface Entity extends Metadatable {
      *
      * @param value Age of entity
      */
-    public void setTicksLived(int value);
+    void setTicksLived(int value);
 
     /**
      * Performs the specified {@link EntityEffect} for this entity.
@@ -263,21 +263,21 @@ public interface Entity extends Metadatable {
      *
      * @param type Effect to play.
      */
-    public void playEffect(EntityEffect type);
+    void playEffect(EntityEffect type);
 
     /**
      * Get the type of the entity.
      *
      * @return The entity type.
      */
-    public EntityType getType();
+    EntityType getType();
 
     /**
      * Returns whether this entity is inside a vehicle.
      *
      * @return True if the entity is in a vehicle.
      */
-    public boolean isInsideVehicle();
+    boolean isInsideVehicle();
 
     /**
      * Leave the current vehicle. If the entity is currently in a vehicle (and
@@ -286,7 +286,7 @@ public interface Entity extends Metadatable {
      *
      * @return True if the entity was in a vehicle.
      */
-    public boolean leaveVehicle();
+    boolean leaveVehicle();
 
     /**
      * Get the vehicle that this player is inside. If there is no vehicle,
@@ -294,23 +294,21 @@ public interface Entity extends Metadatable {
      *
      * @return The current vehicle.
      */
-    public Entity getVehicle();
+    Entity getVehicle();
+
+    Spigot spigot();
 
     // Spigot Start
-    public class Spigot
-    {
+    class Spigot {
 
         /**
          * Returns whether this entity is invulnerable.
-         *         
-        * @return True if the entity is invulnerable.
+         *
+         * @return true if the entity is invulnerable.
          */
-        public boolean isInvulnerable()
-        {
-            throw new UnsupportedOperationException( "Not supported yet." );
+        public boolean isInvulnerable() {
+            throw new UnsupportedOperationException("Not supported yet.");
         }
     }
-
-    Spigot spigot();
     // Spigot End
 }
diff --git a/src/main/java/org/bukkit/entity/EntityType.java b/src/main/java/org/bukkit/entity/EntityType.java
index 39ecb13..1544ab4 100644
--- a/src/main/java/org/bukkit/entity/EntityType.java
+++ b/src/main/java/org/bukkit/entity/EntityType.java
@@ -1,22 +1,23 @@
 package org.bukkit.entity;
 
-import java.util.HashMap;
-import java.util.Map;
-
+import org.bukkit.Location;
+import org.bukkit.World;
 import org.bukkit.entity.minecart.CommandMinecart;
-import org.bukkit.entity.minecart.HopperMinecart;
-import org.bukkit.entity.minecart.SpawnerMinecart;
-import org.bukkit.entity.minecart.RideableMinecart;
 import org.bukkit.entity.minecart.ExplosiveMinecart;
+import org.bukkit.entity.minecart.HopperMinecart;
 import org.bukkit.entity.minecart.PoweredMinecart;
+import org.bukkit.entity.minecart.RideableMinecart;
+import org.bukkit.entity.minecart.SpawnerMinecart;
 import org.bukkit.entity.minecart.StorageMinecart;
 import org.bukkit.inventory.ItemStack;
-import org.bukkit.Location;
-import org.bukkit.World;
+
+import java.util.HashMap;
+import java.util.Map;
 
 public enum EntityType {
 
     // These strings MUST match the strings in nms.EntityTypes and are case sensitive.
+
     /**
      * An item resting on the ground.
      * <p>
@@ -24,91 +25,115 @@ public enum EntityType {
      * World#dropItemNaturally(Location, ItemStack)}
      */
     DROPPED_ITEM("Item", Item.class, 1, false),
+
     /**
      * An experience orb.
      */
     EXPERIENCE_ORB("XPOrb", ExperienceOrb.class, 2),
+
     /**
      * A leash attached to a fencepost.
      */
     LEASH_HITCH("LeashKnot", LeashHitch.class, 8),
+
     /**
      * A painting on a wall.
      */
     PAINTING("Painting", Painting.class, 9),
+
     /**
      * An arrow projectile; may get stuck in the ground.
      */
     ARROW("Arrow", Arrow.class, 10),
+
     /**
      * A flying snowball.
      */
     SNOWBALL("Snowball", Snowball.class, 11),
+
     /**
      * A flying large fireball, as thrown by a Ghast for example.
      */
     FIREBALL("Fireball", LargeFireball.class, 12),
+
     /**
      * A flying small fireball, such as thrown by a Blaze or player.
      */
     SMALL_FIREBALL("SmallFireball", SmallFireball.class, 13),
+
     /**
      * A flying ender pearl.
      */
     ENDER_PEARL("ThrownEnderpearl", EnderPearl.class, 14),
+
     /**
      * An ender eye signal.
      */
     ENDER_SIGNAL("EyeOfEnderSignal", EnderSignal.class, 15),
+
     /**
      * A flying experience bottle.
      */
     THROWN_EXP_BOTTLE("ThrownExpBottle", ThrownExpBottle.class, 17),
+
     /**
      * An item frame on a wall.
      */
     ITEM_FRAME("ItemFrame", ItemFrame.class, 18),
+
     /**
      * A flying wither skull projectile.
      */
     WITHER_SKULL("WitherSkull", WitherSkull.class, 19),
+
     /**
      * Primed TNT that is about to explode.
      */
     PRIMED_TNT("PrimedTnt", TNTPrimed.class, 20),
+
     /**
      * A block that is going to or is about to fall.
      */
     FALLING_BLOCK("FallingSand", FallingBlock.class, 21, false),
+
     FIREWORK("FireworksRocketEntity", Firework.class, 22, false),
+
     /**
      * @see CommandMinecart
      */
     MINECART_COMMAND("MinecartCommandBlock", CommandMinecart.class, 40),
+
     /**
      * A placed boat.
      */
     BOAT("Boat", Boat.class, 41),
+
     /**
      * @see RideableMinecart
      */
     MINECART("MinecartRideable", RideableMinecart.class, 42),
+
+
     /**
      * @see StorageMinecart
      */
     MINECART_CHEST("MinecartChest", StorageMinecart.class, 43),
+
     /**
      * @see PoweredMinecart
      */
     MINECART_FURNACE("MinecartFurnace", PoweredMinecart.class, 44),
+
     /**
      * @see ExplosiveMinecart
      */
     MINECART_TNT("MinecartTNT", ExplosiveMinecart.class, 45),
+
     /**
      * @see HopperMinecart
      */
     MINECART_HOPPER("MinecartHopper", HopperMinecart.class, 46),
+
     /**
      * @see SpawnerMinecart
      */
@@ -143,38 +168,40 @@ public enum EntityType {
     HORSE("EntityHorse", Horse.class, 100),
     VILLAGER("Villager", Villager.class, 120),
     ENDER_CRYSTAL("EnderCrystal", EnderCrystal.class, 200),
+
     // These don't have an entity ID in nms.EntityTypes.
+
     /**
      * A flying splash potion.
      */
     SPLASH_POTION(null, ThrownPotion.class, -1, false),
+
     /**
      * A flying chicken egg.
      */
     EGG(null, Egg.class, -1, false),
+
     /**
      * A fishing line and bobber.
      */
     FISHING_HOOK(null, Fish.class, -1, false),
+
     /**
      * A bolt of lightning.
      * <p>
      * Spawn with {@link World#strikeLightning(Location)}.
      */
     LIGHTNING(null, LightningStrike.class, -1, false),
+
     WEATHER(null, Weather.class, -1, false),
     PLAYER(null, Player.class, -1, false),
     COMPLEX_PART(null, ComplexEntityPart.class, -1, false),
+
     /**
      * An unknown entity without an Entity Class
      */
     UNKNOWN(null, null, -1, false);
 
-    private String name;
-    private Class<? extends Entity> clazz;
-    private short typeId;
-    private boolean independent, living;
-
     private static final Map<String, EntityType> NAME_MAP = new HashMap<String, EntityType>();
     private static final Map<Short, EntityType> ID_MAP = new HashMap<Short, EntityType>();
 
@@ -189,11 +216,16 @@ public enum EntityType {
         }
     }
 
-    private EntityType(String name, Class<? extends Entity> clazz, int typeId) {
+    private String name;
+    private Class<? extends Entity> clazz;
+    private short typeId;
+    private boolean independent, living;
+
+    EntityType(String name, Class<? extends Entity> clazz, int typeId) {
         this(name, clazz, typeId, true);
     }
 
-    private EntityType(String name, Class<? extends Entity> clazz, int typeId, boolean independent) {
+    EntityType(String name, Class<? extends Entity> clazz, int typeId, boolean independent) {
         this.name = name;
         this.clazz = clazz;
         this.typeId = (short) typeId;
@@ -204,49 +236,45 @@ public enum EntityType {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
-    public String getName() {
-        return name;
-    }
-
-    public Class<? extends Entity> getEntityClass() {
-        return clazz;
+    public static EntityType fromName(String name) {
+        if (name == null) {
+            return null;
+        }
+        return NAME_MAP.get(name.toLowerCase());
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
-    public short getTypeId() {
-        return typeId;
+    public static EntityType fromId(int id) {
+        if (id > Short.MAX_VALUE) {
+            return null;
+        }
+        return ID_MAP.get((short) id);
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
-    public static EntityType fromName(String name) {
-        if (name == null) {
-            return null;
-        }
-        return NAME_MAP.get(name.toLowerCase());
+    public String getName() {
+        return name;
+    }
+
+    public Class<? extends Entity> getEntityClass() {
+        return clazz;
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
-    public static EntityType fromId(int id) {
-        if (id > Short.MAX_VALUE) {
-            return null;
-        }
-        return ID_MAP.get((short) id);
+    public short getTypeId() {
+        return typeId;
     }
 
     /**
diff --git a/src/main/java/org/bukkit/entity/ExperienceOrb.java b/src/main/java/org/bukkit/entity/ExperienceOrb.java
index c286edf..b63c5b1 100644
--- a/src/main/java/org/bukkit/entity/ExperienceOrb.java
+++ b/src/main/java/org/bukkit/entity/ExperienceOrb.java
@@ -10,12 +10,12 @@ public interface ExperienceOrb extends Entity {
      *
      * @return Amount of experience
      */
-    public int getExperience();
+    int getExperience();
 
     /**
      * Sets how much experience is contained within this orb
      *
      * @param value Amount of experience
      */
-    public void setExperience(int value);
+    void setExperience(int value);
 }
diff --git a/src/main/java/org/bukkit/entity/Explosive.java b/src/main/java/org/bukkit/entity/Explosive.java
index 48650f6..ac87280 100644
--- a/src/main/java/org/bukkit/entity/Explosive.java
+++ b/src/main/java/org/bukkit/entity/Explosive.java
@@ -6,30 +6,30 @@ package org.bukkit.entity;
 public interface Explosive extends Entity {
 
     /**
-     * Set the radius affected by this explosive's explosion
-     *
-     * @param yield The explosive yield
-     */
-    public void setYield(float yield);
-
-    /**
      * Return the radius or yield of this explosive's explosion
      *
      * @return the radius of blocks affected
      */
-    public float getYield();
+    float getYield();
 
     /**
-     * Set whether or not this explosive's explosion causes fire
+     * Set the radius affected by this explosive's explosion
      *
-     * @param isIncendiary Whether it should cause fire
+     * @param yield The explosive yield
      */
-    public void setIsIncendiary(boolean isIncendiary);
+    void setYield(float yield);
 
     /**
      * Return whether or not this explosive creates a fire when exploding
      *
      * @return true if the explosive creates fire, false otherwise
      */
-    public boolean isIncendiary();
+    boolean isIncendiary();
+
+    /**
+     * Set whether or not this explosive's explosion causes fire
+     *
+     * @param isIncendiary Whether it should cause fire
+     */
+    void setIsIncendiary(boolean isIncendiary);
 }
diff --git a/src/main/java/org/bukkit/entity/FallingSand.java b/src/main/java/org/bukkit/entity/FallingSand.java
index 758d47d..8779e52 100644
--- a/src/main/java/org/bukkit/entity/FallingSand.java
+++ b/src/main/java/org/bukkit/entity/FallingSand.java
@@ -6,4 +6,6 @@ package org.bukkit.entity;
  * @deprecated See {@link FallingBlock}
  */
 @Deprecated
-public interface FallingSand extends FallingBlock {}
+public interface FallingSand extends FallingBlock {
+
+}
diff --git a/src/main/java/org/bukkit/entity/Fireball.java b/src/main/java/org/bukkit/entity/Fireball.java
index 56ed578..d2dc86c 100644
--- a/src/main/java/org/bukkit/entity/Fireball.java
+++ b/src/main/java/org/bukkit/entity/Fireball.java
@@ -8,17 +8,16 @@ import org.bukkit.util.Vector;
 public interface Fireball extends Projectile, Explosive {
 
     /**
-     * Fireballs fly straight and do not take setVelocity(...) well.
+     * Retrieve the direction this fireball is heading toward
      *
-     * @param direction the direction this fireball is flying toward
+     * @return the direction
      */
-    public void setDirection(Vector direction);
+    Vector getDirection();
 
     /**
-     * Retrieve the direction this fireball is heading toward
+     * Fireballs fly straight and do not take setVelocity(...) well.
      *
-     * @return the direction
+     * @param direction the direction this fireball is flying toward
      */
-    public Vector getDirection();
-
+    void setDirection(Vector direction);
 }
diff --git a/src/main/java/org/bukkit/entity/Fish.java b/src/main/java/org/bukkit/entity/Fish.java
index 12ed1ed..6169e35 100644
--- a/src/main/java/org/bukkit/entity/Fish.java
+++ b/src/main/java/org/bukkit/entity/Fish.java
@@ -2,7 +2,9 @@ package org.bukkit.entity;
 
 /**
  * Represents a fishing hook.
+ *
  * @deprecated in favor of {@link FishHook}
  */
 public interface Fish extends FishHook {
+
 }
diff --git a/src/main/java/org/bukkit/entity/FishHook.java b/src/main/java/org/bukkit/entity/FishHook.java
index 45b7f03..42bee17 100644
--- a/src/main/java/org/bukkit/entity/FishHook.java
+++ b/src/main/java/org/bukkit/entity/FishHook.java
@@ -4,6 +4,7 @@ package org.bukkit.entity;
  * Represents a fishing hook.
  */
 public interface FishHook extends Projectile {
+
     /**
      * Gets the chance of a fish biting.
      * <p>
@@ -12,7 +13,7 @@ public interface FishHook extends Projectile {
      *
      * @return chance the bite chance
      */
-    public double getBiteChance();
+    double getBiteChance();
 
     /**
      * Sets the chance of a fish biting.
@@ -21,8 +22,7 @@ public interface FishHook extends Projectile {
      * 1.0 = Instant catch.
      *
      * @param chance the bite chance
-     * @throws IllegalArgumentException if the bite chance is not between 0
-     *     and 1
+     * @throws IllegalArgumentException if the bite chance is not between 0 and 1
      */
-    public void setBiteChance(double chance) throws IllegalArgumentException;
+    void setBiteChance(double chance) throws IllegalArgumentException;
 }
diff --git a/src/main/java/org/bukkit/entity/Flying.java b/src/main/java/org/bukkit/entity/Flying.java
index 4f16a26..c8a5324 100644
--- a/src/main/java/org/bukkit/entity/Flying.java
+++ b/src/main/java/org/bukkit/entity/Flying.java
@@ -3,4 +3,6 @@ package org.bukkit.entity;
 /**
  * Represents a Flying Entity.
  */
-public interface Flying extends LivingEntity {}
+public interface Flying extends LivingEntity {
+
+}
diff --git a/src/main/java/org/bukkit/entity/Ghast.java b/src/main/java/org/bukkit/entity/Ghast.java
index 3f5edf7..f60c182 100644
--- a/src/main/java/org/bukkit/entity/Ghast.java
+++ b/src/main/java/org/bukkit/entity/Ghast.java
@@ -3,4 +3,6 @@ package org.bukkit.entity;
 /**
  * Represents a Ghast.
  */
-public interface Ghast extends Flying {}
+public interface Ghast extends Flying {
+
+}
diff --git a/src/main/java/org/bukkit/entity/Giant.java b/src/main/java/org/bukkit/entity/Giant.java
index 610de57..674fef2 100644
--- a/src/main/java/org/bukkit/entity/Giant.java
+++ b/src/main/java/org/bukkit/entity/Giant.java
@@ -3,4 +3,6 @@ package org.bukkit.entity;
 /**
  * Represents a Giant.
  */
-public interface Giant extends Monster {}
+public interface Giant extends Monster {
+
+}
diff --git a/src/main/java/org/bukkit/entity/Golem.java b/src/main/java/org/bukkit/entity/Golem.java
index 4165977..4b43c36 100644
--- a/src/main/java/org/bukkit/entity/Golem.java
+++ b/src/main/java/org/bukkit/entity/Golem.java
@@ -4,5 +4,5 @@ package org.bukkit.entity;
  * A mechanical creature that may harm enemies.
  */
 public interface Golem extends Creature {
-    
+
 }
diff --git a/src/main/java/org/bukkit/entity/Hanging.java b/src/main/java/org/bukkit/entity/Hanging.java
index 67e9b61..0e95baf 100644
--- a/src/main/java/org/bukkit/entity/Hanging.java
+++ b/src/main/java/org/bukkit/entity/Hanging.java
@@ -13,10 +13,10 @@ public interface Hanging extends Entity, Attachable {
      * of placement. Note that if the result is not valid the object would
      * normally drop as an item.
      *
-     * @param face The new direction.
+     * @param face  The new direction.
      * @param force Whether to force it.
      * @return False if force was false and there was no block for it to
-     *     attach to in order to face the given direction.
+     * attach to in order to face the given direction.
      */
-    public boolean setFacingDirection(BlockFace face, boolean force);
+    boolean setFacingDirection(BlockFace face, boolean force);
 }
diff --git a/src/main/java/org/bukkit/entity/Horse.java b/src/main/java/org/bukkit/entity/Horse.java
index e90d318..cd6f729 100644
--- a/src/main/java/org/bukkit/entity/Horse.java
+++ b/src/main/java/org/bukkit/entity/Horse.java
@@ -9,95 +9,6 @@ import org.bukkit.inventory.InventoryHolder;
 public interface Horse extends Animals, Vehicle, InventoryHolder, Tameable {
 
     /**
-     * Represents the different types of horses that may exist.
-     */
-    public enum Variant {
-        /**
-         * A normal horse
-         */
-        HORSE,
-        /**
-         * A donkey
-         */
-        DONKEY,
-        /**
-         * A mule
-         */
-        MULE,
-        /**
-         * An undead horse
-         */
-        UNDEAD_HORSE,
-        /**
-         * A skeleton horse
-         */
-        SKELETON_HORSE,
-        ;
-    }
-
-    /**
-     * Represents the base color that the horse has.
-     */
-    public enum Color {
-        /**
-         * Snow white
-         */
-        WHITE,
-        /**
-         * Very light brown
-         */
-        CREAMY,
-        /**
-         * Chestnut
-         */
-        CHESTNUT,
-        /**
-         * Light brown
-         */
-        BROWN,
-        /**
-         * Pitch black
-         */
-        BLACK,
-        /**
-         * Gray
-         */
-        GRAY,
-        /**
-         * Dark brown
-         */
-        DARK_BROWN,
-        ;
-    }
-
-    /**
-     * Represents the style, or markings, that the horse has.
-     */
-    public enum Style {
-        /**
-         * No markings
-         */
-        NONE,
-        /**
-         * White socks or stripes
-         */
-        WHITE,
-        /**
-         * Milky splotches
-         */
-        WHITEFIELD,
-        /**
-         * Round white dots
-         */
-        WHITE_DOTS,
-        /**
-         * Small black dots
-         */
-        BLACK_DOTS,
-        ;
-    }
-
-    /**
      * Gets the horse's variant.
      * <p>
      * A horse's variant defines its physical appearance and capabilities.
@@ -106,7 +17,7 @@ public interface Horse extends Animals, Vehicle, InventoryHolder, Tameable {
      *
      * @return a {@link Variant} representing the horse's variant
      */
-    public Variant getVariant();
+    Variant getVariant();
 
     /**
      * Sets the horse's variant.
@@ -122,7 +33,7 @@ public interface Horse extends Animals, Vehicle, InventoryHolder, Tameable {
      *
      * @param variant a {@link Variant} for this horse
      */
-    public void setVariant(Variant variant);
+    void setVariant(Variant variant);
 
     /**
      * Gets the horse's color.
@@ -132,7 +43,7 @@ public interface Horse extends Animals, Vehicle, InventoryHolder, Tameable {
      *
      * @return a {@link Color} representing the horse's group
      */
-    public Color getColor();
+    Color getColor();
 
     /**
      * Sets the horse's color.
@@ -142,7 +53,7 @@ public interface Horse extends Animals, Vehicle, InventoryHolder, Tameable {
      *
      * @param color a {@link Color} for this horse
      */
-    public void setColor(Color color);
+    void setColor(Color color);
 
     /**
      * Gets the horse's style.
@@ -153,7 +64,7 @@ public interface Horse extends Animals, Vehicle, InventoryHolder, Tameable {
      *
      * @return a {@link Style} representing the horse's style
      */
-    public Style getStyle();
+    Style getStyle();
 
     /**
      * Sets the style of this horse.
@@ -164,14 +75,14 @@ public interface Horse extends Animals, Vehicle, InventoryHolder, Tameable {
      *
      * @param style a {@link Style} for this horse
      */
-    public void setStyle(Style style);
+    void setStyle(Style style);
 
     /**
      * Gets whether the horse has a chest equipped.
      *
      * @return true if the horse has chest storage
      */
-    public boolean isCarryingChest();
+    boolean isCarryingChest();
 
     /**
      * Sets whether the horse has a chest equipped.
@@ -179,7 +90,7 @@ public interface Horse extends Animals, Vehicle, InventoryHolder, Tameable {
      *
      * @param chest true if the horse should have a chest
      */
-    public void setCarryingChest(boolean chest);
+    void setCarryingChest(boolean chest);
 
     /**
      * Gets the domestication level of this horse.
@@ -190,7 +101,7 @@ public interface Horse extends Animals, Vehicle, InventoryHolder, Tameable {
      *
      * @return domestication level
      */
-    public int getDomestication();
+    int getDomestication();
 
     /**
      * Sets the domestication level of this horse.
@@ -204,7 +115,7 @@ public interface Horse extends Animals, Vehicle, InventoryHolder, Tameable {
      *
      * @param level domestication level
      */
-    public void setDomestication(int level);
+    void setDomestication(int level);
 
     /**
      * Gets the maximum domestication level of this horse.
@@ -214,7 +125,7 @@ public interface Horse extends Animals, Vehicle, InventoryHolder, Tameable {
      *
      * @return the max domestication level
      */
-    public int getMaxDomestication();
+    int getMaxDomestication();
 
     /**
      * Sets the maximum domestication level of this horse.
@@ -227,7 +138,7 @@ public interface Horse extends Animals, Vehicle, InventoryHolder, Tameable {
      *
      * @param level the max domestication level
      */
-    public void setMaxDomestication(int level);
+    void setMaxDomestication(int level);
 
     /**
      * Gets the jump strength of this horse.
@@ -237,7 +148,7 @@ public interface Horse extends Animals, Vehicle, InventoryHolder, Tameable {
      *
      * @return the horse's jump strength
      */
-    public double getJumpStrength();
+    double getJumpStrength();
 
     /**
      * Sets the jump strength of this horse.
@@ -249,8 +160,111 @@ public interface Horse extends Animals, Vehicle, InventoryHolder, Tameable {
      *
      * @param strength jump strength for this horse
      */
-    public void setJumpStrength(double strength);
+    void setJumpStrength(double strength);
 
     @Override
-    public HorseInventory getInventory();
+    HorseInventory getInventory();
+
+    /**
+     * Represents the different types of horses that may exist.
+     */
+    enum Variant {
+
+        /**
+         * A normal horse
+         */
+        HORSE,
+
+        /**
+         * A donkey
+         */
+        DONKEY,
+
+        /**
+         * A mule
+         */
+        MULE,
+
+        /**
+         * An undead horse
+         */
+        UNDEAD_HORSE,
+
+        /**
+         * A skeleton horse
+         */
+        SKELETON_HORSE,;
+    }
+
+    /**
+     * Represents the base color that the horse has.
+     */
+    enum Color {
+
+        /**
+         * Snow white
+         */
+        WHITE,
+
+        /**
+         * Very light brown
+         */
+        CREAMY,
+
+        /**
+         * Chestnut
+         */
+        CHESTNUT,
+
+        /**
+         * Light brown
+         */
+        BROWN,
+
+        /**
+         * Pitch black
+         */
+        BLACK,
+
+        /**
+         * Gray
+         */
+        GRAY,
+
+        /**
+         * Dark brown
+         */
+        DARK_BROWN,;
+    }
+
+    /**
+     * Represents the style, or markings, that the horse has.
+     */
+    enum Style {
+
+        /**
+         * No markings
+         */
+        NONE,
+
+        /**
+         * White socks or stripes
+         */
+        WHITE,
+
+        /**
+         * Milky splotches
+         */
+        WHITEFIELD,
+
+        /**
+         * Round white dots
+         */
+        WHITE_DOTS,
+
+        /**
+         * Small black dots
+         */
+        BLACK_DOTS,;
+    }
 }
diff --git a/src/main/java/org/bukkit/entity/HumanEntity.java b/src/main/java/org/bukkit/entity/HumanEntity.java
index 3f8646d..96726bb 100644
--- a/src/main/java/org/bukkit/entity/HumanEntity.java
+++ b/src/main/java/org/bukkit/entity/HumanEntity.java
@@ -19,32 +19,31 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, Permissible, Inv
      *
      * @return Player name
      */
-    public String getName();
+    String getName();
 
     /**
      * Get the player's inventory.
      *
-     * @return The inventory of the player, this also contains the armor
-     *     slots.
+     * @return The inventory of the player, this also contains the armor slots.
      */
-    public PlayerInventory getInventory();
+    PlayerInventory getInventory();
 
     /**
      * Get the player's EnderChest inventory
      *
      * @return The EnderChest of the player
      */
-    public Inventory getEnderChest();
+    Inventory getEnderChest();
 
     /**
      * If the player currently has an inventory window open, this method will
      * set a property of that window, such as the state of a progress bar.
      *
-     * @param prop The property.
+     * @param prop  The property.
      * @param value The value to set the property to.
      * @return True if the property was successfully set.
      */
-    public boolean setWindowProperty(InventoryView.Property prop, int value);
+    boolean setWindowProperty(InventoryView.Property prop, int value);
 
     /**
      * Gets the inventory view the player is currently viewing. If they do not
@@ -52,7 +51,7 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, Permissible, Inv
      *
      * @return The inventory view.
      */
-    public InventoryView getOpenInventory();
+    InventoryView getOpenInventory();
 
     /**
      * Opens an inventory window with the specified inventory on the top and
@@ -61,52 +60,52 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, Permissible, Inv
      * @param inventory The inventory to open
      * @return The newly opened inventory view
      */
-    public InventoryView openInventory(Inventory inventory);
+    InventoryView openInventory(Inventory inventory);
 
     /**
      * Opens an empty workbench inventory window with the player's inventory
      * on the bottom.
      *
      * @param location The location to attach it to. If null, the player's
-     *     location is used.
-     * @param force If false, and there is no workbench block at the location,
-     *     no inventory will be opened and null will be returned.
+     *                 location is used.
+     * @param force    If false, and there is no workbench block at the location,
+     *                 no inventory will be opened and null will be returned.
      * @return The newly opened inventory view, or null if it could not be
-     *     opened.
+     * opened.
      */
-    public InventoryView openWorkbench(Location location, boolean force);
+    InventoryView openWorkbench(Location location, boolean force);
 
     /**
      * Opens an empty enchanting inventory window with the player's inventory
      * on the bottom.
      *
      * @param location The location to attach it to. If null, the player's
-     *     location is used.
-     * @param force If false, and there is no enchanting table at the
-     *     location, no inventory will be opened and null will be returned.
+     *                 location is used.
+     * @param force    If false, and there is no enchanting table at the
+     *                 location, no inventory will be opened and null will be returned.
      * @return The newly opened inventory view, or null if it could not be
-     *     opened.
+     * opened.
      */
-    public InventoryView openEnchanting(Location location, boolean force);
+    InventoryView openEnchanting(Location location, boolean force);
 
     /**
      * Opens an inventory window to the specified inventory view.
      *
      * @param inventory The view to open
      */
-    public void openInventory(InventoryView inventory);
+    void openInventory(InventoryView inventory);
 
     /**
      * Force-closes the currently open inventory view for this player, if any.
      */
-    public void closeInventory();
+    void closeInventory();
 
     /**
      * Returns the ItemStack currently in your hand, can be empty.
      *
      * @return The ItemStack of the item you are currently holding.
      */
-    public ItemStack getItemInHand();
+    ItemStack getItemInHand();
 
     /**
      * Sets the item to the given ItemStack, this will replace whatever the
@@ -114,7 +113,7 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, Permissible, Inv
      *
      * @param item The ItemStack which will end up in the hand
      */
-    public void setItemInHand(ItemStack item);
+    void setItemInHand(ItemStack item);
 
     /**
      * Returns the ItemStack currently on your cursor, can be empty. Will
@@ -122,7 +121,7 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, Permissible, Inv
      *
      * @return The ItemStack of the item you are currently moving around.
      */
-    public ItemStack getItemOnCursor();
+    ItemStack getItemOnCursor();
 
     /**
      * Sets the item to the given ItemStack, this will replace whatever the
@@ -131,47 +130,47 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, Permissible, Inv
      *
      * @param item The ItemStack which will end up in the hand
      */
-    public void setItemOnCursor(ItemStack item);
+    void setItemOnCursor(ItemStack item);
 
     /**
      * Returns whether this player is slumbering.
      *
      * @return slumber state
      */
-    public boolean isSleeping();
+    boolean isSleeping();
 
     /**
      * Get the sleep ticks of the player. This value may be capped.
      *
      * @return slumber ticks
      */
-    public int getSleepTicks();
+    int getSleepTicks();
 
     /**
      * Gets this human's current {@link GameMode}
      *
      * @return Current game mode
      */
-    public GameMode getGameMode();
+    GameMode getGameMode();
 
     /**
      * Sets this human's current {@link GameMode}
      *
      * @param mode New game mode
      */
-    public void setGameMode(GameMode mode);
+    void setGameMode(GameMode mode);
 
     /**
      * Check if the player is currently blocking (ie with a sword).
      *
      * @return Whether they are blocking.
      */
-    public boolean isBlocking();
+    boolean isBlocking();
 
     /**
      * Get the total amount of experience required for the player to level
      *
      * @return Experience required to level up
      */
-    public int getExpToLevel();
+    int getExpToLevel();
 }
diff --git a/src/main/java/org/bukkit/entity/IronGolem.java b/src/main/java/org/bukkit/entity/IronGolem.java
index 655e37c..96ed66f 100644
--- a/src/main/java/org/bukkit/entity/IronGolem.java
+++ b/src/main/java/org/bukkit/entity/IronGolem.java
@@ -10,13 +10,13 @@ public interface IronGolem extends Golem {
      *
      * @return Whether this iron golem was built by a player
      */
-    public boolean isPlayerCreated();
+    boolean isPlayerCreated();
 
     /**
      * Sets whether this iron golem was built by a player or not.
      *
      * @param playerCreated true if you want to set the iron golem as being
-     *     player created, false if you want it to be a natural village golem.
+     *                      player created, false if you want it to be a natural village golem.
      */
-    public void setPlayerCreated(boolean playerCreated);
+    void setPlayerCreated(boolean playerCreated);
 }
diff --git a/src/main/java/org/bukkit/entity/Item.java b/src/main/java/org/bukkit/entity/Item.java
index 90260b7..4ec2575 100644
--- a/src/main/java/org/bukkit/entity/Item.java
+++ b/src/main/java/org/bukkit/entity/Item.java
@@ -12,26 +12,26 @@ public interface Item extends Entity {
      *
      * @return An item stack.
      */
-    public ItemStack getItemStack();
+    ItemStack getItemStack();
 
     /**
      * Sets the item stack associated with this item drop.
      *
      * @param stack An item stack.
      */
-    public void setItemStack(ItemStack stack);
+    void setItemStack(ItemStack stack);
 
     /**
      * Gets the delay before this Item is available to be picked up by players
      *
      * @return Remaining delay
      */
-    public int getPickupDelay();
+    int getPickupDelay();
 
     /**
      * Sets the delay before this Item is available to be picked up by players
      *
      * @param delay New delay
      */
-    public void setPickupDelay(int delay);
+    void setPickupDelay(int delay);
 }
diff --git a/src/main/java/org/bukkit/entity/ItemFrame.java b/src/main/java/org/bukkit/entity/ItemFrame.java
index 8b86815..6af5ab9 100644
--- a/src/main/java/org/bukkit/entity/ItemFrame.java
+++ b/src/main/java/org/bukkit/entity/ItemFrame.java
@@ -13,21 +13,21 @@ public interface ItemFrame extends Hanging {
      *
      * @return a defensive copy the item in this item frame
      */
-    public ItemStack getItem();
+    ItemStack getItem();
 
     /**
      * Set the item in this frame
      *
      * @param item the new item
      */
-    public void setItem(ItemStack item);
+    void setItem(ItemStack item);
 
     /**
      * Get the rotation of the frame's item
      *
      * @return the direction
      */
-    public Rotation getRotation();
+    Rotation getRotation();
 
     /**
      * Set the rotation of the frame's item
@@ -35,5 +35,5 @@ public interface ItemFrame extends Hanging {
      * @param rotation the new rotation
      * @throws IllegalArgumentException if rotation is null
      */
-    public void setRotation(Rotation rotation) throws IllegalArgumentException;
+    void setRotation(Rotation rotation) throws IllegalArgumentException;
 }
diff --git a/src/main/java/org/bukkit/entity/LargeFireball.java b/src/main/java/org/bukkit/entity/LargeFireball.java
index fc3a109..1335645 100644
--- a/src/main/java/org/bukkit/entity/LargeFireball.java
+++ b/src/main/java/org/bukkit/entity/LargeFireball.java
@@ -4,4 +4,5 @@ package org.bukkit.entity;
  * Represents a large {@link Fireball}
  */
 public interface LargeFireball extends Fireball {
+
 }
diff --git a/src/main/java/org/bukkit/entity/LeashHitch.java b/src/main/java/org/bukkit/entity/LeashHitch.java
index 9ac04c1..ac94135 100644
--- a/src/main/java/org/bukkit/entity/LeashHitch.java
+++ b/src/main/java/org/bukkit/entity/LeashHitch.java
@@ -4,4 +4,5 @@ package org.bukkit.entity;
  * Represents a Leash Hitch on a fence
  */
 public interface LeashHitch extends Hanging {
+
 }
diff --git a/src/main/java/org/bukkit/entity/LightningStrike.java b/src/main/java/org/bukkit/entity/LightningStrike.java
index 1ed4ac9..f861c38 100644
--- a/src/main/java/org/bukkit/entity/LightningStrike.java
+++ b/src/main/java/org/bukkit/entity/LightningStrike.java
@@ -10,23 +10,20 @@ public interface LightningStrike extends Weather {
      *
      * @return whether the strike is an effect
      */
-    public boolean isEffect();
+    boolean isEffect();
 
+    Spigot spigot();
 
-    public class Spigot extends Entity.Spigot
-    {
+    class Spigot extends Entity.Spigot {
 
         /*
          * Returns whether the strike is silent.
          *
          * @return whether the strike is silent.
          */
-        public boolean isSilent()
-        {
-            throw new UnsupportedOperationException( "Not supported yet." );
+        public boolean isSilent() {
+            throw new UnsupportedOperationException("Not supported yet.");
         }
 
     }
-
-    Spigot spigot();
 }
diff --git a/src/main/java/org/bukkit/entity/LivingEntity.java b/src/main/java/org/bukkit/entity/LivingEntity.java
index 6c8b4f8..9882dc8 100644
--- a/src/main/java/org/bukkit/entity/LivingEntity.java
+++ b/src/main/java/org/bukkit/entity/LivingEntity.java
@@ -1,9 +1,5 @@
 package org.bukkit.entity;
 
-import java.util.Collection;
-import java.util.HashSet;
-import java.util.List;
-
 import org.bukkit.Location;
 import org.bukkit.block.Block;
 import org.bukkit.inventory.EntityEquipment;
@@ -11,6 +7,10 @@ import org.bukkit.potion.PotionEffect;
 import org.bukkit.potion.PotionEffectType;
 import org.bukkit.projectiles.ProjectileSource;
 
+import java.util.Collection;
+import java.util.HashSet;
+import java.util.List;
+
 /**
  * Represents a living entity, such as a monster or player
  */
@@ -21,23 +21,23 @@ public interface LivingEntity extends Entity, Damageable, ProjectileSource {
      *
      * @return height of the living entity's eyes above its location
      */
-    public double getEyeHeight();
+    double getEyeHeight();
 
     /**
      * Gets the height of the living entity's eyes above its Location.
      *
      * @param ignoreSneaking if set to true, the effects of sneaking will be
-     *     ignored
+     *                       ignored
      * @return height of the living entity's eyes above its location
      */
-    public double getEyeHeight(boolean ignoreSneaking);
+    double getEyeHeight(boolean ignoreSneaking);
 
     /**
      * Get a Location detailing the current eye position of the living entity.
      *
      * @return a location at the eyes of the living entity
      */
-    public Location getEyeLocation();
+    Location getEyeLocation();
 
     /**
      * Gets all blocks along the living entity's line of sight.
@@ -46,28 +46,28 @@ public interface LivingEntity extends Entity, Damageable, ProjectileSource {
      * target inclusive.
      *
      * @param transparent HashSet containing all transparent block IDs (set to
-     *     null for only air)
+     *                    null for only air)
      * @param maxDistance this is the maximum distance to scan (may be limited
-     *     by server by at least 100 blocks, no less)
+     *                    by server by at least 100 blocks, no less)
      * @return list containing all blocks along the living entity's line of
-     *     sight
+     * sight
      * @deprecated Magic value
      */
     @Deprecated
-    public List<Block> getLineOfSight(HashSet<Byte> transparent, int maxDistance);
+    List<Block> getLineOfSight(HashSet<Byte> transparent, int maxDistance);
 
     /**
      * Gets the block that the living entity has targeted.
      *
      * @param transparent HashSet containing all transparent block IDs (set to
-     *     null for only air)
+     *                    null for only air)
      * @param maxDistance this is the maximum distance to scan (may be limited
-     *     by server by at least 100 blocks, no less)
+     *                    by server by at least 100 blocks, no less)
      * @return block that the living entity has targeted
      * @deprecated Magic value
      */
     @Deprecated
-    public Block getTargetBlock(HashSet<Byte> transparent, int maxDistance);
+    Block getTargetBlock(HashSet<Byte> transparent, int maxDistance);
 
     /**
      * Gets the last two blocks along the living entity's line of sight.
@@ -75,42 +75,42 @@ public interface LivingEntity extends Entity, Damageable, ProjectileSource {
      * The target block will be the last block in the list.
      *
      * @param transparent HashSet containing all transparent block IDs (set to
-     *     null for only air)
+     *                    null for only air)
      * @param maxDistance this is the maximum distance to scan. This may be
-     *     further limited by the server, but never to less than 100 blocks
+     *                    further limited by the server, but never to less than 100 blocks
      * @return list containing the last 2 blocks along the living entity's
-     *     line of sight
+     * line of sight
      * @deprecated Magic value
      */
     @Deprecated
-    public List<Block> getLastTwoTargetBlocks(HashSet<Byte> transparent, int maxDistance);
+    List<Block> getLastTwoTargetBlocks(HashSet<Byte> transparent, int maxDistance);
 
     /**
      * Throws an egg from the living entity.
      *
-     * @deprecated use launchProjectile(Egg.class) instead
      * @return the egg thrown
+     * @deprecated use launchProjectile(Egg.class) instead
      */
     @Deprecated
-    public Egg throwEgg();
+    Egg throwEgg();
 
     /**
      * Throws a snowball from the living entity.
      *
-     * @deprecated use launchProjectile(Snowball.class) instead
      * @return the snowball thrown
+     * @deprecated use launchProjectile(Snowball.class) instead
      */
     @Deprecated
-    public Snowball throwSnowball();
+    Snowball throwSnowball();
 
     /**
      * Shoots an arrow from the living entity.
      *
-     * @deprecated use launchProjectile(Arrow.class) instead
      * @return the arrow shot
+     * @deprecated use launchProjectile(Arrow.class) instead
      */
     @Deprecated
-    public Arrow shootArrow();
+    Arrow shootArrow();
 
     /**
      * Returns the amount of air that the living entity has remaining, in
@@ -118,28 +118,28 @@ public interface LivingEntity extends Entity, Damageable, ProjectileSource {
      *
      * @return amount of air remaining
      */
-    public int getRemainingAir();
+    int getRemainingAir();
 
     /**
      * Sets the amount of air that the living entity has remaining, in ticks.
      *
      * @param ticks amount of air remaining
      */
-    public void setRemainingAir(int ticks);
+    void setRemainingAir(int ticks);
 
     /**
      * Returns the maximum amount of air the living entity can have, in ticks.
      *
      * @return maximum amount of air
      */
-    public int getMaximumAir();
+    int getMaximumAir();
 
     /**
      * Sets the maximum amount of air the living entity can have, in ticks.
      *
      * @param ticks maximum amount of air
      */
-    public void setMaximumAir(int ticks);
+    void setMaximumAir(int ticks);
 
     /**
      * Returns the living entity's current maximum no damage ticks.
@@ -149,14 +149,14 @@ public interface LivingEntity extends Entity, Damageable, ProjectileSource {
      *
      * @return maximum no damage ticks
      */
-    public int getMaximumNoDamageTicks();
+    int getMaximumNoDamageTicks();
 
     /**
      * Sets the living entity's current maximum no damage ticks.
      *
      * @param ticks maximum amount of no damage ticks
      */
-    public void setMaximumNoDamageTicks(int ticks);
+    void setMaximumNoDamageTicks(int ticks);
 
     /**
      * Returns the living entity's last damage taken in the current no damage
@@ -167,7 +167,14 @@ public interface LivingEntity extends Entity, Damageable, ProjectileSource {
      *
      * @return damage taken since the last no damage ticks time period
      */
-    public double getLastDamage();
+    double getLastDamage();
+
+    /**
+     * Sets the damage dealt within the current no damage ticks time period.
+     *
+     * @param damage amount of damage
+     */
+    void setLastDamage(double damage);
 
     /**
      * This method exists for legacy reasons to provide backwards
@@ -175,14 +182,7 @@ public interface LivingEntity extends Entity, Damageable, ProjectileSource {
      * under any circumstances.
      */
     @Deprecated
-    public int _INVALID_getLastDamage();
-
-    /**
-     * Sets the damage dealt within the current no damage ticks time period.
-     *
-     * @param damage amount of damage
-     */
-    public void setLastDamage(double damage);
+    int _INVALID_getLastDamage();
 
     /**
      * This method exists for legacy reasons to provide backwards
@@ -190,21 +190,21 @@ public interface LivingEntity extends Entity, Damageable, ProjectileSource {
      * under any circumstances.
      */
     @Deprecated
-    public void _INVALID_setLastDamage(int damage);
+    void _INVALID_setLastDamage(int damage);
 
     /**
      * Returns the living entity's current no damage ticks.
      *
      * @return amount of no damage ticks
      */
-    public int getNoDamageTicks();
+    int getNoDamageTicks();
 
     /**
      * Sets the living entity's current no damage ticks.
      *
      * @param ticks amount of no damage ticks
      */
-    public void setNoDamageTicks(int ticks);
+    void setNoDamageTicks(int ticks);
 
     /**
      * Gets the player identified as the killer of the living entity.
@@ -213,7 +213,7 @@ public interface LivingEntity extends Entity, Damageable, ProjectileSource {
      *
      * @return killer player, or null if none found
      */
-    public Player getKiller();
+    Player getKiller();
 
     /**
      * Adds the given {@link PotionEffect} to the living entity.
@@ -224,7 +224,7 @@ public interface LivingEntity extends Entity, Damageable, ProjectileSource {
      * @param effect PotionEffect to be added
      * @return whether the effect could be added
      */
-    public boolean addPotionEffect(PotionEffect effect);
+    boolean addPotionEffect(PotionEffect effect);
 
     /**
      * Adds the given {@link PotionEffect} to the living entity.
@@ -233,10 +233,10 @@ public interface LivingEntity extends Entity, Damageable, ProjectileSource {
      * PotionEffectType}.
      *
      * @param effect PotionEffect to be added
-     * @param force whether conflicting effects should be removed
+     * @param force  whether conflicting effects should be removed
      * @return whether the effect could be added
      */
-    public boolean addPotionEffect(PotionEffect effect, boolean force);
+    boolean addPotionEffect(PotionEffect effect, boolean force);
 
     /**
      * Attempts to add all of the given {@link PotionEffect} to the living
@@ -245,7 +245,7 @@ public interface LivingEntity extends Entity, Damageable, ProjectileSource {
      * @param effects the effects to add
      * @return whether all of the effects could be added
      */
-    public boolean addPotionEffects(Collection<PotionEffect> effects);
+    boolean addPotionEffects(Collection<PotionEffect> effects);
 
     /**
      * Returns whether the living entity already has an existing effect of
@@ -254,14 +254,14 @@ public interface LivingEntity extends Entity, Damageable, ProjectileSource {
      * @param type the potion type to check
      * @return whether the living entity has this potion effect active on them
      */
-    public boolean hasPotionEffect(PotionEffectType type);
+    boolean hasPotionEffect(PotionEffectType type);
 
     /**
      * Removes any effects present of the given {@link PotionEffectType}.
      *
      * @param type the potion type to remove
      */
-    public void removePotionEffect(PotionEffectType type);
+    void removePotionEffect(PotionEffectType type);
 
     /**
      * Returns all currently active {@link PotionEffect}s on the living
@@ -269,7 +269,7 @@ public interface LivingEntity extends Entity, Damageable, ProjectileSource {
      *
      * @return a collection of {@link PotionEffect}s
      */
-    public Collection<PotionEffect> getActivePotionEffects();
+    Collection<PotionEffect> getActivePotionEffects();
 
     /**
      * Checks whether the living entity has block line of sight to another.
@@ -280,7 +280,7 @@ public interface LivingEntity extends Entity, Damageable, ProjectileSource {
      * @param other the entity to determine line of sight to
      * @return true if there is a line of sight, false if not
      */
-    public boolean hasLineOfSight(Entity other);
+    boolean hasLineOfSight(Entity other);
 
     /**
      * Returns if the living entity despawns when away from players or not.
@@ -289,7 +289,7 @@ public interface LivingEntity extends Entity, Damageable, ProjectileSource {
      *
      * @return true if the living entity is removed when away from players
      */
-    public boolean getRemoveWhenFarAway();
+    boolean getRemoveWhenFarAway();
 
     /**
      * Sets whether or not the living entity despawns when away from players
@@ -297,28 +297,39 @@ public interface LivingEntity extends Entity, Damageable, ProjectileSource {
      *
      * @param remove the removal status
      */
-    public void setRemoveWhenFarAway(boolean remove);
+    void setRemoveWhenFarAway(boolean remove);
 
     /**
      * Gets the inventory with the equipment worn by the living entity.
      *
      * @return the living entity's inventory
      */
-    public EntityEquipment getEquipment();
+    EntityEquipment getEquipment();
+
+    /**
+     * Gets if the living entity can pick up items.
+     *
+     * @return whether or not the living entity can pick up items
+     */
+    boolean getCanPickupItems();
 
     /**
      * Sets whether or not the living entity can pick up items.
      *
      * @param pickup whether or not the living entity can pick up items
      */
-    public void setCanPickupItems(boolean pickup);
+    void setCanPickupItems(boolean pickup);
 
     /**
-     * Gets if the living entity can pick up items.
+     * Gets the custom name on a mob. If there is no name this method will
+     * return null.
+     * <p>
+     * This value has no effect on players, they will always use their real
+     * name.
      *
-     * @return whether or not the living entity can pick up items
+     * @return name of the mob or null
      */
-    public boolean getCanPickupItems();
+    String getCustomName();
 
     /**
      * Sets a custom name on a mob. This name will be used in death messages
@@ -331,18 +342,17 @@ public interface LivingEntity extends Entity, Damageable, ProjectileSource {
      *
      * @param name the name to set
      */
-    public void setCustomName(String name);
+    void setCustomName(String name);
 
     /**
-     * Gets the custom name on a mob. If there is no name this method will
-     * return null.
+     * Gets whether or not the mob's custom name is displayed client side.
      * <p>
-     * This value has no effect on players, they will always use their real
+     * This value has no effect on players, they will always display their
      * name.
      *
-     * @return name of the mob or null
+     * @return if the custom name is displayed
      */
-    public String getCustomName();
+    boolean isCustomNameVisible();
 
     /**
      * Sets whether or not to display the mob's custom name client side. The
@@ -353,24 +363,14 @@ public interface LivingEntity extends Entity, Damageable, ProjectileSource {
      *
      * @param flag custom name or not
      */
-    public void setCustomNameVisible(boolean flag);
-
-    /**
-     * Gets whether or not the mob's custom name is displayed client side.
-     * <p>
-     * This value has no effect on players, they will always display their
-     * name.
-     *
-     * @return if the custom name is displayed
-     */
-    public boolean isCustomNameVisible();
+    void setCustomNameVisible(boolean flag);
 
     /**
      * Returns whether the entity is currently leashed.
      *
      * @return whether the entity is leashed
      */
-    public boolean isLeashed();
+    boolean isLeashed();
 
     /**
      * Gets the entity that is currently leading this entity.
@@ -378,7 +378,7 @@ public interface LivingEntity extends Entity, Damageable, ProjectileSource {
      * @return the entity holding the leash
      * @throws IllegalStateException if not currently leashed
      */
-    public Entity getLeashHolder() throws IllegalStateException;
+    Entity getLeashHolder() throws IllegalStateException;
 
     /**
      * Sets the leash on this entity to be held by the supplied entity.
@@ -390,5 +390,5 @@ public interface LivingEntity extends Entity, Damageable, ProjectileSource {
      * @param holder the entity to leash this entity to
      * @return whether the operation was successful
      */
-    public boolean setLeashHolder(Entity holder);
+    boolean setLeashHolder(Entity holder);
 }
diff --git a/src/main/java/org/bukkit/entity/MagmaCube.java b/src/main/java/org/bukkit/entity/MagmaCube.java
index 714b442..6058972 100644
--- a/src/main/java/org/bukkit/entity/MagmaCube.java
+++ b/src/main/java/org/bukkit/entity/MagmaCube.java
@@ -4,4 +4,5 @@ package org.bukkit.entity;
  * Represents a MagmaCube.
  */
 public interface MagmaCube extends Slime {
+
 }
diff --git a/src/main/java/org/bukkit/entity/Minecart.java b/src/main/java/org/bukkit/entity/Minecart.java
index a7bb094..5ad97c2 100644
--- a/src/main/java/org/bukkit/entity/Minecart.java
+++ b/src/main/java/org/bukkit/entity/Minecart.java
@@ -13,14 +13,7 @@ public interface Minecart extends Vehicle {
      * under any circumstances.
      */
     @Deprecated
-    public void _INVALID_setDamage(int damage);
-
-    /**
-     * Sets a minecart's damage.
-     *
-     * @param damage over 40 to "kill" a minecart
-     */
-    public void setDamage(double damage);
+    int _INVALID_getDamage();
 
     /**
      * This method exists for legacy reasons to provide backwards
@@ -28,14 +21,21 @@ public interface Minecart extends Vehicle {
      * under any circumstances.
      */
     @Deprecated
-    public int _INVALID_getDamage();
+    void _INVALID_setDamage(int damage);
 
     /**
      * Gets a minecart's damage.
      *
      * @return The damage
      */
-    public double getDamage();
+    double getDamage();
+
+    /**
+     * Sets a minecart's damage.
+     *
+     * @param damage over 40 to "kill" a minecart
+     */
+    void setDamage(double damage);
 
     /**
      * Gets the maximum speed of a minecart. The speed is unrelated to the
@@ -43,7 +43,7 @@ public interface Minecart extends Vehicle {
      *
      * @return The max speed
      */
-    public double getMaxSpeed();
+    double getMaxSpeed();
 
     /**
      * Sets the maximum speed of a minecart. Must be nonnegative. Default is
@@ -51,7 +51,7 @@ public interface Minecart extends Vehicle {
      *
      * @param speed The max speed
      */
-    public void setMaxSpeed(double speed);
+    void setMaxSpeed(double speed);
 
     /**
      * Returns whether this minecart will slow down faster without a passenger
@@ -59,7 +59,7 @@ public interface Minecart extends Vehicle {
      *
      * @return Whether it decelerates faster
      */
-    public boolean isSlowWhenEmpty();
+    boolean isSlowWhenEmpty();
 
     /**
      * Sets whether this minecart will slow down faster without a passenger
@@ -67,7 +67,7 @@ public interface Minecart extends Vehicle {
      *
      * @param slow Whether it will decelerate faster
      */
-    public void setSlowWhenEmpty(boolean slow);
+    void setSlowWhenEmpty(boolean slow);
 
     /**
      * Gets the flying velocity modifier. Used for minecarts that are in
@@ -76,7 +76,7 @@ public interface Minecart extends Vehicle {
      *
      * @return The vector factor
      */
-    public Vector getFlyingVelocityMod();
+    Vector getFlyingVelocityMod();
 
     /**
      * Sets the flying velocity modifier. Used for minecarts that are in
@@ -85,7 +85,7 @@ public interface Minecart extends Vehicle {
      *
      * @param flying velocity modifier vector
      */
-    public void setFlyingVelocityMod(Vector flying);
+    void setFlyingVelocityMod(Vector flying);
 
     /**
      * Gets the derailed velocity modifier. Used for minecarts that are on the
@@ -95,7 +95,7 @@ public interface Minecart extends Vehicle {
      *
      * @return derailed visible speed
      */
-    public Vector getDerailedVelocityMod();
+    Vector getDerailedVelocityMod();
 
     /**
      * Sets the derailed velocity modifier. Used for minecarts that are on the
@@ -104,5 +104,5 @@ public interface Minecart extends Vehicle {
      *
      * @param derailed visible speed
      */
-    public void setDerailedVelocityMod(Vector derailed);
+    void setDerailedVelocityMod(Vector derailed);
 }
diff --git a/src/main/java/org/bukkit/entity/Monster.java b/src/main/java/org/bukkit/entity/Monster.java
index fce2efd..e0280ba 100644
--- a/src/main/java/org/bukkit/entity/Monster.java
+++ b/src/main/java/org/bukkit/entity/Monster.java
@@ -3,4 +3,6 @@ package org.bukkit.entity;
 /**
  * Represents a Monster.
  */
-public interface Monster extends Creature {}
+public interface Monster extends Creature {
+
+}
diff --git a/src/main/java/org/bukkit/entity/Ocelot.java b/src/main/java/org/bukkit/entity/Ocelot.java
index d5d034d..d11761b 100644
--- a/src/main/java/org/bukkit/entity/Ocelot.java
+++ b/src/main/java/org/bukkit/entity/Ocelot.java
@@ -1,4 +1,3 @@
-
 package org.bukkit.entity;
 
 /**
@@ -11,21 +10,21 @@ public interface Ocelot extends Animals, Tameable {
      *
      * @return Type of the cat.
      */
-    public Type getCatType();
+    Type getCatType();
 
     /**
      * Sets the current type of this cat.
      *
      * @param type New type of this cat.
      */
-    public void setCatType(Type type);
+    void setCatType(Type type);
 
     /**
      * Checks if this ocelot is sitting
      *
      * @return true if sitting
      */
-    public boolean isSitting();
+    boolean isSitting();
 
     /**
      * Sets if this ocelot is sitting. Will remove any path that the ocelot
@@ -33,19 +32,18 @@ public interface Ocelot extends Animals, Tameable {
      *
      * @param sitting true if sitting
      */
-    public void setSitting(boolean sitting);
+    void setSitting(boolean sitting);
 
     /**
      * Represents the various different cat types there are.
      */
-    public enum Type {
+    enum Type {
         WILD_OCELOT(0),
         BLACK_CAT(1),
         RED_CAT(2),
         SIAMESE_CAT(3);
 
         private static final Type[] types = new Type[Type.values().length];
-        private final int id;
 
         static {
             for (Type type : values()) {
@@ -53,31 +51,33 @@ public interface Ocelot extends Animals, Tameable {
             }
         }
 
-        private Type(int id) {
+        private final int id;
+
+        Type(int id) {
             this.id = id;
         }
 
         /**
-         * Gets the ID of this cat type.
+         * Gets a cat type by its ID.
          *
-         * @return Type ID.
+         * @param id ID of the cat type to get.
+         * @return Resulting type, or null if not found.
          * @deprecated Magic value
          */
         @Deprecated
-        public int getId() {
-            return id;
+        public static Type getType(int id) {
+            return (id >= types.length) ? null : types[id];
         }
 
         /**
-         * Gets a cat type by its ID.
+         * Gets the ID of this cat type.
          *
-         * @param id ID of the cat type to get.
-         * @return Resulting type, or null if not found.
+         * @return Type ID.
          * @deprecated Magic value
          */
         @Deprecated
-        public static Type getType(int id) {
-            return (id >= types.length) ? null : types[id];
+        public int getId() {
+            return id;
         }
     }
 }
diff --git a/src/main/java/org/bukkit/entity/Painting.java b/src/main/java/org/bukkit/entity/Painting.java
index ca7a4cf..5417b93 100644
--- a/src/main/java/org/bukkit/entity/Painting.java
+++ b/src/main/java/org/bukkit/entity/Painting.java
@@ -13,27 +13,27 @@ public interface Painting extends Hanging {
      *
      * @return The art
      */
-    public Art getArt();
+    Art getArt();
 
     /**
      * Set the art on this painting
      *
      * @param art The new art
      * @return False if the new art won't fit at the painting's current
-     *     location
+     * location
      */
-    public boolean setArt(Art art);
+    boolean setArt(Art art);
 
     /**
      * Set the art on this painting
      *
-     * @param art The new art
+     * @param art   The new art
      * @param force If true, force the new art regardless of whether it fits
-     *     at the current location. Note that forcing it where it can't fit
-     *     normally causes it to drop as an item unless you override this by
-     *     catching the {@link PaintingBreakEvent}.
+     *              at the current location. Note that forcing it where it can't fit
+     *              normally causes it to drop as an item unless you override this by
+     *              catching the {@link PaintingBreakEvent}.
      * @return False if force was false and the new art won't fit at the
-     *     painting's current location
+     * painting's current location
      */
-    public boolean setArt(Art art, boolean force);
+    boolean setArt(Art art, boolean force);
 }
diff --git a/src/main/java/org/bukkit/entity/Pig.java b/src/main/java/org/bukkit/entity/Pig.java
index 28f59f2..ec3d217 100644
--- a/src/main/java/org/bukkit/entity/Pig.java
+++ b/src/main/java/org/bukkit/entity/Pig.java
@@ -10,12 +10,12 @@ public interface Pig extends Animals, Vehicle {
      *
      * @return if the pig has been saddled.
      */
-    public boolean hasSaddle();
+    boolean hasSaddle();
 
     /**
      * Sets if the pig has a saddle or not
      *
      * @param saddled set if the pig has a saddle or not.
      */
-    public void setSaddle(boolean saddled);
+    void setSaddle(boolean saddled);
 }
diff --git a/src/main/java/org/bukkit/entity/PigZombie.java b/src/main/java/org/bukkit/entity/PigZombie.java
index 2f08672..3725119 100644
--- a/src/main/java/org/bukkit/entity/PigZombie.java
+++ b/src/main/java/org/bukkit/entity/PigZombie.java
@@ -6,31 +6,31 @@ package org.bukkit.entity;
 public interface PigZombie extends Zombie {
 
     /**
-     * Get the pig zombie's current anger level.
+     * Shorthand; gets whether the zombie is angry.
      *
-     * @return The anger level.
+     * @return True if the zombie is angry, otherwise false.
      */
-    int getAnger();
+    boolean isAngry();
 
     /**
-     * Set the pig zombie's current anger level.
+     * Shorthand; sets to either 0 or the default level.
      *
-     * @param level The anger level. Higher levels of anger take longer to
-     *     wear off.
+     * @param angry Whether the zombie should be angry.
      */
-    void setAnger(int level);
+    void setAngry(boolean angry);
 
     /**
-     * Shorthand; sets to either 0 or the default level.
+     * Get the pig zombie's current anger level.
      *
-     * @param angry Whether the zombie should be angry.
+     * @return The anger level.
      */
-    void setAngry(boolean angry);
+    int getAnger();
 
     /**
-     * Shorthand; gets whether the zombie is angry.
+     * Set the pig zombie's current anger level.
      *
-     * @return True if the zombie is angry, otherwise false.
+     * @param level The anger level. Higher levels of anger take longer to
+     *              wear off.
      */
-    boolean isAngry();
+    void setAnger(int level);
 }
diff --git a/src/main/java/org/bukkit/entity/Player.java b/src/main/java/org/bukkit/entity/Player.java
index a780abc..1edb330 100644
--- a/src/main/java/org/bukkit/entity/Player.java
+++ b/src/main/java/org/bukkit/entity/Player.java
@@ -1,7 +1,5 @@
 package org.bukkit.entity;
 
-import java.net.InetSocketAddress;
-
 import net.md_5.bungee.api.chat.BaseComponent;
 import org.bukkit.Achievement;
 import org.bukkit.ChatColor;
@@ -20,6 +18,8 @@ import org.bukkit.map.MapView;
 import org.bukkit.plugin.messaging.PluginMessageRecipient;
 import org.bukkit.scoreboard.Scoreboard;
 
+import java.net.InetSocketAddress;
+
 /**
  * Represents a player, connected or not
  */
@@ -34,7 +34,7 @@ public interface Player extends HumanEntity, Conversable, CommandSender, Offline
      *
      * @return the friendly name
      */
-    public String getDisplayName();
+    String getDisplayName();
 
     /**
      * Sets the "friendly" name to display of this player. This may include
@@ -45,14 +45,14 @@ public interface Player extends HumanEntity, Conversable, CommandSender, Offline
      *
      * @param name The new display name.
      */
-    public void setDisplayName(String name);
+    void setDisplayName(String name);
 
     /**
      * Gets the name that is shown on the player list.
      *
      * @return the player list name
      */
-    public String getPlayerListName();
+    String getPlayerListName();
 
     /**
      * Sets the name that is shown on the in-game player list.
@@ -72,52 +72,52 @@ public interface Player extends HumanEntity, Conversable, CommandSender, Offline
      *
      * @param name new player list name
      * @throws IllegalArgumentException if the name is already used by someone
-     *     else
+     *                                  else
      * @throws IllegalArgumentException if the length of the name is too long
      */
-    public void setPlayerListName(String name);
+    void setPlayerListName(String name);
 
     /**
-     * Set the target of the player's compass.
+     * Get the previously set compass target.
      *
-     * @param loc Location to point to
+     * @return location of the target
      */
-    public void setCompassTarget(Location loc);
+    Location getCompassTarget();
 
     /**
-     * Get the previously set compass target.
+     * Set the target of the player's compass.
      *
-     * @return location of the target
+     * @param loc Location to point to
      */
-    public Location getCompassTarget();
+    void setCompassTarget(Location loc);
 
     /**
      * Gets the socket address of this player
      *
      * @return the player's address
      */
-    public InetSocketAddress getAddress();
+    InetSocketAddress getAddress();
 
     /**
      * Sends this sender a message raw
      *
      * @param message Message to be displayed
      */
-    public void sendRawMessage(String message);
+    void sendRawMessage(String message);
 
     /**
      * Kicks player with custom kick message.
      *
      * @param message kick message
      */
-    public void kickPlayer(String message);
+    void kickPlayer(String message);
 
     /**
      * Says a message (or runs a command).
      *
      * @param msg message to print
      */
-    public void chat(String msg);
+    void chat(String msg);
 
     /**
      * Makes the player perform the given command
@@ -125,42 +125,42 @@ public interface Player extends HumanEntity, Conversable, CommandSender, Offline
      * @param command Command to perform
      * @return true if the command was successful, otherwise false
      */
-    public boolean performCommand(String command);
+    boolean performCommand(String command);
 
     /**
      * Returns if the player is in sneak mode
      *
      * @return true if player is in sneak mode
      */
-    public boolean isSneaking();
+    boolean isSneaking();
 
     /**
      * Sets the sneak mode the player
      *
      * @param sneak true if player should appear sneaking
      */
-    public void setSneaking(boolean sneak);
+    void setSneaking(boolean sneak);
 
     /**
      * Gets whether the player is sprinting or not.
      *
      * @return true if player is sprinting.
      */
-    public boolean isSprinting();
+    boolean isSprinting();
 
     /**
      * Sets whether the player is sprinting or not.
      *
      * @param sprinting true if the player should be sprinting
      */
-    public void setSprinting(boolean sprinting);
+    void setSprinting(boolean sprinting);
 
     /**
      * Saves the players current location, health, inventory, motion, and
      * other information into the username.dat file, in the world/player
      * folder
      */
-    public void saveData();
+    void saveData();
 
     /**
      * Loads the players current location, health, inventory, motion, and
@@ -170,7 +170,14 @@ public interface Player extends HumanEntity, Conversable, CommandSender, Offline
      * Note: This will overwrite the players current inventory, health,
      * motion, etc, with the state from the saved dat file.
      */
-    public void loadData();
+    void loadData();
+
+    /**
+     * Returns whether the player is sleeping ignored.
+     *
+     * @return Whether player is ignoring sleep.
+     */
+    boolean isSleepingIgnored();
 
     /**
      * Sets whether the player is ignored as not sleeping. If everyone is
@@ -180,38 +187,31 @@ public interface Player extends HumanEntity, Conversable, CommandSender, Offline
      *
      * @param isSleeping Whether to ignore.
      */
-    public void setSleepingIgnored(boolean isSleeping);
-
-    /**
-     * Returns whether the player is sleeping ignored.
-     *
-     * @return Whether player is ignoring sleep.
-     */
-    public boolean isSleepingIgnored();
+    void setSleepingIgnored(boolean isSleeping);
 
     /**
      * Play a note for a player at a location. This requires a note block
      * at the particular location (as far as the client is concerned). This
      * will not work without a note block. This will not work with cake.
      *
-     * @param loc The location of a note block.
+     * @param loc        The location of a note block.
      * @param instrument The instrument ID.
-     * @param note The note ID.
+     * @param note       The note ID.
      * @deprecated Magic value
      */
     @Deprecated
-    public void playNote(Location loc, byte instrument, byte note);
+    void playNote(Location loc, byte instrument, byte note);
 
     /**
      * Play a note for a player at a location. This requires a note block
      * at the particular location (as far as the client is concerned). This
      * will not work without a note block. This will not work with cake.
      *
-     * @param loc The location of a note block
+     * @param loc        The location of a note block
      * @param instrument The instrument
-     * @param note The note
+     * @param note       The note
      */
-    public void playNote(Location loc, Instrument instrument, Note note);
+    void playNote(Location loc, Instrument instrument, Note note);
 
 
     /**
@@ -220,11 +220,11 @@ public interface Player extends HumanEntity, Conversable, CommandSender, Offline
      * This function will fail silently if Location or Sound are null.
      *
      * @param location The location to play the sound
-     * @param sound The sound to play
-     * @param volume The volume of the sound
-     * @param pitch The pitch of the sound
+     * @param sound    The sound to play
+     * @param volume   The volume of the sound
+     * @param pitch    The pitch of the sound
      */
-    public void playSound(Location location, Sound sound, float volume, float pitch);
+    void playSound(Location location, Sound sound, float volume, float pitch);
 
     /**
      * Play a sound for a player at the location.
@@ -234,45 +234,45 @@ public interface Player extends HumanEntity, Conversable, CommandSender, Offline
      * respective sound for the value passed.
      *
      * @param location the location to play the sound
-     * @param sound the internal sound name to play
-     * @param volume the volume of the sound
-     * @param pitch the pitch of the sound
+     * @param sound    the internal sound name to play
+     * @param volume   the volume of the sound
+     * @param pitch    the pitch of the sound
      * @deprecated Magic value
      */
     @Deprecated
-    public void playSound(Location location, String sound, float volume, float pitch);
+    void playSound(Location location, String sound, float volume, float pitch);
 
     /**
      * Plays an effect to just this player.
      *
-     * @param loc the location to play the effect at
+     * @param loc    the location to play the effect at
      * @param effect the {@link Effect}
-     * @param data a data bit needed for some effects
+     * @param data   a data bit needed for some effects
      * @deprecated Magic value
      */
     @Deprecated
-    public void playEffect(Location loc, Effect effect, int data);
+    void playEffect(Location loc, Effect effect, int data);
 
     /**
      * Plays an effect to just this player.
      *
-     * @param loc the location to play the effect at
+     * @param loc    the location to play the effect at
      * @param effect the {@link Effect}
-     * @param data a data bit needed for some effects
+     * @param data   a data bit needed for some effects
      */
-    public <T> void playEffect(Location loc, Effect effect, T data);
+    <T> void playEffect(Location loc, Effect effect, T data);
 
     /**
      * Send a block change. This fakes a block change packet for a user at a
      * certain location. This will not actually change the world in any way.
      *
-     * @param loc The location of the changed block
+     * @param loc      The location of the changed block
      * @param material The new block
-     * @param data The block data
+     * @param data     The block data
      * @deprecated Magic value
      */
     @Deprecated
-    public void sendBlockChange(Location loc, Material material, byte data);
+    void sendBlockChange(Location loc, Material material, byte data);
 
     /**
      * Send a chunk change. This fakes a chunk change packet for a user at a
@@ -283,28 +283,28 @@ public interface Player extends HumanEntity, Conversable, CommandSender, Offline
      * the data buffer must be 2.5*sx*sy*sz and formatted in accordance with
      * the Packet51 format.
      *
-     * @param loc The location of the cuboid
-     * @param sx The x size of the cuboid
-     * @param sy The y size of the cuboid
-     * @param sz The z size of the cuboid
+     * @param loc  The location of the cuboid
+     * @param sx   The x size of the cuboid
+     * @param sy   The y size of the cuboid
+     * @param sz   The z size of the cuboid
      * @param data The data to be sent
      * @return true if the chunk change packet was sent
      * @deprecated Magic value
      */
     @Deprecated
-    public boolean sendChunkChange(Location loc, int sx, int sy, int sz, byte[] data);
+    boolean sendChunkChange(Location loc, int sx, int sy, int sz, byte[] data);
 
     /**
      * Send a block change. This fakes a block change packet for a user at a
      * certain location. This will not actually change the world in any way.
      *
-     * @param loc The location of the changed block
+     * @param loc      The location of the changed block
      * @param material The new block ID
-     * @param data The block data
+     * @param data     The block data
      * @deprecated Magic value
      */
     @Deprecated
-    public void sendBlockChange(Location loc, int material, byte data);
+    void sendBlockChange(Location loc, int material, byte data);
 
     /**
      * Send a sign change. This fakes a sign change packet for a user at
@@ -316,12 +316,12 @@ public interface Player extends HumanEntity, Conversable, CommandSender, Offline
      * If the client does not have a sign at the given location it will
      * display an error message to the user.
      *
-     * @param loc the location of the sign
+     * @param loc   the location of the sign
      * @param lines the new text on the sign or null to clear it
      * @throws IllegalArgumentException if location is null
      * @throws IllegalArgumentException if lines is non-null and has a length less than 4
      */
-    public void sendSignChange(Location loc, String[] lines) throws IllegalArgumentException;
+    void sendSignChange(Location loc, String[] lines) throws IllegalArgumentException;
 
     /**
      * Render a map and send it to the player in its entirety. This may be
@@ -329,14 +329,13 @@ public interface Player extends HumanEntity, Conversable, CommandSender, Offline
      *
      * @param map The map to be sent
      */
-    public void sendMap(MapView map);
+    void sendMap(MapView map);
 
     /**
      * Forces an update of the player's entire inventory.
-     *
      */
     //@Deprecated // Spigot - undeprecate
-    public void updateInventory();
+    void updateInventory();
 
     /**
      * Awards the given achievement and any parent achievements that the
@@ -345,7 +344,7 @@ public interface Player extends HumanEntity, Conversable, CommandSender, Offline
      * @param achievement Achievement to award
      * @throws IllegalArgumentException if achievement is null
      */
-    public void awardAchievement(Achievement achievement);
+    void awardAchievement(Achievement achievement);
 
     /**
      * Removes the given achievement and any children achievements that the
@@ -354,7 +353,7 @@ public interface Player extends HumanEntity, Conversable, CommandSender, Offline
      * @param achievement Achievement to remove
      * @throws IllegalArgumentException if achievement is null
      */
-    public void removeAchievement(Achievement achievement);
+    void removeAchievement(Achievement achievement);
 
     /**
      * Gets whether this player has the given achievement.
@@ -362,7 +361,7 @@ public interface Player extends HumanEntity, Conversable, CommandSender, Offline
      * @return whether the player has the achievement
      * @throws IllegalArgumentException if achievement is null
      */
-    public boolean hasAchievement(Achievement achievement);
+    boolean hasAchievement(Achievement achievement);
 
     /**
      * Increments the given statistic for this player.
@@ -373,9 +372,9 @@ public interface Player extends HumanEntity, Conversable, CommandSender, Offline
      * @param statistic Statistic to increment
      * @throws IllegalArgumentException if statistic is null
      * @throws IllegalArgumentException if the statistic requires an
-     *     additional parameter
+     *                                  additional parameter
      */
-    public void incrementStatistic(Statistic statistic) throws IllegalArgumentException;
+    void incrementStatistic(Statistic statistic) throws IllegalArgumentException;
 
     /**
      * Decrements the given statistic for this player.
@@ -386,45 +385,45 @@ public interface Player extends HumanEntity, Conversable, CommandSender, Offline
      * @param statistic Statistic to decrement
      * @throws IllegalArgumentException if statistic is null
      * @throws IllegalArgumentException if the statistic requires an
-     *     additional parameter
+     *                                  additional parameter
      */
-    public void decrementStatistic(Statistic statistic) throws IllegalArgumentException;
+    void decrementStatistic(Statistic statistic) throws IllegalArgumentException;
 
     /**
      * Increments the given statistic for this player.
      *
      * @param statistic Statistic to increment
-     * @param amount Amount to increment this statistic by
+     * @param amount    Amount to increment this statistic by
      * @throws IllegalArgumentException if statistic is null
      * @throws IllegalArgumentException if amount is negative
      * @throws IllegalArgumentException if the statistic requires an
-     *     additional parameter
+     *                                  additional parameter
      */
-    public void incrementStatistic(Statistic statistic, int amount) throws IllegalArgumentException;
+    void incrementStatistic(Statistic statistic, int amount) throws IllegalArgumentException;
 
     /**
      * Decrements the given statistic for this player.
      *
      * @param statistic Statistic to decrement
-     * @param amount Amount to decrement this statistic by
+     * @param amount    Amount to decrement this statistic by
      * @throws IllegalArgumentException if statistic is null
      * @throws IllegalArgumentException if amount is negative
      * @throws IllegalArgumentException if the statistic requires an
-     *     additional parameter
+     *                                  additional parameter
      */
-    public void decrementStatistic(Statistic statistic, int amount) throws IllegalArgumentException;
+    void decrementStatistic(Statistic statistic, int amount) throws IllegalArgumentException;
 
     /**
      * Sets the given statistic for this player.
      *
      * @param statistic Statistic to set
-     * @param newValue The value to set this statistic to
+     * @param newValue  The value to set this statistic to
      * @throws IllegalArgumentException if statistic is null
      * @throws IllegalArgumentException if newValue is negative
      * @throws IllegalArgumentException if the statistic requires an
-     *     additional parameter
+     *                                  additional parameter
      */
-    public void setStatistic(Statistic statistic, int newValue) throws IllegalArgumentException;
+    void setStatistic(Statistic statistic, int newValue) throws IllegalArgumentException;
 
     /**
      * Gets the value of the given statistic for this player.
@@ -433,9 +432,9 @@ public interface Player extends HumanEntity, Conversable, CommandSender, Offline
      * @return the value of the given statistic
      * @throws IllegalArgumentException if statistic is null
      * @throws IllegalArgumentException if the statistic requires an
-     *     additional parameter
+     *                                  additional parameter
      */
-    public int getStatistic(Statistic statistic) throws IllegalArgumentException;
+    int getStatistic(Statistic statistic) throws IllegalArgumentException;
 
     /**
      * Increments the given statistic for this player for the given material.
@@ -444,13 +443,13 @@ public interface Player extends HumanEntity, Conversable, CommandSender, Offline
      * <code>incrementStatistic(Statistic, Material, 1)</code>
      *
      * @param statistic Statistic to increment
-     * @param material Material to offset the statistic with
+     * @param material  Material to offset the statistic with
      * @throws IllegalArgumentException if statistic is null
      * @throws IllegalArgumentException if material is null
      * @throws IllegalArgumentException if the given parameter is not valid
-     *     for the statistic
+     *                                  for the statistic
      */
-    public void incrementStatistic(Statistic statistic, Material material) throws IllegalArgumentException;
+    void incrementStatistic(Statistic statistic, Material material) throws IllegalArgumentException;
 
     /**
      * Decrements the given statistic for this player for the given material.
@@ -459,68 +458,68 @@ public interface Player extends HumanEntity, Conversable, CommandSender, Offline
      * <code>decrementStatistic(Statistic, Material, 1)</code>
      *
      * @param statistic Statistic to decrement
-     * @param material Material to offset the statistic with
+     * @param material  Material to offset the statistic with
      * @throws IllegalArgumentException if statistic is null
      * @throws IllegalArgumentException if material is null
      * @throws IllegalArgumentException if the given parameter is not valid
-     *     for the statistic
+     *                                  for the statistic
      */
-    public void decrementStatistic(Statistic statistic, Material material) throws IllegalArgumentException;
+    void decrementStatistic(Statistic statistic, Material material) throws IllegalArgumentException;
 
     /**
      * Gets the value of the given statistic for this player.
      *
      * @param statistic Statistic to check
-     * @param material Material offset of the statistic
+     * @param material  Material offset of the statistic
      * @return the value of the given statistic
      * @throws IllegalArgumentException if statistic is null
      * @throws IllegalArgumentException if material is null
      * @throws IllegalArgumentException if the given parameter is not valid
-     *     for the statistic
+     *                                  for the statistic
      */
-    public int getStatistic(Statistic statistic, Material material) throws IllegalArgumentException;
+    int getStatistic(Statistic statistic, Material material) throws IllegalArgumentException;
 
     /**
      * Increments the given statistic for this player for the given material.
      *
      * @param statistic Statistic to increment
-     * @param material Material to offset the statistic with
-     * @param amount Amount to increment this statistic by
+     * @param material  Material to offset the statistic with
+     * @param amount    Amount to increment this statistic by
      * @throws IllegalArgumentException if statistic is null
      * @throws IllegalArgumentException if material is null
      * @throws IllegalArgumentException if amount is negative
      * @throws IllegalArgumentException if the given parameter is not valid
-     *     for the statistic
+     *                                  for the statistic
      */
-    public void incrementStatistic(Statistic statistic, Material material, int amount) throws IllegalArgumentException;
+    void incrementStatistic(Statistic statistic, Material material, int amount) throws IllegalArgumentException;
 
     /**
      * Decrements the given statistic for this player for the given material.
      *
      * @param statistic Statistic to decrement
-     * @param material Material to offset the statistic with
-     * @param amount Amount to decrement this statistic by
+     * @param material  Material to offset the statistic with
+     * @param amount    Amount to decrement this statistic by
      * @throws IllegalArgumentException if statistic is null
      * @throws IllegalArgumentException if material is null
      * @throws IllegalArgumentException if amount is negative
      * @throws IllegalArgumentException if the given parameter is not valid
-     *     for the statistic
+     *                                  for the statistic
      */
-    public void decrementStatistic(Statistic statistic, Material material, int amount) throws IllegalArgumentException;
+    void decrementStatistic(Statistic statistic, Material material, int amount) throws IllegalArgumentException;
 
     /**
      * Sets the given statistic for this player for the given material.
      *
      * @param statistic Statistic to set
-     * @param material Material to offset the statistic with
-     * @param newValue The value to set this statistic to
+     * @param material  Material to offset the statistic with
+     * @param newValue  The value to set this statistic to
      * @throws IllegalArgumentException if statistic is null
      * @throws IllegalArgumentException if material is null
      * @throws IllegalArgumentException if newValue is negative
      * @throws IllegalArgumentException if the given parameter is not valid
-     *     for the statistic
+     *                                  for the statistic
      */
-    public void setStatistic(Statistic statistic, Material material, int newValue) throws IllegalArgumentException;
+    void setStatistic(Statistic statistic, Material material, int newValue) throws IllegalArgumentException;
 
     /**
      * Increments the given statistic for this player for the given entity.
@@ -528,14 +527,14 @@ public interface Player extends HumanEntity, Conversable, CommandSender, Offline
      * This is equivalent to the following code:
      * <code>incrementStatistic(Statistic, EntityType, 1)</code>
      *
-     * @param statistic Statistic to increment
+     * @param statistic  Statistic to increment
      * @param entityType EntityType to offset the statistic with
      * @throws IllegalArgumentException if statistic is null
      * @throws IllegalArgumentException if entityType is null
      * @throws IllegalArgumentException if the given parameter is not valid
-     *     for the statistic
+     *                                  for the statistic
      */
-    public void incrementStatistic(Statistic statistic, EntityType entityType) throws IllegalArgumentException;
+    void incrementStatistic(Statistic statistic, EntityType entityType) throws IllegalArgumentException;
 
     /**
      * Decrements the given statistic for this player for the given entity.
@@ -543,69 +542,69 @@ public interface Player extends HumanEntity, Conversable, CommandSender, Offline
      * This is equivalent to the following code:
      * <code>decrementStatistic(Statistic, EntityType, 1)</code>
      *
-     * @param statistic Statistic to decrement
+     * @param statistic  Statistic to decrement
      * @param entityType EntityType to offset the statistic with
      * @throws IllegalArgumentException if statistic is null
      * @throws IllegalArgumentException if entityType is null
      * @throws IllegalArgumentException if the given parameter is not valid
-     *     for the statistic
+     *                                  for the statistic
      */
-    public void decrementStatistic(Statistic statistic, EntityType entityType) throws IllegalArgumentException;
+    void decrementStatistic(Statistic statistic, EntityType entityType) throws IllegalArgumentException;
 
     /**
      * Gets the value of the given statistic for this player.
      *
-     * @param statistic Statistic to check
+     * @param statistic  Statistic to check
      * @param entityType EntityType offset of the statistic
      * @return the value of the given statistic
      * @throws IllegalArgumentException if statistic is null
      * @throws IllegalArgumentException if entityType is null
      * @throws IllegalArgumentException if the given parameter is not valid
-     *     for the statistic
+     *                                  for the statistic
      */
-    public int getStatistic(Statistic statistic, EntityType entityType) throws IllegalArgumentException;
+    int getStatistic(Statistic statistic, EntityType entityType) throws IllegalArgumentException;
 
     /**
      * Increments the given statistic for this player for the given entity.
      *
-     * @param statistic Statistic to increment
+     * @param statistic  Statistic to increment
      * @param entityType EntityType to offset the statistic with
-     * @param amount Amount to increment this statistic by
+     * @param amount     Amount to increment this statistic by
      * @throws IllegalArgumentException if statistic is null
      * @throws IllegalArgumentException if entityType is null
      * @throws IllegalArgumentException if amount is negative
      * @throws IllegalArgumentException if the given parameter is not valid
-     *     for the statistic
+     *                                  for the statistic
      */
-    public void incrementStatistic(Statistic statistic, EntityType entityType, int amount) throws IllegalArgumentException;
+    void incrementStatistic(Statistic statistic, EntityType entityType, int amount) throws IllegalArgumentException;
 
     /**
      * Decrements the given statistic for this player for the given entity.
      *
-     * @param statistic Statistic to decrement
+     * @param statistic  Statistic to decrement
      * @param entityType EntityType to offset the statistic with
-     * @param amount Amount to decrement this statistic by
+     * @param amount     Amount to decrement this statistic by
      * @throws IllegalArgumentException if statistic is null
      * @throws IllegalArgumentException if entityType is null
      * @throws IllegalArgumentException if amount is negative
      * @throws IllegalArgumentException if the given parameter is not valid
-     *     for the statistic
+     *                                  for the statistic
      */
-    public void decrementStatistic(Statistic statistic, EntityType entityType, int amount);
+    void decrementStatistic(Statistic statistic, EntityType entityType, int amount);
 
     /**
      * Sets the given statistic for this player for the given entity.
      *
-     * @param statistic Statistic to set
+     * @param statistic  Statistic to set
      * @param entityType EntityType to offset the statistic with
-     * @param newValue The value to set this statistic to
+     * @param newValue   The value to set this statistic to
      * @throws IllegalArgumentException if statistic is null
      * @throws IllegalArgumentException if entityType is null
      * @throws IllegalArgumentException if newValue is negative
      * @throws IllegalArgumentException if the given parameter is not valid
-     *     for the statistic
+     *                                  for the statistic
      */
-    public void setStatistic(Statistic statistic, EntityType entityType, int newValue);
+    void setStatistic(Statistic statistic, EntityType entityType, int newValue);
 
     /**
      * Sets the current time on the player's client. When relative is true the
@@ -617,19 +616,19 @@ public interface Player extends HumanEntity, Conversable, CommandSender, Offline
      * the player's time. To restore player time to normal use
      * resetPlayerTime().
      *
-     * @param time The current player's perceived time or the player's time
-     *     offset from the server time.
+     * @param time     The current player's perceived time or the player's time
+     *                 offset from the server time.
      * @param relative When true the player time is kept relative to its world
-     *     time.
+     *                 time.
      */
-    public void setPlayerTime(long time, boolean relative);
+    void setPlayerTime(long time, boolean relative);
 
     /**
      * Returns the player's current timestamp.
      *
      * @return The player's time
      */
-    public long getPlayerTime();
+    long getPlayerTime();
 
     /**
      * Returns the player's current time offset relative to server time, or
@@ -637,7 +636,7 @@ public interface Player extends HumanEntity, Conversable, CommandSender, Offline
      *
      * @return The player's time
      */
-    public long getPlayerTimeOffset();
+    long getPlayerTimeOffset();
 
     /**
      * Returns true if the player's time is relative to the server time,
@@ -646,7 +645,7 @@ public interface Player extends HumanEntity, Conversable, CommandSender, Offline
      *
      * @return true if the player's time is relative to the server time.
      */
-    public boolean isPlayerTimeRelative();
+    boolean isPlayerTimeRelative();
 
     /**
      * Restores the normal condition where the player's time is synchronized
@@ -654,37 +653,37 @@ public interface Player extends HumanEntity, Conversable, CommandSender, Offline
      * <p>
      * Equivalent to calling setPlayerTime(0, true).
      */
-    public void resetPlayerTime();
+    void resetPlayerTime();
 
     /**
-     * Sets the type of weather the player will see.  When used, the weather
-     * status of the player is locked until {@link #resetPlayerWeather()} is
-     * used.
+     * Returns the type of weather the player is currently experiencing.
      *
-     * @param type The WeatherType enum type the player should experience
+     * @return The WeatherType that the player is currently experiencing or
+     * null if player is seeing server weather.
      */
-    public void setPlayerWeather(WeatherType type);
+    WeatherType getPlayerWeather();
 
     /**
-     * Returns the type of weather the player is currently experiencing.
+     * Sets the type of weather the player will see.  When used, the weather
+     * status of the player is locked until {@link #resetPlayerWeather()} is
+     * used.
      *
-     * @return The WeatherType that the player is currently experiencing or
-     *     null if player is seeing server weather.
+     * @param type The WeatherType enum type the player should experience
      */
-    public WeatherType getPlayerWeather();
+    void setPlayerWeather(WeatherType type);
 
     /**
      * Restores the normal condition where the player's weather is controlled
      * by server conditions.
      */
-    public void resetPlayerWeather();
+    void resetPlayerWeather();
 
     /**
      * Gives the player the amount of experience specified.
      *
      * @param amount Exp amount to give
      */
-    public void giveExp(int amount);
+    void giveExp(int amount);
 
     /**
      * Gives the player the amount of experience levels specified. Levels can
@@ -692,7 +691,7 @@ public interface Player extends HumanEntity, Conversable, CommandSender, Offline
      *
      * @param amount amount of experience levels to give or take
      */
-    public void giveExpLevels(int amount);
+    void giveExpLevels(int amount);
 
     /**
      * Gets the players current experience points towards the next level.
@@ -701,7 +700,7 @@ public interface Player extends HumanEntity, Conversable, CommandSender, Offline
      *
      * @return Current experience points
      */
-    public float getExp();
+    float getExp();
 
     /**
      * Sets the players current experience points towards the next level
@@ -710,35 +709,35 @@ public interface Player extends HumanEntity, Conversable, CommandSender, Offline
      *
      * @param exp New experience points
      */
-    public void setExp(float exp);
+    void setExp(float exp);
 
     /**
      * Gets the players current experience level
      *
      * @return Current experience level
      */
-    public int getLevel();
+    int getLevel();
 
     /**
      * Sets the players current experience level
      *
      * @param level New experience level
      */
-    public void setLevel(int level);
+    void setLevel(int level);
 
     /**
      * Gets the players total experience points
      *
      * @return Current total experience points
      */
-    public int getTotalExperience();
+    int getTotalExperience();
 
     /**
      * Sets the players current experience level
      *
      * @param exp New experience level
      */
-    public void setTotalExperience(int exp);
+    void setTotalExperience(int exp);
 
     /**
      * Gets the players current exhaustion level.
@@ -749,14 +748,14 @@ public interface Player extends HumanEntity, Conversable, CommandSender, Offline
      *
      * @return Exhaustion level
      */
-    public float getExhaustion();
+    float getExhaustion();
 
     /**
      * Sets the players current exhaustion level
      *
      * @param value Exhaustion level
      */
-    public void setExhaustion(float value);
+    void setExhaustion(float value);
 
     /**
      * Gets the players current saturation level.
@@ -766,28 +765,28 @@ public interface Player extends HumanEntity, Conversable, CommandSender, Offline
      *
      * @return Saturation level
      */
-    public float getSaturation();
+    float getSaturation();
 
     /**
      * Sets the players current saturation level
      *
      * @param value Saturation level
      */
-    public void setSaturation(float value);
+    void setSaturation(float value);
 
     /**
      * Gets the players current food level
      *
      * @return Food level
      */
-    public int getFoodLevel();
+    int getFoodLevel();
 
     /**
      * Sets the players current food level
      *
      * @param value New food level
      */
-    public void setFoodLevel(int value);
+    void setFoodLevel(int value);
 
     /**
      * Gets the Location where the player will spawn at their bed, null if
@@ -795,23 +794,23 @@ public interface Player extends HumanEntity, Conversable, CommandSender, Offline
      *
      * @return Bed Spawn Location if bed exists, otherwise null.
      */
-    public Location getBedSpawnLocation();
+    Location getBedSpawnLocation();
 
     /**
      * Sets the Location where the player will spawn at their bed.
      *
      * @param location where to set the respawn location
      */
-    public void setBedSpawnLocation(Location location);
+    void setBedSpawnLocation(Location location);
 
     /**
      * Sets the Location where the player will spawn at their bed.
      *
      * @param location where to set the respawn location
-     * @param force whether to forcefully set the respawn location even if a
-     *     valid bed is not present
+     * @param force    whether to forcefully set the respawn location even if a
+     *                 valid bed is not present
      */
-    public void setBedSpawnLocation(Location location, boolean force);
+    void setBedSpawnLocation(Location location, boolean force);
 
     /**
      * Determines if the Player is allowed to fly via jump key double-tap like
@@ -819,7 +818,7 @@ public interface Player extends HumanEntity, Conversable, CommandSender, Offline
      *
      * @return True if the player is allowed to fly.
      */
-    public boolean getAllowFlight();
+    boolean getAllowFlight();
 
     /**
      * Sets if the Player is allowed to fly via jump key double-tap like in
@@ -827,30 +826,30 @@ public interface Player extends HumanEntity, Conversable, CommandSender, Offline
      *
      * @param flight If flight should be allowed.
      */
-    public void setAllowFlight(boolean flight);
+    void setAllowFlight(boolean flight);
 
     /**
      * Hides a player from this player
      *
      * @param player Player to hide
      */
-    public void hidePlayer(Player player);
+    void hidePlayer(Player player);
 
     /**
      * Allows this player to see a player that was previously hidden
      *
      * @param player Player to show
      */
-    public void showPlayer(Player player);
+    void showPlayer(Player player);
 
     /**
      * Checks to see if a player has been hidden from this player
      *
      * @param player Player to check
      * @return True if the provided player is not being hidden from this
-     *     player
+     * player
      */
-    public boolean canSee(Player player);
+    boolean canSee(Player player);
 
     /**
      * Checks to see if this player is currently standing on a block. This
@@ -859,58 +858,58 @@ public interface Player extends HumanEntity, Conversable, CommandSender, Offline
      *
      * @return True if the player standing on a solid block, else false.
      * @deprecated Inconsistent with {@link
-     *     org.bukkit.entity.Entity#isOnGround()}
+     * org.bukkit.entity.Entity#isOnGround()}
      */
     @Deprecated
-    public boolean isOnGround();
+    boolean isOnGround();
 
     /**
      * Checks to see if this player is currently flying or not.
      *
      * @return True if the player is flying, else false.
      */
-    public boolean isFlying();
+    boolean isFlying();
 
     /**
      * Makes this player start or stop flying.
      *
      * @param value True to fly.
      */
-    public void setFlying(boolean value);
+    void setFlying(boolean value);
 
     /**
-     * Sets the speed at which a client will fly. Negative values indicate
-     * reverse directions.
+     * Gets the current allowed speed that a client can fly.
      *
-     * @param value The new speed, from -1 to 1.
-     * @throws IllegalArgumentException If new speed is less than -1 or
-     *     greater than 1
+     * @return The current allowed speed, from -1 to 1
      */
-    public void setFlySpeed(float value) throws IllegalArgumentException;
+    float getFlySpeed();
 
     /**
-     * Sets the speed at which a client will walk. Negative values indicate
+     * Sets the speed at which a client will fly. Negative values indicate
      * reverse directions.
      *
      * @param value The new speed, from -1 to 1.
      * @throws IllegalArgumentException If new speed is less than -1 or
-     *     greater than 1
+     *                                  greater than 1
      */
-    public void setWalkSpeed(float value) throws IllegalArgumentException;
+    void setFlySpeed(float value) throws IllegalArgumentException;
 
     /**
-     * Gets the current allowed speed that a client can fly.
+     * Gets the current allowed speed that a client can walk.
      *
      * @return The current allowed speed, from -1 to 1
      */
-    public float getFlySpeed();
+    float getWalkSpeed();
 
     /**
-     * Gets the current allowed speed that a client can walk.
+     * Sets the speed at which a client will walk. Negative values indicate
+     * reverse directions.
      *
-     * @return The current allowed speed, from -1 to 1
+     * @param value The new speed, from -1 to 1.
+     * @throws IllegalArgumentException If new speed is less than -1 or
+     *                                  greater than 1
      */
-    public float getWalkSpeed();
+    void setWalkSpeed(float value) throws IllegalArgumentException;
 
     /**
      * Request that the player's client download and switch texture packs.
@@ -927,21 +926,21 @@ public interface Player extends HumanEntity, Conversable, CommandSender, Offline
      * Notes:
      * <ul>
      * <li>Players can disable server textures on their client, in which
-     *     case this method will have no affect on them.
+     * case this method will have no affect on them.
      * <li>There is no concept of resetting texture packs back to default
-     *     within Minecraft, so players will have to relog to do so.
+     * within Minecraft, so players will have to relog to do so.
      * </ul>
      *
      * @param url The URL from which the client will download the texture
-     *     pack. The string must contain only US-ASCII characters and should
-     *     be encoded as per RFC 1738.
+     *            pack. The string must contain only US-ASCII characters and should
+     *            be encoded as per RFC 1738.
      * @throws IllegalArgumentException Thrown if the URL is null.
      * @throws IllegalArgumentException Thrown if the URL is too long.
      * @deprecated Minecraft no longer uses textures packs. Instead you
-     *     should use {@link #setResourcePack(String)}.
+     * should use {@link #setResourcePack(String)}.
      */
     @Deprecated
-    public void setTexturePack(String url);
+    void setTexturePack(String url);
 
     /**
      * Request that the player's client download and switch resource packs.
@@ -958,26 +957,26 @@ public interface Player extends HumanEntity, Conversable, CommandSender, Offline
      * Notes:
      * <ul>
      * <li>Players can disable server resources on their client, in which
-     *     case this method will have no affect on them.
+     * case this method will have no affect on them.
      * <li>There is no concept of resetting resource packs back to default
-     *     within Minecraft, so players will have to relog to do so.
+     * within Minecraft, so players will have to relog to do so.
      * </ul>
      *
      * @param url The URL from which the client will download the resource
-     *     pack. The string must contain only US-ASCII characters and should
-     *     be encoded as per RFC 1738.
+     *            pack. The string must contain only US-ASCII characters and should
+     *            be encoded as per RFC 1738.
      * @throws IllegalArgumentException Thrown if the URL is null.
      * @throws IllegalArgumentException Thrown if the URL is too long. The
-     *     length restriction is an implementation specific arbitrary value.
+     *                                  length restriction is an implementation specific arbitrary value.
      */
-    public void setResourcePack(String url);
+    void setResourcePack(String url);
 
     /**
      * Gets the Scoreboard displayed to this player
      *
      * @return The current scoreboard seen by this player
      */
-    public Scoreboard getScoreboard();
+    Scoreboard getScoreboard();
 
     /**
      * Sets the player's visible Scoreboard.
@@ -985,11 +984,11 @@ public interface Player extends HumanEntity, Conversable, CommandSender, Offline
      * @param scoreboard New Scoreboard for the player
      * @throws IllegalArgumentException if scoreboard is null
      * @throws IllegalArgumentException if scoreboard was not created by the
-     *     {@link org.bukkit.scoreboard.ScoreboardManager scoreboard manager}
-     * @throws IllegalStateException if this is a player that is not logged
-     *     yet or has logged out
+     *                                  {@link org.bukkit.scoreboard.ScoreboardManager scoreboard manager}
+     * @throws IllegalStateException    if this is a player that is not logged
+     *                                  yet or has logged out
      */
-    public void setScoreboard(Scoreboard scoreboard) throws IllegalArgumentException, IllegalStateException;
+    void setScoreboard(Scoreboard scoreboard) throws IllegalArgumentException, IllegalStateException;
 
     /**
      * Gets if the client is displayed a 'scaled' health, that is, health on a
@@ -998,7 +997,7 @@ public interface Player extends HumanEntity, Conversable, CommandSender, Offline
      * @return if client health display is scaled
      * @see Player#setHealthScaled(boolean)
      */
-    public boolean isHealthScaled();
+    boolean isHealthScaled();
 
     /**
      * Sets if the client is displayed a 'scaled' health, that is, health on a
@@ -1009,7 +1008,17 @@ public interface Player extends HumanEntity, Conversable, CommandSender, Offline
      *
      * @param scale if the client health display is scaled
      */
-    public void setHealthScaled(boolean scale);
+    void setHealthScaled(boolean scale);
+
+    /**
+     * Gets the number that health is scaled to for the client.
+     *
+     * @return the number that health would be scaled to for the client if
+     * HealthScaling is set to true
+     * @see Player#setHealthScale(double)
+     * @see Player#setHealthScaled(boolean)
+     */
+    double getHealthScale();
 
     /**
      * Sets the number to scale health to for the client; this will also
@@ -1023,21 +1032,12 @@ public interface Player extends HumanEntity, Conversable, CommandSender, Offline
      * @throws IllegalArgumentException if scale is {@link Double#NaN}
      * @throws IllegalArgumentException if scale is too high
      */
-    public void setHealthScale(double scale) throws IllegalArgumentException;
+    void setHealthScale(double scale) throws IllegalArgumentException;
 
-    /**
-     * Gets the number that health is scaled to for the client.
-     *
-     * @return the number that health would be scaled to for the client if
-     *     HealthScaling is set to true
-     * @see Player#setHealthScale(double)
-     * @see Player#setHealthScaled(boolean)
-     */
-    public double getHealthScale();
+    Spigot spigot();
 
     // Spigot start
-    public class Spigot extends Entity.Spigot
-    {
+    class Spigot extends Entity.Spigot {
 
         /**
          * Gets the connection address of this player, regardless of whether it
@@ -1045,14 +1045,12 @@ public interface Player extends HumanEntity, Conversable, CommandSender, Offline
          *
          * @return the player's connection address
          */
-        public InetSocketAddress getRawAddress()
-        {
-            throw new UnsupportedOperationException( "Not supported yet." );
+        public InetSocketAddress getRawAddress() {
+            throw new UnsupportedOperationException("Not supported yet.");
         }
 
-        public void playEffect(Location location, Effect effect, int id, int data, float offsetX, float offsetY, float offsetZ, float speed, int particleCount, int radius)
-        {
-            throw new UnsupportedOperationException( "Not supported yet." );
+        public void playEffect(Location location, Effect effect, int id, int data, float offsetX, float offsetY, float offsetZ, float speed, int particleCount, int radius) {
+            throw new UnsupportedOperationException("Not supported yet.");
         }
 
         /**
@@ -1060,28 +1058,25 @@ public interface Player extends HumanEntity, Conversable, CommandSender, Offline
          *
          * @return the player's collision toggle state
          */
-        public boolean getCollidesWithEntities()
-        {
-            throw new UnsupportedOperationException( "Not supported yet." );
+        public boolean getCollidesWithEntities() {
+            throw new UnsupportedOperationException("Not supported yet.");
         }
 
         /**
          * Sets whether the player collides with entities
          *
          * @param collides whether the player should collide with entities or
-         * not.
+         *                 not.
          */
-        public void setCollidesWithEntities(boolean collides)
-        {
-            throw new UnsupportedOperationException( "Not supported yet." );
+        public void setCollidesWithEntities(boolean collides) {
+            throw new UnsupportedOperationException("Not supported yet.");
         }
 
         /**
          * Respawns the player if dead.
          */
-        public void respawn()
-        {
-            throw new UnsupportedOperationException( "Not supported yet." );
+        public void respawn() {
+            throw new UnsupportedOperationException("Not supported yet.");
         }
 
         /**
@@ -1089,29 +1084,25 @@ public interface Player extends HumanEntity, Conversable, CommandSender, Offline
          *
          * @return the player's client language settings
          */
-        public String getLocale()
-        {
-            throw new UnsupportedOperationException( "Not supported yet." );
+        public String getLocale() {
+            throw new UnsupportedOperationException("Not supported yet.");
         }
 
         /**
-         * Gets all players hidden with {@link hidePlayer(org.bukkit.entity.Player)}.
+         * Gets all players hidden with {@link #hidePlayer(Player)}.
          *
          * @return a Set with all hidden players
          */
-        public java.util.Set<Player> getHiddenPlayers()
-        {
-            throw new UnsupportedOperationException( "Not supported yet." );
+        public java.util.Set<Player> getHiddenPlayers() {
+            throw new UnsupportedOperationException("Not supported yet.");
         }
 
-        public void sendMessage(BaseComponent component)
-        {
-            throw new UnsupportedOperationException( "Not supported yet." );
+        public void sendMessage(BaseComponent component) {
+            throw new UnsupportedOperationException("Not supported yet.");
         }
 
-        public void sendMessage(BaseComponent... components)
-        {
-            throw new UnsupportedOperationException( "Not supported yet." );
+        public void sendMessage(BaseComponent... components) {
+            throw new UnsupportedOperationException("Not supported yet.");
         }
 
         /**
@@ -1120,23 +1111,19 @@ public interface Player extends HumanEntity, Conversable, CommandSender, Offline
          * @return whether or not the player affects
          * mob spawning.
          */
-        public boolean getAffectsSpawning()
-        {
-            throw new  UnsupportedOperationException( "Not supported yet." );
+        public boolean getAffectsSpawning() {
+            throw new UnsupportedOperationException("Not supported yet.");
         }
 
         /**
          * Set whether or not the player affects mob spawning
          *
          * @param affects whether or not the player should affect
-         * spawning or not.
+         *                spawning or not.
          */
-        public void setAffectsSpawning(boolean affects)
-        {
-            throw new UnsupportedOperationException( "Not supported yet" );
+        public void setAffectsSpawning(boolean affects) {
+            throw new UnsupportedOperationException("Not supported yet");
         }
     }
-
-    Spigot spigot();
     // Spigot end
 }
diff --git a/src/main/java/org/bukkit/entity/PoweredMinecart.java b/src/main/java/org/bukkit/entity/PoweredMinecart.java
index 38240a9..fcbd630 100644
--- a/src/main/java/org/bukkit/entity/PoweredMinecart.java
+++ b/src/main/java/org/bukkit/entity/PoweredMinecart.java
@@ -1,9 +1,11 @@
 package org.bukkit.entity;
 
 /**
+ * @see org.bukkit.entity.minecart.PoweredMinecart
  * @deprecated This class has been moved into a sub package; {@link
  * org.bukkit.entity.minecart.PoweredMinecart} should be used instead.
- * @see org.bukkit.entity.minecart.PoweredMinecart
  */
 @Deprecated
-public interface PoweredMinecart extends org.bukkit.entity.minecart.PoweredMinecart {}
+public interface PoweredMinecart extends org.bukkit.entity.minecart.PoweredMinecart {
+
+}
diff --git a/src/main/java/org/bukkit/entity/Projectile.java b/src/main/java/org/bukkit/entity/Projectile.java
index 90ce3b3..f313546 100644
--- a/src/main/java/org/bukkit/entity/Projectile.java
+++ b/src/main/java/org/bukkit/entity/Projectile.java
@@ -13,14 +13,21 @@ public interface Projectile extends Entity {
      * under any circumstances.
      */
     @Deprecated
-    public LivingEntity _INVALID_getShooter();
+    LivingEntity _INVALID_getShooter();
 
     /**
      * Retrieve the shooter of this projectile.
      *
      * @return the {@link ProjectileSource} that shot this projectile
      */
-    public ProjectileSource getShooter();
+    ProjectileSource getShooter();
+
+    /**
+     * Set the shooter of this projectile.
+     *
+     * @param source the {@link ProjectileSource} that shot this projectile
+     */
+    void setShooter(ProjectileSource source);
 
     /**
      * This method exists for legacy reasons to provide backwards
@@ -28,14 +35,7 @@ public interface Projectile extends Entity {
      * under any circumstances.
      */
     @Deprecated
-    public void _INVALID_setShooter(LivingEntity shooter);
-
-    /**
-     * Set the shooter of this projectile.
-     *
-     * @param source the {@link ProjectileSource} that shot this projectile
-     */
-    public void setShooter(ProjectileSource source);
+    void _INVALID_setShooter(LivingEntity shooter);
 
     /**
      * Determine if this projectile should bounce or not when it hits.
@@ -44,7 +44,7 @@ public interface Projectile extends Entity {
      *
      * @return true if it should bounce.
      */
-    public boolean doesBounce();
+    boolean doesBounce();
 
     /**
      * Set whether or not this projectile should bounce or not when it hits
@@ -52,5 +52,5 @@ public interface Projectile extends Entity {
      *
      * @param doesBounce whether or not it should bounce.
      */
-    public void setBounce(boolean doesBounce);
+    void setBounce(boolean doesBounce);
 }
diff --git a/src/main/java/org/bukkit/entity/Sheep.java b/src/main/java/org/bukkit/entity/Sheep.java
index f4ce312..83f0721 100644
--- a/src/main/java/org/bukkit/entity/Sheep.java
+++ b/src/main/java/org/bukkit/entity/Sheep.java
@@ -10,10 +10,10 @@ public interface Sheep extends Animals, Colorable {
     /**
      * @return Whether the sheep is sheared.
      */
-    public boolean isSheared();
+    boolean isSheared();
 
     /**
      * @param flag Whether to shear the sheep
      */
-    public void setSheared(boolean flag);
+    void setSheared(boolean flag);
 }
diff --git a/src/main/java/org/bukkit/entity/Silverfish.java b/src/main/java/org/bukkit/entity/Silverfish.java
index fe01007..cff6986 100644
--- a/src/main/java/org/bukkit/entity/Silverfish.java
+++ b/src/main/java/org/bukkit/entity/Silverfish.java
@@ -3,4 +3,6 @@ package org.bukkit.entity;
 /**
  * Represents a Silverfish.
  */
-public interface Silverfish extends Monster {}
+public interface Silverfish extends Monster {
+
+}
diff --git a/src/main/java/org/bukkit/entity/Skeleton.java b/src/main/java/org/bukkit/entity/Skeleton.java
index 02b76c3..01e8d5b 100644
--- a/src/main/java/org/bukkit/entity/Skeleton.java
+++ b/src/main/java/org/bukkit/entity/Skeleton.java
@@ -10,24 +10,24 @@ public interface Skeleton extends Monster {
      *
      * @return Current type
      */
-    public SkeletonType getSkeletonType();
+    SkeletonType getSkeletonType();
 
     /**
      * Sets the new type of this skeleton.
      *
      * @param type New type
      */
-    public void setSkeletonType(SkeletonType type);
+    void setSkeletonType(SkeletonType type);
 
     /*
      * Represents the various different Skeleton types.
      */
-    public enum SkeletonType {
+    enum SkeletonType {
+
         NORMAL(0),
         WITHER(1);
 
         private static final SkeletonType[] types = new SkeletonType[SkeletonType.values().length];
-        private final int id;
 
         static {
             for (SkeletonType type : values()) {
@@ -35,31 +35,33 @@ public interface Skeleton extends Monster {
             }
         }
 
+        private final int id;
+
         private SkeletonType(int id) {
             this.id = id;
         }
 
         /**
-         * Gets the ID of this skeleton type.
+         * Gets a skeleton type by its ID.
          *
-         * @return Skeleton type ID
+         * @param id ID of the skeleton type to get.
+         * @return Resulting skeleton type, or null if not found.
          * @deprecated Magic value
          */
         @Deprecated
-        public int getId() {
-            return id;
+        public static SkeletonType getType(int id) {
+            return (id >= types.length) ? null : types[id];
         }
 
         /**
-         * Gets a skeleton type by its ID.
+         * Gets the ID of this skeleton type.
          *
-         * @param id ID of the skeleton type to get.
-         * @return Resulting skeleton type, or null if not found.
+         * @return Skeleton type ID
          * @deprecated Magic value
          */
         @Deprecated
-        public static SkeletonType getType(int id) {
-            return (id >= types.length) ? null : types[id];
+        public int getId() {
+            return id;
         }
     }
 }
diff --git a/src/main/java/org/bukkit/entity/Slime.java b/src/main/java/org/bukkit/entity/Slime.java
index cbf50c8..f11c31c 100644
--- a/src/main/java/org/bukkit/entity/Slime.java
+++ b/src/main/java/org/bukkit/entity/Slime.java
@@ -8,10 +8,10 @@ public interface Slime extends LivingEntity {
     /**
      * @return The size of the slime
      */
-    public int getSize();
+    int getSize();
 
     /**
      * @param sz The new size of the slime.
      */
-    public void setSize(int sz);
+    void setSize(int sz);
 }
diff --git a/src/main/java/org/bukkit/entity/Snowball.java b/src/main/java/org/bukkit/entity/Snowball.java
index 8c6b433..e7db454 100644
--- a/src/main/java/org/bukkit/entity/Snowball.java
+++ b/src/main/java/org/bukkit/entity/Snowball.java
@@ -3,4 +3,6 @@ package org.bukkit.entity;
 /**
  * Represents a snowball.
  */
-public interface Snowball extends Projectile {}
+public interface Snowball extends Projectile {
+
+}
diff --git a/src/main/java/org/bukkit/entity/Spider.java b/src/main/java/org/bukkit/entity/Spider.java
index f9ee8cc..21147fc 100644
--- a/src/main/java/org/bukkit/entity/Spider.java
+++ b/src/main/java/org/bukkit/entity/Spider.java
@@ -3,4 +3,6 @@ package org.bukkit.entity;
 /**
  * Represents a Spider.
  */
-public interface Spider extends Monster {}
+public interface Spider extends Monster {
+
+}
diff --git a/src/main/java/org/bukkit/entity/Squid.java b/src/main/java/org/bukkit/entity/Squid.java
index fb47968..d473fc4 100644
--- a/src/main/java/org/bukkit/entity/Squid.java
+++ b/src/main/java/org/bukkit/entity/Squid.java
@@ -3,4 +3,6 @@ package org.bukkit.entity;
 /**
  * Represents a Squid.
  */
-public interface Squid extends WaterMob {}
+public interface Squid extends WaterMob {
+
+}
diff --git a/src/main/java/org/bukkit/entity/StorageMinecart.java b/src/main/java/org/bukkit/entity/StorageMinecart.java
index 5436d70..918c706 100644
--- a/src/main/java/org/bukkit/entity/StorageMinecart.java
+++ b/src/main/java/org/bukkit/entity/StorageMinecart.java
@@ -3,7 +3,9 @@ package org.bukkit.entity;
 /**
  * @deprecated This class has been moved into a sub package; {@link
  * org.bukkit.entity.minecart.StorageMinecart} should be used instead.
- * @see org.bukkit.entity.minecart.StorageMinecart
+ * {@see #org.bukkit.entity.minecart.StorageMinecart}
  */
 @Deprecated
-public interface StorageMinecart extends org.bukkit.entity.minecart.StorageMinecart {}
+public interface StorageMinecart extends org.bukkit.entity.minecart.StorageMinecart {
+
+}
diff --git a/src/main/java/org/bukkit/entity/TNTPrimed.java b/src/main/java/org/bukkit/entity/TNTPrimed.java
index cc3ddca..c69a6a3 100644
--- a/src/main/java/org/bukkit/entity/TNTPrimed.java
+++ b/src/main/java/org/bukkit/entity/TNTPrimed.java
@@ -1,24 +1,26 @@
 package org.bukkit.entity;
 
+import org.bukkit.Location;
+
 /**
  * Represents a Primed TNT.
  */
 public interface TNTPrimed extends Explosive {
 
     /**
-     * Set the number of ticks until the TNT blows up after being primed.
+     * Retrieve the number of ticks until the explosion of this TNTPrimed
+     * entity
      *
-     * @param fuseTicks The fuse ticks
+     * @return the number of ticks until this TNTPrimed explodes
      */
-    public void setFuseTicks(int fuseTicks);
+    int getFuseTicks();
 
     /**
-     * Retrieve the number of ticks until the explosion of this TNTPrimed
-     * entity
+     * Set the number of ticks until the TNT blows up after being primed.
      *
-     * @return the number of ticks until this TNTPrimed explodes
+     * @param fuseTicks The fuse ticks
      */
-    public int getFuseTicks();
+    void setFuseTicks(int fuseTicks);
 
     /**
      * Gets the source of this primed TNT. The source is the entity
@@ -34,7 +36,7 @@ public interface TNTPrimed extends Explosive {
      *
      * @return the source of this primed TNT
      */
-    public Entity getSource();
+    Entity getSource();
 
     org.bukkit.Location getSourceLoc(); // PaperSpigot - Add FallingBlock and TNT source location API
 }
diff --git a/src/main/java/org/bukkit/entity/Tameable.java b/src/main/java/org/bukkit/entity/Tameable.java
index 014885d..68ae433 100644
--- a/src/main/java/org/bukkit/entity/Tameable.java
+++ b/src/main/java/org/bukkit/entity/Tameable.java
@@ -10,7 +10,7 @@ public interface Tameable {
      *
      * @return true if this has been tamed
      */
-    public boolean isTamed();
+    boolean isTamed();
 
     /**
      * Sets if this has been tamed. Not necessary if the method setOwner has
@@ -21,14 +21,14 @@ public interface Tameable {
      *
      * @param tame true if tame
      */
-    public void setTamed(boolean tame);
+    void setTamed(boolean tame);
 
     /**
      * Gets the current owning AnimalTamer
      *
      * @return the owning AnimalTamer, or null if not owned
      */
-    public AnimalTamer getOwner();
+    AnimalTamer getOwner();
 
     /**
      * Set this to be owned by given AnimalTamer.
@@ -39,6 +39,5 @@ public interface Tameable {
      *
      * @param tamer the AnimalTamer who should own this
      */
-    public void setOwner(AnimalTamer tamer);
-
+    void setOwner(AnimalTamer tamer);
 }
diff --git a/src/main/java/org/bukkit/entity/ThrownPotion.java b/src/main/java/org/bukkit/entity/ThrownPotion.java
index 8b382db..db05c4c 100644
--- a/src/main/java/org/bukkit/entity/ThrownPotion.java
+++ b/src/main/java/org/bukkit/entity/ThrownPotion.java
@@ -1,10 +1,10 @@
 package org.bukkit.entity;
 
-import java.util.Collection;
-
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.potion.PotionEffect;
 
+import java.util.Collection;
+
 /**
  * Represents a thrown potion bottle
  */
@@ -15,7 +15,7 @@ public interface ThrownPotion extends Projectile {
      *
      * @return The potion effects
      */
-    public Collection<PotionEffect> getEffects();
+    Collection<PotionEffect> getEffects();
 
     /**
      * Returns a copy of the ItemStack for this thrown potion.
@@ -26,7 +26,7 @@ public interface ThrownPotion extends Projectile {
      *
      * @return A copy of the ItemStack for this thrown potion.
      */
-    public ItemStack getItem();
+    ItemStack getItem();
 
     /**
      * Set the ItemStack for this thrown potion.
@@ -35,5 +35,5 @@ public interface ThrownPotion extends Projectile {
      *
      * @param item New ItemStack
      */
-    public void setItem(ItemStack item);
+    void setItem(ItemStack item);
 }
diff --git a/src/main/java/org/bukkit/entity/Vehicle.java b/src/main/java/org/bukkit/entity/Vehicle.java
index 7d7607c..d80dfde 100644
--- a/src/main/java/org/bukkit/entity/Vehicle.java
+++ b/src/main/java/org/bukkit/entity/Vehicle.java
@@ -12,12 +12,12 @@ public interface Vehicle extends Entity {
      *
      * @return velocity vector
      */
-    public Vector getVelocity();
+    Vector getVelocity();
 
     /**
      * Sets the vehicle's velocity.
      *
      * @param vel velocity vector
      */
-    public void setVelocity(Vector vel);
+    void setVelocity(Vector vel);
 }
diff --git a/src/main/java/org/bukkit/entity/Villager.java b/src/main/java/org/bukkit/entity/Villager.java
index 51035c9..7065a78 100644
--- a/src/main/java/org/bukkit/entity/Villager.java
+++ b/src/main/java/org/bukkit/entity/Villager.java
@@ -10,20 +10,20 @@ public interface Villager extends Ageable, NPC {
      *
      * @return Current profession.
      */
-    public Profession getProfession();
+    Profession getProfession();
 
     /**
      * Sets the new profession of this villager.
      *
      * @param profession New profession.
      */
-    public void setProfession(Profession profession);
-
+    void setProfession(Profession profession);
 
     /**
      * Represents the various different Villager professions there may be.
      */
-    public enum Profession {
+    enum Profession {
+
         FARMER(0),
         LIBRARIAN(1),
         PRIEST(2),
@@ -31,7 +31,6 @@ public interface Villager extends Ageable, NPC {
         BUTCHER(4);
 
         private static final Profession[] professions = new Profession[Profession.values().length];
-        private final int id;
 
         static {
             for (Profession type : values()) {
@@ -39,31 +38,33 @@ public interface Villager extends Ageable, NPC {
             }
         }
 
-        private Profession(int id) {
+        private final int id;
+
+        Profession(int id) {
             this.id = id;
         }
 
         /**
-         * Gets the ID of this profession.
+         * Gets a profession by its ID.
          *
-         * @return Profession ID.
+         * @param id ID of the profession to get.
+         * @return Resulting profession, or null if not found.
          * @deprecated Magic value
          */
         @Deprecated
-        public int getId() {
-            return id;
+        public static Profession getProfession(int id) {
+            return (id >= professions.length) ? null : professions[id];
         }
 
         /**
-         * Gets a profession by its ID.
+         * Gets the ID of this profession.
          *
-         * @param id ID of the profession to get.
-         * @return Resulting profession, or null if not found.
+         * @return Profession ID.
          * @deprecated Magic value
          */
         @Deprecated
-        public static Profession getProfession(int id) {
-            return (id >= professions.length) ? null : professions[id];
+        public int getId() {
+            return id;
         }
     }
 }
diff --git a/src/main/java/org/bukkit/entity/WaterMob.java b/src/main/java/org/bukkit/entity/WaterMob.java
index 62b4e89..4a00ccf 100644
--- a/src/main/java/org/bukkit/entity/WaterMob.java
+++ b/src/main/java/org/bukkit/entity/WaterMob.java
@@ -3,4 +3,6 @@ package org.bukkit.entity;
 /**
  * Represents a Water Mob
  */
-public interface WaterMob extends Creature {}
+public interface WaterMob extends Creature {
+
+}
diff --git a/src/main/java/org/bukkit/entity/Weather.java b/src/main/java/org/bukkit/entity/Weather.java
index 6d77851..0e44f53 100644
--- a/src/main/java/org/bukkit/entity/Weather.java
+++ b/src/main/java/org/bukkit/entity/Weather.java
@@ -3,4 +3,6 @@ package org.bukkit.entity;
 /**
  * Represents a Weather related entity, such as a storm
  */
-public interface Weather extends Entity {}
+public interface Weather extends Entity {
+
+}
diff --git a/src/main/java/org/bukkit/entity/Witch.java b/src/main/java/org/bukkit/entity/Witch.java
index 9c5dc1f..753c05e 100644
--- a/src/main/java/org/bukkit/entity/Witch.java
+++ b/src/main/java/org/bukkit/entity/Witch.java
@@ -4,4 +4,5 @@ package org.bukkit.entity;
  * Represents a Witch
  */
 public interface Witch extends Monster {
+
 }
diff --git a/src/main/java/org/bukkit/entity/Wither.java b/src/main/java/org/bukkit/entity/Wither.java
index 0922c5c..346ff8a 100644
--- a/src/main/java/org/bukkit/entity/Wither.java
+++ b/src/main/java/org/bukkit/entity/Wither.java
@@ -4,4 +4,5 @@ package org.bukkit.entity;
  * Represents a Wither boss
  */
 public interface Wither extends Monster {
+
 }
diff --git a/src/main/java/org/bukkit/entity/WitherSkull.java b/src/main/java/org/bukkit/entity/WitherSkull.java
index 33d20ab..450089d 100644
--- a/src/main/java/org/bukkit/entity/WitherSkull.java
+++ b/src/main/java/org/bukkit/entity/WitherSkull.java
@@ -6,16 +6,16 @@ package org.bukkit.entity;
 public interface WitherSkull extends Fireball {
 
     /**
-     * Sets the charged status of the wither skull.
+     * Gets whether or not the wither skull is charged.
      *
-     * @param charged whether it should be charged
+     * @return whether the wither skull is charged
      */
-    public void setCharged(boolean charged);
+    boolean isCharged();
 
     /**
-     * Gets whether or not the wither skull is charged.
+     * Sets the charged status of the wither skull.
      *
-     * @return whether the wither skull is charged
+     * @param charged whether it should be charged
      */
-    public boolean isCharged();
+    void setCharged(boolean charged);
 }
diff --git a/src/main/java/org/bukkit/entity/Wolf.java b/src/main/java/org/bukkit/entity/Wolf.java
index 9d5a896..53f6af9 100644
--- a/src/main/java/org/bukkit/entity/Wolf.java
+++ b/src/main/java/org/bukkit/entity/Wolf.java
@@ -12,7 +12,7 @@ public interface Wolf extends Animals, Tameable {
      *
      * @return Anger true if angry
      */
-    public boolean isAngry();
+    boolean isAngry();
 
     /**
      * Sets the anger of this wolf.
@@ -22,14 +22,14 @@ public interface Wolf extends Animals, Tameable {
      *
      * @param angry true if angry
      */
-    public void setAngry(boolean angry);
+    void setAngry(boolean angry);
 
     /**
      * Checks if this wolf is sitting
      *
      * @return true if sitting
      */
-    public boolean isSitting();
+    boolean isSitting();
 
     /**
      * Sets if this wolf is sitting.
@@ -38,19 +38,19 @@ public interface Wolf extends Animals, Tameable {
      *
      * @param sitting true if sitting
      */
-    public void setSitting(boolean sitting);
+    void setSitting(boolean sitting);
 
     /**
      * Get the collar color of this wolf
      *
      * @return the color of the collar
      */
-    public DyeColor getCollarColor();
+    DyeColor getCollarColor();
 
     /**
      * Set the collar color of this wolf
      *
      * @param color the color to apply
      */
-    public void setCollarColor(DyeColor color);
+    void setCollarColor(DyeColor color);
 }
diff --git a/src/main/java/org/bukkit/entity/Zombie.java b/src/main/java/org/bukkit/entity/Zombie.java
index 59b52fd..e906a16 100644
--- a/src/main/java/org/bukkit/entity/Zombie.java
+++ b/src/main/java/org/bukkit/entity/Zombie.java
@@ -10,26 +10,26 @@ public interface Zombie extends Monster {
      *
      * @return Whether the zombie is a baby
      */
-    public boolean isBaby();
+    boolean isBaby();
 
     /**
      * Sets whether the zombie is a baby
      *
      * @param flag Whether the zombie is a baby
      */
-    public void setBaby(boolean flag);
+    void setBaby(boolean flag);
 
     /**
      * Gets whether the zombie is a villager
      *
      * @return Whether the zombie is a villager
      */
-    public boolean isVillager();
+    boolean isVillager();
 
     /**
      * Sets whether the zombie is a villager
      *
      * @param flag Whether the zombie is a villager
      */
-    public void setVillager(boolean flag);
+    void setVillager(boolean flag);
 }
diff --git a/src/main/java/org/bukkit/entity/minecart/CommandMinecart.java b/src/main/java/org/bukkit/entity/minecart/CommandMinecart.java
index e502680..2a9e93f 100644
--- a/src/main/java/org/bukkit/entity/minecart/CommandMinecart.java
+++ b/src/main/java/org/bukkit/entity/minecart/CommandMinecart.java
@@ -7,22 +7,21 @@ public interface CommandMinecart extends Minecart, CommandSender {
 
     /**
      * Gets the command that this CommandMinecart will run when activated.
-     * This will never return null.  If the CommandMinecart does not have a
+     * This will never return null. If the CommandMinecart does not have a
      * command, an empty String will be returned instead.
      *
      * @return Command that this CommandMinecart will run when powered.
      */
-    public String getCommand();
+    String getCommand();
 
     /**
      * Sets the command that this CommandMinecart will run when activated.
      * Setting the command to null is the same as setting it to an empty
      * String.
      *
-     * @param command Command that this CommandMinecart will run when
-     *     activated.
+     * @param command Command that this CommandMinecart will run when activated.
      */
-    public void setCommand(String command);
+    void setCommand(String command);
 
     /**
      * Sets the name of this CommandMinecart.  The name is used with commands
@@ -31,6 +30,5 @@ public interface CommandMinecart extends Minecart, CommandSender {
      *
      * @param name New name for this CommandMinecart.
      */
-    public void setName(String name);
-
+    void setName(String name);
 }
diff --git a/src/main/java/org/bukkit/entity/minecart/ExplosiveMinecart.java b/src/main/java/org/bukkit/entity/minecart/ExplosiveMinecart.java
index a4411da..d14773c 100644
--- a/src/main/java/org/bukkit/entity/minecart/ExplosiveMinecart.java
+++ b/src/main/java/org/bukkit/entity/minecart/ExplosiveMinecart.java
@@ -6,4 +6,5 @@ import org.bukkit.entity.Minecart;
  * Represents a Minecart with TNT inside it that can explode when triggered.
  */
 public interface ExplosiveMinecart extends Minecart {
+
 }
diff --git a/src/main/java/org/bukkit/entity/minecart/HopperMinecart.java b/src/main/java/org/bukkit/entity/minecart/HopperMinecart.java
index 5da9ce4..8dc1d05 100644
--- a/src/main/java/org/bukkit/entity/minecart/HopperMinecart.java
+++ b/src/main/java/org/bukkit/entity/minecart/HopperMinecart.java
@@ -7,4 +7,5 @@ import org.bukkit.inventory.InventoryHolder;
  * Represents a Minecart with a Hopper inside it
  */
 public interface HopperMinecart extends Minecart, InventoryHolder {
+
 }
diff --git a/src/main/java/org/bukkit/entity/minecart/PoweredMinecart.java b/src/main/java/org/bukkit/entity/minecart/PoweredMinecart.java
index 57e8b1d..c3590be 100644
--- a/src/main/java/org/bukkit/entity/minecart/PoweredMinecart.java
+++ b/src/main/java/org/bukkit/entity/minecart/PoweredMinecart.java
@@ -7,4 +7,5 @@ import org.bukkit.entity.Minecart;
  * player deposits {@link org.bukkit.Material#COAL fuel}.
  */
 public interface PoweredMinecart extends Minecart {
+
 }
diff --git a/src/main/java/org/bukkit/entity/minecart/RideableMinecart.java b/src/main/java/org/bukkit/entity/minecart/RideableMinecart.java
index 1b82645..1a15871 100644
--- a/src/main/java/org/bukkit/entity/minecart/RideableMinecart.java
+++ b/src/main/java/org/bukkit/entity/minecart/RideableMinecart.java
@@ -11,4 +11,5 @@ import org.bukkit.entity.Minecart;
  * mount these minecarts when close enough.
  */
 public interface RideableMinecart extends Minecart {
+
 }
diff --git a/src/main/java/org/bukkit/entity/minecart/SpawnerMinecart.java b/src/main/java/org/bukkit/entity/minecart/SpawnerMinecart.java
index 0ce3592..012ba2d 100644
--- a/src/main/java/org/bukkit/entity/minecart/SpawnerMinecart.java
+++ b/src/main/java/org/bukkit/entity/minecart/SpawnerMinecart.java
@@ -7,4 +7,5 @@ import org.bukkit.entity.Minecart;
  * entity spawner} inside it.
  */
 public interface SpawnerMinecart extends Minecart {
+
 }
diff --git a/src/main/java/org/bukkit/entity/minecart/StorageMinecart.java b/src/main/java/org/bukkit/entity/minecart/StorageMinecart.java
index 4f04ab4..8746338 100644
--- a/src/main/java/org/bukkit/entity/minecart/StorageMinecart.java
+++ b/src/main/java/org/bukkit/entity/minecart/StorageMinecart.java
@@ -9,4 +9,5 @@ import org.bukkit.inventory.InventoryHolder;
  * from the {@link InventoryHolder} interface.
  */
 public interface StorageMinecart extends Minecart, InventoryHolder {
+
 }
diff --git a/src/main/java/org/bukkit/event/Cancellable.java b/src/main/java/org/bukkit/event/Cancellable.java
index 799b0b0..f9ab636 100644
--- a/src/main/java/org/bukkit/event/Cancellable.java
+++ b/src/main/java/org/bukkit/event/Cancellable.java
@@ -8,13 +8,13 @@ public interface Cancellable {
      *
      * @return true if this event is cancelled
      */
-    public boolean isCancelled();
+    boolean isCancelled();
 
     /**
      * Sets the cancellation state of this event. A cancelled event will not
      * be executed in the server, but will still pass to other plugins.
      *
-     * @param cancel true if you wish to cancel this event
+     * @param cancelled true if you wish to cancel this event
      */
-    public void setCancelled(boolean cancel);
+    void setCancelled(boolean cancelled);
 }
diff --git a/src/main/java/org/bukkit/event/Event.java b/src/main/java/org/bukkit/event/Event.java
index fa29c27..c84d819 100644
--- a/src/main/java/org/bukkit/event/Event.java
+++ b/src/main/java/org/bukkit/event/Event.java
@@ -1,15 +1,19 @@
 package org.bukkit.event;
 
+import org.bukkit.plugin.Plugin;
 import org.bukkit.plugin.PluginManager;
 
 /**
  * Represents an event.
  *
  * @see PluginManager#callEvent(Event)
- * @see PluginManager#registerEvents(Listener,Plugin)
+ * @see PluginManager#registerEvents(Listener, Plugin)
  */
 public abstract class Event {
-    private String name;
+
+    public abstract HandlerList getHandlers();
+
+    private final String eventName;
     private final boolean async;
 
     /**
@@ -25,10 +29,23 @@ public abstract class Event {
      * or asynchronous.
      *
      * @param isAsync true indicates the event will fire asynchronously, false
-     *     by default from default constructor
+     *                by default from default constructor
      */
     public Event(boolean isAsync) {
+        this(isAsync, null);
+    }
+
+    /**
+     * This constructor is used to explicitly declare an event as synchronous
+     * or asynchronous with a given name for this event.
+     *
+     * @param isAsync   true indicates the event will fire asynchronously, false
+     *                  by default from default constructor
+     * @param eventName the name of this event
+     */
+    public Event(boolean isAsync, String eventName) {
         this.async = isAsync;
+        this.eventName = (eventName == null) ? getClass().getSimpleName() : eventName;
     }
 
     /**
@@ -39,31 +56,26 @@ public abstract class Event {
      * @return name of this event
      */
     public String getEventName() {
-        if (name == null) {
-            name = getClass().getSimpleName();
-        }
-        return name;
+        return eventName;
     }
 
-    public abstract HandlerList getHandlers();
-
     /**
      * Any custom event that should not by synchronized with other events must
      * use the specific constructor. These are the caveats of using an
      * asynchronous event:
      * <ul>
      * <li>The event is never fired from inside code triggered by a
-     *     synchronous event. Attempting to do so results in an {@link
-     *     java.lang.IllegalStateException}.
+     * synchronous event. Attempting to do so results in an {@link
+     * java.lang.IllegalStateException}.
      * <li>However, asynchronous event handlers may fire synchronous or
-     *     asynchronous events
+     * asynchronous events
      * <li>The event may be fired multiple times simultaneously and in any
-     *     order.
+     * order.
      * <li>Any newly registered or unregistered handler is ignored after an
-     *     event starts execution.
+     * event starts execution.
      * <li>The handlers for this event may block for any length of time.
      * <li>Some implementations may selectively declare a specific event use
-     *     as asynchronous. This behavior should be clearly defined.
+     * as asynchronous. This behavior should be clearly defined.
      * <li>Asynchronous calls are not calculated in the plugin timing system.
      * </ul>
      *
diff --git a/src/main/java/org/bukkit/event/EventException.java b/src/main/java/org/bukkit/event/EventException.java
index 84638e8..b9e390b 100644
--- a/src/main/java/org/bukkit/event/EventException.java
+++ b/src/main/java/org/bukkit/event/EventException.java
@@ -1,7 +1,9 @@
 package org.bukkit.event;
 
 public class EventException extends Exception {
+
     private static final long serialVersionUID = 3532808232324183999L;
+
     private final Throwable cause;
 
     /**
@@ -10,20 +12,20 @@ public class EventException extends Exception {
      * @param throwable Exception that triggered this Exception
      */
     public EventException(Throwable throwable) {
-        cause = throwable;
+        this.cause = throwable;
     }
 
     /**
      * Constructs a new EventException
      */
     public EventException() {
-        cause = null;
+        this.cause = null;
     }
 
     /**
      * Constructs a new EventException with the given message
      *
-     * @param cause The exception that caused this
+     * @param cause   The exception that caused this
      * @param message The message
      */
     public EventException(Throwable cause, String message) {
@@ -38,7 +40,7 @@ public class EventException extends Exception {
      */
     public EventException(String message) {
         super(message);
-        cause = null;
+        this.cause = null;
     }
 
     /**
diff --git a/src/main/java/org/bukkit/event/EventPriority.java b/src/main/java/org/bukkit/event/EventPriority.java
index 61ffa50..21b045c 100644
--- a/src/main/java/org/bukkit/event/EventPriority.java
+++ b/src/main/java/org/bukkit/event/EventPriority.java
@@ -10,24 +10,29 @@ public enum EventPriority {
      * other plugins to further customise the outcome
      */
     LOWEST(0),
+
     /**
      * Event call is of low importance
      */
     LOW(1),
+
     /**
      * Event call is neither important nor unimportant, and may be ran
      * normally
      */
     NORMAL(2),
+
     /**
      * Event call is of high importance
      */
     HIGH(3),
+
     /**
      * Event call is critical and must have the final say in what happens
      * to the event
      */
     HIGHEST(4),
+
     /**
      * Event is listened to purely for monitoring the outcome of an event.
      * <p>
@@ -37,7 +42,7 @@ public enum EventPriority {
 
     private final int slot;
 
-    private EventPriority(int slot) {
+    EventPriority(int slot) {
         this.slot = slot;
     }
 
diff --git a/src/main/java/org/bukkit/event/HandlerList.java b/src/main/java/org/bukkit/event/HandlerList.java
index 7d5efff..52ab767 100644
--- a/src/main/java/org/bukkit/event/HandlerList.java
+++ b/src/main/java/org/bukkit/event/HandlerList.java
@@ -3,7 +3,11 @@ package org.bukkit.event;
 import org.bukkit.plugin.Plugin;
 import org.bukkit.plugin.RegisteredListener;
 
-import java.util.*;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.EnumMap;
+import java.util.List;
+import java.util.ListIterator;
 import java.util.Map.Entry;
 
 /**
@@ -105,8 +109,10 @@ public class HandlerList {
      * @param listener listener to register
      */
     public synchronized void register(RegisteredListener listener) {
-        if (handlerslots.get(listener.getPriority()).contains(listener))
+        if (handlerslots.get(listener.getPriority()).contains(listener)) {
             throw new IllegalStateException("This listener is already registered to priority " + listener.getPriority().toString());
+        }
+
         handlers = null;
         handlerslots.get(listener.getPriority()).add(listener);
     }
@@ -141,14 +147,17 @@ public class HandlerList {
     public synchronized void unregister(Plugin plugin) {
         boolean changed = false;
         for (List<RegisteredListener> list : handlerslots.values()) {
-            for (ListIterator<RegisteredListener> i = list.listIterator(); i.hasNext();) {
+            for (ListIterator<RegisteredListener> i = list.listIterator(); i.hasNext(); ) {
                 if (i.next().getPlugin().equals(plugin)) {
                     i.remove();
                     changed = true;
                 }
             }
         }
-        if (changed) handlers = null;
+
+        if (changed) {
+            handlers = null;
+        }
     }
 
     /**
@@ -159,14 +168,17 @@ public class HandlerList {
     public synchronized void unregister(Listener listener) {
         boolean changed = false;
         for (List<RegisteredListener> list : handlerslots.values()) {
-            for (ListIterator<RegisteredListener> i = list.listIterator(); i.hasNext();) {
+            for (ListIterator<RegisteredListener> i = list.listIterator(); i.hasNext(); ) {
                 if (i.next().getListener().equals(listener)) {
                     i.remove();
                     changed = true;
                 }
             }
         }
-        if (changed) handlers = null;
+
+        if (changed) {
+            handlers = null;
+        }
     }
 
     /**
@@ -178,6 +190,7 @@ public class HandlerList {
         for (Entry<EventPriority, ArrayList<RegisteredListener>> entry : handlerslots.entrySet()) {
             entries.addAll(entry.getValue());
         }
+
         handlers = entries.toArray(new RegisteredListener[entries.size()]);
     }
 
@@ -214,6 +227,7 @@ public class HandlerList {
                 }
             }
         }
+
         return listeners;
     }
 
diff --git a/src/main/java/org/bukkit/event/Listener.java b/src/main/java/org/bukkit/event/Listener.java
index ff083e6..93878cf 100644
--- a/src/main/java/org/bukkit/event/Listener.java
+++ b/src/main/java/org/bukkit/event/Listener.java
@@ -3,4 +3,6 @@ package org.bukkit.event;
 /**
  * Simple interface for tagging all EventListeners
  */
-public interface Listener {}
+public interface Listener {
+
+}
diff --git a/src/main/java/org/bukkit/event/block/Action.java b/src/main/java/org/bukkit/event/block/Action.java
index 25d26e3..b521942 100644
--- a/src/main/java/org/bukkit/event/block/Action.java
+++ b/src/main/java/org/bukkit/event/block/Action.java
@@ -6,21 +6,25 @@ public enum Action {
      * Left-clicking a block
      */
     LEFT_CLICK_BLOCK,
+
     /**
      * Right-clicking a block
      */
     RIGHT_CLICK_BLOCK,
+
     /**
      * Left-clicking the air
      */
     LEFT_CLICK_AIR,
+
     /**
      * Right-clicking the air
      */
     RIGHT_CLICK_AIR,
+
     /**
      * Stepping onto or into a block (Ass-pressure)
-     *
+     * <p>
      * Examples:
      * <ul>
      * <li>Jumping on soil
diff --git a/src/main/java/org/bukkit/event/block/BlockBreakEvent.java b/src/main/java/org/bukkit/event/block/BlockBreakEvent.java
index a011f61..b530b9a 100644
--- a/src/main/java/org/bukkit/event/block/BlockBreakEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockBreakEvent.java
@@ -3,7 +3,6 @@ package org.bukkit.event.block;
 import org.bukkit.block.Block;
 import org.bukkit.entity.Player;
 import org.bukkit.event.Cancellable;
-import org.bukkit.event.HandlerList;
 
 /**
  * Called when a block is broken by a player.
@@ -13,7 +12,7 @@ import org.bukkit.event.HandlerList;
  * <ol>
  * <li>The player is not in creative or adventure mode
  * <li>The player can loot the block (ie: does not destroy it completely, by
- *     using the correct tool)
+ * using the correct tool)
  * <li>The player does not have silk touch
  * <li>The block drops experience in vanilla Minecraft
  * </ol>
@@ -27,8 +26,9 @@ import org.bukkit.event.HandlerList;
  * experience will not drop.
  */
 public class BlockBreakEvent extends BlockExpEvent implements Cancellable {
+
     private final Player player;
-    private boolean cancel;
+    private boolean cancelled;
 
     public BlockBreakEvent(final Block theBlock, final Player player) {
         super(theBlock, 0);
@@ -45,11 +45,13 @@ public class BlockBreakEvent extends BlockExpEvent implements Cancellable {
         return player;
     }
 
+    @Override
     public boolean isCancelled() {
-        return cancel;
+        return cancelled;
     }
 
-    public void setCancelled(boolean cancel) {
-        this.cancel = cancel;
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
     }
 }
diff --git a/src/main/java/org/bukkit/event/block/BlockBurnEvent.java b/src/main/java/org/bukkit/event/block/BlockBurnEvent.java
index 1592a15..2c31e7d 100644
--- a/src/main/java/org/bukkit/event/block/BlockBurnEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockBurnEvent.java
@@ -11,6 +11,7 @@ import org.bukkit.event.HandlerList;
  * result of being burnt by fire.
  */
 public class BlockBurnEvent extends BlockEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
     private boolean cancelled;
 
@@ -19,12 +20,14 @@ public class BlockBurnEvent extends BlockEvent implements Cancellable {
         this.cancelled = false;
     }
 
+    @Override
     public boolean isCancelled() {
         return cancelled;
     }
 
-    public void setCancelled(boolean cancel) {
-        this.cancelled = cancel;
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/event/block/BlockCanBuildEvent.java b/src/main/java/org/bukkit/event/block/BlockCanBuildEvent.java
index 3860f44..fd2f8d2 100644
--- a/src/main/java/org/bukkit/event/block/BlockCanBuildEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockCanBuildEvent.java
@@ -1,7 +1,7 @@
 package org.bukkit.event.block;
 
-import org.bukkit.block.Block;
 import org.bukkit.Material;
+import org.bukkit.block.Block;
 import org.bukkit.event.HandlerList;
 
 /**
@@ -10,24 +10,23 @@ import org.bukkit.event.HandlerList;
  * Note:
  * <ul>
  * <li>The Block returned by getBlock() is the block we are trying to place
- *     on, not the block we are trying to place.
+ * on, not the block we are trying to place.
  * <li>If you want to figure out what is being placed, use {@link
- *     #getMaterial()} or {@link #getMaterialId()} instead.
+ * #getMaterial()} or {@link #getMaterialId()} instead.
  * </ul>
  */
 public class BlockCanBuildEvent extends BlockEvent {
+
     private static final HandlerList handlers = new HandlerList();
     protected boolean buildable;
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
     protected int material;
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -53,7 +52,7 @@ public class BlockCanBuildEvent extends BlockEvent {
      * Sets whether the block can be built here or not.
      *
      * @param cancel true if you want to allow the block to be built here
-     *     despite Minecraft's default behaviour
+     *               despite Minecraft's default behaviour
      */
     public void setBuildable(boolean cancel) {
         this.buildable = cancel;
diff --git a/src/main/java/org/bukkit/event/block/BlockDamageEvent.java b/src/main/java/org/bukkit/event/block/BlockDamageEvent.java
index d80e00e..a5af1f3 100644
--- a/src/main/java/org/bukkit/event/block/BlockDamageEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockDamageEvent.java
@@ -12,15 +12,18 @@ import org.bukkit.inventory.ItemStack;
  * If a Block Damage event is cancelled, the block will not be damaged.
  */
 public class BlockDamageEvent extends BlockEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
+
     private final Player player;
-    private boolean instaBreak;
-    private boolean cancel;
     private final ItemStack itemstack;
 
-    public BlockDamageEvent(final Player player, final Block block, final ItemStack itemInHand, final boolean instaBreak) {
+    private boolean instantBreak;
+    private boolean cancel;
+
+    public BlockDamageEvent(final Player player, final Block block, final ItemStack itemInHand, final boolean instaBreaknt) {
         super(block);
-        this.instaBreak = instaBreak;
+        this.instantBreak = instaBreaknt;
         this.player = player;
         this.itemstack = itemInHand;
         this.cancel = false;
@@ -39,20 +42,41 @@ public class BlockDamageEvent extends BlockEvent implements Cancellable {
      * Gets if the block is set to instantly break when damaged by the player.
      *
      * @return true if the block should instantly break when damaged by the
-     *     player
+     * player
+     */
+    @Deprecated
+    public boolean isInstantBreak() {
+        return instantBreak;
+    }
+
+    /**
+     * Gets if the block is set to instantly break when damaged by the player.
+     *
+     * @return true if the block should instantly break when damaged by the
+     * player
      */
     public boolean getInstaBreak() {
-        return instaBreak;
+        return instantBreak;
+    }
+
+    /**
+     * Sets if the block should instantly break when damaged by the player.
+     *
+     * @param instantBreat true if you want the block to instantly break when damaged
+     *                     by the player
+     */
+    public void setInstaBreak(boolean instantBreat) {
+        this.instantBreak = instantBreat;
     }
 
     /**
      * Sets if the block should instantly break when damaged by the player.
      *
-     * @param bool true if you want the block to instantly break when damaged
-     *     by the player
+     * @param instantBreat true if you want the block to
+     *                     instantly break when damaged by the player
      */
-    public void setInstaBreak(boolean bool) {
-        this.instaBreak = bool;
+    public void setInstantBreak(boolean instantBreat) {
+        this.instantBreak = instantBreat;
     }
 
     /**
@@ -64,12 +88,14 @@ public class BlockDamageEvent extends BlockEvent implements Cancellable {
         return itemstack;
     }
 
+    @Override
     public boolean isCancelled() {
         return cancel;
     }
 
-    public void setCancelled(boolean cancel) {
-        this.cancel = cancel;
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancel = cancelled;
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/event/block/BlockDispenseEvent.java b/src/main/java/org/bukkit/event/block/BlockDispenseEvent.java
index 16ee59b..8f53e9b 100644
--- a/src/main/java/org/bukkit/event/block/BlockDispenseEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockDispenseEvent.java
@@ -65,12 +65,14 @@ public class BlockDispenseEvent extends BlockEvent implements Cancellable {
         velocity = vel;
     }
 
+    @Override
     public boolean isCancelled() {
         return cancelled;
     }
 
-    public void setCancelled(boolean cancel) {
-        cancelled = cancel;
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/event/block/BlockEvent.java b/src/main/java/org/bukkit/event/block/BlockEvent.java
index 2405205..7e0da17 100644
--- a/src/main/java/org/bukkit/event/block/BlockEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockEvent.java
@@ -7,6 +7,7 @@ import org.bukkit.event.Event;
  * Represents a block related event.
  */
 public abstract class BlockEvent extends Event {
+
     protected Block block;
 
     public BlockEvent(final Block theBlock) {
diff --git a/src/main/java/org/bukkit/event/block/BlockExpEvent.java b/src/main/java/org/bukkit/event/block/BlockExpEvent.java
index 08636a2..1e35f81 100644
--- a/src/main/java/org/bukkit/event/block/BlockExpEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockExpEvent.java
@@ -7,12 +7,12 @@ import org.bukkit.event.HandlerList;
  * An event that's called when a block yields experience.
  */
 public class BlockExpEvent extends BlockEvent {
+
     private static final HandlerList handlers = new HandlerList();
     private int exp;
 
     public BlockExpEvent(Block block, int exp) {
         super(block);
-
         this.exp = exp;
     }
 
@@ -35,6 +35,7 @@ public class BlockExpEvent extends BlockEvent {
         this.exp = exp;
     }
 
+    @Override
     public HandlerList getHandlers() {
         return handlers;
     }
diff --git a/src/main/java/org/bukkit/event/block/BlockFadeEvent.java b/src/main/java/org/bukkit/event/block/BlockFadeEvent.java
index 673bc5f..977165f 100644
--- a/src/main/java/org/bukkit/event/block/BlockFadeEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockFadeEvent.java
@@ -19,7 +19,9 @@ import org.bukkit.event.HandlerList;
  * disappear.
  */
 public class BlockFadeEvent extends BlockEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
+
     private boolean cancelled;
     private final BlockState newState;
 
@@ -34,18 +36,20 @@ public class BlockFadeEvent extends BlockEvent implements Cancellable {
      * disappearing.
      *
      * @return The block state of the block that will be fading, melting or
-     *     disappearing
+     * disappearing
      */
     public BlockState getNewState() {
         return newState;
     }
 
+    @Override
     public boolean isCancelled() {
         return cancelled;
     }
 
-    public void setCancelled(boolean cancel) {
-        this.cancelled = cancel;
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/event/block/BlockFormEvent.java b/src/main/java/org/bukkit/event/block/BlockFormEvent.java
index df0401f..9a9fbe8 100644
--- a/src/main/java/org/bukkit/event/block/BlockFormEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockFormEvent.java
@@ -22,6 +22,7 @@ import org.bukkit.event.HandlerList;
  * @see BlockSpreadEvent
  */
 public class BlockFormEvent extends BlockGrowEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
 
     public BlockFormEvent(final Block block, final BlockState newState) {
diff --git a/src/main/java/org/bukkit/event/block/BlockFromToEvent.java b/src/main/java/org/bukkit/event/block/BlockFromToEvent.java
index f976bea..96a4e42 100644
--- a/src/main/java/org/bukkit/event/block/BlockFromToEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockFromToEvent.java
@@ -13,22 +13,24 @@ import org.bukkit.event.HandlerList;
  * will not flow).
  */
 public class BlockFromToEvent extends BlockEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
+
+    protected boolean cancelled;
     protected Block to;
     protected BlockFace face;
-    protected boolean cancel;
 
     public BlockFromToEvent(final Block block, final BlockFace face) {
         super(block);
         this.face = face;
-        this.cancel = false;
+        this.cancelled = false;
     }
 
     public BlockFromToEvent(final Block block, final Block toBlock) {
         super(block);
         this.to = toBlock;
         this.face = BlockFace.SELF;
-        this.cancel = false;
+        this.cancelled = false;
     }
 
     /**
@@ -52,12 +54,14 @@ public class BlockFromToEvent extends BlockEvent implements Cancellable {
         return to;
     }
 
+    @Override
     public boolean isCancelled() {
-        return cancel;
+        return cancelled;
     }
 
-    public void setCancelled(boolean cancel) {
-        this.cancel = cancel;
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/event/block/BlockGrowEvent.java b/src/main/java/org/bukkit/event/block/BlockGrowEvent.java
index 2a959fd..84cf80d 100644
--- a/src/main/java/org/bukkit/event/block/BlockGrowEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockGrowEvent.java
@@ -20,7 +20,9 @@ import org.bukkit.event.HandlerList;
  * If a Block Grow event is cancelled, the block will not grow.
  */
 public class BlockGrowEvent extends BlockEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
+
     private final BlockState newState;
     private boolean cancelled = false;
 
@@ -38,12 +40,14 @@ public class BlockGrowEvent extends BlockEvent implements Cancellable {
         return newState;
     }
 
+    @Override
     public boolean isCancelled() {
         return cancelled;
     }
 
-    public void setCancelled(boolean cancel) {
-        this.cancelled = cancel;
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
     }
 
     public HandlerList getHandlers() {
diff --git a/src/main/java/org/bukkit/event/block/BlockIgniteEvent.java b/src/main/java/org/bukkit/event/block/BlockIgniteEvent.java
index 733a15e..71218ab 100644
--- a/src/main/java/org/bukkit/event/block/BlockIgniteEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockIgniteEvent.java
@@ -13,11 +13,13 @@ import org.bukkit.event.HandlerList;
  * If a Block Ignite event is cancelled, the block will not be ignited.
  */
 public class BlockIgniteEvent extends BlockEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
+
+    private boolean cancelled;
     private final IgniteCause cause;
     private final Entity ignitingEntity;
     private final Block ignitingBlock;
-    private boolean cancel;
 
     /**
      * @deprecated use {@link BlockIgniteEvent#BlockIgniteEvent(Block,
@@ -41,15 +43,7 @@ public class BlockIgniteEvent extends BlockEvent implements Cancellable {
         this.cause = cause;
         this.ignitingEntity = ignitingEntity;
         this.ignitingBlock = ignitingBlock;
-        this.cancel = false;
-    }
-
-    public boolean isCancelled() {
-        return cancel;
-    }
-
-    public void setCancelled(boolean cancel) {
-        this.cancel = cancel;
+        this.cancelled = false;
     }
 
     /**
@@ -101,26 +95,32 @@ public class BlockIgniteEvent extends BlockEvent implements Cancellable {
          * Block ignition caused by lava.
          */
         LAVA,
+
         /**
          * Block ignition caused by a player or dispenser using flint-and-steel.
          */
         FLINT_AND_STEEL,
+
         /**
          * Block ignition caused by dynamic spreading of fire.
          */
         SPREAD,
+
         /**
          * Block ignition caused by lightning.
          */
         LIGHTNING,
+
         /**
          * Block ignition caused by an entity using a fireball.
          */
         FIREBALL,
+
         /**
          * Block ignition caused by an Ender Crystal.
          */
         ENDER_CRYSTAL,
+
         /**
          * Block ignition caused by explosion.
          */
@@ -128,6 +128,16 @@ public class BlockIgniteEvent extends BlockEvent implements Cancellable {
     }
 
     @Override
+    public boolean isCancelled() {
+        return cancelled;
+    }
+
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
+    }
+
+    @Override
     public HandlerList getHandlers() {
         return handlers;
     }
diff --git a/src/main/java/org/bukkit/event/block/BlockMultiPlaceEvent.java b/src/main/java/org/bukkit/event/block/BlockMultiPlaceEvent.java
index d16e4be..cc99fb2 100644
--- a/src/main/java/org/bukkit/event/block/BlockMultiPlaceEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockMultiPlaceEvent.java
@@ -16,6 +16,7 @@ import java.util.List;
  * block.
  */
 public class BlockMultiPlaceEvent extends BlockPlaceEvent {
+
     private final List<BlockState> states;
 
     public BlockMultiPlaceEvent(List<BlockState> states, Block clicked, ItemStack itemInHand, Player thePlayer, boolean canBuild) {
diff --git a/src/main/java/org/bukkit/event/block/BlockPhysicsEvent.java b/src/main/java/org/bukkit/event/block/BlockPhysicsEvent.java
index e05d1ca..7777420 100644
--- a/src/main/java/org/bukkit/event/block/BlockPhysicsEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockPhysicsEvent.java
@@ -1,7 +1,7 @@
 package org.bukkit.event.block;
 
-import org.bukkit.block.Block;
 import org.bukkit.Material;
+import org.bukkit.block.Block;
 import org.bukkit.event.Cancellable;
 import org.bukkit.event.HandlerList;
 
@@ -9,12 +9,13 @@ import org.bukkit.event.HandlerList;
  * Thrown when a block physics check is called
  */
 public class BlockPhysicsEvent extends BlockEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
+
+    private boolean cancelled = false;
     private final int changed;
-    private boolean cancel = false;
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -43,12 +44,14 @@ public class BlockPhysicsEvent extends BlockEvent implements Cancellable {
         return Material.getMaterial(changed);
     }
 
+    @Override
     public boolean isCancelled() {
-        return cancel;
+        return cancelled;
     }
 
-    public void setCancelled(boolean cancel) {
-        this.cancel = cancel;
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/event/block/BlockPistonEvent.java b/src/main/java/org/bukkit/event/block/BlockPistonEvent.java
index b89006f..e3647b9 100644
--- a/src/main/java/org/bukkit/event/block/BlockPistonEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockPistonEvent.java
@@ -9,6 +9,7 @@ import org.bukkit.event.Cancellable;
  * Called when a piston block is triggered
  */
 public abstract class BlockPistonEvent extends BlockEvent implements Cancellable {
+
     private boolean cancelled;
     private final BlockFace direction;
 
@@ -17,14 +18,6 @@ public abstract class BlockPistonEvent extends BlockEvent implements Cancellable
         this.direction = direction;
     }
 
-    public boolean isCancelled() {
-        return this.cancelled;
-    }
-
-    public void setCancelled(boolean cancelled) {
-        this.cancelled = cancelled;
-    }
-
     /**
      * Returns true if the Piston in the event is sticky.
      *
@@ -45,4 +38,14 @@ public abstract class BlockPistonEvent extends BlockEvent implements Cancellable
         // return ((PistonBaseMaterial) block.getState().getData()).getFacing();
         return direction;
     }
+
+    @Override
+    public boolean isCancelled() {
+        return this.cancelled;
+    }
+
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
+    }
 }
diff --git a/src/main/java/org/bukkit/event/block/BlockPistonExtendEvent.java b/src/main/java/org/bukkit/event/block/BlockPistonExtendEvent.java
index 1058b8b..0a6229a 100644
--- a/src/main/java/org/bukkit/event/block/BlockPistonExtendEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockPistonExtendEvent.java
@@ -1,24 +1,25 @@
 package org.bukkit.event.block;
 
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
-
 import org.bukkit.block.Block;
 import org.bukkit.block.BlockFace;
 import org.bukkit.event.HandlerList;
 
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+
 /**
  * Called when a piston extends
  */
 public class BlockPistonExtendEvent extends BlockPistonEvent {
+
     private static final HandlerList handlers = new HandlerList();
+
     private final int length;
     private List<Block> blocks;
 
     public BlockPistonExtendEvent(final Block block, final int length, final BlockFace direction) {
         super(block, direction);
-
         this.length = length;
     }
 
@@ -43,8 +44,10 @@ public class BlockPistonExtendEvent extends BlockPistonEvent {
             for (int i = 0; i < this.getLength(); i++) {
                 tmp.add(block.getRelative(getDirection(), i + 1));
             }
+
             blocks = Collections.unmodifiableList(tmp);
         }
+
         return blocks;
     }
 
diff --git a/src/main/java/org/bukkit/event/block/BlockPistonRetractEvent.java b/src/main/java/org/bukkit/event/block/BlockPistonRetractEvent.java
index 0190c4c..d8a9f4a 100644
--- a/src/main/java/org/bukkit/event/block/BlockPistonRetractEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockPistonRetractEvent.java
@@ -9,7 +9,9 @@ import org.bukkit.event.HandlerList;
  * Called when a piston retracts
  */
 public class BlockPistonRetractEvent extends BlockPistonEvent {
+
     private static final HandlerList handlers = new HandlerList();
+
     public BlockPistonRetractEvent(final Block block, final BlockFace direction) {
         super(block, direction);
     }
diff --git a/src/main/java/org/bukkit/event/block/BlockPlaceEvent.java b/src/main/java/org/bukkit/event/block/BlockPlaceEvent.java
index 6d0ffe8..0d2c55f 100644
--- a/src/main/java/org/bukkit/event/block/BlockPlaceEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockPlaceEvent.java
@@ -13,8 +13,10 @@ import org.bukkit.inventory.ItemStack;
  * If a Block Place event is cancelled, the block will not be placed.
  */
 public class BlockPlaceEvent extends BlockEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
-    protected boolean cancel;
+
+    protected boolean cancelled;
     protected boolean canBuild;
     protected Block placedAgainst;
     protected BlockState replacedBlockState;
@@ -28,15 +30,7 @@ public class BlockPlaceEvent extends BlockEvent implements Cancellable {
         this.player = thePlayer;
         this.replacedBlockState = replacedBlockState;
         this.canBuild = canBuild;
-        cancel = false;
-    }
-
-    public boolean isCancelled() {
-        return cancel;
-    }
-
-    public void setCancelled(boolean cancel) {
-        this.cancel = cancel;
+        this.cancelled = false;
     }
 
     /**
@@ -81,7 +75,7 @@ public class BlockPlaceEvent extends BlockEvent implements Cancellable {
      * Gets the item in the player's hand when they placed the block.
      *
      * @return The ItemStack for the item in the player's hand when they
-     *     placed the block
+     * placed the block
      */
     public ItemStack getItemInHand() {
         return itemInHand;
@@ -111,6 +105,16 @@ public class BlockPlaceEvent extends BlockEvent implements Cancellable {
     }
 
     @Override
+    public boolean isCancelled() {
+        return this.cancelled;
+    }
+
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
+    }
+
+    @Override
     public HandlerList getHandlers() {
         return handlers;
     }
diff --git a/src/main/java/org/bukkit/event/block/BlockRedstoneEvent.java b/src/main/java/org/bukkit/event/block/BlockRedstoneEvent.java
index 625ec90..6348faf 100644
--- a/src/main/java/org/bukkit/event/block/BlockRedstoneEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockRedstoneEvent.java
@@ -1,13 +1,16 @@
 package org.bukkit.event.block;
 
 import org.bukkit.block.Block;
+import org.bukkit.event.Cancellable;
 import org.bukkit.event.HandlerList;
 
 /**
  * Called when a redstone current changes
  */
-public class BlockRedstoneEvent extends BlockEvent {
+public class BlockRedstoneEvent extends BlockEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
+
     private final int oldCurrent;
     private int newCurrent;
 
@@ -45,6 +48,16 @@ public class BlockRedstoneEvent extends BlockEvent {
     }
 
     @Override
+    public boolean isCancelled() {
+        return newCurrent == 0;
+    }
+
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.newCurrent = cancelled ? 0 : 1;
+    }
+
+    @Override
     public HandlerList getHandlers() {
         return handlers;
     }
diff --git a/src/main/java/org/bukkit/event/block/BlockSpreadEvent.java b/src/main/java/org/bukkit/event/block/BlockSpreadEvent.java
index a1fb363..c6113a1 100644
--- a/src/main/java/org/bukkit/event/block/BlockSpreadEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockSpreadEvent.java
@@ -21,7 +21,9 @@ import org.bukkit.event.HandlerList;
  * @see BlockFormEvent
  */
 public class BlockSpreadEvent extends BlockFormEvent {
+
     private static final HandlerList handlers = new HandlerList();
+
     private final Block source;
 
     public BlockSpreadEvent(final Block block, final Block source, final BlockState newState) {
diff --git a/src/main/java/org/bukkit/event/block/EntityBlockFormEvent.java b/src/main/java/org/bukkit/event/block/EntityBlockFormEvent.java
index 45efc32..eadf94b 100644
--- a/src/main/java/org/bukkit/event/block/EntityBlockFormEvent.java
+++ b/src/main/java/org/bukkit/event/block/EntityBlockFormEvent.java
@@ -13,11 +13,11 @@ import org.bukkit.entity.Entity;
  * </ul>
  */
 public class EntityBlockFormEvent extends BlockFormEvent {
+
     private final Entity entity;
 
     public EntityBlockFormEvent(final Entity entity, final Block block, final BlockState blockstate) {
         super(block, blockstate);
-
         this.entity = entity;
     }
 
diff --git a/src/main/java/org/bukkit/event/block/LeavesDecayEvent.java b/src/main/java/org/bukkit/event/block/LeavesDecayEvent.java
index 84d8cfd..1d9a35f 100644
--- a/src/main/java/org/bukkit/event/block/LeavesDecayEvent.java
+++ b/src/main/java/org/bukkit/event/block/LeavesDecayEvent.java
@@ -10,19 +10,23 @@ import org.bukkit.event.HandlerList;
  * If a Leaves Decay event is cancelled, the leaves will not decay.
  */
 public class LeavesDecayEvent extends BlockEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
-    private boolean cancel = false;
+
+    private boolean cancelled = false;
 
     public LeavesDecayEvent(final Block block) {
         super(block);
     }
 
+    @Override
     public boolean isCancelled() {
-        return cancel;
+        return cancelled;
     }
 
-    public void setCancelled(boolean cancel) {
-        this.cancel = cancel;
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/event/block/NotePlayEvent.java b/src/main/java/org/bukkit/event/block/NotePlayEvent.java
index d4d4381..98ed9a5 100644
--- a/src/main/java/org/bukkit/event/block/NotePlayEvent.java
+++ b/src/main/java/org/bukkit/event/block/NotePlayEvent.java
@@ -13,9 +13,10 @@ import org.bukkit.event.HandlerList;
 public class NotePlayEvent extends BlockEvent implements Cancellable {
 
     private static HandlerList handlers = new HandlerList();
+
+    private boolean cancelled = false;
     private Instrument instrument;
     private Note note;
-    private boolean cancelled = false;
 
     public NotePlayEvent(Block block, Instrument instrument, Note note) {
         super(block);
@@ -23,14 +24,6 @@ public class NotePlayEvent extends BlockEvent implements Cancellable {
         this.note = note;
     }
 
-    public boolean isCancelled() {
-        return cancelled;
-    }
-
-    public void setCancelled(boolean cancel) {
-        this.cancelled = cancel;
-    }
-
     /**
      * Gets the {@link Instrument} to be used.
      *
@@ -73,6 +66,16 @@ public class NotePlayEvent extends BlockEvent implements Cancellable {
     }
 
     @Override
+    public boolean isCancelled() {
+        return cancelled;
+    }
+
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
+    }
+
+    @Override
     public HandlerList getHandlers() {
         return handlers;
     }
diff --git a/src/main/java/org/bukkit/event/block/SignChangeEvent.java b/src/main/java/org/bukkit/event/block/SignChangeEvent.java
index d1b7908..3bfd390 100644
--- a/src/main/java/org/bukkit/event/block/SignChangeEvent.java
+++ b/src/main/java/org/bukkit/event/block/SignChangeEvent.java
@@ -11,8 +11,10 @@ import org.bukkit.event.HandlerList;
  * If a Sign Change event is cancelled, the sign will not be changed.
  */
 public class SignChangeEvent extends BlockEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
-    private boolean cancel = false;
+
+    private boolean cancelled = false;
     private final Player player;
     private final String[] lines;
 
@@ -45,9 +47,9 @@ public class SignChangeEvent extends BlockEvent implements Cancellable {
      *
      * @param index index of the line to get
      * @return the String containing the line of text associated with the
-     *     provided index
+     * provided index
      * @throws IndexOutOfBoundsException thrown when the provided index is > 3
-     *     or < 0
+     *                                   or < 0
      */
     public String getLine(int index) throws IndexOutOfBoundsException {
         return lines[index];
@@ -57,20 +59,22 @@ public class SignChangeEvent extends BlockEvent implements Cancellable {
      * Sets a single line for the sign involved in this event
      *
      * @param index index of the line to set
-     * @param line text to set
+     * @param line  text to set
      * @throws IndexOutOfBoundsException thrown when the provided index is > 3
-     *     or < 0
+     *                                   or < 0
      */
     public void setLine(int index, String line) throws IndexOutOfBoundsException {
         lines[index] = line;
     }
 
+    @Override
     public boolean isCancelled() {
-        return cancel;
+        return cancelled;
     }
 
-    public void setCancelled(boolean cancel) {
-        this.cancel = cancel;
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/event/enchantment/EnchantItemEvent.java b/src/main/java/org/bukkit/event/enchantment/EnchantItemEvent.java
index de28f1d..8da0f4e 100644
--- a/src/main/java/org/bukkit/event/enchantment/EnchantItemEvent.java
+++ b/src/main/java/org/bukkit/event/enchantment/EnchantItemEvent.java
@@ -1,8 +1,5 @@
 package org.bukkit.event.enchantment;
 
-import java.util.HashMap;
-import java.util.Map;
-
 import org.bukkit.block.Block;
 import org.bukkit.enchantments.Enchantment;
 import org.bukkit.entity.Player;
@@ -12,27 +9,35 @@ import org.bukkit.event.inventory.InventoryEvent;
 import org.bukkit.inventory.InventoryView;
 import org.bukkit.inventory.ItemStack;
 
+import java.util.HashMap;
+import java.util.Map;
+
 /**
  * Called when an ItemStack is successfully enchanted (currently at
  * enchantment table)
  */
 public class EnchantItemEvent extends InventoryEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
+
+    private final Map<Enchantment, Integer> enchants;
+    private final Player enchanter;
+
     private final Block table;
     private final ItemStack item;
     private int level;
     private boolean cancelled;
-    private final Map<Enchantment,Integer> enchants;
-    private final Player enchanter;
     private int button;
 
-    public EnchantItemEvent(final Player enchanter, final InventoryView view, final Block table, final ItemStack item, final int level, final Map<Enchantment, Integer> enchants, final int i) {
+    public EnchantItemEvent(Player enchanter, InventoryView view, Block table, ItemStack item, int level, Map<Enchantment, Integer> enchants, int i) {
         super(view);
+
+        this.enchants = new HashMap<Enchantment, Integer>(enchants);
         this.enchanter = enchanter;
+
         this.table = table;
         this.item = item;
         this.level = level;
-        this.enchants = new HashMap<Enchantment, Integer>(enchants);
         this.cancelled = false;
         this.button = i;
     }
@@ -102,12 +107,14 @@ public class EnchantItemEvent extends InventoryEvent implements Cancellable {
         return button;
     }
 
+    @Override
     public boolean isCancelled() {
         return cancelled;
     }
 
-    public void setCancelled(boolean cancel) {
-        this.cancelled = cancel;
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/event/enchantment/PrepareItemEnchantEvent.java b/src/main/java/org/bukkit/event/enchantment/PrepareItemEnchantEvent.java
index 6c0aa9f..7b76b88 100644
--- a/src/main/java/org/bukkit/event/enchantment/PrepareItemEnchantEvent.java
+++ b/src/main/java/org/bukkit/event/enchantment/PrepareItemEnchantEvent.java
@@ -13,7 +13,9 @@ import org.bukkit.inventory.ItemStack;
  * called multiple times
  */
 public class PrepareItemEnchantEvent extends InventoryEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
+
     private final Block table;
     private final ItemStack item;
     private final int[] levelsOffered;
@@ -77,12 +79,14 @@ public class PrepareItemEnchantEvent extends InventoryEvent implements Cancellab
         return bonus;
     }
 
+    @Override
     public boolean isCancelled() {
         return cancelled;
     }
 
-    public void setCancelled(boolean cancel) {
-        this.cancelled = cancel;
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/event/entity/CreatureSpawnEvent.java b/src/main/java/org/bukkit/event/entity/CreatureSpawnEvent.java
index 8883157..d18d1bb 100644
--- a/src/main/java/org/bukkit/event/entity/CreatureSpawnEvent.java
+++ b/src/main/java/org/bukkit/event/entity/CreatureSpawnEvent.java
@@ -11,6 +11,7 @@ import org.bukkit.entity.LivingEntity;
  * If a Creature Spawn event is cancelled, the creature will not spawn.
  */
 public class CreatureSpawnEvent extends EntitySpawnEvent {
+
     private final SpawnReason spawnReason;
 
     public CreatureSpawnEvent(final LivingEntity spawnee, final SpawnReason spawnReason) {
@@ -33,7 +34,7 @@ public class CreatureSpawnEvent extends EntitySpawnEvent {
      * Gets the type of creature being spawned.
      *
      * @return A CreatureType value detailing the type of creature being
-     *     spawned
+     * spawned
      * @deprecated In favour of {@link #getEntityType()}.
      */
     @Deprecated
@@ -45,7 +46,7 @@ public class CreatureSpawnEvent extends EntitySpawnEvent {
      * Gets the reason for why the creature is being spawned.
      *
      * @return A SpawnReason value detailing the reason for the creature being
-     *     spawned
+     * spawned
      */
     public SpawnReason getSpawnReason() {
         return spawnReason;
@@ -60,31 +61,38 @@ public class CreatureSpawnEvent extends EntitySpawnEvent {
          * When something spawns from natural means
          */
         NATURAL,
+
         /**
          * When an entity spawns as a jockey of another entity (mostly spider
          * jockeys)
          */
         JOCKEY,
+
         /**
          * When a creature spawns due to chunk generation
          */
         CHUNK_GEN,
+
         /**
          * When a creature spawns from a spawner
          */
         SPAWNER,
+
         /**
          * When a creature spawns from an egg
          */
         EGG,
+
         /**
          * When a creature spawns from a Spawner Egg
          */
         SPAWNER_EGG,
+
         /**
          * When a creature spawns because of a lightning strike
          */
         LIGHTNING,
+
         /**
          * When a creature is spawned by a player that is sleeping
          *
@@ -92,71 +100,88 @@ public class CreatureSpawnEvent extends EntitySpawnEvent {
          */
         @Deprecated
         BED,
+
         /**
          * When a snowman is spawned by being built
          */
         BUILD_SNOWMAN,
+
         /**
          * When an iron golem is spawned by being built
          */
         BUILD_IRONGOLEM,
+
         /**
          * When a wither boss is spawned by being built
          */
         BUILD_WITHER,
+
         /**
          * When an iron golem is spawned to defend a village
          */
         VILLAGE_DEFENSE,
+
         /**
          * When a zombie is spawned to invade a village
          */
         VILLAGE_INVASION,
+
         /**
          * When an animal breeds to create a child
          */
         BREEDING,
+
         /**
          * When a slime splits
          */
         SLIME_SPLIT,
+
         /**
          * When an entity calls for reinforcements
          */
         REINFORCEMENTS,
+
         /**
          * When a creature is spawned by nether portal
          */
         NETHER_PORTAL,
+
         /**
          * When a creature is spawned by a dispenser dispensing an egg
          */
         DISPENSE_EGG,
+
         /**
          * When a zombie infects a villager
          */
         INFECTION,
+
         /**
          * When a villager is cured from infection
          */
         CURED,
+
         /**
          * When an ocelot has a baby spawned along with them
          */
         OCELOT_BABY,
+
         /**
          * When a silverfish spawns from a block
          */
         SILVERFISH_BLOCK,
+
         /**
          * When an entity spawns as a mount of another entity (mostly chicken
          * jockeys)
          */
         MOUNT,
+
         /**
          * When a creature is spawned by plugins
          */
         CUSTOM,
+
         /**
          * When an entity is missing a SpawnReason
          */
diff --git a/src/main/java/org/bukkit/event/entity/CreeperPowerEvent.java b/src/main/java/org/bukkit/event/entity/CreeperPowerEvent.java
index b103a6a..6427319 100644
--- a/src/main/java/org/bukkit/event/entity/CreeperPowerEvent.java
+++ b/src/main/java/org/bukkit/event/entity/CreeperPowerEvent.java
@@ -11,8 +11,10 @@ import org.bukkit.event.HandlerList;
  * If a Creeper Power event is cancelled, the Creeper will not be powered.
  */
 public class CreeperPowerEvent extends EntityEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
-    private boolean canceled;
+
+    private boolean cancelled;
     private final PowerCause cause;
     private LightningStrike bolt;
 
@@ -26,14 +28,6 @@ public class CreeperPowerEvent extends EntityEvent implements Cancellable {
         this.cause = cause;
     }
 
-    public boolean isCancelled() {
-        return canceled;
-    }
-
-    public void setCancelled(boolean cancel) {
-        canceled = cancel;
-    }
-
     @Override
     public Creeper getEntity() {
         return (Creeper) entity;
@@ -49,24 +43,6 @@ public class CreeperPowerEvent extends EntityEvent implements Cancellable {
     }
 
     /**
-     * Gets the cause of the creeper being (un)powered.
-     *
-     * @return A PowerCause value detailing the cause of change in power.
-     */
-    public PowerCause getCause() {
-        return cause;
-    }
-
-    @Override
-    public HandlerList getHandlers() {
-        return handlers;
-    }
-
-    public static HandlerList getHandlerList() {
-        return handlers;
-    }
-
-    /**
      * An enum to specify the cause of the change in power
      */
     public enum PowerCause {
@@ -77,12 +53,14 @@ public class CreeperPowerEvent extends EntityEvent implements Cancellable {
          * Powered state: true
          */
         LIGHTNING,
+
         /**
          * Power change caused by something else (probably a plugin)
          * <p>
          * Powered state: true
          */
         SET_ON,
+
         /**
          * Power change caused by something else (probably a plugin)
          * <p>
@@ -90,4 +68,32 @@ public class CreeperPowerEvent extends EntityEvent implements Cancellable {
          */
         SET_OFF
     }
+
+    /**
+     * Gets the cause of the creeper being (un)powered.
+     *
+     * @return A PowerCause value detailing the cause of change in power.
+     */
+    public PowerCause getCause() {
+        return cause;
+    }
+
+    @Override
+    public boolean isCancelled() {
+        return cancelled;
+    }
+
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
+    }
+
+    @Override
+    public HandlerList getHandlers() {
+        return handlers;
+    }
+
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
 }
diff --git a/src/main/java/org/bukkit/event/entity/EntityBreakDoorEvent.java b/src/main/java/org/bukkit/event/entity/EntityBreakDoorEvent.java
index 2cbbc69..cf96781 100644
--- a/src/main/java/org/bukkit/event/entity/EntityBreakDoorEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityBreakDoorEvent.java
@@ -11,6 +11,7 @@ import org.bukkit.entity.LivingEntity;
  * Cancelling the event will cause the event to be delayed
  */
 public class EntityBreakDoorEvent extends EntityChangeBlockEvent {
+
     public EntityBreakDoorEvent(final LivingEntity entity, final Block targetBlock) {
         super(entity, targetBlock, Material.AIR, (byte) 0);
     }
diff --git a/src/main/java/org/bukkit/event/entity/EntityChangeBlockEvent.java b/src/main/java/org/bukkit/event/entity/EntityChangeBlockEvent.java
index 41be9ca..346eaa6 100644
--- a/src/main/java/org/bukkit/event/entity/EntityChangeBlockEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityChangeBlockEvent.java
@@ -11,38 +11,38 @@ import org.bukkit.event.HandlerList;
  * Called when any Entity, excluding players, changes a block.
  */
 public class EntityChangeBlockEvent extends EntityEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
+
+    private boolean cancelled;
     private final Block block;
-    private boolean cancel;
     private final Material to;
     private final byte data;
 
     /**
-     *
-     * @param what the LivingEntity causing the change
+     * @param what  the LivingEntity causing the change
      * @param block the block (before the change)
-     * @param to the future material being changed to
+     * @param to    the future material being changed to
      * @deprecated Provided as a backward compatibility before the data byte
-     *     was provided, and type increased to all entities
+     * was provided, and type increased to all entities
      */
     @Deprecated
     public EntityChangeBlockEvent(final LivingEntity what, final Block block, final Material to) {
-        this (what, block, to, (byte) 0);
+        this(what, block, to, (byte) 0);
     }
 
     /**
-     *
-     * @param what the Entity causing the change
+     * @param what  the Entity causing the change
      * @param block the block (before the change)
-     * @param to the future material being changed to
-     * @param data the future block data
+     * @param to    the future material being changed to
+     * @param data  the future block data
      * @deprecated Magic value
      */
     @Deprecated
     public EntityChangeBlockEvent(final Entity what, final Block block, final Material to, final byte data) {
         super(what);
         this.block = block;
-        this.cancel = false;
+        this.cancelled = false;
         this.to = to;
         this.data = data;
     }
@@ -56,14 +56,6 @@ public class EntityChangeBlockEvent extends EntityEvent implements Cancellable {
         return block;
     }
 
-    public boolean isCancelled() {
-        return cancel;
-    }
-
-    public void setCancelled(boolean cancel) {
-        this.cancel = cancel;
-    }
-
     /**
      * Gets the Material that the block is changing into
      *
@@ -85,6 +77,16 @@ public class EntityChangeBlockEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
+    public boolean isCancelled() {
+        return cancelled;
+    }
+
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
+    }
+
+    @Override
     public HandlerList getHandlers() {
         return handlers;
     }
diff --git a/src/main/java/org/bukkit/event/entity/EntityCombustByBlockEvent.java b/src/main/java/org/bukkit/event/entity/EntityCombustByBlockEvent.java
index c84bda9..dd7c6da 100644
--- a/src/main/java/org/bukkit/event/entity/EntityCombustByBlockEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityCombustByBlockEvent.java
@@ -7,6 +7,7 @@ import org.bukkit.entity.Entity;
  * Called when a block causes an entity to combust.
  */
 public class EntityCombustByBlockEvent extends EntityCombustEvent {
+
     private final Block combuster;
 
     public EntityCombustByBlockEvent(final Block combuster, final Entity combustee, final int duration) {
diff --git a/src/main/java/org/bukkit/event/entity/EntityCombustByEntityEvent.java b/src/main/java/org/bukkit/event/entity/EntityCombustByEntityEvent.java
index 639567b..e3c1796 100644
--- a/src/main/java/org/bukkit/event/entity/EntityCombustByEntityEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityCombustByEntityEvent.java
@@ -6,6 +6,7 @@ import org.bukkit.entity.Entity;
  * Called when an entity causes another entity to combust.
  */
 public class EntityCombustByEntityEvent extends EntityCombustEvent {
+
     private final Entity combuster;
 
     public EntityCombustByEntityEvent(final Entity combuster, final Entity combustee, final int duration) {
diff --git a/src/main/java/org/bukkit/event/entity/EntityCombustEvent.java b/src/main/java/org/bukkit/event/entity/EntityCombustEvent.java
index 43c4482..145707a 100644
--- a/src/main/java/org/bukkit/event/entity/EntityCombustEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityCombustEvent.java
@@ -10,27 +10,21 @@ import org.bukkit.event.HandlerList;
  * If an Entity Combust event is cancelled, the entity will not combust.
  */
 public class EntityCombustEvent extends EntityEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
+
+    private boolean cancelled;
     private int duration;
-    private boolean cancel;
 
     public EntityCombustEvent(final Entity combustee, final int duration) {
         super(combustee);
         this.duration = duration;
-        this.cancel = false;
-    }
-
-    public boolean isCancelled() {
-        return cancel;
-    }
-
-    public void setCancelled(boolean cancel) {
-        this.cancel = cancel;
+        this.cancelled = false;
     }
 
     /**
-     * @return the amount of time (in seconds) the combustee should be alight
-     *     for
+     * @return the amount of time (in seconds) the combustee
+     * should be alight for
      */
     public int getDuration() {
         return duration;
@@ -49,6 +43,16 @@ public class EntityCombustEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
+    public boolean isCancelled() {
+        return cancelled;
+    }
+
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
+    }
+
+    @Override
     public HandlerList getHandlers() {
         return handlers;
     }
diff --git a/src/main/java/org/bukkit/event/entity/EntityCreatePortalEvent.java b/src/main/java/org/bukkit/event/entity/EntityCreatePortalEvent.java
index 286c206..1c4065f 100644
--- a/src/main/java/org/bukkit/event/entity/EntityCreatePortalEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityCreatePortalEvent.java
@@ -1,24 +1,26 @@
 package org.bukkit.event.entity;
 
-import java.util.List;
 import org.bukkit.PortalType;
 import org.bukkit.block.BlockState;
 import org.bukkit.entity.LivingEntity;
 import org.bukkit.event.Cancellable;
 import org.bukkit.event.HandlerList;
 
+import java.util.List;
+
 /**
  * Thrown when a Living Entity creates a portal in a world.
  */
 public class EntityCreatePortalEvent extends EntityEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
-    private final List<BlockState> blocks;
+
     private boolean cancelled = false;
+    private final List<BlockState> blocks;
     private PortalType type = PortalType.CUSTOM;
 
     public EntityCreatePortalEvent(final LivingEntity what, final List<BlockState> blocks, final PortalType type) {
         super(what);
-
         this.blocks = blocks;
         this.type = type;
     }
@@ -37,14 +39,6 @@ public class EntityCreatePortalEvent extends EntityEvent implements Cancellable
         return blocks;
     }
 
-    public boolean isCancelled() {
-        return cancelled;
-    }
-
-    public void setCancelled(boolean cancel) {
-        this.cancelled = cancel;
-    }
-
     /**
      * Gets the type of portal that is trying to be created.
      *
@@ -55,6 +49,16 @@ public class EntityCreatePortalEvent extends EntityEvent implements Cancellable
     }
 
     @Override
+    public boolean isCancelled() {
+        return cancelled;
+    }
+
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
+    }
+
+    @Override
     public HandlerList getHandlers() {
         return handlers;
     }
diff --git a/src/main/java/org/bukkit/event/entity/EntityDamageByBlockEvent.java b/src/main/java/org/bukkit/event/entity/EntityDamageByBlockEvent.java
index 2ff121e..c5b68c9 100644
--- a/src/main/java/org/bukkit/event/entity/EntityDamageByBlockEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityDamageByBlockEvent.java
@@ -1,15 +1,16 @@
 package org.bukkit.event.entity;
 
-import java.util.Map;
-
 import com.google.common.base.Function;
 import org.bukkit.block.Block;
 import org.bukkit.entity.Entity;
 
+import java.util.Map;
+
 /**
  * Called when an entity is damaged by a block
  */
 public class EntityDamageByBlockEvent extends EntityDamageEvent {
+
     private final Block damager;
 
     @Deprecated
diff --git a/src/main/java/org/bukkit/event/entity/EntityDamageByEntityEvent.java b/src/main/java/org/bukkit/event/entity/EntityDamageByEntityEvent.java
index 49e74c3..37bbb3d 100644
--- a/src/main/java/org/bukkit/event/entity/EntityDamageByEntityEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityDamageByEntityEvent.java
@@ -1,14 +1,15 @@
 package org.bukkit.event.entity;
 
-import java.util.Map;
-
 import com.google.common.base.Function;
 import org.bukkit.entity.Entity;
 
+import java.util.Map;
+
 /**
  * Called when an entity is damaged by an entity
  */
 public class EntityDamageByEntityEvent extends EntityDamageEvent {
+
     private final Entity damager;
 
     @Deprecated
diff --git a/src/main/java/org/bukkit/event/entity/EntityDamageEvent.java b/src/main/java/org/bukkit/event/entity/EntityDamageEvent.java
index 2cc0799..6e7332f 100644
--- a/src/main/java/org/bukkit/event/entity/EntityDamageEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityDamageEvent.java
@@ -1,8 +1,8 @@
 package org.bukkit.event.entity;
 
-import java.util.EnumMap;
-import java.util.Map;
-
+import com.google.common.base.Function;
+import com.google.common.base.Functions;
+import com.google.common.collect.ImmutableMap;
 import org.apache.commons.lang.Validate;
 import org.bukkit.entity.Entity;
 import org.bukkit.entity.Player;
@@ -10,20 +10,22 @@ import org.bukkit.event.Cancellable;
 import org.bukkit.event.HandlerList;
 import org.bukkit.util.NumberConversions;
 
-import com.google.common.base.Function;
-import com.google.common.base.Functions;
-import com.google.common.collect.ImmutableMap;
+import java.util.EnumMap;
+import java.util.Map;
 
 /**
  * Stores data for damage events
  */
 public class EntityDamageEvent extends EntityEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
     private static final DamageModifier[] MODIFIERS = DamageModifier.values();
     private static final Function<? super Double, Double> ZERO = Functions.constant(-0.0);
+
     private final Map<DamageModifier, Double> modifiers;
     private final Map<DamageModifier, ? extends Function<? super Double, Double>> modifierFunctions;
     private final Map<DamageModifier, Double> originals;
+
     private boolean cancelled;
     private final DamageCause cause;
 
@@ -39,25 +41,19 @@ public class EntityDamageEvent extends EntityEvent implements Cancellable {
 
     public EntityDamageEvent(final Entity damagee, final DamageCause cause, final Map<DamageModifier, Double> modifiers, final Map<DamageModifier, ? extends Function<? super Double, Double>> modifierFunctions) {
         super(damagee);
+
         Validate.isTrue(modifiers.containsKey(DamageModifier.BASE), "BASE DamageModifier missing");
         Validate.isTrue(!modifiers.containsKey(null), "Cannot have null DamageModifier");
         Validate.noNullElements(modifiers.values(), "Cannot have null modifier values");
         Validate.isTrue(modifiers.keySet().equals(modifierFunctions.keySet()), "Must have a modifier function for each DamageModifier");
         Validate.noNullElements(modifierFunctions.values(), "Cannot have null modifier function");
+
         this.originals = new EnumMap<DamageModifier, Double>(modifiers);
         this.cause = cause;
         this.modifiers = modifiers;
         this.modifierFunctions = modifierFunctions;
     }
 
-    public boolean isCancelled() {
-        return cancelled;
-    }
-
-    public void setCancelled(boolean cancel) {
-        cancelled = cancel;
-    }
-
     /**
      * Gets the original damage for the specified modifier, as defined at this
      * event's construction.
@@ -70,9 +66,11 @@ public class EntityDamageEvent extends EntityEvent implements Cancellable {
         if (damage != null) {
             return damage;
         }
+
         if (type == null) {
             throw new IllegalArgumentException("Cannot have null DamageModifier");
         }
+
         return 0;
     }
 
@@ -80,16 +78,17 @@ public class EntityDamageEvent extends EntityEvent implements Cancellable {
      * Sets the damage for the specified modifier.
      *
      * @param damage the scalar value of the damage's modifier
-     * @see #getFinalDamage()
-     * @throws IllegalArgumentException if type is null
+     * @throws IllegalArgumentException      if type is null
      * @throws UnsupportedOperationException if the caller does not support
-     *     the particular DamageModifier, or to rephrase, when {@link
-     *     #isApplicable(DamageModifier)} returns false
+     *                                       the particular DamageModifier, or to rephrase, when {@link
+     *                                       #isApplicable(DamageModifier)} returns false
+     * @see #getFinalDamage()
      */
     public void setDamage(DamageModifier type, double damage) throws IllegalArgumentException, UnsupportedOperationException {
         if (!modifiers.containsKey(type)) {
             throw type == null ? new IllegalArgumentException("Cannot have null DamageModifier") : new UnsupportedOperationException(type + " is not applicable to " + getEntity());
         }
+
         modifiers.put(type, damage);
     }
 
@@ -143,6 +142,7 @@ public class EntityDamageEvent extends EntityEvent implements Cancellable {
         for (DamageModifier modifier : MODIFIERS) {
             damage += getDamage(modifier);
         }
+
         return damage;
     }
 
@@ -186,6 +186,7 @@ public class EntityDamageEvent extends EntityEvent implements Cancellable {
             } else {
                 setDamage(modifier, Math.min(0, old - difference));
             }
+
             remaining += newVanilla;
             oldRemaining += oldVanilla;
         }
@@ -212,59 +213,56 @@ public class EntityDamageEvent extends EntityEvent implements Cancellable {
         return cause;
     }
 
-    @Override
-    public HandlerList getHandlers() {
-        return handlers;
-    }
-
-    public static HandlerList getHandlerList() {
-        return handlers;
-    }
-
     /**
      * An enum to specify the types of modifier
      */
     public enum DamageModifier {
+
         /**
          * This represents the amount of damage being done, also known as the
          * raw {@link EntityDamageEvent#getDamage()}.
          */
         BASE,
+
         /**
          * This represents the damage reduced by a wearing a helmet when hit
          * by a falling block.
          */
         HARD_HAT,
+
         /**
          * This represents  the damage reduction caused by blocking, only present for
          * {@link Player Players}.
          */
         BLOCKING,
+
         /**
          * This represents the damage reduction caused by wearing armor.
          */
         ARMOR,
+
         /**
          * This represents the damage reduction caused by the Resistance potion effect.
          */
         RESISTANCE,
+
         /**
          * This represents the damage reduction caused by the combination of:
          * <ul>
          * <li>
-         *     Armor enchantments
+         * Armor enchantments
          * </li><li>
-         *     Witch's potion resistance
+         * Witch's potion resistance
          * </li>
          * </ul>
          */
         MAGIC,
+
         /**
          * This represents the damage reduction caused by the absorption potion
          * effect.
          */
-        ABSORPTION,
-        ;
+        ABSORPTION,;
     }
 
     /**
@@ -278,42 +276,49 @@ public class EntityDamageEvent extends EntityEvent implements Cancellable {
          * Damage: 1 (Cactus)
          */
         CONTACT,
+
         /**
          * Damage caused when an entity attacks another entity.
          * <p>
          * Damage: variable
          */
         ENTITY_ATTACK,
+
         /**
          * Damage caused when attacked by a projectile.
          * <p>
          * Damage: variable
          */
         PROJECTILE,
+
         /**
          * Damage caused by being put in a block
          * <p>
          * Damage: 1
          */
         SUFFOCATION,
+
         /**
          * Damage caused when an entity falls a distance greater than 3 blocks
          * <p>
          * Damage: fall height - 3.0
          */
         FALL,
+
         /**
          * Damage caused by direct exposure to fire
          * <p>
          * Damage: 1
          */
         FIRE,
+
         /**
          * Damage caused due to burns caused by fire
          * <p>
          * Damage: 1
          */
         FIRE_TICK,
+
         /**
          * Damage caused due to a snowman melting
          * <p>
@@ -326,18 +331,21 @@ public class EntityDamageEvent extends EntityEvent implements Cancellable {
          * Damage: 4
          */
         LAVA,
+
         /**
          * Damage caused by running out of air while in water
          * <p>
          * Damage: 2
          */
         DROWNING,
+
         /**
          * Damage caused by being in the area when a block explodes.
          * <p>
          * Damage: variable
          */
         BLOCK_EXPLOSION,
+
         /**
          * Damage caused by being in the area when an entity, such as a
          * Creeper, explodes.
@@ -345,46 +353,54 @@ public class EntityDamageEvent extends EntityEvent implements Cancellable {
          * Damage: variable
          */
         ENTITY_EXPLOSION,
+
         /**
          * Damage caused by falling into the void
          * <p>
          * Damage: 4 for players
          */
         VOID,
+
         /**
          * Damage caused by being struck by lightning
          * <p>
          * Damage: 5
          */
         LIGHTNING,
+
         /**
          * Damage caused by committing suicide using the command "/kill"
          * <p>
          * Damage: 1000
          */
         SUICIDE,
+
         /**
          * Damage caused by starving due to having an empty hunger bar
          * <p>
          * Damage: 1
          */
         STARVATION,
+
         /**
          * Damage caused due to an ongoing poison effect
          * <p>
          * Damage: 1
          */
         POISON,
+
         /**
          * Damage caused by being hit by a damage potion or spell
          * <p>
          * Damage: variable
          */
         MAGIC,
+
         /**
          * Damage caused by Wither potion effect
          */
         WITHER,
+
         /**
          * Damage caused by being hit by a falling block which deals damage
          * <p>
@@ -393,6 +409,7 @@ public class EntityDamageEvent extends EntityEvent implements Cancellable {
          * Damage: variable
          */
         FALLING_BLOCK,
+
         /**
          * Damage caused in retaliation to another attack by the Thorns
          * enchantment.
@@ -400,6 +417,7 @@ public class EntityDamageEvent extends EntityEvent implements Cancellable {
          * Damage: 1-4 (Thorns)
          */
         THORNS,
+
         /**
          * Custom damage.
          * <p>
@@ -407,4 +425,23 @@ public class EntityDamageEvent extends EntityEvent implements Cancellable {
          */
         CUSTOM
     }
+
+    @Override
+    public boolean isCancelled() {
+        return cancelled;
+    }
+
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
+    }
+
+    @Override
+    public HandlerList getHandlers() {
+        return handlers;
+    }
+
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
 }
diff --git a/src/main/java/org/bukkit/event/entity/EntityDeathEvent.java b/src/main/java/org/bukkit/event/entity/EntityDeathEvent.java
index ab9e81f..2ab1939 100644
--- a/src/main/java/org/bukkit/event/entity/EntityDeathEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityDeathEvent.java
@@ -1,15 +1,18 @@
 package org.bukkit.event.entity;
 
-import java.util.List;
 import org.bukkit.entity.LivingEntity;
 import org.bukkit.event.HandlerList;
 import org.bukkit.inventory.ItemStack;
 
+import java.util.List;
+
 /**
  * Thrown whenever a LivingEntity dies
  */
 public class EntityDeathEvent extends EntityEvent {
+
     private static final HandlerList handlers = new HandlerList();
+
     private final List<ItemStack> drops;
     private int dropExp = 0;
 
diff --git a/src/main/java/org/bukkit/event/entity/EntityEvent.java b/src/main/java/org/bukkit/event/entity/EntityEvent.java
index c9a4ab3..e3f17e0 100644
--- a/src/main/java/org/bukkit/event/entity/EntityEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityEvent.java
@@ -8,6 +8,7 @@ import org.bukkit.event.Event;
  * Represents an Entity-related event
  */
 public abstract class EntityEvent extends Event {
+
     protected Entity entity;
 
     public EntityEvent(final Entity what) {
diff --git a/src/main/java/org/bukkit/event/entity/EntityExplodeEvent.java b/src/main/java/org/bukkit/event/entity/EntityExplodeEvent.java
index 287035d..626631e 100644
--- a/src/main/java/org/bukkit/event/entity/EntityExplodeEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityExplodeEvent.java
@@ -12,8 +12,10 @@ import java.util.List;
  * Called when an entity explodes
  */
 public class EntityExplodeEvent extends EntityEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
-    private boolean cancel;
+
+    private boolean cancelled;
     private final Location location;
     private final List<Block> blocks;
     private float yield;
@@ -23,15 +25,7 @@ public class EntityExplodeEvent extends EntityEvent implements Cancellable {
         this.location = location;
         this.blocks = blocks;
         this.yield = yield;
-        this.cancel = false;
-    }
-
-    public boolean isCancelled() {
-        return cancel;
-    }
-
-    public void setCancelled(boolean cancel) {
-        this.cancel = cancel;
+        this.cancelled = false;
     }
 
     /**
@@ -75,6 +69,16 @@ public class EntityExplodeEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
+    public boolean isCancelled() {
+        return cancelled;
+    }
+
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
+    }
+
+    @Override
     public HandlerList getHandlers() {
         return handlers;
     }
diff --git a/src/main/java/org/bukkit/event/entity/EntityInteractEvent.java b/src/main/java/org/bukkit/event/entity/EntityInteractEvent.java
index 1c4e100..cc4f096 100644
--- a/src/main/java/org/bukkit/event/entity/EntityInteractEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityInteractEvent.java
@@ -9,23 +9,16 @@ import org.bukkit.event.HandlerList;
  * Called when an entity interacts with an object
  */
 public class EntityInteractEvent extends EntityEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
-    protected Block block;
     private boolean cancelled;
+    protected Block block;
 
     public EntityInteractEvent(final Entity entity, final Block block) {
         super(entity);
         this.block = block;
     }
 
-    public boolean isCancelled() {
-        return cancelled;
-    }
-
-    public void setCancelled(boolean cancel) {
-        cancelled = cancel;
-    }
-
     /**
      * Returns the involved block
      *
@@ -36,6 +29,16 @@ public class EntityInteractEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
+    public boolean isCancelled() {
+        return cancelled;
+    }
+
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
+    }
+
+    @Override
     public HandlerList getHandlers() {
         return handlers;
     }
diff --git a/src/main/java/org/bukkit/event/entity/EntityPortalEnterEvent.java b/src/main/java/org/bukkit/event/entity/EntityPortalEnterEvent.java
index 87d57b0..5e478cc 100644
--- a/src/main/java/org/bukkit/event/entity/EntityPortalEnterEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityPortalEnterEvent.java
@@ -1,13 +1,14 @@
 package org.bukkit.event.entity;
 
-import org.bukkit.entity.Entity;
 import org.bukkit.Location;
+import org.bukkit.entity.Entity;
 import org.bukkit.event.HandlerList;
 
 /**
  * Called when an entity comes into contact with a portal
  */
 public class EntityPortalEnterEvent extends EntityEvent {
+
     private static final HandlerList handlers = new HandlerList();
     private final Location location;
 
diff --git a/src/main/java/org/bukkit/event/entity/EntityPortalEvent.java b/src/main/java/org/bukkit/event/entity/EntityPortalEvent.java
index 835c054..4d15ae2 100644
--- a/src/main/java/org/bukkit/event/entity/EntityPortalEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityPortalEvent.java
@@ -12,7 +12,9 @@ import org.bukkit.event.HandlerList;
  * For players see {@link org.bukkit.event.player.PlayerPortalEvent}
  */
 public class EntityPortalEvent extends EntityTeleportEvent {
+
     private static final HandlerList handlers = new HandlerList();
+    
     protected boolean useTravelAgent = true;
     protected TravelAgent travelAgent;
 
diff --git a/src/main/java/org/bukkit/event/entity/EntityPortalExitEvent.java b/src/main/java/org/bukkit/event/entity/EntityPortalExitEvent.java
index 682fe59..8cca62e 100644
--- a/src/main/java/org/bukkit/event/entity/EntityPortalExitEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityPortalExitEvent.java
@@ -12,7 +12,9 @@ import org.bukkit.util.Vector;
  * successfully exited the portal.
  */
 public class EntityPortalExitEvent extends EntityTeleportEvent {
+
     private static final HandlerList handlers = new HandlerList();
+
     private Vector before;
     private Vector after;
 
diff --git a/src/main/java/org/bukkit/event/entity/EntityRegainHealthEvent.java b/src/main/java/org/bukkit/event/entity/EntityRegainHealthEvent.java
index b4291b0..af1f812 100644
--- a/src/main/java/org/bukkit/event/entity/EntityRegainHealthEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityRegainHealthEvent.java
@@ -9,7 +9,9 @@ import org.bukkit.util.NumberConversions;
  * Stores data for health-regain events
  */
 public class EntityRegainHealthEvent extends EntityEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
+
     private boolean cancelled;
     private double amount;
     private final RegainReason regainReason;
@@ -63,33 +65,6 @@ public class EntityRegainHealthEvent extends EntityEvent implements Cancellable
         setAmount(amount);
     }
 
-    public boolean isCancelled() {
-        return cancelled;
-    }
-
-    public void setCancelled(boolean cancel) {
-        cancelled = cancel;
-    }
-
-    /**
-     * Gets the reason for why the entity is regaining health
-     *
-     * @return A RegainReason detailing the reason for the entity regaining
-     *     health
-     */
-    public RegainReason getRegainReason() {
-        return regainReason;
-    }
-
-    @Override
-    public HandlerList getHandlers() {
-        return handlers;
-    }
-
-    public static HandlerList getHandlerList() {
-        return handlers;
-    }
-
     /**
      * An enum to specify the type of health regaining that is occurring
      */
@@ -100,38 +75,75 @@ public class EntityRegainHealthEvent extends EntityEvent implements Cancellable
          * (difficulty=0)
          */
         REGEN,
+
         /**
          * When a player regains health from regenerating due to their hunger
          * being satisfied
          */
         SATIATED,
+
         /**
          * When a player regains health from eating consumables
          */
         EATING,
+
         /**
          * When an ender dragon regains health from an ender crystal
          */
         ENDER_CRYSTAL,
+
         /**
          * When a player is healed by a potion or spell
          */
         MAGIC,
+
         /**
          * When a player is healed over time by a potion or spell
          */
         MAGIC_REGEN,
+
         /**
          * When a wither is filling its health during spawning
          */
         WITHER_SPAWN,
+
         /**
          * When an entity is damaged by the Wither potion effect
          */
         WITHER,
+
         /**
          * Any other reason not covered by the reasons above
          */
         CUSTOM
     }
+
+    /**
+     * Gets the reason for why the entity is regaining health
+     *
+     * @return A RegainReason detailing the reason for the entity regaining
+     * health
+     */
+    public RegainReason getRegainReason() {
+        return regainReason;
+    }
+
+    @Override
+    public boolean isCancelled() {
+        return cancelled;
+    }
+
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
+    }
+
+    @Override
+    public HandlerList getHandlers() {
+        return handlers;
+    }
+
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
 }
diff --git a/src/main/java/org/bukkit/event/entity/EntityShootBowEvent.java b/src/main/java/org/bukkit/event/entity/EntityShootBowEvent.java
index f8c91a1..44f4901 100644
--- a/src/main/java/org/bukkit/event/entity/EntityShootBowEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityShootBowEvent.java
@@ -11,11 +11,13 @@ import org.bukkit.inventory.ItemStack;
  * Called when a LivingEntity shoots a bow firing an arrow
  */
 public class EntityShootBowEvent extends EntityEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
+
+    private boolean cancelled;
     private final ItemStack bow;
     private Entity projectile;
     private final float force;
-    private boolean cancelled;
 
     public EntityShootBowEvent(final LivingEntity shooter, final ItemStack bow, final Projectile projectile, final float force) {
         super(shooter);
@@ -65,12 +67,14 @@ public class EntityShootBowEvent extends EntityEvent implements Cancellable {
         return force;
     }
 
+    @Override
     public boolean isCancelled() {
         return cancelled;
     }
 
-    public void setCancelled(boolean cancel) {
-        cancelled = cancel;
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/event/entity/EntitySpawnEvent.java b/src/main/java/org/bukkit/event/entity/EntitySpawnEvent.java
index 5dcf98f..25707ec 100644
--- a/src/main/java/org/bukkit/event/entity/EntitySpawnEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntitySpawnEvent.java
@@ -10,21 +10,15 @@ import org.bukkit.event.HandlerList;
  * If an Entity Spawn event is cancelled, the entity will not spawn.
  */
 public class EntitySpawnEvent extends EntityEvent implements org.bukkit.event.Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
-    private boolean canceled;
+
+    private boolean cancelled;
 
     public EntitySpawnEvent(final Entity spawnee) {
         super(spawnee);
     }
 
-    public boolean isCancelled() {
-        return canceled;
-    }
-
-    public void setCancelled(boolean cancel) {
-        canceled = cancel;
-    }
-
     /**
      * Gets the location at which the entity is spawning.
      *
@@ -35,6 +29,16 @@ public class EntitySpawnEvent extends EntityEvent implements org.bukkit.event.Ca
     }
 
     @Override
+    public boolean isCancelled() {
+        return cancelled;
+    }
+
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
+    }
+
+    @Override
     public HandlerList getHandlers() {
         return handlers;
     }
diff --git a/src/main/java/org/bukkit/event/entity/EntityTameEvent.java b/src/main/java/org/bukkit/event/entity/EntityTameEvent.java
index f105817..ad5c75d 100644
--- a/src/main/java/org/bukkit/event/entity/EntityTameEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityTameEvent.java
@@ -9,7 +9,9 @@ import org.bukkit.event.HandlerList;
  * Thrown when a LivingEntity is tamed
  */
 public class EntityTameEvent extends EntityEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
+
     private boolean cancelled;
     private final AnimalTamer owner;
 
@@ -18,26 +20,28 @@ public class EntityTameEvent extends EntityEvent implements Cancellable {
         this.owner = owner;
     }
 
+    /**
+     * Gets the owning AnimalTamer
+     *
+     * @return the owning AnimalTamer
+     */
+    public AnimalTamer getOwner() {
+        return owner;
+    }
+
     @Override
     public LivingEntity getEntity() {
         return (LivingEntity) entity;
     }
 
+    @Override
     public boolean isCancelled() {
         return cancelled;
     }
 
-    public void setCancelled(boolean cancel) {
-        cancelled = cancel;
-    }
-
-    /**
-     * Gets the owning AnimalTamer
-     *
-     * @return the owning AnimalTamer
-     */
-    public AnimalTamer getOwner() {
-        return owner;
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/event/entity/EntityTargetEvent.java b/src/main/java/org/bukkit/event/entity/EntityTargetEvent.java
index 1f7af4d..90eeed5 100644
--- a/src/main/java/org/bukkit/event/entity/EntityTargetEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityTargetEvent.java
@@ -8,8 +8,10 @@ import org.bukkit.event.HandlerList;
  * Called when a creature targets or untargets another entity
  */
 public class EntityTargetEvent extends EntityEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
-    private boolean cancel = false;
+
+    private boolean cancelled = false;
     private Entity target;
     private final TargetReason reason;
 
@@ -19,14 +21,6 @@ public class EntityTargetEvent extends EntityEvent implements Cancellable {
         this.reason = reason;
     }
 
-    public boolean isCancelled() {
-        return cancel;
-    }
-
-    public void setCancelled(boolean cancel) {
-        this.cancel = cancel;
-    }
-
     /**
      * Returns the reason for the targeting
      *
@@ -64,15 +58,6 @@ public class EntityTargetEvent extends EntityEvent implements Cancellable {
         this.target = target;
     }
 
-    @Override
-    public HandlerList getHandlers() {
-        return handlers;
-    }
-
-    public static HandlerList getHandlerList() {
-        return handlers;
-    }
-
     /**
      * An enum to specify the reason for the targeting
      */
@@ -138,4 +123,23 @@ public class EntityTargetEvent extends EntityEvent implements Cancellable {
          */
         CUSTOM
     }
+
+    @Override
+    public HandlerList getHandlers() {
+        return handlers;
+    }
+
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
+
+    @Override
+    public boolean isCancelled() {
+        return cancelled;
+    }
+
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
+    }
 }
diff --git a/src/main/java/org/bukkit/event/entity/EntityTargetLivingEntityEvent.java b/src/main/java/org/bukkit/event/entity/EntityTargetLivingEntityEvent.java
index cd9aea1..93bb73e 100644
--- a/src/main/java/org/bukkit/event/entity/EntityTargetLivingEntityEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityTargetLivingEntityEvent.java
@@ -7,11 +7,13 @@ import org.bukkit.entity.LivingEntity;
  * Called when an Entity targets a {@link LivingEntity} and can only target
  * LivingEntity's.
  */
-public class EntityTargetLivingEntityEvent extends EntityTargetEvent{
+public class EntityTargetLivingEntityEvent extends EntityTargetEvent {
+
     public EntityTargetLivingEntityEvent(final Entity entity, final LivingEntity target, final TargetReason reason) {
         super(entity, target, reason);
     }
 
+    @Override
     public LivingEntity getTarget() {
         return (LivingEntity) super.getTarget();
     }
diff --git a/src/main/java/org/bukkit/event/entity/EntityTeleportEvent.java b/src/main/java/org/bukkit/event/entity/EntityTeleportEvent.java
index 619f8d4..dad9925 100644
--- a/src/main/java/org/bukkit/event/entity/EntityTeleportEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityTeleportEvent.java
@@ -10,8 +10,10 @@ import org.bukkit.event.HandlerList;
  * from one location to another.
  */
 public class EntityTeleportEvent extends EntityEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
-    private boolean cancel;
+
+    private boolean cancelled;
     private Location from;
     private Location to;
 
@@ -19,15 +21,7 @@ public class EntityTeleportEvent extends EntityEvent implements Cancellable {
         super(what);
         this.from = from;
         this.to = to;
-        this.cancel = false;
-    }
-
-    public boolean isCancelled() {
-        return cancel;
-    }
-
-    public void setCancelled(boolean cancel) {
-        this.cancel = cancel;
+        this.cancelled = false;
     }
 
     /**
@@ -67,6 +61,16 @@ public class EntityTeleportEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
+    public boolean isCancelled() {
+        return cancelled;
+    }
+
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
+    }
+
+    @Override
     public HandlerList getHandlers() {
         return handlers;
     }
diff --git a/src/main/java/org/bukkit/event/entity/EntityUnleashEvent.java b/src/main/java/org/bukkit/event/entity/EntityUnleashEvent.java
index da7e46c..8b4b2f8 100644
--- a/src/main/java/org/bukkit/event/entity/EntityUnleashEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityUnleashEvent.java
@@ -7,7 +7,9 @@ import org.bukkit.event.HandlerList;
  * Called immediately prior to an entity being unleashed.
  */
 public class EntityUnleashEvent extends EntityEvent {
+
     private static final HandlerList handlers = new HandlerList();
+
     private final UnleashReason reason;
 
     public EntityUnleashEvent(Entity entity, UnleashReason reason) {
@@ -24,29 +26,33 @@ public class EntityUnleashEvent extends EntityEvent {
         return reason;
     }
 
-    @Override
-    public HandlerList getHandlers() {
-        return handlers;
-    }
-
-    public static HandlerList getHandlerList() {
-        return handlers;
-    }
-
     public enum UnleashReason {
         /**
          * When the entity's leashholder has died or logged out, and so is
          * unleashed
          */
         HOLDER_GONE,
+
         /**
          * When the entity's leashholder attempts to unleash it
          */
         PLAYER_UNLEASH,
+
         /**
          * When the entity's leashholder is more than 10 blocks away
          */
         DISTANCE,
-        UNKNOWN;
+
+        UNKNOWN,
+        PLUGIN
+    }
+
+    @Override
+    public HandlerList getHandlers() {
+        return handlers;
+    }
+
+    public static HandlerList getHandlerList() {
+        return handlers;
     }
 }
diff --git a/src/main/java/org/bukkit/event/entity/ExpBottleEvent.java b/src/main/java/org/bukkit/event/entity/ExpBottleEvent.java
index 4f64424..8b0f814 100644
--- a/src/main/java/org/bukkit/event/entity/ExpBottleEvent.java
+++ b/src/main/java/org/bukkit/event/entity/ExpBottleEvent.java
@@ -7,7 +7,9 @@ import org.bukkit.event.HandlerList;
  * Called when a ThrownExpBottle hits and releases experience.
  */
 public class ExpBottleEvent extends ProjectileHitEvent {
+
     private static final HandlerList handlers = new HandlerList();
+
     private int exp;
     private boolean showEffect = true;
 
@@ -36,7 +38,7 @@ public class ExpBottleEvent extends ProjectileHitEvent {
      * This does not change the experience created.
      *
      * @param showEffect true indicates the effect will be shown, false
-     *     indicates no effect will be shown
+     *                   indicates no effect will be shown
      */
     public void setShowEffect(final boolean showEffect) {
         this.showEffect = showEffect;
diff --git a/src/main/java/org/bukkit/event/entity/ExplosionPrimeEvent.java b/src/main/java/org/bukkit/event/entity/ExplosionPrimeEvent.java
index 7ca6a55..83bedc9 100644
--- a/src/main/java/org/bukkit/event/entity/ExplosionPrimeEvent.java
+++ b/src/main/java/org/bukkit/event/entity/ExplosionPrimeEvent.java
@@ -9,14 +9,15 @@ import org.bukkit.event.HandlerList;
  * Called when an entity has made a decision to explode.
  */
 public class ExplosionPrimeEvent extends EntityEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
-    private boolean cancel;
+
+    private boolean cancelled = false;
     private float radius;
     private boolean fire;
 
     public ExplosionPrimeEvent(final Entity what, final float radius, final boolean fire) {
         super(what);
-        this.cancel = false;
         this.radius = radius;
         this.fire = fire;
     }
@@ -25,14 +26,6 @@ public class ExplosionPrimeEvent extends EntityEvent implements Cancellable {
         this(explosive, explosive.getYield(), explosive.isIncendiary());
     }
 
-    public boolean isCancelled() {
-        return cancel;
-    }
-
-    public void setCancelled(boolean cancel) {
-        this.cancel = cancel;
-    }
-
     /**
      * Gets the radius of the explosion
      *
@@ -70,6 +63,16 @@ public class ExplosionPrimeEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
+    public boolean isCancelled() {
+        return cancelled;
+    }
+
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
+    }
+
+    @Override
     public HandlerList getHandlers() {
         return handlers;
     }
diff --git a/src/main/java/org/bukkit/event/entity/FoodLevelChangeEvent.java b/src/main/java/org/bukkit/event/entity/FoodLevelChangeEvent.java
index f6e2472..7f1d660 100644
--- a/src/main/java/org/bukkit/event/entity/FoodLevelChangeEvent.java
+++ b/src/main/java/org/bukkit/event/entity/FoodLevelChangeEvent.java
@@ -8,8 +8,10 @@ import org.bukkit.event.HandlerList;
  * Called when a human entity's food level changes
  */
 public class FoodLevelChangeEvent extends EntityEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
-    private boolean cancel = false;
+
+    private boolean cancelled = false;
     private int level;
 
     public FoodLevelChangeEvent(final HumanEntity what, final int level) {
@@ -39,21 +41,22 @@ public class FoodLevelChangeEvent extends EntityEvent implements Cancellable {
      * should be set to
      *
      * @param level the resultant food level that the entity involved in this
-     *     event should be set to
+     *              event should be set to
      */
     public void setFoodLevel(int level) {
         if (level > 20) level = 20;
         else if (level < 0) level = 0;
-
         this.level = level;
     }
 
+    @Override
     public boolean isCancelled() {
-        return cancel;
+        return cancelled;
     }
 
-    public void setCancelled(boolean cancel) {
-        this.cancel = cancel;
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/event/entity/HorseJumpEvent.java b/src/main/java/org/bukkit/event/entity/HorseJumpEvent.java
index fad2468..db8a2c1 100644
--- a/src/main/java/org/bukkit/event/entity/HorseJumpEvent.java
+++ b/src/main/java/org/bukkit/event/entity/HorseJumpEvent.java
@@ -8,8 +8,10 @@ import org.bukkit.event.HandlerList;
  * Called when a horse jumps.
  */
 public class HorseJumpEvent extends EntityEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
-    private boolean cancelled;
+
+    private boolean cancelled = false;
     private float power;
 
     public HorseJumpEvent(final Horse horse, final float power) {
@@ -17,14 +19,6 @@ public class HorseJumpEvent extends EntityEvent implements Cancellable {
         this.power = power;
     }
 
-    public boolean isCancelled() {
-        return cancelled;
-    }
-
-    public void setCancelled(boolean cancel) {
-        cancelled = cancel;
-    }
-
     @Override
     public Horse getEntity() {
         return (Horse) entity;
@@ -68,6 +62,16 @@ public class HorseJumpEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
+    public boolean isCancelled() {
+        return cancelled;
+    }
+
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
+    }
+
+    @Override
     public HandlerList getHandlers() {
         return handlers;
     }
diff --git a/src/main/java/org/bukkit/event/entity/ItemDespawnEvent.java b/src/main/java/org/bukkit/event/entity/ItemDespawnEvent.java
index 356e4bd..5582c1d 100644
--- a/src/main/java/org/bukkit/event/entity/ItemDespawnEvent.java
+++ b/src/main/java/org/bukkit/event/entity/ItemDespawnEvent.java
@@ -13,8 +13,10 @@ import org.bukkit.event.HandlerList;
  * minutes. This behavior is not guaranteed and may change in future versions.
  */
 public class ItemDespawnEvent extends EntityEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
-    private boolean canceled;
+
+    private boolean cancelled;
     private final Location location;
 
     public ItemDespawnEvent(final Item despawnee, final Location loc) {
@@ -22,14 +24,6 @@ public class ItemDespawnEvent extends EntityEvent implements Cancellable {
         location = loc;
     }
 
-    public boolean isCancelled() {
-        return canceled;
-    }
-
-    public void setCancelled(boolean cancel) {
-        canceled = cancel;
-    }
-
     @Override
     public Item getEntity() {
         return (Item) entity;
@@ -45,6 +39,16 @@ public class ItemDespawnEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
+    public boolean isCancelled() {
+        return cancelled;
+    }
+
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
+    }
+
+    @Override
     public HandlerList getHandlers() {
         return handlers;
     }
diff --git a/src/main/java/org/bukkit/event/entity/ItemSpawnEvent.java b/src/main/java/org/bukkit/event/entity/ItemSpawnEvent.java
index 776f8e7..de34077 100644
--- a/src/main/java/org/bukkit/event/entity/ItemSpawnEvent.java
+++ b/src/main/java/org/bukkit/event/entity/ItemSpawnEvent.java
@@ -7,6 +7,7 @@ import org.bukkit.entity.Item;
  * Called when an item is spawned into a world
  */
 public class ItemSpawnEvent extends EntitySpawnEvent {
+
     public ItemSpawnEvent(final Item spawnee) {
         super(spawnee);
     }
diff --git a/src/main/java/org/bukkit/event/entity/PigZapEvent.java b/src/main/java/org/bukkit/event/entity/PigZapEvent.java
index aa80ebf..9622e95 100644
--- a/src/main/java/org/bukkit/event/entity/PigZapEvent.java
+++ b/src/main/java/org/bukkit/event/entity/PigZapEvent.java
@@ -10,8 +10,10 @@ import org.bukkit.event.HandlerList;
  * Stores data for pigs being zapped
  */
 public class PigZapEvent extends EntityEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
-    private boolean canceled;
+
+    private boolean cancelled;
     private final PigZombie pigzombie;
     private final LightningStrike bolt;
 
@@ -21,14 +23,6 @@ public class PigZapEvent extends EntityEvent implements Cancellable {
         this.pigzombie = pigzombie;
     }
 
-    public boolean isCancelled() {
-        return canceled;
-    }
-
-    public void setCancelled(boolean cancel) {
-        canceled = cancel;
-    }
-
     @Override
     public Pig getEntity() {
         return (Pig) entity;
@@ -54,6 +48,16 @@ public class PigZapEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
+    public boolean isCancelled() {
+        return cancelled;
+    }
+
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
+    }
+
+    @Override
     public HandlerList getHandlers() {
         return handlers;
     }
diff --git a/src/main/java/org/bukkit/event/entity/PlayerDeathEvent.java b/src/main/java/org/bukkit/event/entity/PlayerDeathEvent.java
index 6c9b794..745e7c0 100644
--- a/src/main/java/org/bukkit/event/entity/PlayerDeathEvent.java
+++ b/src/main/java/org/bukkit/event/entity/PlayerDeathEvent.java
@@ -1,16 +1,17 @@
 package org.bukkit.event.entity;
 
-import java.util.List;
-
 import org.bukkit.entity.Player;
 import org.bukkit.inventory.ItemStack;
 
+import java.util.List;
+
 /**
  * Thrown whenever a {@link Player} dies
  */
 public class PlayerDeathEvent extends EntityDeathEvent {
+
     private int newExp = 0;
-    private String deathMessage = "";
+    private String deathMessage;
     private int newLevel = 0;
     private int newTotalExp = 0;
     private boolean keepLevel = false;
@@ -38,21 +39,21 @@ public class PlayerDeathEvent extends EntityDeathEvent {
     }
 
     /**
-     * Set the death message that will appear to everyone on the server.
+     * Get the death message that will appear to everyone on the server.
      *
-     * @param deathMessage Message to appear to other players on the server.
+     * @return Message to appear to other players on the server.
      */
-    public void setDeathMessage(String deathMessage) {
-        this.deathMessage = deathMessage;
+    public String getDeathMessage() {
+        return deathMessage;
     }
 
     /**
-     * Get the death message that will appear to everyone on the server.
+     * Set the death message that will appear to everyone on the server.
      *
-     * @return Message to appear to other players on the server.
+     * @param deathMessage Message to appear to other players on the server.
      */
-    public String getDeathMessage() {
-        return deathMessage;
+    public void setDeathMessage(String deathMessage) {
+        this.deathMessage = deathMessage;
     }
 
     /**
diff --git a/src/main/java/org/bukkit/event/entity/PlayerLeashEntityEvent.java b/src/main/java/org/bukkit/event/entity/PlayerLeashEntityEvent.java
index 74d458a..8d43e66 100644
--- a/src/main/java/org/bukkit/event/entity/PlayerLeashEntityEvent.java
+++ b/src/main/java/org/bukkit/event/entity/PlayerLeashEntityEvent.java
@@ -10,10 +10,12 @@ import org.bukkit.event.HandlerList;
  * Called immediately prior to a creature being leashed by a player.
  */
 public class PlayerLeashEntityEvent extends Event implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
+
+    private boolean cancelled = false;
     private final Entity leashHolder;
     private final Entity entity;
-    private boolean cancelled = false;
     private final Player player;
 
     public PlayerLeashEntityEvent(Entity what, Entity leashHolder, Player leasher) {
@@ -50,19 +52,21 @@ public class PlayerLeashEntityEvent extends Event implements Cancellable {
     }
 
     @Override
-    public HandlerList getHandlers() {
-        return handlers;
+    public boolean isCancelled() {
+        return this.cancelled;
     }
 
-    public static HandlerList getHandlerList() {
-        return handlers;
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
     }
 
-    public boolean isCancelled() {
-        return this.cancelled;
+    @Override
+    public HandlerList getHandlers() {
+        return handlers;
     }
 
-    public void setCancelled(boolean cancel) {
-        this.cancelled  = cancel;
+    public static HandlerList getHandlerList() {
+        return handlers;
     }
 }
diff --git a/src/main/java/org/bukkit/event/entity/PotionSplashEvent.java b/src/main/java/org/bukkit/event/entity/PotionSplashEvent.java
index b9840de..a52f79a 100644
--- a/src/main/java/org/bukkit/event/entity/PotionSplashEvent.java
+++ b/src/main/java/org/bukkit/event/entity/PotionSplashEvent.java
@@ -1,26 +1,27 @@
 package org.bukkit.event.entity;
 
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Map;
-
 import org.apache.commons.lang.Validate;
 import org.bukkit.entity.LivingEntity;
 import org.bukkit.entity.ThrownPotion;
 import org.bukkit.event.Cancellable;
 import org.bukkit.event.HandlerList;
 
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Map;
+
 /**
  * Called when a splash potion hits an area
  */
 public class PotionSplashEvent extends ProjectileHitEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
+
     private boolean cancelled;
     private final Map<LivingEntity, Double> affectedEntities;
 
     public PotionSplashEvent(final ThrownPotion potion, final Map<LivingEntity, Double> affectedEntities) {
         super(potion);
-
         this.affectedEntities = affectedEntities;
     }
 
@@ -35,7 +36,7 @@ public class PotionSplashEvent extends ProjectileHitEvent implements Cancellable
      * @return The thrown potion entity
      */
     public ThrownPotion getPotion() {
-        return (ThrownPotion) getEntity();
+        return getEntity();
     }
 
     /**
@@ -53,7 +54,7 @@ public class PotionSplashEvent extends ProjectileHitEvent implements Cancellable
      *
      * @param entity Which entity to get intensity for
      * @return intensity relative to maximum effect; 0.0: not affected; 1.0:
-     *     fully hit by potion effects
+     * fully hit by potion effects
      */
     public double getIntensity(LivingEntity entity) {
         Double intensity = affectedEntities.get(entity);
@@ -63,7 +64,7 @@ public class PotionSplashEvent extends ProjectileHitEvent implements Cancellable
     /**
      * Overwrites the intensity for a given entity
      *
-     * @param entity For which entity to define a new intensity
+     * @param entity    For which entity to define a new intensity
      * @param intensity relative to maximum effect
      */
     public void setIntensity(LivingEntity entity, double intensity) {
@@ -75,12 +76,14 @@ public class PotionSplashEvent extends ProjectileHitEvent implements Cancellable
         }
     }
 
+    @Override
     public boolean isCancelled() {
         return cancelled;
     }
 
-    public void setCancelled(boolean cancel) {
-        cancelled = cancel;
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/event/entity/ProjectileHitEvent.java b/src/main/java/org/bukkit/event/entity/ProjectileHitEvent.java
index 25ae832..1ba4882 100644
--- a/src/main/java/org/bukkit/event/entity/ProjectileHitEvent.java
+++ b/src/main/java/org/bukkit/event/entity/ProjectileHitEvent.java
@@ -7,6 +7,7 @@ import org.bukkit.event.HandlerList;
  * Called when a projectile hits an object
  */
 public class ProjectileHitEvent extends EntityEvent {
+
     private static final HandlerList handlers = new HandlerList();
 
     public ProjectileHitEvent(final Projectile projectile) {
@@ -26,5 +27,4 @@ public class ProjectileHitEvent extends EntityEvent {
     public static HandlerList getHandlerList() {
         return handlers;
     }
-
 }
diff --git a/src/main/java/org/bukkit/event/entity/ProjectileLaunchEvent.java b/src/main/java/org/bukkit/event/entity/ProjectileLaunchEvent.java
index 0c9190c..b30d972 100644
--- a/src/main/java/org/bukkit/event/entity/ProjectileLaunchEvent.java
+++ b/src/main/java/org/bukkit/event/entity/ProjectileLaunchEvent.java
@@ -9,24 +9,28 @@ import org.bukkit.event.HandlerList;
  * Called when a projectile is launched.
  */
 public class ProjectileLaunchEvent extends EntityEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
+
     private boolean cancelled;
 
     public ProjectileLaunchEvent(Entity what) {
         super(what);
     }
 
-    public boolean isCancelled() {
-        return cancelled;
+    @Override
+    public Projectile getEntity() {
+        return (Projectile) entity;
     }
 
-    public void setCancelled(boolean cancel) {
-        cancelled = cancel;
+    @Override
+    public boolean isCancelled() {
+        return cancelled;
     }
 
     @Override
-    public Projectile getEntity() {
-        return (Projectile) entity;
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/event/entity/SheepDyeWoolEvent.java b/src/main/java/org/bukkit/event/entity/SheepDyeWoolEvent.java
index 4c17fea..fb7cd0f 100644
--- a/src/main/java/org/bukkit/event/entity/SheepDyeWoolEvent.java
+++ b/src/main/java/org/bukkit/event/entity/SheepDyeWoolEvent.java
@@ -9,24 +9,18 @@ import org.bukkit.event.HandlerList;
  * Called when a sheep's wool is dyed
  */
 public class SheepDyeWoolEvent extends EntityEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
-    private boolean cancel;
+
+    private boolean cancelled;
     private DyeColor color;
 
     public SheepDyeWoolEvent(final Sheep sheep, final DyeColor color) {
         super(sheep);
-        this.cancel = false;
+        this.cancelled = false;
         this.color = color;
     }
 
-    public boolean isCancelled() {
-        return cancel;
-    }
-
-    public void setCancelled(boolean cancel) {
-        this.cancel = cancel;
-    }
-
     @Override
     public Sheep getEntity() {
         return (Sheep) entity;
@@ -51,6 +45,16 @@ public class SheepDyeWoolEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
+    public boolean isCancelled() {
+        return cancelled;
+    }
+
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
+    }
+
+    @Override
     public HandlerList getHandlers() {
         return handlers;
     }
@@ -58,5 +62,4 @@ public class SheepDyeWoolEvent extends EntityEvent implements Cancellable {
     public static HandlerList getHandlerList() {
         return handlers;
     }
-
 }
diff --git a/src/main/java/org/bukkit/event/entity/SheepRegrowWoolEvent.java b/src/main/java/org/bukkit/event/entity/SheepRegrowWoolEvent.java
index e836f7b..16ea00a 100644
--- a/src/main/java/org/bukkit/event/entity/SheepRegrowWoolEvent.java
+++ b/src/main/java/org/bukkit/event/entity/SheepRegrowWoolEvent.java
@@ -8,25 +8,28 @@ import org.bukkit.event.HandlerList;
  * Called when a sheep regrows its wool
  */
 public class SheepRegrowWoolEvent extends EntityEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
-    private boolean cancel;
+
+    private boolean cancelled = false;
 
     public SheepRegrowWoolEvent(final Sheep sheep) {
         super(sheep);
-        this.cancel = false;
     }
 
-    public boolean isCancelled() {
-        return cancel;
+    @Override
+    public Sheep getEntity() {
+        return (Sheep) entity;
     }
 
-    public void setCancelled(boolean cancel) {
-        this.cancel = cancel;
+    @Override
+    public boolean isCancelled() {
+        return cancelled;
     }
 
     @Override
-    public Sheep getEntity() {
-        return (Sheep) entity;
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
     }
 
     @Override
@@ -37,5 +40,4 @@ public class SheepRegrowWoolEvent extends EntityEvent implements Cancellable {
     public static HandlerList getHandlerList() {
         return handlers;
     }
-
 }
diff --git a/src/main/java/org/bukkit/event/entity/SlimeSplitEvent.java b/src/main/java/org/bukkit/event/entity/SlimeSplitEvent.java
index 4b99587..eaf0ce6 100644
--- a/src/main/java/org/bukkit/event/entity/SlimeSplitEvent.java
+++ b/src/main/java/org/bukkit/event/entity/SlimeSplitEvent.java
@@ -8,8 +8,10 @@ import org.bukkit.event.HandlerList;
  * Called when a Slime splits into smaller Slimes upon death
  */
 public class SlimeSplitEvent extends EntityEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
-    private boolean cancel = false;
+
+    private boolean cancelled = false;
     private int count;
 
     public SlimeSplitEvent(final Slime slime, final int count) {
@@ -17,14 +19,6 @@ public class SlimeSplitEvent extends EntityEvent implements Cancellable {
         this.count = count;
     }
 
-    public boolean isCancelled() {
-        return cancel;
-    }
-
-    public void setCancelled(boolean cancel) {
-        this.cancel = cancel;
-    }
-
     @Override
     public Slime getEntity() {
         return (Slime) entity;
@@ -49,6 +43,16 @@ public class SlimeSplitEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
+    public boolean isCancelled() {
+        return cancelled;
+    }
+
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
+    }
+
+    @Override
     public HandlerList getHandlers() {
         return handlers;
     }
diff --git a/src/main/java/org/bukkit/event/entity/SpawnerSpawnEvent.java b/src/main/java/org/bukkit/event/entity/SpawnerSpawnEvent.java
index 1acb3c4..c0ad187 100644
--- a/src/main/java/org/bukkit/event/entity/SpawnerSpawnEvent.java
+++ b/src/main/java/org/bukkit/event/entity/SpawnerSpawnEvent.java
@@ -9,6 +9,7 @@ import org.bukkit.entity.Entity;
  * If a Spawner Spawn event is cancelled, the entity will not spawn.
  */
 public class SpawnerSpawnEvent extends EntitySpawnEvent {
+
     private final CreatureSpawner spawner;
 
     public SpawnerSpawnEvent(final Entity spawnee, final CreatureSpawner spawner) {
diff --git a/src/main/java/org/bukkit/event/hanging/HangingBreakByEntityEvent.java b/src/main/java/org/bukkit/event/hanging/HangingBreakByEntityEvent.java
index 80851ed..b7088f1 100644
--- a/src/main/java/org/bukkit/event/hanging/HangingBreakByEntityEvent.java
+++ b/src/main/java/org/bukkit/event/hanging/HangingBreakByEntityEvent.java
@@ -7,6 +7,7 @@ import org.bukkit.entity.Hanging;
  * Triggered when a hanging entity is removed by an entity
  */
 public class HangingBreakByEntityEvent extends HangingBreakEvent {
+
     private final Entity remover;
 
     public HangingBreakByEntityEvent(final Hanging hanging, final Entity remover) {
diff --git a/src/main/java/org/bukkit/event/hanging/HangingBreakEvent.java b/src/main/java/org/bukkit/event/hanging/HangingBreakEvent.java
index 87bbdcb..9686c34 100644
--- a/src/main/java/org/bukkit/event/hanging/HangingBreakEvent.java
+++ b/src/main/java/org/bukkit/event/hanging/HangingBreakEvent.java
@@ -8,7 +8,9 @@ import org.bukkit.event.HandlerList;
  * Triggered when a hanging entity is removed
  */
 public class HangingBreakEvent extends HangingEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
+
     private boolean cancelled;
     private final HangingBreakEvent.RemoveCause cause;
 
@@ -26,34 +28,31 @@ public class HangingBreakEvent extends HangingEvent implements Cancellable {
         return cause;
     }
 
-    public boolean isCancelled() {
-        return cancelled;
-    }
-
-    public void setCancelled(boolean cancel) {
-        this.cancelled = cancel;
-    }
-
     /**
      * An enum to specify the cause of the removal
      */
     public enum RemoveCause {
+
         /**
          * Removed by an entity
          */
         ENTITY,
+
         /**
          * Removed by an explosion
          */
         EXPLOSION,
+
         /**
          * Removed by placing a block on it
          */
         OBSTRUCTION,
+
         /**
          * Removed by destroying the block behind it, etc
          */
         PHYSICS,
+
         /**
          * Removed by an uncategorised cause
          */
@@ -61,6 +60,16 @@ public class HangingBreakEvent extends HangingEvent implements Cancellable {
     }
 
     @Override
+    public boolean isCancelled() {
+        return cancelled;
+    }
+
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
+    }
+
+    @Override
     public HandlerList getHandlers() {
         return handlers;
     }
diff --git a/src/main/java/org/bukkit/event/hanging/HangingEvent.java b/src/main/java/org/bukkit/event/hanging/HangingEvent.java
index b370afe..24d387e 100644
--- a/src/main/java/org/bukkit/event/hanging/HangingEvent.java
+++ b/src/main/java/org/bukkit/event/hanging/HangingEvent.java
@@ -7,6 +7,7 @@ import org.bukkit.event.Event;
  * Represents a hanging entity-related event.
  */
 public abstract class HangingEvent extends Event {
+
     protected Hanging hanging;
 
     protected HangingEvent(final Hanging painting) {
diff --git a/src/main/java/org/bukkit/event/hanging/HangingPlaceEvent.java b/src/main/java/org/bukkit/event/hanging/HangingPlaceEvent.java
index b511c55..c045388 100644
--- a/src/main/java/org/bukkit/event/hanging/HangingPlaceEvent.java
+++ b/src/main/java/org/bukkit/event/hanging/HangingPlaceEvent.java
@@ -11,7 +11,9 @@ import org.bukkit.event.HandlerList;
  * Triggered when a hanging entity is created in the world
  */
 public class HangingPlaceEvent extends HangingEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
+
     private boolean cancelled;
     private final Player player;
     private final Block block;
@@ -51,12 +53,14 @@ public class HangingPlaceEvent extends HangingEvent implements Cancellable {
         return blockFace;
     }
 
+    @Override
     public boolean isCancelled() {
         return cancelled;
     }
 
-    public void setCancelled(boolean cancel) {
-        this.cancelled = cancel;
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/event/inventory/BrewEvent.java b/src/main/java/org/bukkit/event/inventory/BrewEvent.java
index 2295c2d..a1a5a03 100644
--- a/src/main/java/org/bukkit/event/inventory/BrewEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/BrewEvent.java
@@ -11,9 +11,11 @@ import org.bukkit.inventory.BrewerInventory;
  * complete.
  */
 public class BrewEvent extends BlockEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
-    private BrewerInventory contents;
+
     private boolean cancelled;
+    private BrewerInventory contents;
 
     public BrewEvent(Block brewer, BrewerInventory contents) {
         super(brewer);
@@ -29,12 +31,14 @@ public class BrewEvent extends BlockEvent implements Cancellable {
         return contents;
     }
 
+    @Override
     public boolean isCancelled() {
         return cancelled;
     }
 
-    public void setCancelled(boolean cancel) {
-        cancelled = cancel;
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/event/inventory/ClickType.java b/src/main/java/org/bukkit/event/inventory/ClickType.java
index a7440aa..89366b9 100644
--- a/src/main/java/org/bukkit/event/inventory/ClickType.java
+++ b/src/main/java/org/bukkit/event/inventory/ClickType.java
@@ -9,50 +9,62 @@ public enum ClickType {
      * The left (or primary) mouse button.
      */
     LEFT,
+
     /**
      * Holding shift while pressing the left mouse button.
      */
     SHIFT_LEFT,
+
     /**
      * The right mouse button.
      */
     RIGHT,
+
     /**
      * Holding shift while pressing the right mouse button.
      */
     SHIFT_RIGHT,
+
     /**
      * Clicking the left mouse button on the grey area around the inventory.
      */
     WINDOW_BORDER_LEFT,
+
     /**
      * Clicking the right mouse button on the grey area around the inventory.
      */
     WINDOW_BORDER_RIGHT,
+
     /**
      * The middle mouse button, or a "scrollwheel click".
      */
     MIDDLE,
+
     /**
      * One of the number keys 1-9, correspond to slots on the hotbar.
      */
     NUMBER_KEY,
+
     /**
      * Pressing the left mouse button twice in quick succession.
      */
     DOUBLE_CLICK,
+
     /**
      * The "Drop" key (defaults to Q).
      */
     DROP,
+
     /**
      * Holding Ctrl while pressing the "Drop" key (defaults to Q).
      */
     CONTROL_DROP,
+
     /**
      * Any action done with the Creative inventory open.
      */
     CREATIVE,
+
     /**
      * A type of inventory manipulation not yet recognized by Bukkit.
      * <p>
@@ -61,8 +73,7 @@ public enum ClickType {
      * <p>
      * Any ClickType.UNKNOWN is called on a best-effort basis.
      */
-    UNKNOWN,
-    ;
+    UNKNOWN;
 
     /**
      * Gets whether this ClickType represents the pressing of a key on a
diff --git a/src/main/java/org/bukkit/event/inventory/CraftItemEvent.java b/src/main/java/org/bukkit/event/inventory/CraftItemEvent.java
index ba3f5e5..ca6155c 100644
--- a/src/main/java/org/bukkit/event/inventory/CraftItemEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/CraftItemEvent.java
@@ -9,6 +9,7 @@ import org.bukkit.inventory.Recipe;
  * Called when the recipe of an Item is completed inside a crafting matrix.
  */
 public class CraftItemEvent extends InventoryClickEvent {
+
     private Recipe recipe;
 
     @Deprecated
diff --git a/src/main/java/org/bukkit/event/inventory/DragType.java b/src/main/java/org/bukkit/event/inventory/DragType.java
index 72c2bed..510923c 100644
--- a/src/main/java/org/bukkit/event/inventory/DragType.java
+++ b/src/main/java/org/bukkit/event/inventory/DragType.java
@@ -5,10 +5,12 @@ package org.bukkit.event.inventory;
  * InventoryDragEvent.
  */
 public enum DragType {
+
     /**
      * One item from the cursor is placed in each selected slot.
      */
     SINGLE,
+
     /**
      * The cursor is split evenly across all selected slots, not to exceed the
      * Material's max stack size, with the remainder going to the cursor.
diff --git a/src/main/java/org/bukkit/event/inventory/FurnaceBurnEvent.java b/src/main/java/org/bukkit/event/inventory/FurnaceBurnEvent.java
index 8ca1ff7..2be0600 100644
--- a/src/main/java/org/bukkit/event/inventory/FurnaceBurnEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/FurnaceBurnEvent.java
@@ -10,10 +10,12 @@ import org.bukkit.inventory.ItemStack;
  * Called when an ItemStack is successfully burned as fuel in a furnace.
  */
 public class FurnaceBurnEvent extends BlockEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
+
+    private boolean cancelled;
     private final ItemStack fuel;
     private int burnTime;
-    private boolean cancelled;
     private boolean burning;
 
     public FurnaceBurnEvent(final Block furnace, final ItemStack fuel, final int burnTime) {
@@ -80,12 +82,14 @@ public class FurnaceBurnEvent extends BlockEvent implements Cancellable {
         this.burning = burning;
     }
 
+    @Override
     public boolean isCancelled() {
         return cancelled;
     }
 
-    public void setCancelled(boolean cancel) {
-        this.cancelled = cancel;
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/event/inventory/FurnaceExtractEvent.java b/src/main/java/org/bukkit/event/inventory/FurnaceExtractEvent.java
index b7381fa..c11bc49 100644
--- a/src/main/java/org/bukkit/event/inventory/FurnaceExtractEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/FurnaceExtractEvent.java
@@ -9,6 +9,7 @@ import org.bukkit.event.block.BlockExpEvent;
  * This event is called when a player takes items out of the furnace
  */
 public class FurnaceExtractEvent extends BlockExpEvent {
+
     private final Player player;
     private final Material itemType;
     private final int itemAmount;
diff --git a/src/main/java/org/bukkit/event/inventory/FurnaceSmeltEvent.java b/src/main/java/org/bukkit/event/inventory/FurnaceSmeltEvent.java
index e9d1a54..ea75942 100644
--- a/src/main/java/org/bukkit/event/inventory/FurnaceSmeltEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/FurnaceSmeltEvent.java
@@ -10,10 +10,12 @@ import org.bukkit.inventory.ItemStack;
  * Called when an ItemStack is successfully smelted in a furnace.
  */
 public class FurnaceSmeltEvent extends BlockEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
+
+    private boolean cancelled;
     private final ItemStack source;
     private ItemStack result;
-    private boolean cancelled;
 
     public FurnaceSmeltEvent(final Block furnace, final ItemStack source, final ItemStack result) {
         super(furnace);
@@ -60,12 +62,14 @@ public class FurnaceSmeltEvent extends BlockEvent implements Cancellable {
         this.result = result;
     }
 
+    @Override
     public boolean isCancelled() {
         return cancelled;
     }
 
-    public void setCancelled(boolean cancel) {
-        this.cancelled = cancel;
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/event/inventory/InventoryAction.java b/src/main/java/org/bukkit/event/inventory/InventoryAction.java
index a7bc694..28ff824 100644
--- a/src/main/java/org/bukkit/event/inventory/InventoryAction.java
+++ b/src/main/java/org/bukkit/event/inventory/InventoryAction.java
@@ -12,80 +12,97 @@ public enum InventoryAction {
      * provided, but it is guaranteed that this value is accurate when given.
      */
     NOTHING,
+
     /**
      * All of the items on the clicked slot are moved to the cursor.
      */
     PICKUP_ALL,
+
     /**
      * Some of the items on the clicked slot are moved to the cursor.
      */
     PICKUP_SOME,
+
     /**
      * Half of the items on the clicked slot are moved to the cursor.
      */
     PICKUP_HALF,
+
     /**
      * One of the items on the clicked slot are moved to the cursor.
      */
     PICKUP_ONE,
+
     /**
      * All of the items on the cursor are moved to the clicked slot.
      */
     PLACE_ALL,
+
     /**
      * Some of the items from the cursor are moved to the clicked slot
      * (usually up to the max stack size).
      */
     PLACE_SOME,
+
     /**
      * A single item from the cursor is moved to the clicked slot.
      */
     PLACE_ONE,
+
     /**
      * The clicked item and the cursor are exchanged.
      */
     SWAP_WITH_CURSOR,
+
     /**
      * The entire cursor item is dropped.
      */
     DROP_ALL_CURSOR,
+
     /**
      * One item is dropped from the cursor.
      */
     DROP_ONE_CURSOR,
+
     /**
      * The entire clicked slot is dropped.
      */
     DROP_ALL_SLOT,
+
     /**
      * One item is dropped from the clicked slot.
      */
     DROP_ONE_SLOT,
+
     /**
      * The item is moved to the opposite inventory if a space is found.
      */
     MOVE_TO_OTHER_INVENTORY,
+
     /**
      * The clicked item is moved to the hotbar, and the item currently there
      * is re-added to the player's inventory.
      */
     HOTBAR_MOVE_AND_READD,
+
     /**
      * The clicked slot and the picked hotbar slot are swapped.
      */
     HOTBAR_SWAP,
+
     /**
      * A max-size stack of the clicked item is put on the cursor.
      */
     CLONE_STACK,
+
     /**
      * The inventory is searched for the same material, and they are put on
      * the cursor up to {@link org.bukkit.Material#getMaxStackSize()}.
      */
     COLLECT_TO_CURSOR,
+
     /**
      * An unrecognized ClickType.
      */
-    UNKNOWN,
-    ;
+    UNKNOWN;
 }
diff --git a/src/main/java/org/bukkit/event/inventory/InventoryClickEvent.java b/src/main/java/org/bukkit/event/inventory/InventoryClickEvent.java
index 3313d91..4641c8b 100644
--- a/src/main/java/org/bukkit/event/inventory/InventoryClickEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/InventoryClickEvent.java
@@ -1,15 +1,15 @@
 package org.bukkit.event.inventory;
 
-import org.bukkit.inventory.Inventory;
-import org.bukkit.inventory.InventoryView;
+import org.bukkit.Location;
 import org.bukkit.entity.HumanEntity;
 import org.bukkit.entity.Player;
 import org.bukkit.event.HandlerList;
 import org.bukkit.event.inventory.InventoryType.SlotType;
-import org.bukkit.Location;
+import org.bukkit.inventory.Inventory;
+import org.bukkit.inventory.InventoryView;
 import org.bukkit.inventory.ItemStack;
-import org.bukkit.scheduler.BukkitScheduler;
 import org.bukkit.plugin.Plugin;
+import org.bukkit.scheduler.BukkitScheduler;
 
 /**
  * This event is called when a player clicks a slot in an inventory.
@@ -27,7 +27,7 @@ import org.bukkit.plugin.Plugin;
  * <li>{@link HumanEntity#openEnchanting(Location, boolean)}
  * <li>{@link InventoryView#close()}
  * </ul>
- * To invoke one of these methods, schedule a task using 
+ * To invoke one of these methods, schedule a task using
  * {@link BukkitScheduler#runTask(Plugin, Runnable)}, which will run the task
  * on the next tick. Also be aware that this is not an exhaustive list, and
  * other methods could potentially create issues as well.
@@ -40,11 +40,13 @@ import org.bukkit.plugin.Plugin;
  * InventoryClickEvent can be overwritten. To change these slots, this event
  * should be cancelled and all desired changes to the inventory applied.
  * Alternatively, scheduling a task using {@link BukkitScheduler#runTask(
- * Plugin, Runnable)}, which would execute the task on the next tick, would
+ *Plugin, Runnable)}, which would execute the task on the next tick, would
  * work as well.
  */
 public class InventoryClickEvent extends InventoryInteractEvent {
+
     private static final HandlerList handlers = new HandlerList();
+
     private final ClickType click;
     private final InventoryAction action;
     private final Inventory clickedInventory;
@@ -82,6 +84,7 @@ public class InventoryClickEvent extends InventoryInteractEvent {
 
     /**
      * Gets the inventory that was clicked, or null if outside of window
+     *
      * @return The clicked inventory
      */
     public Inventory getClickedInventory() {
@@ -156,9 +159,9 @@ public class InventoryClickEvent extends InventoryInteractEvent {
      *
      * @param stack the new cursor item
      * @deprecated This changes the ItemStack in their hand before any
-     *     calculations are applied to the Inventory, which has a tendency to
-     *     create inconsistencies between the Player and the server, and to
-     *     make unexpected changes in the behavior of the clicked Inventory.
+     * calculations are applied to the Inventory, which has a tendency to
+     * create inconsistencies between the Player and the server, and to
+     * make unexpected changes in the behavior of the clicked Inventory.
      */
     @Deprecated
     public void setCursor(ItemStack stack) {
@@ -204,7 +207,7 @@ public class InventoryClickEvent extends InventoryInteractEvent {
      * the pressed key (0-8).
      *
      * @return the number on the key minus 1 (range 0-8); or -1 if not
-     *     a NUMBER_KEY action
+     * a NUMBER_KEY action
      */
     public int getHotbarButton() {
         return hotbarKey;
diff --git a/src/main/java/org/bukkit/event/inventory/InventoryCloseEvent.java b/src/main/java/org/bukkit/event/inventory/InventoryCloseEvent.java
index 19889b2..0519781 100644
--- a/src/main/java/org/bukkit/event/inventory/InventoryCloseEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/InventoryCloseEvent.java
@@ -9,6 +9,7 @@ import org.bukkit.inventory.InventoryView;
  * Represents a player related inventory event
  */
 public class InventoryCloseEvent extends InventoryEvent {
+
     private static final HandlerList handlers = new HandlerList();
 
     public InventoryCloseEvent(InventoryView transaction) {
diff --git a/src/main/java/org/bukkit/event/inventory/InventoryCreativeEvent.java b/src/main/java/org/bukkit/event/inventory/InventoryCreativeEvent.java
index da7dffc..4016f1e 100644
--- a/src/main/java/org/bukkit/event/inventory/InventoryCreativeEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/InventoryCreativeEvent.java
@@ -10,6 +10,7 @@ import org.bukkit.inventory.ItemStack;
  * Inventory while in creative mode.
  */
 public class InventoryCreativeEvent extends InventoryClickEvent {
+
     private ItemStack item;
 
     public InventoryCreativeEvent(InventoryView what, SlotType type, int slot, ItemStack newItem) {
diff --git a/src/main/java/org/bukkit/event/inventory/InventoryDragEvent.java b/src/main/java/org/bukkit/event/inventory/InventoryDragEvent.java
index e7e54a7..5d4a27f 100644
--- a/src/main/java/org/bukkit/event/inventory/InventoryDragEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/InventoryDragEvent.java
@@ -1,9 +1,6 @@
 package org.bukkit.event.inventory;
 
-import java.util.Collections;
-import java.util.Map;
-import java.util.Set;
-
+import com.google.common.collect.ImmutableSet;
 import org.apache.commons.lang.Validate;
 import org.bukkit.Location;
 import org.bukkit.entity.HumanEntity;
@@ -15,12 +12,14 @@ import org.bukkit.inventory.ItemStack;
 import org.bukkit.plugin.Plugin;
 import org.bukkit.scheduler.BukkitScheduler;
 
-import com.google.common.collect.ImmutableSet;
+import java.util.Collections;
+import java.util.Map;
+import java.util.Set;
 
 /**
  * This event is called when the player drags an item in their cursor across
  * the inventory. The ItemStack is distributed across the slots the
- * HumanEntity dragged over. The method of distribution is described by the 
+ * HumanEntity dragged over. The method of distribution is described by the
  * DragType returned by {@link #getType()}.
  * <p>
  * Canceling this event will result in none of the changes described in
@@ -39,7 +38,7 @@ import com.google.common.collect.ImmutableSet;
  * <li>{@link HumanEntity#openEnchanting(Location, boolean)}
  * <li>{@link InventoryView#close()}
  * </ul>
- * To invoke one of these methods, schedule a task using 
+ * To invoke one of these methods, schedule a task using
  * {@link BukkitScheduler#runTask(Plugin, Runnable)}, which will run the task
  * on the next tick.  Also be aware that this is not an exhaustive list, and
  * other methods could potentially create issues as well.
@@ -55,7 +54,9 @@ import com.google.common.collect.ImmutableSet;
  * execute the task on the next tick, would work as well.
  */
 public class InventoryDragEvent extends InventoryInteractEvent {
+
     private static final HandlerList handlers = new HandlerList();
+
     private final DragType type;
     private final Map<Integer, ItemStack> addedItems;
     private final Set<Integer> containerSlots;
@@ -72,11 +73,11 @@ public class InventoryDragEvent extends InventoryInteractEvent {
         this.newCursor = newCursor;
         this.oldCursor = oldCursor;
         this.addedItems = slots;
-        ImmutableSet.Builder<Integer> b = ImmutableSet.builder();
+        ImmutableSet.Builder<Integer> builder = ImmutableSet.builder();
         for (Integer slot : slots.keySet()) {
-            b.add(what.convertSlot(slot));
+            builder.add(what.convertSlot(slot));
         }
-        this.containerSlots = b.build();
+        this.containerSlots = builder.build();
     }
 
     /**
@@ -101,7 +102,7 @@ public class InventoryDragEvent extends InventoryInteractEvent {
      * Gets the slots to be changed in this drag.
      *
      * @return list of converted slot ids, suitable for {@link
-     *     org.bukkit.inventory.Inventory#getItem(int)}.
+     * org.bukkit.inventory.Inventory#getItem(int)}.
      */
     public Set<Integer> getInventorySlots() {
         return containerSlots;
diff --git a/src/main/java/org/bukkit/event/inventory/InventoryEvent.java b/src/main/java/org/bukkit/event/inventory/InventoryEvent.java
index 973c392..7f39600 100644
--- a/src/main/java/org/bukkit/event/inventory/InventoryEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/InventoryEvent.java
@@ -1,19 +1,21 @@
 
 package org.bukkit.event.inventory;
 
-import java.util.List;
-
-import org.bukkit.event.HandlerList;
 import org.bukkit.entity.HumanEntity;
 import org.bukkit.event.Event;
+import org.bukkit.event.HandlerList;
 import org.bukkit.inventory.Inventory;
 import org.bukkit.inventory.InventoryView;
 
+import java.util.List;
+
 /**
  * Represents a player related inventory event
  */
 public class InventoryEvent extends Event {
+
     private static final HandlerList handlers = new HandlerList();
+
     protected InventoryView transaction;
 
     public InventoryEvent(InventoryView transaction) {
diff --git a/src/main/java/org/bukkit/event/inventory/InventoryInteractEvent.java b/src/main/java/org/bukkit/event/inventory/InventoryInteractEvent.java
index 8624f8d..232a45e 100644
--- a/src/main/java/org/bukkit/event/inventory/InventoryInteractEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/InventoryInteractEvent.java
@@ -2,15 +2,14 @@ package org.bukkit.event.inventory;
 
 import org.bukkit.entity.HumanEntity;
 import org.bukkit.event.Cancellable;
-import org.bukkit.event.Event.Result;
 import org.bukkit.inventory.InventoryView;
-import org.bukkit.inventory.ItemStack;
 
 /**
  * An abstract base class for events that describe an interaction between a
  * HumanEntity and the contents of an Inventory.
  */
 public abstract class InventoryInteractEvent extends InventoryEvent implements Cancellable {
+
     private Result result = Result.DEFAULT;
 
     public InventoryInteractEvent(InventoryView transaction) {
@@ -30,8 +29,8 @@ public abstract class InventoryInteractEvent extends InventoryEvent implements C
      * Sets the result of this event. This will change whether or not this
      * event is considered cancelled.
      *
-     * @see #isCancelled()
      * @param newResult the new {@link Result} for this event
+     * @see #isCancelled()
      */
     public void setResult(Result newResult) {
         result = newResult;
@@ -58,21 +57,22 @@ public abstract class InventoryInteractEvent extends InventoryEvent implements C
      *
      * @return whether the event is cancelled
      */
+    @Override
     public boolean isCancelled() {
         return getResult() == Result.DENY;
     }
 
     /**
-     * Proxy method to {@link #setResult(Event.Result)} for the Cancellable
-     * interface. {@link #setResult(Event.Result)} is preferred, as it allows
+     * Proxy method to {@link #setResult(Result)} for the Cancellable
+     * interface. {@link #setResult(Result)} is preferred, as it allows
      * you to specify the Result beyond Result.DENY and Result.ALLOW.
      * <p>
      * {@inheritDoc}
      *
-     * @param toCancel result becomes DENY if true, ALLOW if false
+     * @param cancelled result becomes DENY if true, ALLOW if false
      */
-    public void setCancelled(boolean toCancel) {
-        setResult(toCancel ? Result.DENY : Result.ALLOW);
+    @Override
+    public void setCancelled(boolean cancelled) {
+        setResult(cancelled ? Result.DENY : Result.ALLOW);
     }
-
 }
diff --git a/src/main/java/org/bukkit/event/inventory/InventoryMoveItemEvent.java b/src/main/java/org/bukkit/event/inventory/InventoryMoveItemEvent.java
index 06ec99a..0be7d9c 100644
--- a/src/main/java/org/bukkit/event/inventory/InventoryMoveItemEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/InventoryMoveItemEvent.java
@@ -24,12 +24,15 @@ import org.bukkit.inventory.ItemStack;
  * former state. Otherwise any additional items will be discarded.
  */
 public class InventoryMoveItemEvent extends Event implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
+
+    private final boolean didSourceInitiate;
+
     private boolean cancelled;
     private final Inventory sourceInventory;
     private final Inventory destinationInventory;
     private ItemStack itemStack;
-    private final boolean didSourceInitiate;
 
     public InventoryMoveItemEvent(final Inventory sourceInventory, final ItemStack itemStack, final Inventory destinationInventory, final boolean didSourceInitiate) {
         Validate.notNull(itemStack, "ItemStack cannot be null");
@@ -89,12 +92,14 @@ public class InventoryMoveItemEvent extends Event implements Cancellable {
         return didSourceInitiate ? sourceInventory : destinationInventory;
     }
 
+    @Override
     public boolean isCancelled() {
         return cancelled;
     }
 
-    public void setCancelled(boolean cancel) {
-        this.cancelled = cancel;
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/event/inventory/InventoryOpenEvent.java b/src/main/java/org/bukkit/event/inventory/InventoryOpenEvent.java
index c3570aa..486f457 100644
--- a/src/main/java/org/bukkit/event/inventory/InventoryOpenEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/InventoryOpenEvent.java
@@ -1,15 +1,17 @@
 package org.bukkit.event.inventory;
 
-import org.bukkit.inventory.InventoryView;
 import org.bukkit.entity.HumanEntity;
 import org.bukkit.event.Cancellable;
 import org.bukkit.event.HandlerList;
+import org.bukkit.inventory.InventoryView;
 
 /**
  * Represents a player related inventory event
  */
 public class InventoryOpenEvent extends InventoryEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
+
     private boolean cancelled;
 
     public InventoryOpenEvent(InventoryView transaction) {
@@ -35,6 +37,7 @@ public class InventoryOpenEvent extends InventoryEvent implements Cancellable {
      *
      * @return true if this event is cancelled
      */
+    @Override
     public boolean isCancelled() {
         return cancelled;
     }
@@ -46,10 +49,11 @@ public class InventoryOpenEvent extends InventoryEvent implements Cancellable {
      * If an inventory open event is cancelled, the inventory screen will not
      * show.
      *
-     * @param cancel true if you wish to cancel this event
+     * @param cancelled true if you wish to cancel this event
      */
-    public void setCancelled(boolean cancel) {
-        cancelled = cancel;
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/event/inventory/InventoryPickupItemEvent.java b/src/main/java/org/bukkit/event/inventory/InventoryPickupItemEvent.java
index af6ad5b..de16ce6 100644
--- a/src/main/java/org/bukkit/event/inventory/InventoryPickupItemEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/InventoryPickupItemEvent.java
@@ -10,7 +10,9 @@ import org.bukkit.inventory.Inventory;
  * Called when a hopper or hopper minecart picks up a dropped item.
  */
 public class InventoryPickupItemEvent extends Event implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
+
     private boolean cancelled;
     private final Inventory inventory;
     private final Item item;
@@ -39,12 +41,14 @@ public class InventoryPickupItemEvent extends Event implements Cancellable {
         return item;
     }
 
+    @Override
     public boolean isCancelled() {
         return cancelled;
     }
 
-    public void setCancelled(boolean cancel) {
-        this.cancelled = cancel;
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/event/inventory/InventoryType.java b/src/main/java/org/bukkit/event/inventory/InventoryType.java
index b83580a..c231a23 100644
--- a/src/main/java/org/bukkit/event/inventory/InventoryType.java
+++ b/src/main/java/org/bukkit/event/inventory/InventoryType.java
@@ -6,75 +6,89 @@ public enum InventoryType {
      * A chest inventory, with 0, 9, 18, 27, 36, 45, or 54 slots of type
      * CONTAINER.
      */
-    CHEST(27,"Chest"),
+    CHEST(27, "Chest"),
+
     /**
      * A dispenser inventory, with 9 slots of type CONTAINER.
      */
-    DISPENSER(9,"Dispenser"),
+    DISPENSER(9, "Dispenser"),
+
     /**
      * A dropper inventory, with 9 slots of type CONTAINER.
      */
     DROPPER(9, "Dropper"),
+
     /**
      * A furnace inventory, with a RESULT slot, a CRAFTING slot, and a FUEL
      * slot.
      */
-    FURNACE(3,"Furnace"),
+    FURNACE(3, "Furnace"),
+
+
     /**
      * A workbench inventory, with 9 CRAFTING slots and a RESULT slot.
      */
-    WORKBENCH(10,"Crafting"),
+    WORKBENCH(10, "Crafting"),
+
     /**
      * A player's crafting inventory, with 4 CRAFTING slots and a RESULT slot.
      * Also implies that the 4 ARMOR slots are accessible.
      */
-    CRAFTING(5,"Crafting"),
+    CRAFTING(5, "Crafting"),
+
     /**
      * An enchantment table inventory, with one CRAFTING slot and three
      * enchanting buttons.
      */
-    ENCHANTING(1,"Enchanting"),
+    ENCHANTING(1, "Enchanting"),
+
     /**
      * A brewing stand inventory, with one FUEL slot and three CRAFTING slots.
      */
-    BREWING(4,"Brewing"),
+    BREWING(4, "Brewing"),
+
     /**
      * A player's inventory, with 9 QUICKBAR slots, 27 CONTAINER slots, and 4
      * ARMOR slots. The ARMOUR slots may not be visible to the player, though.
      */
-    PLAYER(36,"Player"),
+    PLAYER(36, "Player"),
+
     /**
      * The creative mode inventory, with only 9 QUICKBAR slots and nothing
      * else. (The actual creative interface with the items is client-side and
      * cannot be altered by the server.)
      */
-    CREATIVE(9,"Creative"),
+    CREATIVE(9, "Creative"),
+
     /**
      * The merchant inventory, with 2 TRADE-IN slots, and 1 RESULT slot.
      */
-    MERCHANT(3,"Villager"),
+    MERCHANT(3, "Villager"),
+
     /**
      * The ender chest inventory, with 27 slots.
      */
-    ENDER_CHEST(27,"Ender Chest"),
+    ENDER_CHEST(27, "Ender Chest"),
+
     /**
      * An anvil inventory, with 2 CRAFTING slots and 1 RESULT slot
      */
     ANVIL(3, "Repairing"),
+
     /**
      * A beacon inventory, with 1 CRAFTING slot
      */
     BEACON(1, "container.beacon"),
+
     /**
      * A hopper inventory, with 5 slots of type CONTAINER.
      */
-    HOPPER(5, "Item Hopper"),
-    ;
+    HOPPER(5, "Item Hopper");
 
     private final int size;
     private final String title;
 
-    private InventoryType(int defaultSize, String defaultTitle) {
+    InventoryType(int defaultSize, String defaultTitle) {
         size = defaultSize;
         title = defaultTitle;
     }
@@ -88,33 +102,40 @@ public enum InventoryType {
     }
 
     public enum SlotType {
+
         /**
          * A result slot in a furnace or crafting inventory.
          */
         RESULT,
+
         /**
          * A slot in the crafting matrix, or the input slot in a furnace
          * inventory, the potion slot in the brewing stand, or the enchanting
          * slot.
          */
         CRAFTING,
+
         /**
          * An armour slot in the player's inventory.
          */
         ARMOR,
+
         /**
          * A regular slot in the container or the player's inventory; anything
          * not covered by the other enum values.
          */
         CONTAINER,
+
         /**
          * A slot in the bottom row or quickbar.
          */
         QUICKBAR,
+
         /**
          * A pseudo-slot representing the area outside the inventory window.
          */
         OUTSIDE,
+
         /**
          * The fuel slot in a furnace inventory, or the ingredient slot in a
          * brewing stand inventory.
diff --git a/src/main/java/org/bukkit/event/inventory/PrepareItemCraftEvent.java b/src/main/java/org/bukkit/event/inventory/PrepareItemCraftEvent.java
index 5731190..4b348ce 100644
--- a/src/main/java/org/bukkit/event/inventory/PrepareItemCraftEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/PrepareItemCraftEvent.java
@@ -6,7 +6,9 @@ import org.bukkit.inventory.InventoryView;
 import org.bukkit.inventory.Recipe;
 
 public class PrepareItemCraftEvent extends InventoryEvent {
+
     private static final HandlerList handlers = new HandlerList();
+
     private boolean repair;
     private CraftingInventory matrix;
 
diff --git a/src/main/java/org/bukkit/event/painting/PaintingBreakByEntityEvent.java b/src/main/java/org/bukkit/event/painting/PaintingBreakByEntityEvent.java
index 1dc4987..5d13459 100644
--- a/src/main/java/org/bukkit/event/painting/PaintingBreakByEntityEvent.java
+++ b/src/main/java/org/bukkit/event/painting/PaintingBreakByEntityEvent.java
@@ -8,11 +8,12 @@ import org.bukkit.entity.Painting;
  * Triggered when a painting is removed by an entity
  *
  * @deprecated Use {@link org.bukkit.event.hanging.HangingBreakByEntityEvent}
- *     instead.
+ * instead.
  */
 @Deprecated
-@Warning(reason="This event has been replaced by HangingBreakByEntityEvent")
+@Warning(reason = "This event has been replaced by HangingBreakByEntityEvent")
 public class PaintingBreakByEntityEvent extends PaintingBreakEvent {
+
     private final Entity remover;
 
     public PaintingBreakByEntityEvent(final Painting painting, final Entity remover) {
diff --git a/src/main/java/org/bukkit/event/painting/PaintingBreakEvent.java b/src/main/java/org/bukkit/event/painting/PaintingBreakEvent.java
index 3e27c69..8454a8e 100644
--- a/src/main/java/org/bukkit/event/painting/PaintingBreakEvent.java
+++ b/src/main/java/org/bukkit/event/painting/PaintingBreakEvent.java
@@ -11,9 +11,11 @@ import org.bukkit.event.HandlerList;
  * @deprecated Use {@link org.bukkit.event.hanging.HangingBreakEvent} instead.
  */
 @Deprecated
-@Warning(reason="This event has been replaced by HangingBreakEvent")
+@Warning(reason = "This event has been replaced by HangingBreakEvent")
 public class PaintingBreakEvent extends PaintingEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
+
     private boolean cancelled;
     private final RemoveCause cause;
 
@@ -31,38 +33,45 @@ public class PaintingBreakEvent extends PaintingEvent implements Cancellable {
         return cause;
     }
 
-    public boolean isCancelled() {
-        return cancelled;
-    }
-
-    public void setCancelled(boolean cancel) {
-        this.cancelled = cancel;
-    }
-
     /**
      * An enum to specify the cause of the removal
      */
     public enum RemoveCause {
+
         /**
          * Removed by an entity
          */
         ENTITY,
+
         /**
          * Removed by fire
          */
         FIRE,
+
         /**
          * Removed by placing a block on it
          */
         OBSTRUCTION,
+
         /**
          * Removed by water flowing over it
          */
         WATER,
+
         /**
          * Removed by destroying the block behind it, etc
          */
-        PHYSICS,
+        PHYSICS
+    }
+
+    @Override
+    public boolean isCancelled() {
+        return cancelled;
+    }
+
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/event/painting/PaintingEvent.java b/src/main/java/org/bukkit/event/painting/PaintingEvent.java
index 3a51348..c40f5a2 100644
--- a/src/main/java/org/bukkit/event/painting/PaintingEvent.java
+++ b/src/main/java/org/bukkit/event/painting/PaintingEvent.java
@@ -10,8 +10,9 @@ import org.bukkit.event.Event;
  * @deprecated Use {@link org.bukkit.event.hanging.HangingEvent} instead.
  */
 @Deprecated
-@Warning(reason="This event has been replaced by HangingEvent")
+@Warning(reason = "This event has been replaced by HangingEvent")
 public abstract class PaintingEvent extends Event {
+
     protected Painting painting;
 
     protected PaintingEvent(final Painting painting) {
diff --git a/src/main/java/org/bukkit/event/painting/PaintingPlaceEvent.java b/src/main/java/org/bukkit/event/painting/PaintingPlaceEvent.java
index 3250b29..b281d11 100644
--- a/src/main/java/org/bukkit/event/painting/PaintingPlaceEvent.java
+++ b/src/main/java/org/bukkit/event/painting/PaintingPlaceEvent.java
@@ -14,9 +14,11 @@ import org.bukkit.event.HandlerList;
  * @deprecated Use {@link org.bukkit.event.hanging.HangingPlaceEvent} instead.
  */
 @Deprecated
-@Warning(reason="This event has been replaced by HangingPlaceEvent")
+@Warning(reason = "This event has been replaced by HangingPlaceEvent")
 public class PaintingPlaceEvent extends PaintingEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
+
     private boolean cancelled;
     private final Player player;
     private final Block block;
@@ -50,19 +52,20 @@ public class PaintingPlaceEvent extends PaintingEvent implements Cancellable {
     /**
      * Returns the face of the block that the painting was placed on
      *
-     * @return BlockFace returns the face of the block the painting was placed
-     *     on
+     * @return BlockFace returns the face of the block the painting was placed on
      */
     public BlockFace getBlockFace() {
         return blockFace;
     }
 
+    @Override
     public boolean isCancelled() {
         return cancelled;
     }
 
-    public void setCancelled(boolean cancel) {
-        this.cancelled = cancel;
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/event/player/AsyncPlayerChatEvent.java b/src/main/java/org/bukkit/event/player/AsyncPlayerChatEvent.java
index a796292..ca693ce 100644
--- a/src/main/java/org/bukkit/event/player/AsyncPlayerChatEvent.java
+++ b/src/main/java/org/bukkit/event/player/AsyncPlayerChatEvent.java
@@ -1,12 +1,12 @@
 package org.bukkit.event.player;
 
-import java.util.IllegalFormatException;
-import java.util.Set;
-
 import org.bukkit.entity.Player;
 import org.bukkit.event.Cancellable;
 import org.bukkit.event.HandlerList;
 
+import java.util.IllegalFormatException;
+import java.util.Set;
+
 /**
  * This event will sometimes fire synchronously, depending on how it was
  * triggered.
@@ -24,19 +24,20 @@ import org.bukkit.event.HandlerList;
  * appropriately.
  */
 public class AsyncPlayerChatEvent extends PlayerEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
-    private boolean cancel = false;
+
+    private boolean cancelled = false;
     private String message;
     private String format = "<%1$s> %2$s";
     private final Set<Player> recipients;
 
     /**
-     *
-     * @param async This changes the event to a synchronous state.
-     * @param who the chat sender
+     * @param async   This changes the event to a synchronous state.
+     * @param who     the chat sender
      * @param message the message sent
      * @param players the players to receive the message. This may be a lazy
-     *     or unmodifiable collection.
+     *                or unmodifiable collection.
      */
     public AsyncPlayerChatEvent(final boolean async, final Player who, final String message, final Set<Player> players) {
         super(who, async);
@@ -72,7 +73,7 @@ public class AsyncPlayerChatEvent extends PlayerEvent implements Cancellable {
      * #getMessage()}
      *
      * @return {@link String#format(String, Object...)} compatible format
-     *     string
+     * string
      */
     public String getFormat() {
         return format;
@@ -86,10 +87,10 @@ public class AsyncPlayerChatEvent extends PlayerEvent implements Cancellable {
      * #getMessage()}
      *
      * @param format {@link String#format(String, Object...)} compatible
-     *     format string
+     *               format string
      * @throws IllegalFormatException if the underlying API throws the
-     *     exception
-     * @throws NullPointerException if format is null
+     *                                exception
+     * @throws NullPointerException   if format is null
      * @see String#format(String, Object...)
      */
     public void setFormat(final String format) throws IllegalFormatException, NullPointerException {
@@ -121,12 +122,14 @@ public class AsyncPlayerChatEvent extends PlayerEvent implements Cancellable {
         return recipients;
     }
 
+    @Override
     public boolean isCancelled() {
-        return cancel ;
+        return cancelled;
     }
 
-    public void setCancelled(boolean cancel) {
-        this.cancel = cancel;
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java b/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java
index 1d57188..3267fd1 100644
--- a/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java
+++ b/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java
@@ -1,18 +1,21 @@
 package org.bukkit.event.player;
 
-import java.net.InetAddress;
-import java.util.UUID;
-
+import org.bukkit.event.Cancellable;
 import org.bukkit.event.Event;
 import org.bukkit.event.HandlerList;
 
+import java.net.InetAddress;
+import java.util.UUID;
+
 /**
  * Stores details for players attempting to log in.
  * <p>
  * This event is asynchronous, and not run using main thread.
  */
-public class AsyncPlayerPreLoginEvent extends Event {
+public class AsyncPlayerPreLoginEvent extends Event implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
+
     private Result result;
     private String message;
     private final String name;
@@ -46,9 +49,9 @@ public class AsyncPlayerPreLoginEvent extends Event {
      * Gets the current result of the login, as an enum
      *
      * @return Current Result of the login
-     * @deprecated This method uses a deprecated enum from {@link
-     *     PlayerPreLoginEvent}
      * @see #getLoginResult()
+     * @deprecated This method uses a deprecated enum from {@link
+     * PlayerPreLoginEvent}
      */
     @Deprecated
     public PlayerPreLoginEvent.Result getResult() {
@@ -68,9 +71,9 @@ public class AsyncPlayerPreLoginEvent extends Event {
      * Sets the new result of the login, as an enum
      *
      * @param result New result to set
-     * @deprecated This method uses a deprecated enum from {@link
-     *     PlayerPreLoginEvent}
      * @see #setLoginResult(Result)
+     * @deprecated This method uses a deprecated enum from {@link
+     * PlayerPreLoginEvent}
      */
     @Deprecated
     public void setResult(final PlayerPreLoginEvent.Result result) {
@@ -107,7 +110,7 @@ public class AsyncPlayerPreLoginEvent extends Event {
     /**
      * Disallows the player from logging in, with the given reason
      *
-     * @param result New result for disallowing the player
+     * @param result  New result for disallowing the player
      * @param message Kick message to display to the user
      */
     public void disallow(final Result result, final String message) {
@@ -118,11 +121,11 @@ public class AsyncPlayerPreLoginEvent extends Event {
     /**
      * Disallows the player from logging in, with the given reason
      *
-     * @param result New result for disallowing the player
+     * @param result  New result for disallowing the player
      * @param message Kick message to display to the user
-     * @deprecated This method uses a deprecated enum from {@link
-     *     PlayerPreLoginEvent}
      * @see #disallow(Result, String)
+     * @deprecated This method uses a deprecated enum from {@link
+     * PlayerPreLoginEvent}
      */
     @Deprecated
     public void disallow(final PlayerPreLoginEvent.Result result, final String message) {
@@ -157,15 +160,6 @@ public class AsyncPlayerPreLoginEvent extends Event {
         return uniqueId;
     }
 
-    @Override
-    public HandlerList getHandlers() {
-        return handlers;
-    }
-
-    public static HandlerList getHandlerList() {
-        return handlers;
-    }
-
     /**
      * Basic kick reasons for communicating to plugins
      */
@@ -175,19 +169,23 @@ public class AsyncPlayerPreLoginEvent extends Event {
          * The player is allowed to log in
          */
         ALLOWED,
+
         /**
          * The player is not allowed to log in, due to the server being full
          */
         KICK_FULL,
+
         /**
          * The player is not allowed to log in, due to them being banned
          */
         KICK_BANNED,
+
         /**
          * The player is not allowed to log in, due to them not being on the
          * white list
          */
         KICK_WHITELIST,
+
         /**
          * The player is not allowed to log in, for reasons undefined
          */
@@ -198,4 +196,23 @@ public class AsyncPlayerPreLoginEvent extends Event {
             return PlayerPreLoginEvent.Result.valueOf(name());
         }
     }
+
+    @Override
+    public boolean isCancelled() {
+        return this.result != Result.ALLOWED;
+    }
+
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.result = cancelled ? Result.KICK_OTHER : Result.ALLOWED;
+    }
+
+    @Override
+    public HandlerList getHandlers() {
+        return handlers;
+    }
+
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
 }
diff --git a/src/main/java/org/bukkit/event/player/PlayerAchievementAwardedEvent.java b/src/main/java/org/bukkit/event/player/PlayerAchievementAwardedEvent.java
index e33fade..dde0c9e 100644
--- a/src/main/java/org/bukkit/event/player/PlayerAchievementAwardedEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerAchievementAwardedEvent.java
@@ -9,7 +9,9 @@ import org.bukkit.event.HandlerList;
  * Called when a player earns an achievement.
  */
 public class PlayerAchievementAwardedEvent extends PlayerEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
+
     private final Achievement achievement;
     private boolean isCancelled = false;
 
@@ -27,12 +29,14 @@ public class PlayerAchievementAwardedEvent extends PlayerEvent implements Cancel
         return achievement;
     }
 
+    @Override
     public boolean isCancelled() {
         return isCancelled;
     }
 
-    public void setCancelled(boolean cancel) {
-        this.isCancelled = cancel;
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.isCancelled = cancelled;
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/event/player/PlayerAnimationEvent.java b/src/main/java/org/bukkit/event/player/PlayerAnimationEvent.java
index cabe77d..8487de4 100644
--- a/src/main/java/org/bukkit/event/player/PlayerAnimationEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerAnimationEvent.java
@@ -8,9 +8,11 @@ import org.bukkit.event.HandlerList;
  * Represents a player animation event
  */
 public class PlayerAnimationEvent extends PlayerEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
+
+    private boolean cancelled = false;
     private final PlayerAnimationType animationType;
-    private boolean isCancelled = false;
 
     /**
      * Construct a new PlayerAnimation event
@@ -33,12 +35,14 @@ public class PlayerAnimationEvent extends PlayerEvent implements Cancellable {
         return animationType;
     }
 
+    @Override
     public boolean isCancelled() {
-        return this.isCancelled;
+        return cancelled;
     }
 
-    public void setCancelled(boolean cancel) {
-        this.isCancelled = cancel;
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/event/player/PlayerAnimationType.java b/src/main/java/org/bukkit/event/player/PlayerAnimationType.java
index ea4bf26..ab9d6d1 100644
--- a/src/main/java/org/bukkit/event/player/PlayerAnimationType.java
+++ b/src/main/java/org/bukkit/event/player/PlayerAnimationType.java
@@ -4,5 +4,6 @@ package org.bukkit.event.player;
  * Different types of player animations
  */
 public enum PlayerAnimationType {
+
     ARM_SWING
 }
diff --git a/src/main/java/org/bukkit/event/player/PlayerBedEnterEvent.java b/src/main/java/org/bukkit/event/player/PlayerBedEnterEvent.java
index 09f1a66..68f6c94 100644
--- a/src/main/java/org/bukkit/event/player/PlayerBedEnterEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerBedEnterEvent.java
@@ -9,8 +9,10 @@ import org.bukkit.event.HandlerList;
  * This event is fired when the player is almost about to enter the bed.
  */
 public class PlayerBedEnterEvent extends PlayerEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
-    private boolean cancel = false;
+
+    private boolean cancelled = false;
     private final Block bed;
 
     public PlayerBedEnterEvent(final Player who, final Block bed) {
@@ -18,14 +20,6 @@ public class PlayerBedEnterEvent extends PlayerEvent implements Cancellable {
         this.bed = bed;
     }
 
-    public boolean isCancelled() {
-        return cancel;
-    }
-
-    public void setCancelled(boolean cancel) {
-        this.cancel = cancel;
-    }
-
     /**
      * Returns the bed block involved in this event.
      *
@@ -36,6 +30,16 @@ public class PlayerBedEnterEvent extends PlayerEvent implements Cancellable {
     }
 
     @Override
+    public boolean isCancelled() {
+        return cancelled;
+    }
+
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
+    }
+
+    @Override
     public HandlerList getHandlers() {
         return handlers;
     }
diff --git a/src/main/java/org/bukkit/event/player/PlayerBedLeaveEvent.java b/src/main/java/org/bukkit/event/player/PlayerBedLeaveEvent.java
index 628ab0b..e41f791 100644
--- a/src/main/java/org/bukkit/event/player/PlayerBedLeaveEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerBedLeaveEvent.java
@@ -8,7 +8,9 @@ import org.bukkit.event.HandlerList;
  * This event is fired when the player is leaving a bed.
  */
 public class PlayerBedLeaveEvent extends PlayerEvent {
+
     private static final HandlerList handlers = new HandlerList();
+
     private final Block bed;
 
     public PlayerBedLeaveEvent(final Player who, final Block bed) {
diff --git a/src/main/java/org/bukkit/event/player/PlayerBucketEmptyEvent.java b/src/main/java/org/bukkit/event/player/PlayerBucketEmptyEvent.java
index 8fb121a..fa5f2b4 100644
--- a/src/main/java/org/bukkit/event/player/PlayerBucketEmptyEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerBucketEmptyEvent.java
@@ -11,6 +11,7 @@ import org.bukkit.inventory.ItemStack;
  * Called when a player empties a bucket
  */
 public class PlayerBucketEmptyEvent extends PlayerBucketEvent {
+
     private static final HandlerList handlers = new HandlerList();
 
     public PlayerBucketEmptyEvent(final Player who, final Block blockClicked, final BlockFace blockFace, final Material bucket, final ItemStack itemInHand) {
diff --git a/src/main/java/org/bukkit/event/player/PlayerBucketEvent.java b/src/main/java/org/bukkit/event/player/PlayerBucketEvent.java
index d32c55e..812a282 100644
--- a/src/main/java/org/bukkit/event/player/PlayerBucketEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerBucketEvent.java
@@ -11,8 +11,9 @@ import org.bukkit.inventory.ItemStack;
  * Called when a player interacts with a Bucket
  */
 public abstract class PlayerBucketEvent extends PlayerEvent implements Cancellable {
-    private ItemStack itemStack;
+
     private boolean cancelled = false;
+    private ItemStack itemStack;
     private final Block blockClicked;
     private final BlockFace blockFace;
     private final Material bucket;
@@ -70,11 +71,13 @@ public abstract class PlayerBucketEvent extends PlayerEvent implements Cancellab
         return blockFace;
     }
 
+    @Override
     public boolean isCancelled() {
         return cancelled;
     }
 
-    public void setCancelled(boolean cancel) {
-        this.cancelled = cancel;
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
     }
 }
\ No newline at end of file
diff --git a/src/main/java/org/bukkit/event/player/PlayerBucketFillEvent.java b/src/main/java/org/bukkit/event/player/PlayerBucketFillEvent.java
index 94e042a..30de196 100644
--- a/src/main/java/org/bukkit/event/player/PlayerBucketFillEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerBucketFillEvent.java
@@ -11,6 +11,7 @@ import org.bukkit.inventory.ItemStack;
  * Called when a player fills a bucket
  */
 public class PlayerBucketFillEvent extends PlayerBucketEvent {
+
     private static final HandlerList handlers = new HandlerList();
 
     public PlayerBucketFillEvent(final Player who, final Block blockClicked, final BlockFace blockFace, final Material bucket, final ItemStack itemInHand) {
diff --git a/src/main/java/org/bukkit/event/player/PlayerChangedWorldEvent.java b/src/main/java/org/bukkit/event/player/PlayerChangedWorldEvent.java
index 76c9c20..acc94b2 100644
--- a/src/main/java/org/bukkit/event/player/PlayerChangedWorldEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerChangedWorldEvent.java
@@ -8,7 +8,9 @@ import org.bukkit.event.HandlerList;
  * Called when a player switches to another world.
  */
 public class PlayerChangedWorldEvent extends PlayerEvent {
+
     private static final HandlerList handlers = new HandlerList();
+
     private final World from;
 
     public PlayerChangedWorldEvent(final Player player, final World from) {
@@ -19,7 +21,7 @@ public class PlayerChangedWorldEvent extends PlayerEvent {
     /**
      * Gets the world the player is switching from.
      *
-     * @return  player's previous world
+     * @return player's previous world
      */
     public World getFrom() {
         return from;
diff --git a/src/main/java/org/bukkit/event/player/PlayerChannelEvent.java b/src/main/java/org/bukkit/event/player/PlayerChannelEvent.java
index 054efbc..8d90811 100644
--- a/src/main/java/org/bukkit/event/player/PlayerChannelEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerChannelEvent.java
@@ -8,7 +8,9 @@ import org.bukkit.event.HandlerList;
  * channel.
  */
 public abstract class PlayerChannelEvent extends PlayerEvent {
+
     private static final HandlerList handlers = new HandlerList();
+
     private final String channel;
 
     public PlayerChannelEvent(final Player player, final String channel) {
diff --git a/src/main/java/org/bukkit/event/player/PlayerChatEvent.java b/src/main/java/org/bukkit/event/player/PlayerChatEvent.java
index 1fb5cd7..44f7276 100644
--- a/src/main/java/org/bukkit/event/player/PlayerChatEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerChatEvent.java
@@ -1,29 +1,31 @@
 package org.bukkit.event.player;
 
-import java.util.HashSet;
-import java.util.Set;
-
 import org.apache.commons.lang.Validate;
 import org.bukkit.Warning;
 import org.bukkit.entity.Player;
 import org.bukkit.event.Cancellable;
 import org.bukkit.event.HandlerList;
 
+import java.util.HashSet;
+import java.util.Set;
+
 /**
  * Holds information for player chat and commands
  *
  * @deprecated This event will fire from the main thread and allows the use of
- *     all of the Bukkit API, unlike the {@link AsyncPlayerChatEvent}.
- *     <p>
- *     Listening to this event forces chat to wait for the main thread which
- *     causes delays for chat. {@link AsyncPlayerChatEvent} is the encouraged
- *     alternative for thread safe implementations.
+ * all of the Bukkit API, unlike the {@link AsyncPlayerChatEvent}.
+ * <p>
+ * Listening to this event forces chat to wait for the main thread which
+ * causes delays for chat. {@link AsyncPlayerChatEvent} is the encouraged
+ * alternative for thread safe implementations.
  */
 @Deprecated
-@Warning(reason="Listening to this event forces chat to wait for the main thread, delaying chat messages.")
+@Warning(reason = "Listening to this event forces chat to wait for the main thread, delaying chat messages.")
 public class PlayerChatEvent extends PlayerEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
-    private boolean cancel = false;
+
+    private boolean cancelled = false;
     private String message;
     private String format;
     private final Set<Player> recipients;
@@ -42,14 +44,6 @@ public class PlayerChatEvent extends PlayerEvent implements Cancellable {
         this.recipients = recipients;
     }
 
-    public boolean isCancelled() {
-        return cancel;
-    }
-
-    public void setCancelled(boolean cancel) {
-        this.cancel = cancel;
-    }
-
     /**
      * Gets the message that the player is attempting to send
      *
@@ -115,6 +109,16 @@ public class PlayerChatEvent extends PlayerEvent implements Cancellable {
     }
 
     @Override
+    public boolean isCancelled() {
+        return cancelled;
+    }
+
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
+    }
+
+    @Override
     public HandlerList getHandlers() {
         return handlers;
     }
diff --git a/src/main/java/org/bukkit/event/player/PlayerChatTabCompleteEvent.java b/src/main/java/org/bukkit/event/player/PlayerChatTabCompleteEvent.java
index 7241a9b..78bb0d4 100644
--- a/src/main/java/org/bukkit/event/player/PlayerChatTabCompleteEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerChatTabCompleteEvent.java
@@ -1,16 +1,18 @@
 package org.bukkit.event.player;
 
-import java.util.Collection;
-
 import org.apache.commons.lang.Validate;
 import org.bukkit.entity.Player;
 import org.bukkit.event.HandlerList;
 
+import java.util.Collection;
+
 /**
  * Called when a player attempts to tab-complete a chat message.
  */
 public class PlayerChatTabCompleteEvent extends PlayerEvent {
+
     private static final HandlerList handlers = new HandlerList();
+
     private final String message;
     private final String lastToken;
     private final Collection<String> completions;
@@ -21,11 +23,7 @@ public class PlayerChatTabCompleteEvent extends PlayerEvent {
         Validate.notNull(completions, "Completions cannot be null");
         this.message = message;
         int i = message.lastIndexOf(' ');
-        if (i < 0) {
-            this.lastToken = message;
-        } else {
-            this.lastToken = message.substring(i + 1);
-        }
+        this.lastToken = (i < 0) ? message : message.substring(i + 1);
         this.completions = completions;
     }
 
diff --git a/src/main/java/org/bukkit/event/player/PlayerCommandPreprocessEvent.java b/src/main/java/org/bukkit/event/player/PlayerCommandPreprocessEvent.java
index 1ec8173..edcb00f 100644
--- a/src/main/java/org/bukkit/event/player/PlayerCommandPreprocessEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerCommandPreprocessEvent.java
@@ -1,13 +1,13 @@
 package org.bukkit.event.player;
 
-import java.util.HashSet;
-import java.util.Set;
-
 import org.apache.commons.lang.Validate;
 import org.bukkit.entity.Player;
 import org.bukkit.event.Cancellable;
 import org.bukkit.event.HandlerList;
 
+import java.util.HashSet;
+import java.util.Set;
+
 /**
  * This event is called whenever a player runs a command (by placing a slash
  * at the start of their message). It is called early in the command handling
@@ -21,17 +21,17 @@ import org.bukkit.event.HandlerList;
  * <ul>
  * <li>Logging executed commands to a separate file
  * <li>Variable substitution. For example, replacing
- *     <code>${nearbyPlayer}</code> with the name of the nearest other
- *     player, or simulating the <code>@a</code> and <code>@p</code>
- *     decorators used by Command Blocks in plugins that do not handle it.
+ * <code>${nearbyPlayer}</code> with the name of the nearest other
+ * player, or simulating the <code>@a</code> and <code>@p</code>
+ * decorators used by Command Blocks in plugins that do not handle it.
  * <li>Conditionally blocking commands belonging to other plugins. For
- *     example, blocking the use of the <code>/home</code> command in a
- *     combat arena.
+ * example, blocking the use of the <code>/home</code> command in a
+ * combat arena.
  * <li>Per-sender command aliases. For example, after a player runs the
- *     command <code>/calias cr gamemode creative</code>, the next time they
- *     run <code>/cr</code>, it gets replaced into
- *     <code>/gamemode creative</code>. (Global command aliases should be
- *     done by registering the alias.)
+ * command <code>/calias cr gamemode creative</code>, the next time they
+ * run <code>/cr</code>, it gets replaced into
+ * <code>/gamemode creative</code>. (Global command aliases should be
+ * done by registering the alias.)
  * </ul>
  * <p>
  * Examples of incorrect uses are:
@@ -46,8 +46,10 @@ import org.bukkit.event.HandlerList;
  * removed, unexpected behavior may result.
  */
 public class PlayerCommandPreprocessEvent extends PlayerEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
-    private boolean cancel = false;
+
+    private boolean cancelled = false;
     private String message;
     private String format = "<%1$s> %2$s";
     private final Set<Player> recipients;
@@ -64,14 +66,6 @@ public class PlayerCommandPreprocessEvent extends PlayerEvent implements Cancell
         this.message = message;
     }
 
-    public boolean isCancelled() {
-        return cancel;
-    }
-
-    public void setCancelled(boolean cancel) {
-        this.cancel = cancel;
-    }
-
     /**
      * Gets the command that the player is attempting to send.
      * <p>
@@ -113,9 +107,9 @@ public class PlayerCommandPreprocessEvent extends PlayerEvent implements Cancell
     /**
      * Gets the format to use to display this chat message
      *
-     * @deprecated This method is provided for backward compatibility with no
-     *     guarantee to the use of the format.
      * @return String.Format compatible format string
+     * @deprecated This method is provided for backward compatibility with no
+     * guarantee to the use of the format.
      */
     @Deprecated
     public String getFormat() {
@@ -125,9 +119,9 @@ public class PlayerCommandPreprocessEvent extends PlayerEvent implements Cancell
     /**
      * Sets the format to use to display this chat message
      *
-     * @deprecated This method is provided for backward compatibility with no
-     *     guarantee to the effect of modifying the format.
      * @param format String.Format compatible format string
+     * @deprecated This method is provided for backward compatibility with no
+     * guarantee to the effect of modifying the format.
      */
     @Deprecated
     public void setFormat(final String format) {
@@ -152,9 +146,9 @@ public class PlayerCommandPreprocessEvent extends PlayerEvent implements Cancell
      * UnsupportedOperationException} if the event caller provides an
      * unmodifiable set.
      *
-     * @deprecated This method is provided for backward compatibility with no
-     *     guarantee to the effect of viewing or modifying the set.
      * @return All Players who will see this chat message
+     * @deprecated This method is provided for backward compatibility with no
+     * guarantee to the effect of viewing or modifying the set.
      */
     @Deprecated
     public Set<Player> getRecipients() {
@@ -162,6 +156,16 @@ public class PlayerCommandPreprocessEvent extends PlayerEvent implements Cancell
     }
 
     @Override
+    public boolean isCancelled() {
+        return cancelled;
+    }
+
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
+    }
+
+    @Override
     public HandlerList getHandlers() {
         return handlers;
     }
diff --git a/src/main/java/org/bukkit/event/player/PlayerDropItemEvent.java b/src/main/java/org/bukkit/event/player/PlayerDropItemEvent.java
index 5b41b65..ee3c9cf 100644
--- a/src/main/java/org/bukkit/event/player/PlayerDropItemEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerDropItemEvent.java
@@ -9,9 +9,11 @@ import org.bukkit.event.HandlerList;
  * Thrown when a player drops an item from their inventory
  */
 public class PlayerDropItemEvent extends PlayerEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
+
+    private boolean cancelled = false;
     private final Item drop;
-    private boolean cancel = false;
 
     public PlayerDropItemEvent(final Player player, final Item drop) {
         super(player);
@@ -19,20 +21,22 @@ public class PlayerDropItemEvent extends PlayerEvent implements Cancellable {
     }
 
     /**
-     * Gets the ItemDrop created by the player
+     * Gets the item drop created by the player
      *
-     * @return ItemDrop created by the player
+     * @return the item drop created by the player
      */
     public Item getItemDrop() {
         return drop;
     }
 
+    @Override
     public boolean isCancelled() {
-        return cancel;
+        return cancelled;
     }
 
-    public void setCancelled(boolean cancel) {
-        this.cancel = cancel;
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/event/player/PlayerEditBookEvent.java b/src/main/java/org/bukkit/event/player/PlayerEditBookEvent.java
index ea7ecef..3fb9a69 100644
--- a/src/main/java/org/bukkit/event/player/PlayerEditBookEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerEditBookEvent.java
@@ -12,28 +12,28 @@ import org.bukkit.inventory.meta.BookMeta;
  * cancelled, no changes are made to the BookMeta
  */
 public class PlayerEditBookEvent extends PlayerEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
 
+    private boolean cancelled;
     private final BookMeta previousBookMeta;
     private final int slot;
     private BookMeta newBookMeta;
     private boolean isSigning;
-    private boolean cancel;
 
     public PlayerEditBookEvent(Player who, int slot, BookMeta previousBookMeta, BookMeta newBookMeta, boolean isSigning) {
         super(who);
 
-        Validate.isTrue(slot >= 0 && slot <=8, "Slot must be in range 0-8 inclusive");
+        Validate.isTrue(slot >= 0 && slot <= 8, "Slot must be in range 0-8 inclusive");
         Validate.notNull(previousBookMeta, "Previous book meta must not be null");
         Validate.notNull(newBookMeta, "New book meta must not be null");
-
-        Bukkit.getItemFactory().equals(previousBookMeta, newBookMeta);
+        Validate.isTrue(!Bukkit.getItemFactory().equals(previousBookMeta, newBookMeta), "New book meta must be different");
 
         this.previousBookMeta = previousBookMeta;
         this.newBookMeta = newBookMeta;
         this.slot = slot;
         this.isSigning = isSigning;
-        this.cancel = false;
+        this.cancelled = false;
     }
 
     /**
@@ -52,8 +52,7 @@ public class PlayerEditBookEvent extends PlayerEvent implements Cancellable {
      * Gets the book meta that the player is attempting to add to the book.
      * <p>
      * Note: this is a copy of the proposed new book meta. Use {@link
-     * #setNewBookMeta(BookMeta)} to change what will actually be added to the
-     * book.
+     * #setNewBookMeta(BookMeta)} to change what will actually be added to the book.
      *
      * @return the book meta that the player is attempting to add
      */
@@ -62,8 +61,7 @@ public class PlayerEditBookEvent extends PlayerEvent implements Cancellable {
     }
 
     /**
-     * Gets the inventory slot number for the book item that triggered this
-     * event.
+     * Gets the inventory slot number for the book item that triggered this event.
      * <p>
      * This is a slot number on the player's hotbar in the range 0-8.
      *
@@ -81,8 +79,9 @@ public class PlayerEditBookEvent extends PlayerEvent implements Cancellable {
      */
     public void setNewBookMeta(BookMeta newBookMeta) throws IllegalArgumentException {
         Validate.notNull(newBookMeta, "New book meta must not be null");
-        Bukkit.getItemFactory().equals(newBookMeta, null);
-        this.newBookMeta = newBookMeta.clone();
+        if (!Bukkit.getItemFactory().equals(newBookMeta, this.newBookMeta)) {
+            this.newBookMeta = newBookMeta.clone();
+        }
     }
 
     /**
@@ -105,20 +104,23 @@ public class PlayerEditBookEvent extends PlayerEvent implements Cancellable {
         isSigning = signing;
     }
 
+
     @Override
-    public HandlerList getHandlers() {
-        return handlers;
+    public boolean isCancelled() {
+        return cancelled;
     }
 
-    public static HandlerList getHandlerList() {
-        return handlers;
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
     }
 
-    public boolean isCancelled() {
-        return cancel;
+    @Override
+    public HandlerList getHandlers() {
+        return handlers;
     }
 
-    public void setCancelled(boolean cancel) {
-        this.cancel = cancel;
+    public static HandlerList getHandlerList() {
+        return handlers;
     }
 }
diff --git a/src/main/java/org/bukkit/event/player/PlayerEggThrowEvent.java b/src/main/java/org/bukkit/event/player/PlayerEggThrowEvent.java
index 896347e..bfe7e93 100644
--- a/src/main/java/org/bukkit/event/player/PlayerEggThrowEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerEggThrowEvent.java
@@ -10,7 +10,9 @@ import org.bukkit.event.HandlerList;
  * Called when a player throws an egg and it might hatch
  */
 public class PlayerEggThrowEvent extends PlayerEvent {
+
     private static final HandlerList handlers = new HandlerList();
+
     private final Egg egg;
     private boolean hatching;
     private EntityType hatchType;
@@ -52,7 +54,7 @@ public class PlayerEggThrowEvent extends PlayerEvent {
      * Sets whether the egg will hatch or not.
      *
      * @param hatching true if you want the egg to hatch, false if you want it
-     *     not to
+     *                 not to
      */
     public void setHatching(boolean hatching) {
         this.hatching = hatching;
@@ -95,7 +97,10 @@ public class PlayerEggThrowEvent extends PlayerEvent {
      * @param hatchType The type of the mob being hatched by the egg
      */
     public void setHatchingType(EntityType hatchType) {
-        if(!hatchType.isSpawnable()) throw new IllegalArgumentException("Can't spawn that entity type from an egg!");
+        if (!hatchType.isSpawnable()) {
+            throw new IllegalArgumentException("Can't spawn that entity type from an egg!");
+        }
+
         this.hatchType = hatchType;
     }
 
diff --git a/src/main/java/org/bukkit/event/player/PlayerEvent.java b/src/main/java/org/bukkit/event/player/PlayerEvent.java
index 0d4833f..3b1b51e 100644
--- a/src/main/java/org/bukkit/event/player/PlayerEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerEvent.java
@@ -7,16 +7,16 @@ import org.bukkit.event.Event;
  * Represents a player related event
  */
 public abstract class PlayerEvent extends Event {
+
     protected Player player;
 
     public PlayerEvent(final Player who) {
-        player = who;
+        this.player = who;
     }
 
     PlayerEvent(final Player who, boolean async) {
         super(async);
-        player = who;
-
+        this.player = who;
     }
 
     /**
diff --git a/src/main/java/org/bukkit/event/player/PlayerExpChangeEvent.java b/src/main/java/org/bukkit/event/player/PlayerExpChangeEvent.java
index f37491d..6131eee 100644
--- a/src/main/java/org/bukkit/event/player/PlayerExpChangeEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerExpChangeEvent.java
@@ -1,18 +1,22 @@
 package org.bukkit.event.player;
 
 import org.bukkit.entity.Player;
+import org.bukkit.event.Cancellable;
 import org.bukkit.event.HandlerList;
 
 /**
  * Called when a players experience changes naturally
  */
-public class PlayerExpChangeEvent extends PlayerEvent {
+public class PlayerExpChangeEvent extends PlayerEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
+
+    private boolean cancelled = false;
     private int exp;
 
     public PlayerExpChangeEvent(final Player player, final int expAmount) {
-         super(player);
-         exp = expAmount;
+        super(player);
+        this.exp = expAmount;
     }
 
     /**
@@ -34,6 +38,16 @@ public class PlayerExpChangeEvent extends PlayerEvent {
     }
 
     @Override
+    public boolean isCancelled() {
+        return cancelled;
+    }
+
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
+    }
+
+    @Override
     public HandlerList getHandlers() {
         return handlers;
     }
diff --git a/src/main/java/org/bukkit/event/player/PlayerFishEvent.java b/src/main/java/org/bukkit/event/player/PlayerFishEvent.java
index 7416a0a..e0f019a 100644
--- a/src/main/java/org/bukkit/event/player/PlayerFishEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerFishEvent.java
@@ -1,28 +1,30 @@
 package org.bukkit.event.player;
 
+import org.bukkit.entity.Entity;
 import org.bukkit.entity.Fish;
 import org.bukkit.entity.Player;
 import org.bukkit.event.Cancellable;
-import org.bukkit.entity.Entity;
 import org.bukkit.event.HandlerList;
 
 /**
  * Thrown when a player is fishing
  */
 public class PlayerFishEvent extends PlayerEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
+
+    private boolean cancelled = false;
     private final Entity entity;
-    private boolean cancel = false;
     private int exp;
     private final State state;
     private final Fish hookEntity;
 
     /**
+     * @param player the player who caught the fish
+     * @param entity the entity that was caught
+     * @param state  the fishing state
      * @deprecated replaced by {@link #PlayerFishEvent(Player, Entity, Fish,
-     *     State)} to include the {@link Fish} hook entity.
-     * @param player
-     * @param entity
-     * @param state
+     * State)} to include the {@link Fish} hook entity.
      */
     @Deprecated
     public PlayerFishEvent(final Player player, final Entity entity, final State state) {
@@ -39,11 +41,10 @@ public class PlayerFishEvent extends PlayerEvent implements Cancellable {
     /**
      * Gets the entity caught by the player.
      * <p>
-     * If player has fished successfully, the result may be cast to {@link
-     * Item}.
+     * If player has fished successfully, the result may be cast to {@link org.bukkit.entity.Item}.
      *
      * @return Entity caught by the player, Entity if fishing, and null if
-     *     bobber has gotten stuck in the ground or nothing has been caught
+     * bobber has gotten stuck in the ground or nothing has been caught
      */
     public Entity getCaught() {
         return entity;
@@ -58,14 +59,6 @@ public class PlayerFishEvent extends PlayerEvent implements Cancellable {
         return hookEntity;
     }
 
-    public boolean isCancelled() {
-        return cancel;
-    }
-
-    public void setCancelled(boolean cancel) {
-        this.cancel = cancel;
-    }
-
     /**
      * Gets the amount of experience received when fishing.
      * <p>
@@ -91,24 +84,6 @@ public class PlayerFishEvent extends PlayerEvent implements Cancellable {
     }
 
     /**
-     * Gets the state of the fishing
-     *
-     * @return A State detailing the state of the fishing
-     */
-    public State getState() {
-        return state;
-    }
-
-    @Override
-    public HandlerList getHandlers() {
-        return handlers;
-    }
-
-    public static HandlerList getHandlerList() {
-        return handlers;
-    }
-
-    /**
      * An enum to specify the state of the fishing
      */
     public enum State {
@@ -117,22 +92,54 @@ public class PlayerFishEvent extends PlayerEvent implements Cancellable {
          * When a player is fishing, ie casting the line out.
          */
         FISHING,
+
         /**
          * When a player has successfully caught a fish and is reeling it in.
          */
         CAUGHT_FISH,
+
         /**
          * When a player has successfully caught an entity
          */
         CAUGHT_ENTITY,
+
         /**
          * When a bobber is stuck in the ground
          */
         IN_GROUND,
+
         /**
          * When a player fails to catch anything while fishing usually due to
          * poor aiming or timing
          */
         FAILED_ATTEMPT,
     }
+
+    /**
+     * Gets the state of the fishing
+     *
+     * @return A State detailing the state of the fishing
+     */
+    public State getState() {
+        return state;
+    }
+
+    @Override
+    public boolean isCancelled() {
+        return cancelled;
+    }
+
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
+    }
+
+    @Override
+    public HandlerList getHandlers() {
+        return handlers;
+    }
+
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
 }
diff --git a/src/main/java/org/bukkit/event/player/PlayerGameModeChangeEvent.java b/src/main/java/org/bukkit/event/player/PlayerGameModeChangeEvent.java
index 8c9afa8..03bc355 100644
--- a/src/main/java/org/bukkit/event/player/PlayerGameModeChangeEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerGameModeChangeEvent.java
@@ -9,7 +9,9 @@ import org.bukkit.event.HandlerList;
  * Called when the GameMode of the player is changed.
  */
 public class PlayerGameModeChangeEvent extends PlayerEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
+
     private boolean cancelled;
     private final GameMode newGameMode;
 
@@ -18,24 +20,26 @@ public class PlayerGameModeChangeEvent extends PlayerEvent implements Cancellabl
         this.newGameMode = newGameMode;
     }
 
-    public boolean isCancelled() {
-        return cancelled;
-    }
-
-    public void setCancelled(boolean cancel) {
-        this.cancelled = cancel;
-    }
-
     /**
      * Gets the GameMode the player is switched to.
      *
-     * @return  player's new GameMode
+     * @return player's new GameMode
      */
     public GameMode getNewGameMode() {
         return newGameMode;
     }
 
     @Override
+    public boolean isCancelled() {
+        return cancelled;
+    }
+
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
+    }
+
+    @Override
     public HandlerList getHandlers() {
         return handlers;
     }
diff --git a/src/main/java/org/bukkit/event/player/PlayerInteractEntityEvent.java b/src/main/java/org/bukkit/event/player/PlayerInteractEntityEvent.java
index 935211d..3def34b 100644
--- a/src/main/java/org/bukkit/event/player/PlayerInteractEntityEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerInteractEntityEvent.java
@@ -9,23 +9,17 @@ import org.bukkit.event.HandlerList;
  * Represents an event that is called when a player right clicks an entity.
  */
 public class PlayerInteractEntityEvent extends PlayerEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
+
+    protected boolean cancelled = false;
     protected Entity clickedEntity;
-    boolean cancelled = false;
 
     public PlayerInteractEntityEvent(final Player who, final Entity clickedEntity) {
         super(who);
         this.clickedEntity = clickedEntity;
     }
 
-    public boolean isCancelled() {
-        return cancelled;
-    }
-
-    public void setCancelled(boolean cancel) {
-        this.cancelled = cancel;
-    }
-
     /**
      * Gets the entity that was rightclicked by the player.
      *
@@ -36,6 +30,16 @@ public class PlayerInteractEntityEvent extends PlayerEvent implements Cancellabl
     }
 
     @Override
+    public boolean isCancelled() {
+        return cancelled;
+    }
+
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
+    }
+
+    @Override
     public HandlerList getHandlers() {
         return handlers;
     }
diff --git a/src/main/java/org/bukkit/event/player/PlayerInteractEvent.java b/src/main/java/org/bukkit/event/player/PlayerInteractEvent.java
index 59567d9..d905839 100644
--- a/src/main/java/org/bukkit/event/player/PlayerInteractEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerInteractEvent.java
@@ -1,13 +1,13 @@
 package org.bukkit.event.player;
 
+import org.bukkit.Material;
 import org.bukkit.block.Block;
 import org.bukkit.block.BlockFace;
-import org.bukkit.event.HandlerList;
-import org.bukkit.inventory.ItemStack;
-import org.bukkit.Material;
 import org.bukkit.entity.Player;
 import org.bukkit.event.Cancellable;
+import org.bukkit.event.HandlerList;
 import org.bukkit.event.block.Action;
+import org.bukkit.inventory.ItemStack;
 
 /**
  * Called when a player interacts with an object or air.
@@ -42,31 +42,6 @@ public class PlayerInteractEvent extends PlayerEvent implements Cancellable {
     }
 
     /**
-     * Gets the cancellation state of this event. Set to true if you want to
-     * prevent buckets from placing water and so forth
-     *
-     * @return boolean cancellation state
-     */
-    public boolean isCancelled() {
-        return useInteractedBlock() == Result.DENY;
-    }
-
-    /**
-     * Sets the cancellation state of this event. A canceled event will not be
-     * executed in the server, but will still pass to other plugins
-     * <p>
-     * Canceling this event will prevent use of food (player won't lose the
-     * food item), prevent bows/snowballs/eggs from firing, etc. (player won't
-     * lose the ammo)
-     *
-     * @param cancel true if you wish to cancel this event
-     */
-    public void setCancelled(boolean cancel) {
-        setUseInteractedBlock(cancel ? Result.DENY : useInteractedBlock() == Result.DENY ? Result.DEFAULT : useInteractedBlock());
-        setUseItemInHand(cancel ? Result.DENY : useItemInHand() == Result.DENY ? Result.DEFAULT : useItemInHand());
-    }
-
-    /**
      * Returns the item in hand represented by this event
      *
      * @return ItemStack the item used
@@ -82,11 +57,7 @@ public class PlayerInteractEvent extends PlayerEvent implements Cancellable {
      * @return Material the material of the item used
      */
     public Material getMaterial() {
-        if (!hasItem()) {
-            return Material.AIR;
-        }
-
-        return item.getType();
+        return hasItem() ? item.getType() : Material.AIR;
     }
 
     /**
@@ -114,11 +85,7 @@ public class PlayerInteractEvent extends PlayerEvent implements Cancellable {
      * @return boolean true if the item in hand was a block
      */
     public boolean isBlockInHand() {
-        if (!hasItem()) {
-            return false;
-        }
-
-        return item.getType().isBlock();
+        return hasItem() && item.getType().isBlock();
     }
 
     /**
@@ -176,6 +143,33 @@ public class PlayerInteractEvent extends PlayerEvent implements Cancellable {
         this.useItemInHand = useItemInHand;
     }
 
+    /**
+     * Gets the cancellation state of this event. Set to true if you want to
+     * prevent buckets from placing water and so forth
+     *
+     * @return boolean cancellation state
+     */
+    @Override
+    public boolean isCancelled() {
+        return useInteractedBlock() == Result.DENY;
+    }
+
+    /**
+     * Sets the cancellation state of this event. A canceled event will not be
+     * executed in the server, but will still pass to other plugins
+     * <p>
+     * Canceling this event will prevent use of food (player won't lose the
+     * food item), prevent bows/snowballs/eggs from firing, etc. (player won't
+     * lose the ammo)
+     *
+     * @param cancelled true if you wish to cancel this event
+     */
+    @Override
+    public void setCancelled(boolean cancelled) {
+        setUseInteractedBlock(cancelled ? Result.DENY : useInteractedBlock() == Result.DENY ? Result.DEFAULT : useInteractedBlock());
+        setUseItemInHand(cancelled ? Result.DENY : useItemInHand() == Result.DENY ? Result.DEFAULT : useItemInHand());
+    }
+
     @Override
     public HandlerList getHandlers() {
         return handlers;
diff --git a/src/main/java/org/bukkit/event/player/PlayerInventoryEvent.java b/src/main/java/org/bukkit/event/player/PlayerInventoryEvent.java
index 2ec69d7..9fed5d3 100644
--- a/src/main/java/org/bukkit/event/player/PlayerInventoryEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerInventoryEvent.java
@@ -11,12 +11,14 @@ import org.bukkit.inventory.Inventory;
  * actually did anything
  *
  * @deprecated Use {@link InventoryClickEvent} or {@link InventoryOpenEvent}
- *     instead, or one of the other inventory events in {@link
- *     org.bukkit.event.inventory}.
+ * instead, or one of the other inventory events in {@link
+ * org.bukkit.event.inventory}.
  */
 @Deprecated
 public class PlayerInventoryEvent extends PlayerEvent {
+
     private static final HandlerList handlers = new HandlerList();
+
     protected Inventory inventory;
 
     public PlayerInventoryEvent(final Player player, final Inventory inventory) {
diff --git a/src/main/java/org/bukkit/event/player/PlayerItemBreakEvent.java b/src/main/java/org/bukkit/event/player/PlayerItemBreakEvent.java
index 176cd91..e9e0e41 100644
--- a/src/main/java/org/bukkit/event/player/PlayerItemBreakEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerItemBreakEvent.java
@@ -11,7 +11,9 @@ import org.bukkit.inventory.ItemStack;
  * 0. After the event, the item's durability will be reset to 0.
  */
 public class PlayerItemBreakEvent extends PlayerEvent {
+
     private static final HandlerList handlers = new HandlerList();
+
     private final ItemStack brokenItem;
 
     public PlayerItemBreakEvent(final Player player, final ItemStack brokenItem) {
diff --git a/src/main/java/org/bukkit/event/player/PlayerItemConsumeEvent.java b/src/main/java/org/bukkit/event/player/PlayerItemConsumeEvent.java
index 8ab76b1..9633f3b 100644
--- a/src/main/java/org/bukkit/event/player/PlayerItemConsumeEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerItemConsumeEvent.java
@@ -17,17 +17,18 @@ import org.bukkit.inventory.ItemStack;
  * not be removed from the player's inventory.
  */
 public class PlayerItemConsumeEvent extends PlayerEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
-    private boolean isCancelled = false;
+
+    private boolean cancelled = false;
     private ItemStack item;
 
     /**
      * @param player the player consuming
-     * @param item the ItemStack being consumed
+     * @param item   the ItemStack being consumed
      */
     public PlayerItemConsumeEvent(final Player player, final ItemStack item) {
         super(player);
-
         this.item = item;
     }
 
@@ -48,19 +49,17 @@ public class PlayerItemConsumeEvent extends PlayerEvent implements Cancellable {
      * @param item the item being consumed
      */
     public void setItem(ItemStack item) {
-        if (item == null) {
-            this.item = new ItemStack(Material.AIR);
-        } else {
-            this.item = item;
-        }
+        this.item = (item == null) ? new ItemStack(Material.AIR) : item;
     }
 
+    @Override
     public boolean isCancelled() {
-        return this.isCancelled;
+        return this.cancelled;
     }
 
-    public void setCancelled(boolean cancel) {
-        this.isCancelled = cancel;
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/event/player/PlayerItemDamageEvent.java b/src/main/java/org/bukkit/event/player/PlayerItemDamageEvent.java
index 38a72ab..2509f95 100644
--- a/src/main/java/org/bukkit/event/player/PlayerItemDamageEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerItemDamageEvent.java
@@ -8,9 +8,10 @@ import org.bukkit.inventory.ItemStack;
 public class PlayerItemDamageEvent extends PlayerEvent implements Cancellable {
 
     private static final HandlerList handlers = new HandlerList();
+    private boolean cancelled = false;
+
     private final ItemStack item;
     private int damage;
-    private boolean cancelled = false;
 
     public PlayerItemDamageEvent(Player player, ItemStack what, int damage) {
         super(player);
@@ -35,12 +36,14 @@ public class PlayerItemDamageEvent extends PlayerEvent implements Cancellable {
         this.damage = damage;
     }
 
+    @Override
     public boolean isCancelled() {
         return cancelled;
     }
 
-    public void setCancelled(boolean cancel) {
-        this.cancelled = cancel;
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/event/player/PlayerItemHeldEvent.java b/src/main/java/org/bukkit/event/player/PlayerItemHeldEvent.java
index f0d055a..f8390cc 100644
--- a/src/main/java/org/bukkit/event/player/PlayerItemHeldEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerItemHeldEvent.java
@@ -8,8 +8,10 @@ import org.bukkit.event.HandlerList;
  * Fired when a player changes their currently held item
  */
 public class PlayerItemHeldEvent extends PlayerEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
-    private boolean cancel = false;
+
+    private boolean cancelled = false;
     private final int previous;
     private final int current;
 
@@ -37,12 +39,14 @@ public class PlayerItemHeldEvent extends PlayerEvent implements Cancellable {
         return current;
     }
 
+    @Override
     public boolean isCancelled() {
-        return cancel;
+        return cancelled;
     }
 
-    public void setCancelled(boolean cancel) {
-        this.cancel = cancel;
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/event/player/PlayerJoinEvent.java b/src/main/java/org/bukkit/event/player/PlayerJoinEvent.java
index e7481f9..a5272ce 100644
--- a/src/main/java/org/bukkit/event/player/PlayerJoinEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerJoinEvent.java
@@ -7,7 +7,9 @@ import org.bukkit.event.HandlerList;
  * Called when a player joins a server
  */
 public class PlayerJoinEvent extends PlayerEvent {
+
     private static final HandlerList handlers = new HandlerList();
+
     private String joinMessage;
 
     public PlayerJoinEvent(final Player playerJoined, final String joinMessage) {
diff --git a/src/main/java/org/bukkit/event/player/PlayerKickEvent.java b/src/main/java/org/bukkit/event/player/PlayerKickEvent.java
index 39e81b6..4c87e83 100644
--- a/src/main/java/org/bukkit/event/player/PlayerKickEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerKickEvent.java
@@ -8,16 +8,17 @@ import org.bukkit.event.HandlerList;
  * Called when a player gets kicked from the server
  */
 public class PlayerKickEvent extends PlayerEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
+
+    private boolean cancelled = false;
     private String leaveMessage;
     private String kickReason;
-    private Boolean cancel;
 
     public PlayerKickEvent(final Player playerKicked, final String kickReason, final String leaveMessage) {
         super(playerKicked);
         this.kickReason = kickReason;
         this.leaveMessage = leaveMessage;
-        this.cancel = false;
     }
 
     /**
@@ -38,14 +39,6 @@ public class PlayerKickEvent extends PlayerEvent implements Cancellable {
         return leaveMessage;
     }
 
-    public boolean isCancelled() {
-        return cancel;
-    }
-
-    public void setCancelled(boolean cancel) {
-        this.cancel = cancel;
-    }
-
     /**
      * Sets the reason why the player is getting kicked
      *
@@ -65,6 +58,16 @@ public class PlayerKickEvent extends PlayerEvent implements Cancellable {
     }
 
     @Override
+    public boolean isCancelled() {
+        return cancelled;
+    }
+
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
+    }
+
+    @Override
     public HandlerList getHandlers() {
         return handlers;
     }
diff --git a/src/main/java/org/bukkit/event/player/PlayerLevelChangeEvent.java b/src/main/java/org/bukkit/event/player/PlayerLevelChangeEvent.java
index 730a776..2041a83 100644
--- a/src/main/java/org/bukkit/event/player/PlayerLevelChangeEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerLevelChangeEvent.java
@@ -7,14 +7,16 @@ import org.bukkit.event.HandlerList;
  * Called when a players level changes
  */
 public class PlayerLevelChangeEvent extends PlayerEvent {
+
     private static final HandlerList handlers = new HandlerList();
+
     private final int oldLevel;
     private final int newLevel;
 
     public PlayerLevelChangeEvent(final Player player, final int oldLevel, final int newLevel) {
-         super(player);
-         this.oldLevel = oldLevel;
-         this.newLevel = newLevel;
+        super(player);
+        this.oldLevel = oldLevel;
+        this.newLevel = newLevel;
     }
 
     /**
diff --git a/src/main/java/org/bukkit/event/player/PlayerLoginEvent.java b/src/main/java/org/bukkit/event/player/PlayerLoginEvent.java
index 081e994..4f39321 100644
--- a/src/main/java/org/bukkit/event/player/PlayerLoginEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerLoginEvent.java
@@ -1,21 +1,25 @@
 package org.bukkit.event.player;
 
-import java.net.InetAddress;
-
 import org.bukkit.entity.Player;
+import org.bukkit.event.Cancellable;
 import org.bukkit.event.HandlerList;
 
+import java.net.InetAddress;
+
 /**
  * Stores details for players attempting to log in
  */
-public class PlayerLoginEvent extends PlayerEvent {
+public class PlayerLoginEvent extends PlayerEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
+
     private final InetAddress address;
     private final String hostname;
-    private Result result = Result.ALLOWED;
-    private String message = "";
     private final InetAddress realAddress; // Spigot
 
+    private Result result = Result.ALLOWED;
+    private String message;
+
     /**
      * @deprecated Address should be provided in other constructor
      */
@@ -36,10 +40,10 @@ public class PlayerLoginEvent extends PlayerEvent {
      * This constructor defaults message to an empty string, and result to
      * ALLOWED
      *
-     * @param player The {@link Player} for this event
+     * @param player   The {@link Player} for this event
      * @param hostname The hostname that was used to connect to the server
-     * @param address The address the player used to connect, provided for
-     *     timing issues
+     * @param address  The address the player used to connect, provided for
+     *                 timing issues
      */
     public PlayerLoginEvent(final Player player, final String hostname, final InetAddress address, final InetAddress realAddress) { // Spigot
         super(player);
@@ -56,7 +60,7 @@ public class PlayerLoginEvent extends PlayerEvent {
 
     /**
      * @deprecated Address and hostname should be provided in other
-     *     constructor
+     * constructor
      */
     @Deprecated
     public PlayerLoginEvent(final Player player, final Result result, final String message) {
@@ -66,12 +70,12 @@ public class PlayerLoginEvent extends PlayerEvent {
     /**
      * This constructor pre-configures the event with a result and message
      *
-     * @param player The {@link Player} for this event
+     * @param player   The {@link Player} for this event
      * @param hostname The hostname that was used to connect to the server
-     * @param address The address the player used to connect, provided for
-     *     timing issues
-     * @param result The result status for this event
-     * @param message The message to be displayed if result denies login
+     * @param address  The address the player used to connect, provided for
+     *                 timing issues
+     * @param result   The result status for this event
+     * @param message  The message to be displayed if result denies login
      */
     public PlayerLoginEvent(final Player player, String hostname, final InetAddress address, final Result result, final String message, final InetAddress realAddress) { // Spigot
         this(player, hostname, address, realAddress); // Spigot
@@ -80,6 +84,7 @@ public class PlayerLoginEvent extends PlayerEvent {
     }
 
     // Spigot start
+
     /**
      * Gets the connection address of this player, regardless of whether it has been spoofed or not.
      *
@@ -91,24 +96,6 @@ public class PlayerLoginEvent extends PlayerEvent {
     // Spigot end
 
     /**
-     * Gets the current result of the login, as an enum
-     *
-     * @return Current Result of the login
-     */
-    public Result getResult() {
-        return result;
-    }
-
-    /**
-     * Sets the new result of the login, as an enum
-     *
-     * @param result New result to set
-     */
-    public void setResult(final Result result) {
-        this.result = result;
-    }
-
-    /**
      * Gets the current kick message that will be used if getResult() !=
      * Result.ALLOWED
      *
@@ -138,43 +125,52 @@ public class PlayerLoginEvent extends PlayerEvent {
     }
 
     /**
-     * Allows the player to log in
+     * Gets the {@link InetAddress} for the Player associated with this event.
+     * This method is provided as a workaround for player.getAddress()
+     * returning null during PlayerLoginEvent.
+     *
+     * @return The address for this player. For legacy compatibility, this may
+     * be null.
      */
-    public void allow() {
-        result = Result.ALLOWED;
-        message = "";
+    public InetAddress getAddress() {
+        return address;
     }
 
     /**
-     * Disallows the player from logging in, with the given reason
+     * Gets the current result of the login, as an enum
      *
-     * @param result New result for disallowing the player
-     * @param message Kick message to display to the user
+     * @return Current Result of the login
      */
-    public void disallow(final Result result, final String message) {
-        this.result = result;
-        this.message = message;
+    public Result getResult() {
+        return result;
     }
 
     /**
-     * Gets the {@link InetAddress} for the Player associated with this event.
-     * This method is provided as a workaround for player.getAddress()
-     * returning null during PlayerLoginEvent.
+     * Sets the new result of the login, as an enum
      *
-     * @return The address for this player. For legacy compatibility, this may
-     *     be null.
+     * @param result New result to set
      */
-    public InetAddress getAddress() {
-        return address;
+    public void setResult(final Result result) {
+        this.result = result;
     }
 
-    @Override
-    public HandlerList getHandlers() {
-        return handlers;
+    /**
+     * Allows the player to log in
+     */
+    public void allow() {
+        result = Result.ALLOWED;
+        message = "";
     }
 
-    public static HandlerList getHandlerList() {
-        return handlers;
+    /**
+     * Disallows the player from logging in, with the given reason
+     *
+     * @param result  New result for disallowing the player
+     * @param message Kick message to display to the user
+     */
+    public void disallow(final Result result, final String message) {
+        this.result = result;
+        this.message = message;
     }
 
     /**
@@ -186,22 +182,45 @@ public class PlayerLoginEvent extends PlayerEvent {
          * The player is allowed to log in
          */
         ALLOWED,
+
         /**
          * The player is not allowed to log in, due to the server being full
          */
         KICK_FULL,
+
         /**
          * The player is not allowed to log in, due to them being banned
          */
         KICK_BANNED,
+
         /**
          * The player is not allowed to log in, due to them not being on the
          * white list
          */
         KICK_WHITELIST,
+
         /**
          * The player is not allowed to log in, for reasons undefined
          */
         KICK_OTHER
     }
+
+    @Override
+    public boolean isCancelled() {
+        return this.result != Result.ALLOWED;
+    }
+
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.result = cancelled ? Result.KICK_OTHER : Result.ALLOWED;
+    }
+
+    @Override
+    public HandlerList getHandlers() {
+        return handlers;
+    }
+
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
 }
diff --git a/src/main/java/org/bukkit/event/player/PlayerMoveEvent.java b/src/main/java/org/bukkit/event/player/PlayerMoveEvent.java
index fa3b340..dc6db8d 100644
--- a/src/main/java/org/bukkit/event/player/PlayerMoveEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerMoveEvent.java
@@ -9,8 +9,10 @@ import org.bukkit.event.HandlerList;
  * Holds information for player movement events
  */
 public class PlayerMoveEvent extends PlayerEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
-    private boolean cancel = false;
+
+    private boolean cancelled = false;
     private Location from;
     private Location to;
 
@@ -21,34 +23,6 @@ public class PlayerMoveEvent extends PlayerEvent implements Cancellable {
     }
 
     /**
-     * Gets the cancellation state of this event. A cancelled event will not
-     * be executed in the server, but will still pass to other plugins
-     * <p>
-     * If a move or teleport event is cancelled, the player will be moved or
-     * teleported back to the Location as defined by getFrom(). This will not
-     * fire an event
-     *
-     * @return true if this event is cancelled
-     */
-    public boolean isCancelled() {
-        return cancel;
-    }
-
-    /**
-     * Sets the cancellation state of this event. A cancelled event will not
-     * be executed in the server, but will still pass to other plugins
-     * <p>
-     * If a move or teleport event is cancelled, the player will be moved or
-     * teleported back to the Location as defined by getFrom(). This will not
-     * fire an event
-     *
-     * @param cancel true if you wish to cancel this event
-     */
-    public void setCancelled(boolean cancel) {
-        this.cancel = cancel;
-    }
-
-    /**
      * Gets the location this player moved from
      *
      * @return Location the player moved from
@@ -84,6 +58,36 @@ public class PlayerMoveEvent extends PlayerEvent implements Cancellable {
         this.to = to;
     }
 
+    /**
+     * Gets the cancellation state of this event. A cancelled event will not
+     * be executed in the server, but will still pass to other plugins
+     * <p>
+     * If a move or teleport event is cancelled, the player will be moved or
+     * teleported back to the Location as defined by getFrom(). This will not
+     * fire an event
+     *
+     * @return true if this event is cancelled
+     */
+    @Override
+    public boolean isCancelled() {
+        return cancelled;
+    }
+
+    /**
+     * Sets the cancellation state of this event. A cancelled event will not
+     * be executed in the server, but will still pass to other plugins
+     * <p>
+     * If a move or teleport event is cancelled, the player will be moved or
+     * teleported back to the Location as defined by getFrom(). This will not
+     * fire an event
+     *
+     * @param cancelled true if you wish to cancelled this event
+     */
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
+    }
+
     @Override
     public HandlerList getHandlers() {
         return handlers;
diff --git a/src/main/java/org/bukkit/event/player/PlayerPickupItemEvent.java b/src/main/java/org/bukkit/event/player/PlayerPickupItemEvent.java
index dfba816..792e709 100644
--- a/src/main/java/org/bukkit/event/player/PlayerPickupItemEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerPickupItemEvent.java
@@ -9,9 +9,11 @@ import org.bukkit.event.HandlerList;
  * Thrown when a player picks an item up from the ground
  */
 public class PlayerPickupItemEvent extends PlayerEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
+
+    private boolean cancelled = false;
     private final Item item;
-    private boolean cancel = false;
     private final int remaining;
 
     public PlayerPickupItemEvent(final Player player, final Item item, final int remaining) {
@@ -38,12 +40,14 @@ public class PlayerPickupItemEvent extends PlayerEvent implements Cancellable {
         return remaining;
     }
 
+    @Override
     public boolean isCancelled() {
-        return cancel;
+        return cancelled;
     }
 
-    public void setCancelled(boolean cancel) {
-        this.cancel = cancel;
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/event/player/PlayerPortalEvent.java b/src/main/java/org/bukkit/event/player/PlayerPortalEvent.java
index 93752f7..016b903 100644
--- a/src/main/java/org/bukkit/event/player/PlayerPortalEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerPortalEvent.java
@@ -5,6 +5,8 @@ import org.bukkit.TravelAgent;
 import org.bukkit.entity.Player;
 import org.bukkit.event.HandlerList;
 
+import javax.annotation.Nullable;
+
 /**
  * Called when a player is about to teleport because it is in contact with a
  * portal.
@@ -12,7 +14,9 @@ import org.bukkit.event.HandlerList;
  * For other entities see {@link org.bukkit.event.entity.EntityPortalEvent}
  */
 public class PlayerPortalEvent extends PlayerTeleportEvent {
+
     private static final HandlerList handlers = new HandlerList();
+
     protected boolean useTravelAgent = true;
     protected TravelAgent travelAgent;
 
@@ -72,7 +76,7 @@ public class PlayerPortalEvent extends PlayerTeleportEvent {
      *
      * @param travelAgent the Travel Agent used (or not) in this event
      */
-    public void setPortalTravelAgent(TravelAgent travelAgent) {
+    public void setPortalTravelAgent(@Nullable TravelAgent travelAgent) {
         this.travelAgent = travelAgent;
     }
 
diff --git a/src/main/java/org/bukkit/event/player/PlayerPreLoginEvent.java b/src/main/java/org/bukkit/event/player/PlayerPreLoginEvent.java
index e8553f0..74fa006 100644
--- a/src/main/java/org/bukkit/event/player/PlayerPreLoginEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerPreLoginEvent.java
@@ -1,23 +1,25 @@
 package org.bukkit.event.player;
 
-import java.net.InetAddress;
-import java.util.UUID;
-
 import org.bukkit.Warning;
 import org.bukkit.event.Event;
 import org.bukkit.event.HandlerList;
 
+import java.net.InetAddress;
+import java.util.UUID;
+
 /**
  * Stores details for players attempting to log in
  *
  * @deprecated This event causes synchronization from the login thread; {@link
- *     AsyncPlayerPreLoginEvent} is preferred to keep the secondary threads
- *     asynchronous.
+ * AsyncPlayerPreLoginEvent} is preferred to keep the secondary threads
+ * asynchronous.
  */
 @Deprecated
-@Warning(reason="This event causes a login thread to synchronize with the main thread")
+@Warning(reason = "This event causes a login thread to synchronize with the main thread")
 public class PlayerPreLoginEvent extends Event {
+
     private static final HandlerList handlers = new HandlerList();
+
     private Result result;
     private String message;
     private final String name;
@@ -38,12 +40,21 @@ public class PlayerPreLoginEvent extends Event {
     }
 
     /**
-     * Gets the current result of the login, as an enum
+     * Gets the player's name.
      *
-     * @return Current Result of the login
+     * @return the player's name
      */
-    public Result getResult() {
-        return result;
+    public String getName() {
+        return name;
+    }
+
+    /**
+     * Gets the player IP address.
+     *
+     * @return The IP address
+     */
+    public InetAddress getAddress() {
+        return ipAddress;
     }
 
     /**
@@ -75,17 +86,26 @@ public class PlayerPreLoginEvent extends Event {
     }
 
     /**
+     * Gets the player's unique ID.
+     *
+     * @return The unique ID
+     */
+    public UUID getUniqueId() {
+        return uniqueId;
+    }
+
+    /**
      * Allows the player to log in
      */
     public void allow() {
-        result = Result.ALLOWED;
-        message = "";
+        this.result = Result.ALLOWED;
+        this.message = "";
     }
 
     /**
      * Disallows the player from logging in, with the given reason
      *
-     * @param result New result for disallowing the player
+     * @param result  New result for disallowing the player
      * @param message Kick message to display to the user
      */
     public void disallow(final Result result, final String message) {
@@ -94,39 +114,12 @@ public class PlayerPreLoginEvent extends Event {
     }
 
     /**
-     * Gets the player's name.
-     *
-     * @return the player's name
-     */
-    public String getName() {
-        return name;
-    }
-
-    /**
-     * Gets the player IP address.
-     *
-     * @return The IP address
-     */
-    public InetAddress getAddress() {
-        return ipAddress;
-    }
-
-    @Override
-    public HandlerList getHandlers() {
-        return handlers;
-    }
-
-    /**
-     * Gets the player's unique ID.
+     * Gets the current result of the login, as an enum
      *
-     * @return The unique ID
+     * @return current Result of the login
      */
-    public UUID getUniqueId() {
-        return uniqueId;
-    }
-
-    public static HandlerList getHandlerList() {
-        return handlers;
+    public Result getResult() {
+        return result;
     }
 
     /**
@@ -156,4 +149,13 @@ public class PlayerPreLoginEvent extends Event {
          */
         KICK_OTHER
     }
+
+    @Override
+    public HandlerList getHandlers() {
+        return handlers;
+    }
+
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
 }
diff --git a/src/main/java/org/bukkit/event/player/PlayerQuitEvent.java b/src/main/java/org/bukkit/event/player/PlayerQuitEvent.java
index 5c8dc1b..9c4966e 100644
--- a/src/main/java/org/bukkit/event/player/PlayerQuitEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerQuitEvent.java
@@ -7,7 +7,9 @@ import org.bukkit.event.HandlerList;
  * Called when a player leaves a server
  */
 public class PlayerQuitEvent extends PlayerEvent {
+
     private static final HandlerList handlers = new HandlerList();
+
     private String quitMessage;
 
     public PlayerQuitEvent(final Player who, final String quitMessage) {
diff --git a/src/main/java/org/bukkit/event/player/PlayerRespawnEvent.java b/src/main/java/org/bukkit/event/player/PlayerRespawnEvent.java
index 35900dd..d1f02b8 100644
--- a/src/main/java/org/bukkit/event/player/PlayerRespawnEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerRespawnEvent.java
@@ -9,7 +9,9 @@ import org.bukkit.event.HandlerList;
  * Called when a player respawns.
  */
 public class PlayerRespawnEvent extends PlayerEvent {
+
     private static final HandlerList handlers = new HandlerList();
+
     private Location respawnLocation;
     private final boolean isBedSpawn;
 
@@ -36,7 +38,6 @@ public class PlayerRespawnEvent extends PlayerEvent {
     public void setRespawnLocation(Location respawnLocation) {
         Validate.notNull(respawnLocation, "Respawn location can not be null");
         Validate.notNull(respawnLocation.getWorld(), "Respawn world can not be null");
-
         this.respawnLocation = respawnLocation;
     }
 
diff --git a/src/main/java/org/bukkit/event/player/PlayerShearEntityEvent.java b/src/main/java/org/bukkit/event/player/PlayerShearEntityEvent.java
index 38afb3c..46d56b4 100644
--- a/src/main/java/org/bukkit/event/player/PlayerShearEntityEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerShearEntityEvent.java
@@ -9,24 +9,18 @@ import org.bukkit.event.HandlerList;
  * Called when a player shears an entity
  */
 public class PlayerShearEntityEvent extends PlayerEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
-    private boolean cancel;
+
+    private boolean cancelled;
     private final Entity what;
 
     public PlayerShearEntityEvent(final Player who, final Entity what) {
         super(who);
-        this.cancel = false;
+        this.cancelled = false;
         this.what = what;
     }
 
-    public boolean isCancelled() {
-        return cancel;
-    }
-
-    public void setCancelled(boolean cancel) {
-        this.cancel = cancel;
-    }
-
     /**
      * Gets the entity the player is shearing
      *
@@ -37,6 +31,16 @@ public class PlayerShearEntityEvent extends PlayerEvent implements Cancellable {
     }
 
     @Override
+    public boolean isCancelled() {
+        return cancelled;
+    }
+
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
+    }
+
+    @Override
     public HandlerList getHandlers() {
         return handlers;
     }
diff --git a/src/main/java/org/bukkit/event/player/PlayerStatisticIncrementEvent.java b/src/main/java/org/bukkit/event/player/PlayerStatisticIncrementEvent.java
index 3b64d70..22cfc48 100644
--- a/src/main/java/org/bukkit/event/player/PlayerStatisticIncrementEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerStatisticIncrementEvent.java
@@ -12,19 +12,20 @@ import org.bukkit.event.HandlerList;
  * <p>
  * This event is not called for {@link org.bukkit.Statistic#PLAY_ONE_TICK} or
  * movement based statistics.
- *
  */
 public class PlayerStatisticIncrementEvent extends PlayerEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
+
+    private boolean cancelled = false;
     protected final Statistic statistic;
     private final int initialValue;
     private final int newValue;
-    private boolean isCancelled = false;
     private final EntityType entityType;
     private final Material material;
 
     public PlayerStatisticIncrementEvent(Player player, Statistic statistic, int initialValue, int newValue) {
-        super (player);
+        super(player);
         this.statistic = statistic;
         this.initialValue = initialValue;
         this.newValue = newValue;
@@ -33,7 +34,7 @@ public class PlayerStatisticIncrementEvent extends PlayerEvent implements Cancel
     }
 
     public PlayerStatisticIncrementEvent(Player player, Statistic statistic, int initialValue, int newValue, EntityType entityType) {
-        super (player);
+        super(player);
         this.statistic = statistic;
         this.initialValue = initialValue;
         this.newValue = newValue;
@@ -42,7 +43,7 @@ public class PlayerStatisticIncrementEvent extends PlayerEvent implements Cancel
     }
 
     public PlayerStatisticIncrementEvent(Player player, Statistic statistic, int initialValue, int newValue, Material material) {
-        super (player);
+        super(player);
         this.statistic = statistic;
         this.initialValue = initialValue;
         this.newValue = newValue;
@@ -97,12 +98,14 @@ public class PlayerStatisticIncrementEvent extends PlayerEvent implements Cancel
         return material;
     }
 
+    @Override
     public boolean isCancelled() {
-        return isCancelled;
+        return cancelled;
     }
 
-    public void setCancelled(boolean cancel) {
-        this.isCancelled = cancel;
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/event/player/PlayerTeleportEvent.java b/src/main/java/org/bukkit/event/player/PlayerTeleportEvent.java
index 7e2e128..b692d4d 100644
--- a/src/main/java/org/bukkit/event/player/PlayerTeleportEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerTeleportEvent.java
@@ -8,7 +8,9 @@ import org.bukkit.event.HandlerList;
  * Holds information for player teleport events
  */
 public class PlayerTeleportEvent extends PlayerMoveEvent {
+
     private static final HandlerList handlers = new HandlerList();
+
     private TeleportCause cause = TeleportCause.UNKNOWN;
 
     public PlayerTeleportEvent(final Player player, final Location from, final Location to) {
@@ -17,7 +19,6 @@ public class PlayerTeleportEvent extends PlayerMoveEvent {
 
     public PlayerTeleportEvent(final Player player, final Location from, final Location to, final TeleportCause cause) {
         this(player, from, to);
-
         this.cause = cause;
     }
 
diff --git a/src/main/java/org/bukkit/event/player/PlayerToggleFlightEvent.java b/src/main/java/org/bukkit/event/player/PlayerToggleFlightEvent.java
index 1c5ec37..19a80c1 100644
--- a/src/main/java/org/bukkit/event/player/PlayerToggleFlightEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerToggleFlightEvent.java
@@ -8,9 +8,11 @@ import org.bukkit.event.HandlerList;
  * Called when a player toggles their flying state
  */
 public class PlayerToggleFlightEvent extends PlayerEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
+
+    private boolean cancelled = false;
     private final boolean isFlying;
-    private boolean cancel = false;
 
     public PlayerToggleFlightEvent(final Player player, final boolean isFlying) {
         super(player);
@@ -26,12 +28,14 @@ public class PlayerToggleFlightEvent extends PlayerEvent implements Cancellable
         return isFlying;
     }
 
+    @Override
     public boolean isCancelled() {
-        return cancel;
+        return cancelled;
     }
 
-    public void setCancelled(boolean cancel) {
-        this.cancel = cancel;
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/event/player/PlayerToggleSneakEvent.java b/src/main/java/org/bukkit/event/player/PlayerToggleSneakEvent.java
index 667acad..3cd173e 100644
--- a/src/main/java/org/bukkit/event/player/PlayerToggleSneakEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerToggleSneakEvent.java
@@ -8,9 +8,11 @@ import org.bukkit.event.HandlerList;
  * Called when a player toggles their sneaking state
  */
 public class PlayerToggleSneakEvent extends PlayerEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
+
+    private boolean cancelled = false;
     private final boolean isSneaking;
-    private boolean cancel = false;
 
     public PlayerToggleSneakEvent(final Player player, final boolean isSneaking) {
         super(player);
@@ -26,12 +28,14 @@ public class PlayerToggleSneakEvent extends PlayerEvent implements Cancellable {
         return isSneaking;
     }
 
+    @Override
     public boolean isCancelled() {
-        return cancel;
+        return cancelled;
     }
 
-    public void setCancelled(boolean cancel) {
-        this.cancel = cancel;
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/event/player/PlayerToggleSprintEvent.java b/src/main/java/org/bukkit/event/player/PlayerToggleSprintEvent.java
index cf065e1..1445ffe 100644
--- a/src/main/java/org/bukkit/event/player/PlayerToggleSprintEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerToggleSprintEvent.java
@@ -8,9 +8,11 @@ import org.bukkit.event.HandlerList;
  * Called when a player toggles their sprinting state
  */
 public class PlayerToggleSprintEvent extends PlayerEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
+
+    private boolean cancelled = false;
     private final boolean isSprinting;
-    private boolean cancel = false;
 
     public PlayerToggleSprintEvent(final Player player, final boolean isSprinting) {
         super(player);
@@ -26,12 +28,14 @@ public class PlayerToggleSprintEvent extends PlayerEvent implements Cancellable
         return isSprinting;
     }
 
+    @Override
     public boolean isCancelled() {
-        return cancel;
+        return cancelled;
     }
 
-    public void setCancelled(boolean cancel) {
-        this.cancel = cancel;
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/event/player/PlayerUnleashEntityEvent.java b/src/main/java/org/bukkit/event/player/PlayerUnleashEntityEvent.java
index f6aebef..6266d1e 100644
--- a/src/main/java/org/bukkit/event/player/PlayerUnleashEntityEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerUnleashEntityEvent.java
@@ -9,6 +9,7 @@ import org.bukkit.event.entity.EntityUnleashEvent;
  * Called prior to an entity being unleashed due to a player's action.
  */
 public class PlayerUnleashEntityEvent extends EntityUnleashEvent implements Cancellable {
+
     private final Player player;
     private boolean cancelled = false;
 
@@ -26,11 +27,13 @@ public class PlayerUnleashEntityEvent extends EntityUnleashEvent implements Canc
         return player;
     }
 
+    @Override
     public boolean isCancelled() {
         return cancelled;
     }
 
-    public void setCancelled(boolean cancel) {
-        this.cancelled = cancel;
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
     }
 }
diff --git a/src/main/java/org/bukkit/event/player/PlayerVelocityEvent.java b/src/main/java/org/bukkit/event/player/PlayerVelocityEvent.java
index 69d2fce..ed21664 100644
--- a/src/main/java/org/bukkit/event/player/PlayerVelocityEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerVelocityEvent.java
@@ -9,8 +9,10 @@ import org.bukkit.util.Vector;
  * Called when the velocity of a player changes.
  */
 public class PlayerVelocityEvent extends PlayerEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
-    private boolean cancel = false;
+
+    private boolean cancelled = false;
     private Vector velocity;
 
     public PlayerVelocityEvent(final Player player, final Vector velocity) {
@@ -18,14 +20,6 @@ public class PlayerVelocityEvent extends PlayerEvent implements Cancellable {
         this.velocity = velocity;
     }
 
-    public boolean isCancelled() {
-        return cancel;
-    }
-
-    public void setCancelled(boolean cancel) {
-        this.cancel = cancel;
-    }
-
     /**
      * Gets the velocity vector that will be sent to the player
      *
@@ -45,6 +39,16 @@ public class PlayerVelocityEvent extends PlayerEvent implements Cancellable {
     }
 
     @Override
+    public boolean isCancelled() {
+        return cancelled;
+    }
+
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
+    }
+
+    @Override
     public HandlerList getHandlers() {
         return handlers;
     }
diff --git a/src/main/java/org/bukkit/event/server/MapInitializeEvent.java b/src/main/java/org/bukkit/event/server/MapInitializeEvent.java
index 8834489..a5bb484 100644
--- a/src/main/java/org/bukkit/event/server/MapInitializeEvent.java
+++ b/src/main/java/org/bukkit/event/server/MapInitializeEvent.java
@@ -7,7 +7,9 @@ import org.bukkit.map.MapView;
  * Called when a map is initialized.
  */
 public class MapInitializeEvent extends ServerEvent {
+
     private static final HandlerList handlers = new HandlerList();
+
     private final MapView mapView;
 
     public MapInitializeEvent(final MapView mapView) {
diff --git a/src/main/java/org/bukkit/event/server/PluginDisableEvent.java b/src/main/java/org/bukkit/event/server/PluginDisableEvent.java
index 932c4fd..13c348d 100644
--- a/src/main/java/org/bukkit/event/server/PluginDisableEvent.java
+++ b/src/main/java/org/bukkit/event/server/PluginDisableEvent.java
@@ -7,6 +7,7 @@ import org.bukkit.plugin.Plugin;
  * Called when a plugin is disabled.
  */
 public class PluginDisableEvent extends PluginEvent {
+
     private static final HandlerList handlers = new HandlerList();
 
     public PluginDisableEvent(final Plugin plugin) {
diff --git a/src/main/java/org/bukkit/event/server/PluginEnableEvent.java b/src/main/java/org/bukkit/event/server/PluginEnableEvent.java
index 865316d..4e9032b 100644
--- a/src/main/java/org/bukkit/event/server/PluginEnableEvent.java
+++ b/src/main/java/org/bukkit/event/server/PluginEnableEvent.java
@@ -7,6 +7,7 @@ import org.bukkit.plugin.Plugin;
  * Called when a plugin is enabled.
  */
 public class PluginEnableEvent extends PluginEvent {
+
     private static final HandlerList handlers = new HandlerList();
 
     public PluginEnableEvent(final Plugin plugin) {
diff --git a/src/main/java/org/bukkit/event/server/PluginEvent.java b/src/main/java/org/bukkit/event/server/PluginEvent.java
index 1ad656d..2ae718a 100644
--- a/src/main/java/org/bukkit/event/server/PluginEvent.java
+++ b/src/main/java/org/bukkit/event/server/PluginEvent.java
@@ -6,6 +6,7 @@ import org.bukkit.plugin.Plugin;
  * Used for plugin enable and disable events
  */
 public abstract class PluginEvent extends ServerEvent {
+
     private final Plugin plugin;
 
     public PluginEvent(final Plugin plugin) {
diff --git a/src/main/java/org/bukkit/event/server/RemoteServerCommandEvent.java b/src/main/java/org/bukkit/event/server/RemoteServerCommandEvent.java
index 2a49237..f04c5df 100644
--- a/src/main/java/org/bukkit/event/server/RemoteServerCommandEvent.java
+++ b/src/main/java/org/bukkit/event/server/RemoteServerCommandEvent.java
@@ -8,6 +8,7 @@ import org.bukkit.event.HandlerList;
  * of {@link ServerCommandEvent} for more information.
  */
 public class RemoteServerCommandEvent extends ServerCommandEvent {
+
     private static final HandlerList handlers = new HandlerList();
 
     public RemoteServerCommandEvent(final CommandSender sender, final String command) {
diff --git a/src/main/java/org/bukkit/event/server/ServerCommandEvent.java b/src/main/java/org/bukkit/event/server/ServerCommandEvent.java
index 8a5972a..ecefc12 100644
--- a/src/main/java/org/bukkit/event/server/ServerCommandEvent.java
+++ b/src/main/java/org/bukkit/event/server/ServerCommandEvent.java
@@ -38,7 +38,9 @@ import org.bukkit.event.HandlerList;
  * removed, unexpected behavior may result.
  */
 public class ServerCommandEvent extends ServerEvent {
+
     private static final HandlerList handlers = new HandlerList();
+
     private String command;
     private final CommandSender sender;
 
diff --git a/src/main/java/org/bukkit/event/server/ServerEvent.java b/src/main/java/org/bukkit/event/server/ServerEvent.java
index eb00d6a..15f4dd0 100644
--- a/src/main/java/org/bukkit/event/server/ServerEvent.java
+++ b/src/main/java/org/bukkit/event/server/ServerEvent.java
@@ -6,4 +6,5 @@ import org.bukkit.event.Event;
  * Miscellaneous server events
  */
 public abstract class ServerEvent extends Event {
+
 }
diff --git a/src/main/java/org/bukkit/event/server/ServerListPingEvent.java b/src/main/java/org/bukkit/event/server/ServerListPingEvent.java
index c61afdf..bd6de2b 100644
--- a/src/main/java/org/bukkit/event/server/ServerListPingEvent.java
+++ b/src/main/java/org/bukkit/event/server/ServerListPingEvent.java
@@ -1,20 +1,22 @@
 package org.bukkit.event.server;
 
-import java.net.InetAddress;
-import java.util.Iterator;
-
 import org.apache.commons.lang.Validate;
 import org.bukkit.entity.Player;
 import org.bukkit.event.HandlerList;
 import org.bukkit.util.CachedServerIcon;
 
+import java.net.InetAddress;
+import java.util.Iterator;
+
 /**
  * Called when a server list ping is coming in. Displayed players can be
  * checked and removed by {@link #iterator() iterating} over this event.
  */
 public class ServerListPingEvent extends ServerEvent implements Iterable<Player> {
-    private static final int MAGIC_PLAYER_COUNT = Integer.MIN_VALUE;
+
     private static final HandlerList handlers = new HandlerList();
+    private static final int MAGIC_PLAYER_COUNT = Integer.MIN_VALUE;
+
     private final InetAddress address;
     private String motd;
     private final int numPlayers;
@@ -105,11 +107,11 @@ public class ServerListPingEvent extends ServerEvent implements Iterable<Player>
      * Sets the server-icon sent to the client.
      *
      * @param icon the icon to send to the client
-     * @throws IllegalArgumentException if the {@link CachedServerIcon} is not
-     *     created by the caller of this event; null may be accepted for some
-     *     implementations
+     * @throws IllegalArgumentException      if the {@link CachedServerIcon} is not
+     *                                       created by the caller of this event; null may be accepted for some
+     *                                       implementations
      * @throws UnsupportedOperationException if the caller of this event does
-     *     not support setting the server icon
+     *                                       not support setting the server icon
      */
     public void setServerIcon(CachedServerIcon icon) throws IllegalArgumentException, UnsupportedOperationException {
         throw new UnsupportedOperationException();
@@ -133,7 +135,7 @@ public class ServerListPingEvent extends ServerEvent implements Iterable<Player>
      * any new iterator.
      *
      * @throws UnsupportedOperationException if the caller of this event does
-     *     not support removing players
+     *                                       not support removing players
      */
     @Override
     public Iterator<Player> iterator() throws UnsupportedOperationException {
diff --git a/src/main/java/org/bukkit/event/server/ServiceEvent.java b/src/main/java/org/bukkit/event/server/ServiceEvent.java
index 69bf872..d125ba8 100644
--- a/src/main/java/org/bukkit/event/server/ServiceEvent.java
+++ b/src/main/java/org/bukkit/event/server/ServiceEvent.java
@@ -7,6 +7,7 @@ import org.bukkit.plugin.RegisteredServiceProvider;
  * org.bukkit.plugin.ServicesManager}
  */
 public abstract class ServiceEvent extends ServerEvent {
+
     private final RegisteredServiceProvider<?> provider;
 
     public ServiceEvent(final RegisteredServiceProvider<?> provider) {
diff --git a/src/main/java/org/bukkit/event/server/ServiceRegisterEvent.java b/src/main/java/org/bukkit/event/server/ServiceRegisterEvent.java
index 7dfadde..1cbd992 100644
--- a/src/main/java/org/bukkit/event/server/ServiceRegisterEvent.java
+++ b/src/main/java/org/bukkit/event/server/ServiceRegisterEvent.java
@@ -10,6 +10,7 @@ import org.bukkit.plugin.RegisteredServiceProvider;
  * should not be relied upon.
  */
 public class ServiceRegisterEvent extends ServiceEvent {
+
     private static final HandlerList handlers = new HandlerList();
 
     public ServiceRegisterEvent(RegisteredServiceProvider<?> registeredProvider) {
diff --git a/src/main/java/org/bukkit/event/server/ServiceUnregisterEvent.java b/src/main/java/org/bukkit/event/server/ServiceUnregisterEvent.java
index db61d23..ce9e3fc 100644
--- a/src/main/java/org/bukkit/event/server/ServiceUnregisterEvent.java
+++ b/src/main/java/org/bukkit/event/server/ServiceUnregisterEvent.java
@@ -10,6 +10,7 @@ import org.bukkit.plugin.RegisteredServiceProvider;
  * should not be relied upon.
  */
 public class ServiceUnregisterEvent extends ServiceEvent {
+
     private static final HandlerList handlers = new HandlerList();
 
     public ServiceUnregisterEvent(RegisteredServiceProvider<?> serviceProvider) {
diff --git a/src/main/java/org/bukkit/event/vehicle/VehicleBlockCollisionEvent.java b/src/main/java/org/bukkit/event/vehicle/VehicleBlockCollisionEvent.java
index b643b57..2a83e20 100644
--- a/src/main/java/org/bukkit/event/vehicle/VehicleBlockCollisionEvent.java
+++ b/src/main/java/org/bukkit/event/vehicle/VehicleBlockCollisionEvent.java
@@ -8,7 +8,9 @@ import org.bukkit.event.HandlerList;
  * Raised when a vehicle collides with a block.
  */
 public class VehicleBlockCollisionEvent extends VehicleCollisionEvent {
+
     private static final HandlerList handlers = new HandlerList();
+
     private final Block block;
 
     public VehicleBlockCollisionEvent(final Vehicle vehicle, final Block block) {
diff --git a/src/main/java/org/bukkit/event/vehicle/VehicleCollisionEvent.java b/src/main/java/org/bukkit/event/vehicle/VehicleCollisionEvent.java
index 9dd0579..8bb2d78 100644
--- a/src/main/java/org/bukkit/event/vehicle/VehicleCollisionEvent.java
+++ b/src/main/java/org/bukkit/event/vehicle/VehicleCollisionEvent.java
@@ -6,6 +6,7 @@ import org.bukkit.entity.Vehicle;
  * Raised when a vehicle collides.
  */
 public abstract class VehicleCollisionEvent extends VehicleEvent {
+
     public VehicleCollisionEvent(final Vehicle vehicle) {
         super(vehicle);
     }
diff --git a/src/main/java/org/bukkit/event/vehicle/VehicleCreateEvent.java b/src/main/java/org/bukkit/event/vehicle/VehicleCreateEvent.java
index 22eda72..bd67c73 100644
--- a/src/main/java/org/bukkit/event/vehicle/VehicleCreateEvent.java
+++ b/src/main/java/org/bukkit/event/vehicle/VehicleCreateEvent.java
@@ -7,6 +7,7 @@ import org.bukkit.event.HandlerList;
  * Raised when a vehicle is created.
  */
 public class VehicleCreateEvent extends VehicleEvent {
+
     private static final HandlerList handlers = new HandlerList();
 
     public VehicleCreateEvent(final Vehicle vehicle) {
diff --git a/src/main/java/org/bukkit/event/vehicle/VehicleDamageEvent.java b/src/main/java/org/bukkit/event/vehicle/VehicleDamageEvent.java
index 304ee2c..bab40ea 100644
--- a/src/main/java/org/bukkit/event/vehicle/VehicleDamageEvent.java
+++ b/src/main/java/org/bukkit/event/vehicle/VehicleDamageEvent.java
@@ -10,10 +10,12 @@ import org.bukkit.util.NumberConversions;
  * Raised when a vehicle receives damage.
  */
 public class VehicleDamageEvent extends VehicleEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
+
+    private boolean cancelled;
     private final Entity attacker;
     private double damage;
-    private boolean cancelled;
 
     @Deprecated
     public VehicleDamageEvent(final Vehicle vehicle, final Entity attacker, final int damage) {
@@ -73,12 +75,14 @@ public class VehicleDamageEvent extends VehicleEvent implements Cancellable {
         setDamage(damage);
     }
 
+    @Override
     public boolean isCancelled() {
         return cancelled;
     }
 
-    public void setCancelled(boolean cancel) {
-        this.cancelled = cancel;
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/event/vehicle/VehicleDestroyEvent.java b/src/main/java/org/bukkit/event/vehicle/VehicleDestroyEvent.java
index f1176fd..76c4c52 100644
--- a/src/main/java/org/bukkit/event/vehicle/VehicleDestroyEvent.java
+++ b/src/main/java/org/bukkit/event/vehicle/VehicleDestroyEvent.java
@@ -11,7 +11,9 @@ import org.bukkit.event.HandlerList;
  * 'removed' due to other means.
  */
 public class VehicleDestroyEvent extends VehicleEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
+
     private final Entity attacker;
     private boolean cancelled;
 
@@ -29,12 +31,14 @@ public class VehicleDestroyEvent extends VehicleEvent implements Cancellable {
         return attacker;
     }
 
+    @Override
     public boolean isCancelled() {
         return cancelled;
     }
 
-    public void setCancelled(boolean cancel) {
-        this.cancelled = cancel;
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/event/vehicle/VehicleEnterEvent.java b/src/main/java/org/bukkit/event/vehicle/VehicleEnterEvent.java
index 85c9b21..988efe2 100644
--- a/src/main/java/org/bukkit/event/vehicle/VehicleEnterEvent.java
+++ b/src/main/java/org/bukkit/event/vehicle/VehicleEnterEvent.java
@@ -9,7 +9,9 @@ import org.bukkit.event.HandlerList;
  * Raised when an entity enters a vehicle.
  */
 public class VehicleEnterEvent extends VehicleEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
+
     private boolean cancelled;
     private final Entity entered;
 
@@ -27,12 +29,14 @@ public class VehicleEnterEvent extends VehicleEvent implements Cancellable {
         return entered;
     }
 
+    @Override
     public boolean isCancelled() {
         return cancelled;
     }
 
-    public void setCancelled(boolean cancel) {
-        this.cancelled = cancel;
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/event/vehicle/VehicleEntityCollisionEvent.java b/src/main/java/org/bukkit/event/vehicle/VehicleEntityCollisionEvent.java
index 4d4d0e2..540736b 100644
--- a/src/main/java/org/bukkit/event/vehicle/VehicleEntityCollisionEvent.java
+++ b/src/main/java/org/bukkit/event/vehicle/VehicleEntityCollisionEvent.java
@@ -9,9 +9,11 @@ import org.bukkit.event.HandlerList;
  * Raised when a vehicle collides with an entity.
  */
 public class VehicleEntityCollisionEvent extends VehicleCollisionEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
-    private final Entity entity;
+
     private boolean cancelled = false;
+    private final Entity entity;
     private boolean cancelledPickup = false;
     private boolean cancelledCollision = false;
 
@@ -24,14 +26,6 @@ public class VehicleEntityCollisionEvent extends VehicleCollisionEvent implement
         return entity;
     }
 
-    public boolean isCancelled() {
-        return cancelled;
-    }
-
-    public void setCancelled(boolean cancel) {
-        this.cancelled = cancel;
-    }
-
     public boolean isPickupCancelled() {
         return cancelledPickup;
     }
@@ -49,6 +43,16 @@ public class VehicleEntityCollisionEvent extends VehicleCollisionEvent implement
     }
 
     @Override
+    public boolean isCancelled() {
+        return cancelled;
+    }
+
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
+    }
+
+    @Override
     public HandlerList getHandlers() {
         return handlers;
     }
diff --git a/src/main/java/org/bukkit/event/vehicle/VehicleEvent.java b/src/main/java/org/bukkit/event/vehicle/VehicleEvent.java
index b8255c0..5636f33 100644
--- a/src/main/java/org/bukkit/event/vehicle/VehicleEvent.java
+++ b/src/main/java/org/bukkit/event/vehicle/VehicleEvent.java
@@ -7,6 +7,7 @@ import org.bukkit.event.Event;
  * Represents a vehicle-related event.
  */
 public abstract class VehicleEvent extends Event {
+
     protected Vehicle vehicle;
 
     public VehicleEvent(final Vehicle vehicle) {
diff --git a/src/main/java/org/bukkit/event/vehicle/VehicleExitEvent.java b/src/main/java/org/bukkit/event/vehicle/VehicleExitEvent.java
index 364451b..0d59406 100644
--- a/src/main/java/org/bukkit/event/vehicle/VehicleExitEvent.java
+++ b/src/main/java/org/bukkit/event/vehicle/VehicleExitEvent.java
@@ -9,7 +9,9 @@ import org.bukkit.event.HandlerList;
  * Raised when a living entity exits a vehicle.
  */
 public class VehicleExitEvent extends VehicleEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
+
     private boolean cancelled;
     private final LivingEntity exited;
 
@@ -27,12 +29,14 @@ public class VehicleExitEvent extends VehicleEvent implements Cancellable {
         return exited;
     }
 
+    @Override
     public boolean isCancelled() {
         return cancelled;
     }
 
-    public void setCancelled(boolean cancel) {
-        this.cancelled = cancel;
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/event/vehicle/VehicleMoveEvent.java b/src/main/java/org/bukkit/event/vehicle/VehicleMoveEvent.java
index 9a13e29..78918e6 100644
--- a/src/main/java/org/bukkit/event/vehicle/VehicleMoveEvent.java
+++ b/src/main/java/org/bukkit/event/vehicle/VehicleMoveEvent.java
@@ -8,13 +8,14 @@ import org.bukkit.event.HandlerList;
  * Raised when a vehicle moves.
  */
 public class VehicleMoveEvent extends VehicleEvent {
+
     private static final HandlerList handlers = new HandlerList();
+
     private final Location from;
     private final Location to;
 
     public VehicleMoveEvent(final Vehicle vehicle, final Location from, final Location to) {
         super(vehicle);
-
         this.from = from;
         this.to = to;
     }
@@ -22,7 +23,7 @@ public class VehicleMoveEvent extends VehicleEvent {
     /**
      * Get the previous position.
      *
-     * @return Old position.
+     * @return the old position.
      */
     public Location getFrom() {
         return from;
@@ -31,13 +32,12 @@ public class VehicleMoveEvent extends VehicleEvent {
     /**
      * Get the next position.
      *
-     * @return New position.
+     * @return the new position.
      */
     public Location getTo() {
         return to;
     }
 
-
     @Override
     public HandlerList getHandlers() {
         return handlers;
diff --git a/src/main/java/org/bukkit/event/vehicle/VehicleUpdateEvent.java b/src/main/java/org/bukkit/event/vehicle/VehicleUpdateEvent.java
index eebfdb1..76c1c39 100644
--- a/src/main/java/org/bukkit/event/vehicle/VehicleUpdateEvent.java
+++ b/src/main/java/org/bukkit/event/vehicle/VehicleUpdateEvent.java
@@ -7,6 +7,7 @@ import org.bukkit.event.HandlerList;
  * Called when a vehicle updates
  */
 public class VehicleUpdateEvent extends VehicleEvent {
+
     private static final HandlerList handlers = new HandlerList();
 
     public VehicleUpdateEvent(final Vehicle vehicle) {
diff --git a/src/main/java/org/bukkit/event/weather/LightningStrikeEvent.java b/src/main/java/org/bukkit/event/weather/LightningStrikeEvent.java
index 66fd763..acca18e 100644
--- a/src/main/java/org/bukkit/event/weather/LightningStrikeEvent.java
+++ b/src/main/java/org/bukkit/event/weather/LightningStrikeEvent.java
@@ -9,8 +9,10 @@ import org.bukkit.event.HandlerList;
  * Stores data for lightning striking
  */
 public class LightningStrikeEvent extends WeatherEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
-    private boolean canceled;
+
+    private boolean cancelled;
     private final LightningStrike bolt;
 
     public LightningStrikeEvent(final World world, final LightningStrike bolt) {
@@ -18,14 +20,6 @@ public class LightningStrikeEvent extends WeatherEvent implements Cancellable {
         this.bolt = bolt;
     }
 
-    public boolean isCancelled() {
-        return canceled;
-    }
-
-    public void setCancelled(boolean cancel) {
-        canceled = cancel;
-    }
-
     /**
      * Gets the bolt which is striking the earth.
      *
@@ -36,6 +30,16 @@ public class LightningStrikeEvent extends WeatherEvent implements Cancellable {
     }
 
     @Override
+    public boolean isCancelled() {
+        return cancelled;
+    }
+
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
+    }
+
+    @Override
     public HandlerList getHandlers() {
         return handlers;
     }
diff --git a/src/main/java/org/bukkit/event/weather/ThunderChangeEvent.java b/src/main/java/org/bukkit/event/weather/ThunderChangeEvent.java
index 5e3716e..95b5e1c 100644
--- a/src/main/java/org/bukkit/event/weather/ThunderChangeEvent.java
+++ b/src/main/java/org/bukkit/event/weather/ThunderChangeEvent.java
@@ -8,8 +8,10 @@ import org.bukkit.event.HandlerList;
  * Stores data for thunder state changing in a world
  */
 public class ThunderChangeEvent extends WeatherEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
-    private boolean canceled;
+
+    private boolean cancelled;
     private final boolean to;
 
     public ThunderChangeEvent(final World world, final boolean to) {
@@ -17,14 +19,6 @@ public class ThunderChangeEvent extends WeatherEvent implements Cancellable {
         this.to = to;
     }
 
-    public boolean isCancelled() {
-        return canceled;
-    }
-
-    public void setCancelled(boolean cancel) {
-        canceled = cancel;
-    }
-
     /**
      * Gets the state of thunder that the world is being set to
      *
@@ -35,6 +29,16 @@ public class ThunderChangeEvent extends WeatherEvent implements Cancellable {
     }
 
     @Override
+    public boolean isCancelled() {
+        return cancelled;
+    }
+
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
+    }
+
+    @Override
     public HandlerList getHandlers() {
         return handlers;
     }
diff --git a/src/main/java/org/bukkit/event/weather/WeatherChangeEvent.java b/src/main/java/org/bukkit/event/weather/WeatherChangeEvent.java
index 5d1234e..755118c 100644
--- a/src/main/java/org/bukkit/event/weather/WeatherChangeEvent.java
+++ b/src/main/java/org/bukkit/event/weather/WeatherChangeEvent.java
@@ -8,8 +8,10 @@ import org.bukkit.event.HandlerList;
  * Stores data for weather changing in a world
  */
 public class WeatherChangeEvent extends WeatherEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
-    private boolean canceled;
+
+    private boolean cancelled;
     private final boolean to;
 
     public WeatherChangeEvent(final World world, final boolean to) {
@@ -17,14 +19,6 @@ public class WeatherChangeEvent extends WeatherEvent implements Cancellable {
         this.to = to;
     }
 
-    public boolean isCancelled() {
-        return canceled;
-    }
-
-    public void setCancelled(boolean cancel) {
-        canceled = cancel;
-    }
-
     /**
      * Gets the state of weather that the world is being set to
      *
@@ -35,6 +29,16 @@ public class WeatherChangeEvent extends WeatherEvent implements Cancellable {
     }
 
     @Override
+    public boolean isCancelled() {
+        return cancelled;
+    }
+
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
+    }
+
+    @Override
     public HandlerList getHandlers() {
         return handlers;
     }
diff --git a/src/main/java/org/bukkit/event/weather/WeatherEvent.java b/src/main/java/org/bukkit/event/weather/WeatherEvent.java
index 0cae9bc..08e574c 100644
--- a/src/main/java/org/bukkit/event/weather/WeatherEvent.java
+++ b/src/main/java/org/bukkit/event/weather/WeatherEvent.java
@@ -7,6 +7,7 @@ import org.bukkit.event.Event;
  * Represents a Weather-related event
  */
 public abstract class WeatherEvent extends Event {
+
     protected World world;
 
     public WeatherEvent(final World where) {
diff --git a/src/main/java/org/bukkit/event/world/ChunkEvent.java b/src/main/java/org/bukkit/event/world/ChunkEvent.java
index 4710d40..97c651d 100644
--- a/src/main/java/org/bukkit/event/world/ChunkEvent.java
+++ b/src/main/java/org/bukkit/event/world/ChunkEvent.java
@@ -6,6 +6,7 @@ import org.bukkit.Chunk;
  * Represents a Chunk related event
  */
 public abstract class ChunkEvent extends WorldEvent {
+
     protected Chunk chunk;
 
     protected ChunkEvent(final Chunk chunk) {
diff --git a/src/main/java/org/bukkit/event/world/ChunkLoadEvent.java b/src/main/java/org/bukkit/event/world/ChunkLoadEvent.java
index a45b1cd..5a0a772 100644
--- a/src/main/java/org/bukkit/event/world/ChunkLoadEvent.java
+++ b/src/main/java/org/bukkit/event/world/ChunkLoadEvent.java
@@ -7,7 +7,9 @@ import org.bukkit.event.HandlerList;
  * Called when a chunk is loaded
  */
 public class ChunkLoadEvent extends ChunkEvent {
+
     private static final HandlerList handlers = new HandlerList();
+
     private final boolean newChunk;
 
     public ChunkLoadEvent(final Chunk chunk, final boolean newChunk) {
diff --git a/src/main/java/org/bukkit/event/world/ChunkPopulateEvent.java b/src/main/java/org/bukkit/event/world/ChunkPopulateEvent.java
index 705d955..8697a09 100644
--- a/src/main/java/org/bukkit/event/world/ChunkPopulateEvent.java
+++ b/src/main/java/org/bukkit/event/world/ChunkPopulateEvent.java
@@ -11,6 +11,7 @@ import org.bukkit.generator.BlockPopulator;
  * BlockPopulator}
  */
 public class ChunkPopulateEvent extends ChunkEvent {
+
     private static final HandlerList handlers = new HandlerList();
 
     public ChunkPopulateEvent(final Chunk chunk) {
diff --git a/src/main/java/org/bukkit/event/world/ChunkUnloadEvent.java b/src/main/java/org/bukkit/event/world/ChunkUnloadEvent.java
index f59d091..b7cfdf5 100644
--- a/src/main/java/org/bukkit/event/world/ChunkUnloadEvent.java
+++ b/src/main/java/org/bukkit/event/world/ChunkUnloadEvent.java
@@ -8,19 +8,23 @@ import org.bukkit.event.HandlerList;
  * Called when a chunk is unloaded
  */
 public class ChunkUnloadEvent extends ChunkEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
-    private boolean cancel = false;
+
+    private boolean cancelled = false;
 
     public ChunkUnloadEvent(final Chunk chunk) {
         super(chunk);
     }
 
+    @Override
     public boolean isCancelled() {
-        return cancel;
+        return cancelled;
     }
 
-    public void setCancelled(boolean cancel) {
-        this.cancel = cancel;
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/event/world/PortalCreateEvent.java b/src/main/java/org/bukkit/event/world/PortalCreateEvent.java
index d83d7a9..537ac7b 100644
--- a/src/main/java/org/bukkit/event/world/PortalCreateEvent.java
+++ b/src/main/java/org/bukkit/event/world/PortalCreateEvent.java
@@ -1,7 +1,7 @@
 package org.bukkit.event.world;
 
-import org.bukkit.block.Block;
 import org.bukkit.World;
+import org.bukkit.block.Block;
 import org.bukkit.event.Cancellable;
 import org.bukkit.event.HandlerList;
 
@@ -12,8 +12,10 @@ import java.util.Collection;
  * Called when a portal is created
  */
 public class PortalCreateEvent extends WorldEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
-    private boolean cancel = false;
+
+    private boolean cancelled = false;
     private final ArrayList<Block> blocks = new ArrayList<Block>();
     private CreateReason reason = CreateReason.FIRE;
 
@@ -33,14 +35,6 @@ public class PortalCreateEvent extends WorldEvent implements Cancellable {
         return this.blocks;
     }
 
-    public boolean isCancelled() {
-        return cancel;
-    }
-
-    public void setCancelled(boolean cancel) {
-        this.cancel = cancel;
-    }
-
     /**
      * Gets the reason for the portal's creation
      *
@@ -50,28 +44,40 @@ public class PortalCreateEvent extends WorldEvent implements Cancellable {
         return reason;
     }
 
-    @Override
-    public HandlerList getHandlers() {
-        return handlers;
-    }
-
-    public static HandlerList getHandlerList() {
-        return handlers;
-    }
-
     /**
      * An enum to specify the various reasons for a portal's creation
      */
     public enum CreateReason {
+
         /**
          * When a portal is created 'traditionally' due to a portal frame
          * being set on fire.
          */
         FIRE,
+
         /**
          * When a portal is created as a destination for an existing portal
          * when using the custom PortalTravelAgent
          */
         OBC_DESTINATION
     }
+
+    @Override
+    public HandlerList getHandlers() {
+        return handlers;
+    }
+
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
+
+    @Override
+    public boolean isCancelled() {
+        return cancelled;
+    }
+
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
+    }
 }
diff --git a/src/main/java/org/bukkit/event/world/SpawnChangeEvent.java b/src/main/java/org/bukkit/event/world/SpawnChangeEvent.java
index e99c3c0..2149efe 100644
--- a/src/main/java/org/bukkit/event/world/SpawnChangeEvent.java
+++ b/src/main/java/org/bukkit/event/world/SpawnChangeEvent.java
@@ -1,7 +1,7 @@
 package org.bukkit.event.world;
 
-import org.bukkit.World;
 import org.bukkit.Location;
+import org.bukkit.World;
 import org.bukkit.event.HandlerList;
 
 /**
@@ -9,7 +9,9 @@ import org.bukkit.event.HandlerList;
  * spawn location is included.
  */
 public class SpawnChangeEvent extends WorldEvent {
+
     private static final HandlerList handlers = new HandlerList();
+
     private final Location previousLocation;
 
     public SpawnChangeEvent(final World world, final Location previousLocation) {
diff --git a/src/main/java/org/bukkit/event/world/StructureGrowEvent.java b/src/main/java/org/bukkit/event/world/StructureGrowEvent.java
index d1c9822..afda51f 100644
--- a/src/main/java/org/bukkit/event/world/StructureGrowEvent.java
+++ b/src/main/java/org/bukkit/event/world/StructureGrowEvent.java
@@ -1,6 +1,5 @@
 package org.bukkit.event.world;
 
-import java.util.List;
 import org.bukkit.Location;
 import org.bukkit.TreeType;
 import org.bukkit.block.BlockState;
@@ -8,12 +7,16 @@ import org.bukkit.entity.Player;
 import org.bukkit.event.Cancellable;
 import org.bukkit.event.HandlerList;
 
+import java.util.List;
+
 /**
  * Event that is called when an organic structure attempts to grow (Sapling ->
  * Tree), (Mushroom -> Huge Mushroom), naturally or using bonemeal.
  */
 public class StructureGrowEvent extends WorldEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
+
     private boolean cancelled = false;
     private final Location location;
     private final TreeType species;
@@ -62,7 +65,7 @@ public class StructureGrowEvent extends WorldEvent implements Cancellable {
      * Gets the player that created the structure.
      *
      * @return Player that created the structure, null if was not created
-     *     manually
+     * manually
      */
     public Player getPlayer() {
         return player;
@@ -77,12 +80,14 @@ public class StructureGrowEvent extends WorldEvent implements Cancellable {
         return blocks;
     }
 
+    @Override
     public boolean isCancelled() {
         return cancelled;
     }
 
-    public void setCancelled(boolean cancel) {
-        cancelled = cancel;
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/event/world/WorldEvent.java b/src/main/java/org/bukkit/event/world/WorldEvent.java
index bd89b81..c9963eb 100644
--- a/src/main/java/org/bukkit/event/world/WorldEvent.java
+++ b/src/main/java/org/bukkit/event/world/WorldEvent.java
@@ -7,6 +7,7 @@ import org.bukkit.event.Event;
  * Represents events within a world
  */
 public abstract class WorldEvent extends Event {
+
     private final World world;
 
     public WorldEvent(final World world) {
diff --git a/src/main/java/org/bukkit/event/world/WorldInitEvent.java b/src/main/java/org/bukkit/event/world/WorldInitEvent.java
index 6bf13e0..437c866 100644
--- a/src/main/java/org/bukkit/event/world/WorldInitEvent.java
+++ b/src/main/java/org/bukkit/event/world/WorldInitEvent.java
@@ -7,6 +7,7 @@ import org.bukkit.event.HandlerList;
  * Called when a World is initializing
  */
 public class WorldInitEvent extends WorldEvent {
+
     private static final HandlerList handlers = new HandlerList();
 
     public WorldInitEvent(final World world) {
diff --git a/src/main/java/org/bukkit/event/world/WorldLoadEvent.java b/src/main/java/org/bukkit/event/world/WorldLoadEvent.java
index c5545aa..9139305 100644
--- a/src/main/java/org/bukkit/event/world/WorldLoadEvent.java
+++ b/src/main/java/org/bukkit/event/world/WorldLoadEvent.java
@@ -7,6 +7,7 @@ import org.bukkit.event.HandlerList;
  * Called when a World is loaded
  */
 public class WorldLoadEvent extends WorldEvent {
+
     private static final HandlerList handlers = new HandlerList();
 
     public WorldLoadEvent(final World world) {
diff --git a/src/main/java/org/bukkit/event/world/WorldSaveEvent.java b/src/main/java/org/bukkit/event/world/WorldSaveEvent.java
index d46b413..0ccb43b 100644
--- a/src/main/java/org/bukkit/event/world/WorldSaveEvent.java
+++ b/src/main/java/org/bukkit/event/world/WorldSaveEvent.java
@@ -7,6 +7,7 @@ import org.bukkit.event.HandlerList;
  * Called when a World is saved.
  */
 public class WorldSaveEvent extends WorldEvent {
+
     private static final HandlerList handlers = new HandlerList();
 
     public WorldSaveEvent(final World world) {
diff --git a/src/main/java/org/bukkit/event/world/WorldUnloadEvent.java b/src/main/java/org/bukkit/event/world/WorldUnloadEvent.java
index 110544b..0f3c990 100644
--- a/src/main/java/org/bukkit/event/world/WorldUnloadEvent.java
+++ b/src/main/java/org/bukkit/event/world/WorldUnloadEvent.java
@@ -8,19 +8,23 @@ import org.bukkit.event.HandlerList;
  * Called when a World is unloaded
  */
 public class WorldUnloadEvent extends WorldEvent implements Cancellable {
+
     private static final HandlerList handlers = new HandlerList();
-    private boolean isCancelled;
+
+    private boolean cancelled;
 
     public WorldUnloadEvent(final World world) {
         super(world);
     }
 
+    @Override
     public boolean isCancelled() {
-        return this.isCancelled;
+        return this.cancelled;
     }
 
-    public void setCancelled(boolean cancel) {
-        this.isCancelled = cancel;
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/generator/BlockPopulator.java b/src/main/java/org/bukkit/generator/BlockPopulator.java
index 6a70bdb..2e6f4d9 100644
--- a/src/main/java/org/bukkit/generator/BlockPopulator.java
+++ b/src/main/java/org/bukkit/generator/BlockPopulator.java
@@ -1,9 +1,10 @@
 package org.bukkit.generator;
 
-import java.util.Random;
 import org.bukkit.Chunk;
 import org.bukkit.World;
 
+import java.util.Random;
+
 /**
  * A block populator is responsible for generating a small area of blocks.
  * <p>
@@ -21,7 +22,7 @@ public abstract class BlockPopulator {
      * populator should record any changes required for those chunks and
      * perform the changes when they are ready.
      *
-     * @param world The world to generate in
+     * @param world  The world to generate in
      * @param random The random generator to use
      * @param source The chunk to generate for
      */
diff --git a/src/main/java/org/bukkit/generator/ChunkGenerator.java b/src/main/java/org/bukkit/generator/ChunkGenerator.java
index 8e08bdc..82d0116 100644
--- a/src/main/java/org/bukkit/generator/ChunkGenerator.java
+++ b/src/main/java/org/bukkit/generator/ChunkGenerator.java
@@ -1,14 +1,15 @@
 package org.bukkit.generator;
 
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Random;
 import org.bukkit.Location;
 import org.bukkit.Material;
 import org.bukkit.World;
 import org.bukkit.block.Biome;
 import org.bukkit.block.Block;
 
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Random;
+
 /**
  * A chunk generator is responsible for the initial shaping of an entire
  * chunk. For example, the nether chunk generator should shape netherrack and
@@ -16,33 +17,6 @@ import org.bukkit.block.Block;
  */
 public abstract class ChunkGenerator {
 
-    /**
-     * Interface to biome data for chunk to be generated: initialized with
-     * default values for world type and seed.
-     * <p>
-     * Custom generator is free to access and tailor values during
-     * generateBlockSections() or generateExtBlockSections().
-     */
-    public interface BiomeGrid {
-
-        /**
-         * Get biome at x, z within chunk being generated
-         *
-         * @param x - 0-15
-         * @param z - 0-15
-         * @return Biome value
-         */
-        Biome getBiome(int x, int z);
-
-        /**
-         * Set biome at x, z within chunk being generated
-         *
-         * @param x - 0-15
-         * @param z - 0-15
-         * @param bio - Biome value
-         */
-        void setBiome(int x, int z, Biome bio);
-    }
     @Deprecated
     /**
      * Shapes the chunk for the given coordinates.
@@ -146,14 +120,14 @@ public abstract class ChunkGenerator {
      * implement this method, or should have it return null (which will result
      * in the generateBlockSections() method being called).
      *
-     * @param world The world this chunk will be used for
+     * @param world  The world this chunk will be used for
      * @param random The random generator to use
-     * @param x The X-coordinate of the chunk
-     * @param z The Z-coordinate of the chunk
+     * @param x      The X-coordinate of the chunk
+     * @param z      The Z-coordinate of the chunk
      * @param biomes Proposed biome values for chunk - can be updated by
-     *     generator
+     *               generator
      * @return short[][] containing the types for each block created by this
-     *     generator
+     * generator
      * @deprecated Magic value
      */
     @Deprecated
@@ -200,18 +174,18 @@ public abstract class ChunkGenerator {
      *        return result[y >> 4][((y & 0xF) << 8) | (z << 4) | x];
      *    }
      * </pre>
-     *
+     * <p>
      * Note that this method should <b>never</b> attempt to get the Chunk at
      * the passed coordinates, as doing so may cause an infinite loop
      *
-     * @param world The world this chunk will be used for
+     * @param world  The world this chunk will be used for
      * @param random The random generator to use
-     * @param x The X-coordinate of the chunk
-     * @param z The Z-coordinate of the chunk
+     * @param x      The X-coordinate of the chunk
+     * @param z      The Z-coordinate of the chunk
      * @param biomes Proposed biome values for chunk - can be updated by
-     *     generator
+     *               generator
      * @return short[][] containing the types for each block created by this
-     *     generator
+     * generator
      * @deprecated Magic value
      */
     @Deprecated
@@ -223,21 +197,21 @@ public abstract class ChunkGenerator {
      * Tests if the specified location is valid for a natural spawn position
      *
      * @param world The world we're testing on
-     * @param x X-coordinate of the block to test
-     * @param z Z-coordinate of the block to test
+     * @param x     X-coordinate of the block to test
+     * @param z     Z-coordinate of the block to test
      * @return true if the location is valid, otherwise false
      */
     public boolean canSpawn(World world, int x, int z) {
         Block highest = world.getBlockAt(x, world.getHighestBlockYAt(x, z), z);
 
         switch (world.getEnvironment()) {
-        case NETHER:
-            return true;
-        case THE_END:
-            return highest.getType() != Material.AIR && highest.getType() != Material.WATER && highest.getType() != Material.LAVA;
-        case NORMAL:
-        default:
-            return highest.getType() == Material.SAND || highest.getType() == Material.GRAVEL;
+            case NETHER:
+                return true;
+            case THE_END:
+                return highest.getType() != Material.AIR && highest.getType() != Material.WATER && highest.getType() != Material.LAVA;
+            case NORMAL:
+            default:
+                return highest.getType() == Material.SAND || highest.getType() == Material.GRAVEL;
         }
     }
 
@@ -258,11 +232,39 @@ public abstract class ChunkGenerator {
      * A null value is returned if a world should not use a fixed spawn point,
      * and will instead attempt to find one randomly.
      *
-     * @param world The world to locate a spawn point for
+     * @param world  The world to locate a spawn point for
      * @param random Random generator to use in the calculation
      * @return Location containing a new spawn point, otherwise null
      */
     public Location getFixedSpawnLocation(World world, Random random) {
         return null;
     }
+
+    /**
+     * Interface to biome data for chunk to be generated: initialized with
+     * default values for world type and seed.
+     * <p>
+     * Custom generator is free to access and tailor values during
+     * generateBlockSections() or generateExtBlockSections().
+     */
+    public interface BiomeGrid {
+
+        /**
+         * Get biome at x, z within chunk being generated
+         *
+         * @param x - 0-15
+         * @param z - 0-15
+         * @return Biome value
+         */
+        Biome getBiome(int x, int z);
+
+        /**
+         * Set biome at x, z within chunk being generated
+         *
+         * @param x   - 0-15
+         * @param z   - 0-15
+         * @param bio - Biome value
+         */
+        void setBiome(int x, int z, Biome bio);
+    }
 }
diff --git a/src/main/java/org/bukkit/help/GenericCommandHelpTopic.java b/src/main/java/org/bukkit/help/GenericCommandHelpTopic.java
index 3e85e77..32f93e9 100644
--- a/src/main/java/org/bukkit/help/GenericCommandHelpTopic.java
+++ b/src/main/java/org/bukkit/help/GenericCommandHelpTopic.java
@@ -1,13 +1,11 @@
 package org.bukkit.help;
 
+import org.apache.commons.lang.StringUtils;
 import org.bukkit.ChatColor;
 import org.bukkit.command.Command;
 import org.bukkit.command.CommandSender;
-import org.apache.commons.lang.StringUtils;
 import org.bukkit.command.ConsoleCommandSender;
-import org.bukkit.command.PluginCommand;
 import org.bukkit.command.defaults.VanillaCommand;
-import org.bukkit.help.HelpTopic;
 
 /**
  * Lacking an alternative, the help system will create instances of
diff --git a/src/main/java/org/bukkit/help/HelpMap.java b/src/main/java/org/bukkit/help/HelpMap.java
index 9c1b51b..60fd3e8 100644
--- a/src/main/java/org/bukkit/help/HelpMap.java
+++ b/src/main/java/org/bukkit/help/HelpMap.java
@@ -12,39 +12,40 @@ import java.util.List;
  * <li>General topics are loaded from the help.yml
  * <li>Plugins load and optionally call {@code addTopic()}
  * <li>Registered plugin commands are processed by {@link HelpTopicFactory}
- *     objects to create topics
+ * objects to create topics
  * <li>Topic contents are amended as directed in help.yml
  * </ol>
  */
 public interface HelpMap {
+
     /**
      * Returns a help topic for a given topic name.
      *
      * @param topicName The help topic name to look up.
      * @return A {@link HelpTopic} object matching the topic name or null if
-     *     none can be found.
+     * none can be found.
      */
-    public HelpTopic getHelpTopic(String topicName);
+    HelpTopic getHelpTopic(String topicName);
 
     /**
      * Returns a collection of all the registered help topics.
      *
      * @return All the registered help topics.
      */
-    public Collection<HelpTopic> getHelpTopics();
-    
+    Collection<HelpTopic> getHelpTopics();
+
     /**
      * Adds a topic to the server's help index.
      *
      * @param topic The new help topic to add.
      */
-    public void addTopic(HelpTopic topic);
+    void addTopic(HelpTopic topic);
 
     /**
      * Clears out the contents of the help index. Normally called during
      * server reload.
      */
-    public void clear();
+    void clear();
 
     /**
      * Associates a {@link HelpTopicFactory} object with given command base
@@ -56,14 +57,14 @@ public interface HelpMap {
      * commandClass} base class.
      *
      * @param commandClass The class for which the custom HelpTopicFactory
-     *     applies. Must derive from either {@link org.bukkit.command.Command}
-     *     or {@link org.bukkit.command.CommandExecutor}.
-     * @param factory The {@link HelpTopicFactory} implementation to associate
-     *     with the {@code commandClass}.
+     *                     applies. Must derive from either {@link org.bukkit.command.Command}
+     *                     or {@link org.bukkit.command.CommandExecutor}.
+     * @param factory      The {@link HelpTopicFactory} implementation to associate
+     *                     with the {@code commandClass}.
      * @throws IllegalArgumentException Thrown if {@code commandClass} does
-     *     not derive from a legal base class.
+     *                                  not derive from a legal base class.
      */
-    public void registerHelpTopicFactory(Class<?> commandClass, HelpTopicFactory<?> factory);
+    void registerHelpTopicFactory(Class<?> commandClass, HelpTopicFactory<?> factory);
 
     /**
      * Gets the list of plugins the server administrator has chosen to exclude
@@ -75,5 +76,5 @@ public interface HelpMap {
      *
      * @return A list of plugins that should be excluded from the help index.
      */
-    public List<String> getIgnoredPlugins();
+    List<String> getIgnoredPlugins();
 }
diff --git a/src/main/java/org/bukkit/help/HelpTopic.java b/src/main/java/org/bukkit/help/HelpTopic.java
index a2ba5f5..d702482 100644
--- a/src/main/java/org/bukkit/help/HelpTopic.java
+++ b/src/main/java/org/bukkit/help/HelpTopic.java
@@ -16,11 +16,12 @@ import org.bukkit.entity.Player;
  * the methods in this class.
  */
 public abstract class HelpTopic {
+
     protected String name;
     protected String shortText;
     protected String fullText;
     protected String amendedPermission;
-    
+
     /**
      * Determines if a {@link Player} is allowed to see this help topic.
      * <p>
@@ -41,7 +42,7 @@ public abstract class HelpTopic {
      * HelpTopic#canSee(org.bukkit.command.CommandSender)} function.
      *
      * @param amendedPermission The permission node the server administrator
-     *     wishes to apply to this topic.
+     *                          wishes to apply to this topic.
      */
     public void amendCanSee(String amendedPermission) {
         this.amendedPermission = amendedPermission;
@@ -72,9 +73,8 @@ public abstract class HelpTopic {
      * The result will be paginated to properly fit the user's client.
      *
      * @param forWho The player or console requesting the full text. Useful
-     *     for further security trimming the command's full text based on
-     *     sub-permissions in custom implementations.
-     *
+     *               for further security trimming the command's full text based on
+     *               sub-permissions in custom implementations.
      * @return A full topic description.
      */
     public String getFullText(CommandSender forWho) {
@@ -91,9 +91,9 @@ public abstract class HelpTopic {
      * prepend additional content into an automatically generated help topic.
      *
      * @param amendedShortText The new topic short text to use, or null to
-     *     leave alone.
-     * @param amendedFullText The new topic full text to use, or null to leave
-     *     alone.
+     *                         leave alone.
+     * @param amendedFullText  The new topic full text to use, or null to leave
+     *                         alone.
      */
     public void amendTopic(String amendedShortText, String amendedFullText) {
         shortText = applyAmendment(shortText, amendedShortText);
@@ -106,16 +106,12 @@ public abstract class HelpTopic {
      * expected behavior of the {@link HelpTopic#amendTopic(String, String)}
      * method.
      *
-     * @param baseText The existing text of the help topic.
+     * @param baseText  The existing text of the help topic.
      * @param amendment The amending text from the amendTopic() method.
      * @return The application of the amending text to the existing text,
-     *     according to the expected rules of amendTopic().
+     * according to the expected rules of amendTopic().
      */
     protected String applyAmendment(String baseText, String amendment) {
-        if (amendment == null) {
-            return baseText;
-        } else {
-            return amendment.replaceAll("<text>", baseText);
-        }
+        return (amendment == null) ? baseText : amendment.replaceAll("<text>", baseText);
     }
 }
diff --git a/src/main/java/org/bukkit/help/HelpTopicComparator.java b/src/main/java/org/bukkit/help/HelpTopicComparator.java
index 3e43eb3..1667e2f 100644
--- a/src/main/java/org/bukkit/help/HelpTopicComparator.java
+++ b/src/main/java/org/bukkit/help/HelpTopicComparator.java
@@ -1,7 +1,5 @@
 package org.bukkit.help;
 
-import org.bukkit.help.HelpTopic;
-
 import java.util.Comparator;
 
 /**
@@ -11,31 +9,35 @@ import java.util.Comparator;
  * slash come after topics that don't.
  */
 public class HelpTopicComparator implements Comparator<HelpTopic> {
-    
+
     // Singleton implementations
     private static final TopicNameComparator tnc = new TopicNameComparator();
+    private static final HelpTopicComparator htc = new HelpTopicComparator();
+
+    private HelpTopicComparator() {
+
+    }
+
     public static TopicNameComparator topicNameComparatorInstance() {
         return tnc;
     }
-    
-    private static final HelpTopicComparator htc = new HelpTopicComparator();
+
     public static HelpTopicComparator helpTopicComparatorInstance() {
         return htc;
     }
-    
-    private HelpTopicComparator() {}
 
     public int compare(HelpTopic lhs, HelpTopic rhs) {
         return tnc.compare(lhs.getName(), rhs.getName());
     }
 
     public static class TopicNameComparator implements Comparator<String> {
-        private TopicNameComparator(){}
-        
+        private TopicNameComparator() {
+        }
+
         public int compare(String lhs, String rhs) {
             boolean lhsStartSlash = lhs.startsWith("/");
             boolean rhsStartSlash = rhs.startsWith("/");
-            
+
             if (lhsStartSlash && !rhsStartSlash) {
                 return 1;
             } else if (!lhsStartSlash && rhsStartSlash) {
diff --git a/src/main/java/org/bukkit/help/HelpTopicFactory.java b/src/main/java/org/bukkit/help/HelpTopicFactory.java
index 87d3697..d60fb60 100644
--- a/src/main/java/org/bukkit/help/HelpTopicFactory.java
+++ b/src/main/java/org/bukkit/help/HelpTopicFactory.java
@@ -30,13 +30,14 @@ import org.bukkit.command.Command;
  * @param <TCommand> The base class for your custom commands.
  */
 public interface HelpTopicFactory<TCommand extends Command> {
+
     /**
      * This method accepts a command deriving from a custom command base class
      * and constructs a custom HelpTopic for it.
      *
      * @param command The custom command to build a help topic for.
      * @return A new custom help topic or {@code null} to intentionally NOT
-     *     create a topic.
+     * create a topic.
      */
-    public HelpTopic createTopic(TCommand command);
+    HelpTopic createTopic(TCommand command);
 }
diff --git a/src/main/java/org/bukkit/help/IndexHelpTopic.java b/src/main/java/org/bukkit/help/IndexHelpTopic.java
index c474031..5904547 100644
--- a/src/main/java/org/bukkit/help/IndexHelpTopic.java
+++ b/src/main/java/org/bukkit/help/IndexHelpTopic.java
@@ -101,12 +101,6 @@ public class IndexHelpTopic extends HelpTopic {
      * @return The rendered index line.
      */
     protected String buildIndexLine(CommandSender sender, HelpTopic topic) {
-        StringBuilder line = new StringBuilder();
-        line.append(ChatColor.GOLD);
-        line.append(topic.getName());
-        line.append(": ");
-        line.append(ChatColor.WHITE);
-        line.append(topic.getShortText());
-        return line.toString();
+        return ChatColor.GOLD.toString() + topic.getName() + ": " + ChatColor.WHITE.toString() + topic.getShortText();
     }
 }
diff --git a/src/main/java/org/bukkit/inventory/AnvilInventory.java b/src/main/java/org/bukkit/inventory/AnvilInventory.java
index 70fae71..5b8b9e8 100644
--- a/src/main/java/org/bukkit/inventory/AnvilInventory.java
+++ b/src/main/java/org/bukkit/inventory/AnvilInventory.java
@@ -4,4 +4,5 @@ package org.bukkit.inventory;
  * Interface to the inventory of an Anvil.
  */
 public interface AnvilInventory extends Inventory {
+
 }
diff --git a/src/main/java/org/bukkit/inventory/BeaconInventory.java b/src/main/java/org/bukkit/inventory/BeaconInventory.java
index 2f8769e..04e0277 100644
--- a/src/main/java/org/bukkit/inventory/BeaconInventory.java
+++ b/src/main/java/org/bukkit/inventory/BeaconInventory.java
@@ -6,16 +6,16 @@ package org.bukkit.inventory;
 public interface BeaconInventory extends Inventory {
 
     /**
-     * Set the item powering the beacon.
+     * Get the item powering the beacon.
      *
-     * @param item The new item
+     * @return The current item.
      */
-    void setItem(ItemStack item);
+    ItemStack getItem();
 
     /**
-     * Get the item powering the beacon.
+     * Set the item powering the beacon.
      *
-     * @return The current item.
+     * @param item The new item
      */
-    ItemStack getItem();
+    void setItem(ItemStack item);
 }
diff --git a/src/main/java/org/bukkit/inventory/CraftingInventory.java b/src/main/java/org/bukkit/inventory/CraftingInventory.java
index f71533c..7f26132 100644
--- a/src/main/java/org/bukkit/inventory/CraftingInventory.java
+++ b/src/main/java/org/bukkit/inventory/CraftingInventory.java
@@ -13,33 +13,32 @@ public interface CraftingInventory extends Inventory {
     ItemStack getResult();
 
     /**
-     * Get the contents of the crafting matrix.
+     * Set the item in the result slot of the crafting inventory.
      *
-     * @return The contents.
+     * @param newResult The new result item.
      */
-    ItemStack[] getMatrix();
+    void setResult(ItemStack newResult);
 
     /**
-     * Set the item in the result slot of the crafting inventory.
+     * Get the contents of the crafting matrix.
      *
-     * @param newResult The new result item.
+     * @return The contents.
      */
-    void setResult(ItemStack newResult);
+    ItemStack[] getMatrix();
 
     /**
      * Replace the contents of the crafting matrix
      *
      * @param contents The new contents.
      * @throws IllegalArgumentException if the length of contents is greater
-     *     than the size of the crafting matrix.
+     *                                  than the size of the crafting matrix.
      */
     void setMatrix(ItemStack[] contents);
 
     /**
      * Get the current recipe formed on the crafting inventory, if any.
      *
-     * @return The recipe, or null if the current contents don't match any
-     *     recipe.
+     * @return The recipe, or null if the current contents don't match any recipe.
      */
     Recipe getRecipe();
 }
\ No newline at end of file
diff --git a/src/main/java/org/bukkit/inventory/EnchantingInventory.java b/src/main/java/org/bukkit/inventory/EnchantingInventory.java
index 74a863e..960d610 100644
--- a/src/main/java/org/bukkit/inventory/EnchantingInventory.java
+++ b/src/main/java/org/bukkit/inventory/EnchantingInventory.java
@@ -6,16 +6,16 @@ package org.bukkit.inventory;
 public interface EnchantingInventory extends Inventory {
 
     /**
-     * Set the item being enchanted.
+     * Get the item being enchanted.
      *
-     * @param item The new item
+     * @return The current item.
      */
-    void setItem(ItemStack item);
+    ItemStack getItem();
 
     /**
-     * Get the item being enchanted.
+     * Set the item being enchanted.
      *
-     * @return The current item.
+     * @param item The new item
      */
-    ItemStack getItem();
+    void setItem(ItemStack item);
 }
diff --git a/src/main/java/org/bukkit/inventory/FurnaceInventory.java b/src/main/java/org/bukkit/inventory/FurnaceInventory.java
index 93b41d3..43e465c 100644
--- a/src/main/java/org/bukkit/inventory/FurnaceInventory.java
+++ b/src/main/java/org/bukkit/inventory/FurnaceInventory.java
@@ -15,18 +15,18 @@ public interface FurnaceInventory extends Inventory {
     ItemStack getResult();
 
     /**
-     * Get the current fuel.
+     * Set the current item in the result slot.
      *
-     * @return The item
+     * @param stack The item
      */
-    ItemStack getFuel();
+    void setResult(ItemStack stack);
 
     /**
-     * Get the item currently smelting.
+     * Get the current fuel.
      *
      * @return The item
      */
-    ItemStack getSmelting();
+    ItemStack getFuel();
 
     /**
      * Set the current fuel.
@@ -36,11 +36,11 @@ public interface FurnaceInventory extends Inventory {
     void setFuel(ItemStack stack);
 
     /**
-     * Set the current item in the result slot.
+     * Get the item currently smelting.
      *
-     * @param stack The item
+     * @return The item
      */
-    void setResult(ItemStack stack);
+    ItemStack getSmelting();
 
     /**
      * Set the item currently smelting.
diff --git a/src/main/java/org/bukkit/inventory/FurnaceRecipe.java b/src/main/java/org/bukkit/inventory/FurnaceRecipe.java
index 8075323..7d3e914 100644
--- a/src/main/java/org/bukkit/inventory/FurnaceRecipe.java
+++ b/src/main/java/org/bukkit/inventory/FurnaceRecipe.java
@@ -7,6 +7,7 @@ import org.bukkit.material.MaterialData;
  * Represents a smelting recipe.
  */
 public class FurnaceRecipe implements Recipe {
+
     private ItemStack output;
     private ItemStack ingredient;
 
@@ -35,8 +36,8 @@ public class FurnaceRecipe implements Recipe {
      *
      * @param result The item you want the recipe to create.
      * @param source The input material.
-     * @param data The data value. (Note: This is currently ignored by the
-     *     CraftBukkit server.)
+     * @param data   The data value. (Note: This is currently ignored by the
+     *               CraftBukkit server.)
      * @deprecated Magic value
      */
     @Deprecated
@@ -59,18 +60,8 @@ public class FurnaceRecipe implements Recipe {
      * Sets the input of this furnace recipe.
      *
      * @param input The input material.
-     * @return The changed recipe, so you can chain calls.
-     */
-    public FurnaceRecipe setInput(Material input) {
-        return setInput(input, 0);
-    }
-
-    /**
-     * Sets the input of this furnace recipe.
-     *
-     * @param input The input material.
-     * @param data The data value. (Note: This is currently ignored by the
-     *     CraftBukkit server.)
+     * @param data  The data value. (Note: This is currently ignored by the
+     *              CraftBukkit server.)
      * @return The changed recipe, so you can chain calls.
      * @deprecated Magic value
      */
@@ -90,6 +81,16 @@ public class FurnaceRecipe implements Recipe {
     }
 
     /**
+     * Sets the input of this furnace recipe.
+     *
+     * @param input The input material.
+     * @return The changed recipe, so you can chain calls.
+     */
+    public FurnaceRecipe setInput(Material input) {
+        return setInput(input, 0);
+    }
+
+    /**
      * Get the result of this recipe.
      *
      * @return The resulting stack.
diff --git a/src/main/java/org/bukkit/inventory/HorseInventory.java b/src/main/java/org/bukkit/inventory/HorseInventory.java
index a71efb8..abef3e0 100644
--- a/src/main/java/org/bukkit/inventory/HorseInventory.java
+++ b/src/main/java/org/bukkit/inventory/HorseInventory.java
@@ -13,18 +13,18 @@ public interface HorseInventory extends Inventory {
     ItemStack getSaddle();
 
     /**
-     * Gets the item in the horse's armor slot.
+     * Sets the item in the horse's saddle slot.
      *
-     * @return the armor item
+     * @param stack the new item
      */
-    ItemStack getArmor();
+    void setSaddle(ItemStack stack);
 
     /**
-     * Sets the item in the horse's saddle slot.
+     * Gets the item in the horse's armor slot.
      *
-     * @param stack the new item
+     * @return the armor item
      */
-    void setSaddle(ItemStack stack);
+    ItemStack getArmor();
 
     /**
      * Sets the item in the horse's armor slot.
diff --git a/src/main/java/org/bukkit/inventory/Inventory.java b/src/main/java/org/bukkit/inventory/Inventory.java
index da5d83e..a45b9cf 100644
--- a/src/main/java/org/bukkit/inventory/Inventory.java
+++ b/src/main/java/org/bukkit/inventory/Inventory.java
@@ -1,13 +1,13 @@
 package org.bukkit.inventory;
 
-import java.util.HashMap;
-import java.util.List;
-import java.util.ListIterator;
-
 import org.bukkit.Material;
 import org.bukkit.entity.HumanEntity;
 import org.bukkit.event.inventory.InventoryType;
 
+import java.util.HashMap;
+import java.util.List;
+import java.util.ListIterator;
+
 /**
  * Interface to the various inventories. Behavior relating to {@link
  * Material#AIR} is unspecified.
@@ -19,14 +19,14 @@ public interface Inventory extends Iterable<ItemStack> {
      *
      * @return The size of the inventory
      */
-    public int getSize();
+    int getSize();
 
     /**
      * Returns the maximum stack size for an ItemStack in this inventory.
      *
      * @return The maximum size for an ItemStack in this inventory.
      */
-    public int getMaxStackSize();
+    int getMaxStackSize();
 
     /**
      * This method allows you to change the maximum stack size for an
@@ -37,21 +37,21 @@ public interface Inventory extends Iterable<ItemStack> {
      * <li>Not all inventories respect this value.
      * <li>Stacks larger than 127 may be clipped when the world is saved.
      * <li>This value is not guaranteed to be preserved; be sure to set it
-     *     before every time you want to set a slot over the max stack size.
+     * before every time you want to set a slot over the max stack size.
      * <li>Stacks larger than the default max size for this type of inventory
-     *     may not display correctly in the client.
+     * may not display correctly in the client.
      * </ul>
      *
      * @param size The new maximum stack size for items in this inventory.
      */
-    public void setMaxStackSize(int size);
+    void setMaxStackSize(int size);
 
     /**
      * Returns the name of the inventory
      *
      * @return The String with the name of the inventory
      */
-    public String getName();
+    String getName();
 
     /**
      * Returns the ItemStack found in the slot at the given index
@@ -59,15 +59,15 @@ public interface Inventory extends Iterable<ItemStack> {
      * @param index The index of the Slot's ItemStack to return
      * @return The ItemStack in the slot
      */
-    public ItemStack getItem(int index);
+    ItemStack getItem(int index);
 
     /**
      * Stores the ItemStack at the given index of the inventory.
      *
      * @param index The index where to put the ItemStack
-     * @param item The ItemStack to set
+     * @param item  The ItemStack to set
      */
-    public void setItem(int index, ItemStack item);
+    void setItem(int index, ItemStack item);
 
     /**
      * Stores the given ItemStacks in the inventory. This will try to fill
@@ -89,7 +89,7 @@ public interface Inventory extends Iterable<ItemStack> {
      * @return A HashMap containing items that didn't fit.
      * @throws IllegalArgumentException if items or any element in it is null
      */
-    public HashMap<Integer, ItemStack> addItem(ItemStack... items) throws IllegalArgumentException;
+    HashMap<Integer, ItemStack> addItem(ItemStack... items) throws IllegalArgumentException;
 
     /**
      * Removes the given ItemStacks from the inventory.
@@ -106,25 +106,25 @@ public interface Inventory extends Iterable<ItemStack> {
      * @return A HashMap containing items that couldn't be removed.
      * @throws IllegalArgumentException if items is null
      */
-    public HashMap<Integer, ItemStack> removeItem(ItemStack... items) throws IllegalArgumentException;
+    HashMap<Integer, ItemStack> removeItem(ItemStack... items) throws IllegalArgumentException;
 
     /**
      * Returns all ItemStacks from the inventory
      *
      * @return An array of ItemStacks from the inventory.
      */
-    public ItemStack[] getContents();
+    ItemStack[] getContents();
 
     /**
      * Completely replaces the inventory's contents. Removes all existing
      * contents and replaces it with the ItemStacks given in the array.
      *
      * @param items A complete replacement for the contents; the length must
-     *     be less than or equal to {@link #getSize()}.
+     *              be less than or equal to {@link #getSize()}.
      * @throws IllegalArgumentException If the array has more items than the
-     *     inventory.
+     *                                  inventory.
      */
-    public void setContents(ItemStack[] items) throws IllegalArgumentException;
+    void setContents(ItemStack[] items) throws IllegalArgumentException;
 
     /**
      * Checks if the inventory contains any ItemStacks with the given
@@ -135,7 +135,7 @@ public interface Inventory extends Iterable<ItemStack> {
      * @deprecated Magic value
      */
     @Deprecated
-    public boolean contains(int materialId);
+    boolean contains(int materialId);
 
     /**
      * Checks if the inventory contains any ItemStacks with the given
@@ -145,7 +145,7 @@ public interface Inventory extends Iterable<ItemStack> {
      * @return true if an ItemStack is found with the given Material
      * @throws IllegalArgumentException if material is null
      */
-    public boolean contains(Material material) throws IllegalArgumentException;
+    boolean contains(Material material) throws IllegalArgumentException;
 
     /**
      * Checks if the inventory contains any ItemStacks matching the given
@@ -156,34 +156,34 @@ public interface Inventory extends Iterable<ItemStack> {
      *
      * @param item The ItemStack to match against
      * @return false if item is null, true if any exactly matching ItemStacks
-     *     were found
+     * were found
      */
-    public boolean contains(ItemStack item);
+    boolean contains(ItemStack item);
 
     /**
      * Checks if the inventory contains any ItemStacks with the given
      * materialId, adding to at least the minimum amount specified.
      *
      * @param materialId The materialId to check for
-     * @param amount The minimum amount to look for
+     * @param amount     The minimum amount to look for
      * @return true if this contains any matching ItemStack with the given
-     *     materialId and amount
+     * materialId and amount
      * @deprecated Magic value
      */
     @Deprecated
-    public boolean contains(int materialId, int amount);
+    boolean contains(int materialId, int amount);
 
     /**
      * Checks if the inventory contains any ItemStacks with the given
      * material, adding to at least the minimum amount specified.
      *
      * @param material The material to check for
-     * @param amount The minimum amount
+     * @param amount   The minimum amount
      * @return true if amount is less than 1, true if enough ItemStacks were
-     *     found to add to the given amount
+     * found to add to the given amount
      * @throws IllegalArgumentException if material is null
      */
-    public boolean contains(Material material, int amount) throws IllegalArgumentException;
+    boolean contains(Material material, int amount) throws IllegalArgumentException;
 
     /**
      * Checks if the inventory contains at least the minimum amount specified
@@ -192,24 +192,24 @@ public interface Inventory extends Iterable<ItemStack> {
      * An ItemStack only counts if both the type and the amount of the stack
      * match.
      *
-     * @param item the ItemStack to match against
+     * @param item   the ItemStack to match against
      * @param amount how many identical stacks to check for
      * @return false if item is null, true if amount less than 1, true if
-     *     amount of exactly matching ItemStacks were found
+     * amount of exactly matching ItemStacks were found
      * @see #containsAtLeast(ItemStack, int)
      */
-    public boolean contains(ItemStack item, int amount);
+    boolean contains(ItemStack item, int amount);
 
     /**
      * Checks if the inventory contains ItemStacks matching the given
      * ItemStack whose amounts sum to at least the minimum amount specified.
      *
-     * @param item the ItemStack to match against
+     * @param item   the ItemStack to match against
      * @param amount the minimum amount
      * @return false if item is null, true if amount less than 1, true if
-     *     enough ItemStacks were found to add to the given amount
+     * enough ItemStacks were found to add to the given amount
      */
-    public boolean containsAtLeast(ItemStack item, int amount);
+    boolean containsAtLeast(ItemStack item, int amount);
 
     /**
      * Returns a HashMap with all slots and ItemStacks in the inventory with
@@ -224,7 +224,7 @@ public interface Inventory extends Iterable<ItemStack> {
      * @deprecated Magic value
      */
     @Deprecated
-    public HashMap<Integer, ? extends ItemStack> all(int materialId);
+    HashMap<Integer, ? extends ItemStack> all(int materialId);
 
     /**
      * Returns a HashMap with all slots and ItemStacks in the inventory with
@@ -238,7 +238,7 @@ public interface Inventory extends Iterable<ItemStack> {
      * @return A HashMap containing the slot index, ItemStack pairs
      * @throws IllegalArgumentException if material is null
      */
-    public HashMap<Integer, ? extends ItemStack> all(Material material) throws IllegalArgumentException;
+    HashMap<Integer, ? extends ItemStack> all(Material material) throws IllegalArgumentException;
 
     /**
      * Finds all slots in the inventory containing any ItemStacks with the
@@ -252,7 +252,7 @@ public interface Inventory extends Iterable<ItemStack> {
      * @param item The ItemStack to match against
      * @return A map from slot indexes to item at index
      */
-    public HashMap<Integer, ? extends ItemStack> all(ItemStack item);
+    HashMap<Integer, ? extends ItemStack> all(ItemStack item);
 
     /**
      * Finds the first slot in the inventory containing an ItemStack with the
@@ -263,7 +263,7 @@ public interface Inventory extends Iterable<ItemStack> {
      * @deprecated Magic value
      */
     @Deprecated
-    public int first(int materialId);
+    int first(int materialId);
 
     /**
      * Finds the first slot in the inventory containing an ItemStack with the
@@ -273,7 +273,7 @@ public interface Inventory extends Iterable<ItemStack> {
      * @return The slot index of the given Material or -1 if not found
      * @throws IllegalArgumentException if material is null
      */
-    public int first(Material material) throws IllegalArgumentException;
+    int first(Material material) throws IllegalArgumentException;
 
     /**
      * Returns the first slot in the inventory containing an ItemStack with
@@ -283,14 +283,14 @@ public interface Inventory extends Iterable<ItemStack> {
      * @param item The ItemStack to match against
      * @return The slot index of the given ItemStack or -1 if not found
      */
-    public int first(ItemStack item);
+    int first(ItemStack item);
 
     /**
      * Returns the first empty Slot.
      *
      * @return The first empty Slot found, or -1 if no empty slots.
      */
-    public int firstEmpty();
+    int firstEmpty();
 
     /**
      * Removes all stacks in the inventory matching the given materialId.
@@ -299,7 +299,7 @@ public interface Inventory extends Iterable<ItemStack> {
      * @deprecated Magic value
      */
     @Deprecated
-    public void remove(int materialId);
+    void remove(int materialId);
 
     /**
      * Removes all stacks in the inventory matching the given material.
@@ -307,7 +307,7 @@ public interface Inventory extends Iterable<ItemStack> {
      * @param material The material to remove
      * @throws IllegalArgumentException if material is null
      */
-    public void remove(Material material) throws IllegalArgumentException;
+    void remove(Material material) throws IllegalArgumentException;
 
     /**
      * Removes all stacks in the inventory matching the given stack.
@@ -317,19 +317,19 @@ public interface Inventory extends Iterable<ItemStack> {
      *
      * @param item The ItemStack to match against
      */
-    public void remove(ItemStack item);
+    void remove(ItemStack item);
 
     /**
      * Clears out a particular slot in the index.
      *
      * @param index The index to empty.
      */
-    public void clear(int index);
+    void clear(int index);
 
     /**
      * Clears out the whole Inventory.
      */
-    public void clear();
+    void clear();
 
     /**
      * Gets a list of players viewing the inventory. Note that a player is
@@ -342,31 +342,31 @@ public interface Inventory extends Iterable<ItemStack> {
      *
      * @return A list of HumanEntities who are viewing this Inventory.
      */
-    public List<HumanEntity> getViewers();
+    List<HumanEntity> getViewers();
 
     /**
      * Returns the title of this inventory.
      *
      * @return A String with the title.
      */
-    public String getTitle();
+    String getTitle();
 
     /**
      * Returns what type of inventory this is.
      *
      * @return The InventoryType representing the type of inventory.
      */
-    public InventoryType getType();
+    InventoryType getType();
 
     /**
      * Gets the block or entity belonging to the open inventory
      *
      * @return The holder of the inventory; null if it has no holder.
      */
-    public InventoryHolder getHolder();
+    InventoryHolder getHolder();
 
     @Override
-    public ListIterator<ItemStack> iterator();
+    ListIterator<ItemStack> iterator();
 
     /**
      * Returns an iterator starting at the given index. If the index is
@@ -377,5 +377,5 @@ public interface Inventory extends Iterable<ItemStack> {
      * @param index The index.
      * @return An iterator.
      */
-    public ListIterator<ItemStack> iterator(int index);
+    ListIterator<ItemStack> iterator(int index);
 }
diff --git a/src/main/java/org/bukkit/inventory/InventoryHolder.java b/src/main/java/org/bukkit/inventory/InventoryHolder.java
index 9c06a3d..5a32b59 100644
--- a/src/main/java/org/bukkit/inventory/InventoryHolder.java
+++ b/src/main/java/org/bukkit/inventory/InventoryHolder.java
@@ -7,5 +7,5 @@ public interface InventoryHolder {
      *
      * @return The inventory.
      */
-    public Inventory getInventory();
+    Inventory getInventory();
 }
diff --git a/src/main/java/org/bukkit/inventory/InventoryView.java b/src/main/java/org/bukkit/inventory/InventoryView.java
index 7e98d52..e30ab61 100644
--- a/src/main/java/org/bukkit/inventory/InventoryView.java
+++ b/src/main/java/org/bukkit/inventory/InventoryView.java
@@ -13,62 +13,9 @@ import org.bukkit.event.inventory.InventoryType;
  * as it should.
  */
 public abstract class InventoryView {
-    public final static int OUTSIDE = -999;
-    /**
-     * Represents various extra properties of certain inventory windows.
-     */
-    public enum Property {
-        /**
-         * The progress of the down-pointing arrow in a brewing inventory.
-         */
-        BREW_TIME(0, InventoryType.BREWING),
-        /**
-         * The progress of the right-pointing arrow in a furnace inventory.
-         */
-        COOK_TIME(0, InventoryType.FURNACE),
-        /**
-         * The progress of the flame in a furnace inventory.
-         */
-        BURN_TIME(1, InventoryType.FURNACE),
-        /**
-         * How many total ticks the current fuel should last.
-         */
-        TICKS_FOR_CURRENT_FUEL(2, InventoryType.FURNACE),
-        /**
-         * In an enchanting inventory, the top button's experience level
-         * value.
-         */
-        ENCHANT_BUTTON1(0, InventoryType.ENCHANTING),
-        /**
-         * In an enchanting inventory, the middle button's experience level
-         * value.
-         */
-        ENCHANT_BUTTON2(1, InventoryType.ENCHANTING),
-        /**
-         * In an enchanting inventory, the bottom button's experience level
-         * value.
-         */
-        ENCHANT_BUTTON3(2, InventoryType.ENCHANTING);
-        int id;
-        InventoryType style;
-        private Property(int id, InventoryType appliesTo) {
-            this.id = id;
-            style = appliesTo;
-        }
 
-        public InventoryType getType() {
-            return style;
-        }
+    public final static int OUTSIDE = -999;
 
-        /**
-         *
-         * @deprecated Magic value
-         */
-        @Deprecated
-        public int getId() {
-            return id;
-        }
-    }
     /**
      * Get the upper inventory involved in this transaction.
      *
@@ -111,9 +58,9 @@ public abstract class InventoryView {
     public void setItem(int slot, ItemStack item) {
         if (slot != OUTSIDE) {
             if (slot < getTopInventory().getSize()) {
-                getTopInventory().setItem(convertSlot(slot),item);
+                getTopInventory().setItem(convertSlot(slot), item);
             } else {
-                getBottomInventory().setItem(convertSlot(slot),item);
+                getBottomInventory().setItem(convertSlot(slot), item);
             }
         } else {
             getPlayer().getWorld().dropItemNaturally(getPlayer().getLocation(), item);
@@ -138,23 +85,23 @@ public abstract class InventoryView {
     }
 
     /**
-     * Sets the item on the cursor of one of the viewing players.
+     * Get the item on the cursor of one of the viewing players.
      *
-     * @param item The item to put on the cursor, or null to remove the item
-     *     on their cursor.
+     * @return The item on the player's cursor, or null if they aren't holding
+     * one.
      */
-    public final void setCursor(ItemStack item) {
-        getPlayer().setItemOnCursor(item);
+    public final ItemStack getCursor() {
+        return getPlayer().getItemOnCursor();
     }
 
     /**
-     * Get the item on the cursor of one of the viewing players.
+     * Sets the item on the cursor of one of the viewing players.
      *
-     * @return The item on the player's cursor, or null if they aren't holding
-     *     one.
+     * @param item The item to put on the cursor, or null to remove the item
+     *             on their cursor.
      */
-    public final ItemStack getCursor() {
-        return getPlayer().getItemOnCursor();
+    public final void setCursor(ItemStack item) {
+        getPlayer().setItemOnCursor(item);
     }
 
     /**
@@ -171,17 +118,22 @@ public abstract class InventoryView {
      */
     public final int convertSlot(int rawSlot) {
         int numInTop = getTopInventory().getSize();
+
         if (rawSlot < numInTop) {
             return rawSlot;
         }
+
         int slot = rawSlot - numInTop;
+
         if (getPlayer().getGameMode() == GameMode.CREATIVE && getType() == InventoryType.PLAYER) {
             return slot;
         }
+
         if (getType() == InventoryType.CRAFTING) {
-            if(slot < 4) return 39 - slot;
+            if (slot < 4) return 39 - slot;
             else slot -= 4;
         }
+
         if (slot >= 27) slot -= 27;
         else slot += 9;
         return slot;
@@ -211,10 +163,10 @@ public abstract class InventoryView {
      * Sets an extra property of this inventory if supported by that
      * inventory, for example the state of a progress bar.
      *
-     * @param prop the window property to update
+     * @param prop  the window property to update
      * @param value the new value for the window property
      * @return true if the property was updated successfully, false if the
-     *     property is not supported by that inventory
+     * property is not supported by that inventory
      */
     public final boolean setProperty(Property prop, int value) {
         return getPlayer().setWindowProperty(prop, value);
@@ -228,4 +180,67 @@ public abstract class InventoryView {
     public final String getTitle() {
         return getTopInventory().getTitle();
     }
+
+    /**
+     * Represents various extra properties of certain inventory windows.
+     */
+    public enum Property {
+        /**
+         * The progress of the down-pointing arrow in a brewing inventory.
+         */
+        BREW_TIME(0, InventoryType.BREWING),
+
+        /**
+         * The progress of the right-pointing arrow in a furnace inventory.
+         */
+        COOK_TIME(0, InventoryType.FURNACE),
+
+        /**
+         * The progress of the flame in a furnace inventory.
+         */
+        BURN_TIME(1, InventoryType.FURNACE),
+
+        /**
+         * How many total ticks the current fuel should last.
+         */
+        TICKS_FOR_CURRENT_FUEL(2, InventoryType.FURNACE),
+
+        /**
+         * In an enchanting inventory, the top button's experience level
+         * value.
+         */
+        ENCHANT_BUTTON1(0, InventoryType.ENCHANTING),
+
+        /**
+         * In an enchanting inventory, the middle button's experience level
+         * value.
+         */
+        ENCHANT_BUTTON2(1, InventoryType.ENCHANTING),
+
+        /**
+         * In an enchanting inventory, the bottom button's experience level
+         * value.
+         */
+        ENCHANT_BUTTON3(2, InventoryType.ENCHANTING);
+
+        private final int id;
+        private final InventoryType style;
+
+        Property(int id, InventoryType appliesTo) {
+            this.id = id;
+            style = appliesTo;
+        }
+
+        public InventoryType getType() {
+            return style;
+        }
+
+        /**
+         * @deprecated Magic value
+         */
+        @Deprecated
+        public int getId() {
+            return id;
+        }
+    }
 }
diff --git a/src/main/java/org/bukkit/inventory/ItemFactory.java b/src/main/java/org/bukkit/inventory/ItemFactory.java
index 52a8d4d..e4d07de 100644
--- a/src/main/java/org/bukkit/inventory/ItemFactory.java
+++ b/src/main/java/org/bukkit/inventory/ItemFactory.java
@@ -21,7 +21,7 @@ public interface ItemFactory {
      *
      * @param material The material to consider as base for the meta
      * @return a new ItemMeta that could be applied to an item stack of the
-     *     specified material
+     * specified material
      */
     ItemMeta getItemMeta(final Material material);
 
@@ -32,12 +32,12 @@ public interface ItemFactory {
      * A {@link SkullMeta} would not be valid for a sword, but a normal {@link
      * ItemMeta} from an enchanted dirt block would.
      *
-     * @param meta Meta to check
+     * @param meta  Meta to check
      * @param stack Item that meta will be applied to
      * @return true if the meta can be applied without losing data, false
-     *     otherwise
+     * otherwise
      * @throws IllegalArgumentException if the meta was not created by this
-     *     factory
+     *                                  factory
      */
     boolean isApplicable(final ItemMeta meta, final ItemStack stack) throws IllegalArgumentException;
 
@@ -48,12 +48,12 @@ public interface ItemFactory {
      * A {@link SkullMeta} would not be valid for a sword, but a normal {@link
      * ItemMeta} from an enchanted dirt block would.
      *
-     * @param meta Meta to check
+     * @param meta     Meta to check
      * @param material Material that meta will be applied to
      * @return true if the meta can be applied without losing data, false
-     *     otherwise
+     * otherwise
      * @throws IllegalArgumentException if the meta was not created by this
-     *     factory
+     *                                  factory
      */
     boolean isApplicable(final ItemMeta meta, final Material material) throws IllegalArgumentException;
 
@@ -62,11 +62,11 @@ public interface ItemFactory {
      *
      * @param meta1 First meta to compare, and may be null to indicate no data
      * @param meta2 Second meta to compare, and may be null to indicate no
-     *     data
+     *              data
      * @return false if one of the meta has data the other does not, otherwise
-     *     true
+     * true
      * @throws IllegalArgumentException if either meta was not created by this
-     *     factory
+     *                                  factory
      */
     boolean equals(final ItemMeta meta1, final ItemMeta meta2) throws IllegalArgumentException;
 
@@ -83,13 +83,13 @@ public interface ItemFactory {
      * specified meta that is applicable to an {@link ItemMeta}, the highest
      * common interface.
      *
-     * @param meta the meta to convert
+     * @param meta  the meta to convert
      * @param stack the stack to convert the meta for
      * @return An appropriate item meta for the specified item stack. No
-     *     guarantees are made as to if a copy is returned. This will be null
-     *     for a stack of air.
+     * guarantees are made as to if a copy is returned. This will be null
+     * for a stack of air.
      * @throws IllegalArgumentException if the specified meta was not created
-     *     by this factory
+     *                                  by this factory
      */
     ItemMeta asMetaFor(final ItemMeta meta, final ItemStack stack) throws IllegalArgumentException;
 
@@ -106,12 +106,12 @@ public interface ItemFactory {
      * specified meta that is applicable to an {@link ItemMeta}, the highest
      * common interface.
      *
-     * @param meta the meta to convert
+     * @param meta     the meta to convert
      * @param material the material to convert the meta for
      * @return An appropriate item meta for the specified item material. No
-     *     guarantees are made as to if a copy is returned. This will be null for air.
+     * guarantees are made as to if a copy is returned. This will be null for air.
      * @throws IllegalArgumentException if the specified meta was not created
-     *     by this factory
+     *                                  by this factory
      */
     ItemMeta asMetaFor(final ItemMeta meta, final Material material) throws IllegalArgumentException;
 
diff --git a/src/main/java/org/bukkit/inventory/ItemStack.java b/src/main/java/org/bukkit/inventory/ItemStack.java
index 6137c99..3986c49 100644
--- a/src/main/java/org/bukkit/inventory/ItemStack.java
+++ b/src/main/java/org/bukkit/inventory/ItemStack.java
@@ -1,9 +1,6 @@
 package org.bukkit.inventory;
 
 import com.google.common.collect.ImmutableMap;
-import java.util.LinkedHashMap;
-import java.util.Map;
-
 import org.apache.commons.lang.Validate;
 import org.bukkit.Bukkit;
 import org.bukkit.Material;
@@ -13,10 +10,14 @@ import org.bukkit.enchantments.Enchantment;
 import org.bukkit.inventory.meta.ItemMeta;
 import org.bukkit.material.MaterialData;
 
+import java.util.LinkedHashMap;
+import java.util.Map;
+
 /**
  * Represents a stack of items
  */
 public class ItemStack implements Cloneable, ConfigurationSerializable {
+
     private int type = 0;
     private int amount = 0;
     private MaterialData data = null;
@@ -24,7 +25,9 @@ public class ItemStack implements Cloneable, ConfigurationSerializable {
     private ItemMeta meta;
 
     @Utility
-    protected ItemStack() {}
+    protected ItemStack() {
+
+    }
 
     /**
      * Defaults stack size to 1, with no extra data
@@ -49,7 +52,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable {
     /**
      * An item stack with no extra data
      *
-     * @param type item material id
+     * @param type   item material id
      * @param amount stack size
      * @deprecated Magic value
      */
@@ -61,7 +64,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable {
     /**
      * An item stack with no extra data
      *
-     * @param type item material
+     * @param type   item material
      * @param amount stack size
      */
     public ItemStack(final Material type, final int amount) {
@@ -71,7 +74,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable {
     /**
      * An item stack with the specified damage / durability
      *
-     * @param type item material id
+     * @param type   item material id
      * @param amount stack size
      * @param damage durability / damage
      * @deprecated Magic value
@@ -86,7 +89,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable {
     /**
      * An item stack with the specified damage / durabiltiy
      *
-     * @param type item material
+     * @param type   item material
      * @param amount stack size
      * @param damage durability / damage
      */
@@ -121,7 +124,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable {
      *
      * @param stack the stack to copy
      * @throws IllegalArgumentException if the specified stack is null or
-     *     returns an item meta not created by the item factory
+     *                                  returns an item meta not created by the item factory
      */
     public ItemStack(final ItemStack stack) throws IllegalArgumentException {
         Validate.notNull(stack, "Cannot copy null stack");
@@ -191,6 +194,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable {
         if (this.meta != null) {
             this.meta = Bukkit.getItemFactory().asMetaFor(meta, getType0());
         }
+
         createData((byte) 0);
     }
 
@@ -275,17 +279,13 @@ public class ItemStack implements Cloneable, ConfigurationSerializable {
         if (material != null) {
             return material.getMaxStackSize();
         }
+
         return -1;
     }
 
     private void createData(final byte data) {
         Material mat = Material.getMaterial(type);
-
-        if (mat == null) {
-            this.data = new MaterialData(type, data);
-        } else {
-            this.data = mat.getNewData(data);
-        }
+        this.data = (mat == null) ? new MaterialData(type, data) : mat.getNewData(data);
     }
 
     @Override
@@ -295,6 +295,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable {
         if (hasItemMeta()) {
             toString.append(", ").append(getItemMeta());
         }
+
         return toString.append('}').toString();
     }
 
@@ -304,6 +305,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable {
         if (this == obj) {
             return true;
         }
+
         if (!(obj instanceof ItemStack)) {
             return false;
         }
@@ -323,11 +325,11 @@ public class ItemStack implements Cloneable, ConfigurationSerializable {
     public boolean isSimilar(ItemStack stack) {
         if (stack == null) {
             return false;
-        }
-        if (stack == this) {
+        } else if (stack == this) {
             return true;
         }
-        return getTypeId() == stack.getTypeId() && getDurability() == stack.getDurability() && hasItemMeta() == stack.hasItemMeta() && (hasItemMeta() ? Bukkit.getItemFactory().equals(getItemMeta(), stack.getItemMeta()) : true);
+
+        return getTypeId() == stack.getTypeId() && getDurability() == stack.getDurability() && hasItemMeta() == stack.hasItemMeta() && (!hasItemMeta() || Bukkit.getItemFactory().equals(getItemMeta(), stack.getItemMeta()));
     }
 
     @Override
@@ -353,12 +355,10 @@ public class ItemStack implements Cloneable, ConfigurationSerializable {
     @Utility
     public final int hashCode() {
         int hash = 1;
-
         hash = hash * 31 + getTypeId();
         hash = hash * 31 + getAmount();
         hash = hash * 31 + (getDurability() & 0xffff);
         hash = hash * 31 + (hasItemMeta() ? (meta == null ? getItemMeta().hashCode() : meta.hashCode()) : 0);
-
         return hash;
     }
 
@@ -369,7 +369,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable {
      * @return True if this has the given enchantment
      */
     public boolean containsEnchantment(Enchantment ench) {
-        return meta == null ? false : meta.hasEnchant(ench);
+        return meta != null && meta.hasEnchant(ench);
     }
 
     /**
@@ -401,8 +401,8 @@ public class ItemStack implements Cloneable, ConfigurationSerializable {
      * @param enchantments Enchantments to add
      * @throws IllegalArgumentException if the specified enchantments is null
      * @throws IllegalArgumentException if any specific enchantment or level
-     *     is null. <b>Warning</b>: Some enchantments may be added before this
-     *     exception is thrown.
+     *                                  is null. <b>Warning</b>: Some enchantments may be added before this
+     *                                  exception is thrown.
      */
     @Utility
     public void addEnchantments(Map<Enchantment, Integer> enchantments) {
@@ -418,10 +418,10 @@ public class ItemStack implements Cloneable, ConfigurationSerializable {
      * If this item stack already contained the given enchantment (at any
      * level), it will be replaced.
      *
-     * @param ench Enchantment to add
+     * @param ench  Enchantment to add
      * @param level Level of the enchantment
      * @throws IllegalArgumentException if enchantment null, or enchantment is
-     *     not applicable
+     *                                  not applicable
      */
     @Utility
     public void addEnchantment(Enchantment ench, int level) {
@@ -460,7 +460,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable {
      * This method is unsafe and will ignore level restrictions or item type.
      * Use at your own discretion.
      *
-     * @param ench Enchantment to add
+     * @param ench  Enchantment to add
      * @param level Level of the enchantment
      */
     public void addUnsafeEnchantment(Enchantment ench, int level) {
@@ -479,30 +479,61 @@ public class ItemStack implements Cloneable, ConfigurationSerializable {
         if (level == 0 || meta == null) {
             return level;
         }
+
         meta.removeEnchant(ench);
         return level;
     }
 
-    @Utility
-    public Map<String, Object> serialize() {
-        Map<String, Object> result = new LinkedHashMap<String, Object>();
+    /**
+     * Get a copy of this ItemStack's {@link ItemMeta}.
+     *
+     * @return a copy of the current ItemStack's ItemData
+     */
+    public ItemMeta getItemMeta() {
+        return this.meta == null ? Bukkit.getItemFactory().getItemMeta(getType0()) : this.meta.clone();
+    }
 
-        result.put("type", getType().name());
+    /**
+     * Checks to see if any meta data has been defined.
+     *
+     * @return Returns true if some meta data has been set for this item
+     */
+    public boolean hasItemMeta() {
+        return !Bukkit.getItemFactory().equals(meta, null);
+    }
 
-        if (getDurability() != 0) {
-            result.put("damage", getDurability());
+    /**
+     * Set the ItemMeta of this ItemStack.
+     *
+     * @param itemMeta new ItemMeta, or null to indicate meta data be cleared.
+     * @return True if successfully applied ItemMeta, see {@link
+     * ItemFactory#isApplicable(ItemMeta, ItemStack)}
+     * @throws IllegalArgumentException if the item meta was not created by
+     *                                  the {@link ItemFactory}
+     */
+    public boolean setItemMeta(ItemMeta itemMeta) {
+        return setItemMeta0(itemMeta, getType0());
+    }
+
+    /*
+     * Cannot be overridden, so it's safe for constructor call
+     */
+    private boolean setItemMeta0(ItemMeta itemMeta, Material material) {
+        if (itemMeta == null) {
+            this.meta = null;
+            return true;
         }
 
-        if (getAmount() != 1) {
-            result.put("amount", getAmount());
+        if (!Bukkit.getItemFactory().isApplicable(itemMeta, material)) {
+            return false;
         }
 
-        ItemMeta meta = getItemMeta();
-        if (!Bukkit.getItemFactory().equals(meta, null)) {
-            result.put("meta", meta);
+        this.meta = Bukkit.getItemFactory().asMetaFor(itemMeta, material);
+        if (this.meta == itemMeta) {
+            this.meta = itemMeta.clone();
         }
 
-        return result;
+        return true;
     }
 
     /**
@@ -526,13 +557,11 @@ public class ItemStack implements Cloneable, ConfigurationSerializable {
         }
 
         ItemStack result = new ItemStack(type, amount, damage);
-
         if (args.containsKey("enchantments")) { // Backward compatiblity, @deprecated
             Object raw = args.get("enchantments");
 
             if (raw instanceof Map) {
                 Map<?, ?> map = (Map<?, ?>) raw;
-
                 for (Map.Entry<?, ?> entry : map.entrySet()) {
                     Enchantment enchantment = Enchantment.getByName(entry.getKey().toString());
 
@@ -551,53 +580,26 @@ public class ItemStack implements Cloneable, ConfigurationSerializable {
         return result;
     }
 
-    /**
-     * Get a copy of this ItemStack's {@link ItemMeta}.
-     *
-     * @return a copy of the current ItemStack's ItemData
-     */
-    public ItemMeta getItemMeta() {
-        return this.meta == null ? Bukkit.getItemFactory().getItemMeta(getType0()) : this.meta.clone();
-    }
-
-    /**
-     * Checks to see if any meta data has been defined.
-     *
-     * @return Returns true if some meta data has been set for this item
-     */
-    public boolean hasItemMeta() {
-        return !Bukkit.getItemFactory().equals(meta, null);
-    }
+    @Override
+    @Utility
+    public Map<String, Object> serialize() {
+        Map<String, Object> result = new LinkedHashMap<String, Object>();
 
-    /**
-     * Set the ItemMeta of this ItemStack.
-     *
-     * @param itemMeta new ItemMeta, or null to indicate meta data be cleared.
-     * @return True if successfully applied ItemMeta, see {@link
-     *     ItemFactory#isApplicable(ItemMeta, ItemStack)}
-     * @throws IllegalArgumentException if the item meta was not created by
-     *     the {@link ItemFactory}
-     */
-    public boolean setItemMeta(ItemMeta itemMeta) {
-        return setItemMeta0(itemMeta, getType0());
-    }
+        result.put("type", getType().name());
 
-    /*
-     * Cannot be overridden, so it's safe for constructor call
-     */
-    private boolean setItemMeta0(ItemMeta itemMeta, Material material) {
-        if (itemMeta == null) {
-            this.meta = null;
-            return true;
+        if (getDurability() != 0) {
+            result.put("damage", getDurability());
         }
-        if (!Bukkit.getItemFactory().isApplicable(itemMeta, material)) {
-            return false;
+
+        if (getAmount() != 1) {
+            result.put("amount", getAmount());
         }
-        this.meta = Bukkit.getItemFactory().asMetaFor(itemMeta, material);
-        if (this.meta == itemMeta) {
-            this.meta = itemMeta.clone();
+
+        ItemMeta meta = getItemMeta();
+        if (!Bukkit.getItemFactory().equals(meta, null)) {
+            result.put("meta", meta);
         }
 
-        return true;
+        return result;
     }
 }
diff --git a/src/main/java/org/bukkit/inventory/MerchantInventory.java b/src/main/java/org/bukkit/inventory/MerchantInventory.java
index 163f459..b368a2e 100644
--- a/src/main/java/org/bukkit/inventory/MerchantInventory.java
+++ b/src/main/java/org/bukkit/inventory/MerchantInventory.java
@@ -1,4 +1,5 @@
 package org.bukkit.inventory;
 
 public interface MerchantInventory extends Inventory {
+
 }
diff --git a/src/main/java/org/bukkit/inventory/PlayerInventory.java b/src/main/java/org/bukkit/inventory/PlayerInventory.java
index d18c9f4..7e98a13 100644
--- a/src/main/java/org/bukkit/inventory/PlayerInventory.java
+++ b/src/main/java/org/bukkit/inventory/PlayerInventory.java
@@ -12,66 +12,66 @@ public interface PlayerInventory extends Inventory {
      *
      * @return All the ItemStacks from the armor slots
      */
-    public ItemStack[] getArmorContents();
+    ItemStack[] getArmorContents();
 
     /**
-     * Return the ItemStack from the helmet slot
+     * Put the given ItemStacks into the armor slots
      *
-     * @return The ItemStack in the helmet slot
+     * @param items The ItemStacks to use as armour
      */
-    public ItemStack getHelmet();
+    void setArmorContents(ItemStack[] items);
 
     /**
-     * Return the ItemStack from the chestplate slot
+     * Return the ItemStack from the helmet slot
      *
-     * @return The ItemStack in the chestplate slot
+     * @return The ItemStack in the helmet slot
      */
-    public ItemStack getChestplate();
+    ItemStack getHelmet();
 
     /**
-     * Return the ItemStack from the leg slot
+     * Put the given ItemStack into the helmet slot. This does not check if
+     * the ItemStack is a helmet
      *
-     * @return The ItemStack in the leg slot
+     * @param helmet The ItemStack to use as helmet
      */
-    public ItemStack getLeggings();
+    void setHelmet(ItemStack helmet);
 
     /**
-     * Return the ItemStack from the boots slot
+     * Return the ItemStack from the chestplate slot
      *
-     * @return The ItemStack in the boots slot
+     * @return The ItemStack in the chestplate slot
      */
-    public ItemStack getBoots();
+    ItemStack getChestplate();
 
     /**
-     * Put the given ItemStacks into the armor slots
+     * Put the given ItemStack into the chestplate slot. This does not check
+     * if the ItemStack is a chestplate
      *
-     * @param items The ItemStacks to use as armour
+     * @param chestplate The ItemStack to use as chestplate
      */
-    public void setArmorContents(ItemStack[] items);
+    void setChestplate(ItemStack chestplate);
 
     /**
-     * Put the given ItemStack into the helmet slot. This does not check if
-     * the ItemStack is a helmet
+     * Return the ItemStack from the leg slot
      *
-     * @param helmet The ItemStack to use as helmet
+     * @return The ItemStack in the leg slot
      */
-    public void setHelmet(ItemStack helmet);
+    ItemStack getLeggings();
 
     /**
-     * Put the given ItemStack into the chestplate slot. This does not check
-     * if the ItemStack is a chestplate
+     * Put the given ItemStack into the leg slot. This does not check if the
+     * ItemStack is a pair of leggings
      *
-     * @param chestplate The ItemStack to use as chestplate
+     * @param leggings The ItemStack to use as leggings
      */
-    public void setChestplate(ItemStack chestplate);
+    void setLeggings(ItemStack leggings);
 
     /**
-     * Put the given ItemStack into the leg slot. This does not check if the
-     * ItemStack is a pair of leggings
+     * Return the ItemStack from the boots slot
      *
-     * @param leggings The ItemStack to use as leggings
+     * @return The ItemStack in the boots slot
      */
-    public void setLeggings(ItemStack leggings);
+    ItemStack getBoots();
 
     /**
      * Put the given ItemStack into the boots slot. This does not check if the
@@ -79,28 +79,28 @@ public interface PlayerInventory extends Inventory {
      *
      * @param boots The ItemStack to use as boots
      */
-    public void setBoots(ItemStack boots);
+    void setBoots(ItemStack boots);
 
     /**
      * Returns the ItemStack currently hold
      *
      * @return The currently held ItemStack
      */
-    public ItemStack getItemInHand();
+    ItemStack getItemInHand();
 
     /**
      * Sets the item in hand
      *
      * @param stack Stack to set
      */
-    public void setItemInHand(ItemStack stack);
+    void setItemInHand(ItemStack stack);
 
     /**
      * Get the slot number of the currently held item
      *
      * @return Held item slot number
      */
-    public int getHeldItemSlot();
+    int getHeldItemSlot();
 
     /**
      * Set the slot number of the currently held item.
@@ -109,22 +109,22 @@ public interface PlayerInventory extends Inventory {
      *
      * @param slot The new slot number
      * @throws IllegalArgumentException Thrown if slot is not between 0 and 8
-     *     inclusive
+     *                                  inclusive
      */
-    public void setHeldItemSlot(int slot);
+    void setHeldItemSlot(int slot);
 
     /**
      * Clears all matching items from the inventory. Setting either value to
      * -1 will skip it's check, while setting both to -1 will clear all items
      * in your inventory unconditionally.
      *
-     * @param id the id of the item you want to clear from the inventory
+     * @param id   the id of the item you want to clear from the inventory
      * @param data the data of the item you want to clear from the inventory
      * @return The number of items cleared
      * @deprecated Magic value
      */
     @Deprecated
-    public int clear(int id, int data);
+    int clear(int id, int data);
 
-    public HumanEntity getHolder();
+    HumanEntity getHolder();
 }
diff --git a/src/main/java/org/bukkit/inventory/ShapedRecipe.java b/src/main/java/org/bukkit/inventory/ShapedRecipe.java
index 2796473..21fec0d 100644
--- a/src/main/java/org/bukkit/inventory/ShapedRecipe.java
+++ b/src/main/java/org/bukkit/inventory/ShapedRecipe.java
@@ -1,20 +1,20 @@
 package org.bukkit.inventory;
 
-import java.util.HashMap;
-import java.util.Map;
-
 import org.apache.commons.lang.Validate;
-
 import org.bukkit.Material;
 import org.bukkit.material.MaterialData;
 
+import java.util.HashMap;
+import java.util.Map;
+
 /**
  * Represents a shaped (ie normal) crafting recipe.
  */
 public class ShapedRecipe implements Recipe {
+
+    private Map<Character, ItemStack> ingredients = new HashMap<Character, ItemStack>();
     private ItemStack output;
     private String[] rows;
-    private Map<Character, ItemStack> ingredients = new HashMap<Character, ItemStack>();
 
     /**
      * Create a shaped recipe to craft the specified ItemStack. The
@@ -50,27 +50,26 @@ public class ShapedRecipe implements Recipe {
             Validate.notNull(row, "Shape cannot have null rows");
             Validate.isTrue(row.length() > 0 && row.length() < 4, "Crafting rows should be 1, 2, or 3 characters, not ", row.length());
         }
+
         this.rows = new String[shape.length];
-        for (int i = 0; i < shape.length; i++) {
-            this.rows[i] = shape[i];
-        }
+        System.arraycopy(shape, 0, this.rows, 0, shape.length);
 
         // Remove character mappings for characters that no longer exist in the shape
-        HashMap<Character, ItemStack> newIngredients = new HashMap<Character, ItemStack>();
+        Map<Character, ItemStack> newIngredients = new HashMap<Character, ItemStack>();
         for (String row : shape) {
             for (Character c : row.toCharArray()) {
                 newIngredients.put(c, ingredients.get(c));
             }
         }
-        this.ingredients = newIngredients;
 
+        this.ingredients = newIngredients;
         return this;
     }
 
     /**
      * Sets the material that a character in the recipe shape refers to.
      *
-     * @param key The character that represents the ingredient in the shape.
+     * @param key        The character that represents the ingredient in the shape.
      * @param ingredient The ingredient.
      * @return The changed recipe, so you can chain calls.
      */
@@ -81,7 +80,7 @@ public class ShapedRecipe implements Recipe {
     /**
      * Sets the material that a character in the recipe shape refers to.
      *
-     * @param key The character that represents the ingredient in the shape.
+     * @param key        The character that represents the ingredient in the shape.
      * @param ingredient The ingredient.
      * @return The changed recipe, so you can chain calls.
      */
@@ -92,9 +91,9 @@ public class ShapedRecipe implements Recipe {
     /**
      * Sets the material that a character in the recipe shape refers to.
      *
-     * @param key The character that represents the ingredient in the shape.
+     * @param key        The character that represents the ingredient in the shape.
      * @param ingredient The ingredient.
-     * @param raw The raw material data as an integer.
+     * @param raw        The raw material data as an integer.
      * @return The changed recipe, so you can chain calls.
      * @deprecated Magic value
      */
@@ -125,6 +124,7 @@ public class ShapedRecipe implements Recipe {
                 result.put(ingredient.getKey(), ingredient.getValue().clone());
             }
         }
+
         return result;
     }
 
diff --git a/src/main/java/org/bukkit/inventory/ShapelessRecipe.java b/src/main/java/org/bukkit/inventory/ShapelessRecipe.java
index a718086..3658b87 100644
--- a/src/main/java/org/bukkit/inventory/ShapelessRecipe.java
+++ b/src/main/java/org/bukkit/inventory/ShapelessRecipe.java
@@ -1,21 +1,22 @@
 package org.bukkit.inventory;
 
-import java.util.ArrayList;
-import java.util.Iterator;
-import java.util.List;
-
 import org.apache.commons.lang.Validate;
-
 import org.bukkit.Material;
 import org.bukkit.material.MaterialData;
 
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+
 /**
  * Represents a shapeless recipe, where the arrangement of the ingredients on
  * the crafting grid does not matter.
  */
 public class ShapelessRecipe implements Recipe {
+
+    private final List<ItemStack> ingredients = new ArrayList<ItemStack>();
+
     private ItemStack output;
-    private List<ItemStack> ingredients = new ArrayList<ItemStack>();
 
     /**
      * Create a shapeless recipe to craft the specified ItemStack. The
@@ -25,10 +26,10 @@ public class ShapelessRecipe implements Recipe {
      * @param result The item you want the recipe to create.
      * @see ShapelessRecipe#addIngredient(Material)
      * @see ShapelessRecipe#addIngredient(MaterialData)
-     * @see ShapelessRecipe#addIngredient(Material,int)
-     * @see ShapelessRecipe#addIngredient(int,Material)
-     * @see ShapelessRecipe#addIngredient(int,MaterialData)
-     * @see ShapelessRecipe#addIngredient(int,Material,int)
+     * @see ShapelessRecipe#addIngredient(Material, int)
+     * @see ShapelessRecipe#addIngredient(int, Material)
+     * @see ShapelessRecipe#addIngredient(int, MaterialData)
+     * @see ShapelessRecipe#addIngredient(int, Material, int)
      */
     public ShapelessRecipe(ItemStack result) {
         this.output = new ItemStack(result);
@@ -58,7 +59,7 @@ public class ShapelessRecipe implements Recipe {
      * Adds the specified ingredient.
      *
      * @param ingredient The ingredient to add.
-     * @param rawdata The data value, or -1 to allow any data value.
+     * @param rawdata    The data value, or -1 to allow any data value.
      * @return The changed recipe, so you can chain calls.
      * @deprecated Magic value
      */
@@ -70,7 +71,7 @@ public class ShapelessRecipe implements Recipe {
     /**
      * Adds multiples of the specified ingredient.
      *
-     * @param count How many to add (can't be more than 9!)
+     * @param count      How many to add (can't be more than 9!)
      * @param ingredient The ingredient to add.
      * @return The changed recipe, so you can chain calls.
      */
@@ -81,7 +82,7 @@ public class ShapelessRecipe implements Recipe {
     /**
      * Adds multiples of the specified ingredient.
      *
-     * @param count How many to add (can't be more than 9!)
+     * @param count      How many to add (can't be more than 9!)
      * @param ingredient The ingredient to add.
      * @return The changed recipe, so you can chain calls.
      */
@@ -92,9 +93,9 @@ public class ShapelessRecipe implements Recipe {
     /**
      * Adds multiples of the specified ingredient.
      *
-     * @param count How many to add (can't be more than 9!)
+     * @param count      How many to add (can't be more than 9!)
      * @param ingredient The ingredient to add.
-     * @param rawdata The data value, or -1 to allow any data value.
+     * @param rawdata    The data value, or -1 to allow any data value.
      * @return The changed recipe, so you can chain calls.
      * @deprecated Magic value
      */
@@ -110,6 +111,7 @@ public class ShapelessRecipe implements Recipe {
         while (count-- > 0) {
             ingredients.add(new ItemStack(ingredient, 1, (short) rawdata));
         }
+
         return this;
     }
 
@@ -142,7 +144,7 @@ public class ShapelessRecipe implements Recipe {
      * less instances then specified, all will be removed. Only removes exact
      * matches, with a data value of 0.
      *
-     * @param count The number of copies to remove.
+     * @param count      The number of copies to remove.
      * @param ingredient The ingredient to remove
      * @return The changed recipe.
      */
@@ -155,7 +157,7 @@ public class ShapelessRecipe implements Recipe {
      * less instances then specified, all will be removed. If the data value
      * is -1, only ingredients with a -1 data value will be removed.
      *
-     * @param count The number of copies to remove.
+     * @param count      The number of copies to remove.
      * @param ingredient The ingredient to remove.
      * @return The changed recipe.
      */
@@ -169,7 +171,7 @@ public class ShapelessRecipe implements Recipe {
      * only ingredients with a -1 data value will be removed.
      *
      * @param ingredient The ingredient to remove
-     * @param rawdata The data value;
+     * @param rawdata    The data value;
      * @return The changed recipe.
      * @deprecated Magic value
      */
@@ -183,9 +185,9 @@ public class ShapelessRecipe implements Recipe {
      * less instances then specified, all will be removed. If the data value
      * is -1, only ingredients with a -1 data value will be removed.
      *
-     * @param count The number of copies to remove.
+     * @param count      The number of copies to remove.
      * @param ingredient The ingredient to remove.
-     * @param rawdata The data value.
+     * @param rawdata    The data value.
      * @return The changed recipe.
      * @deprecated Magic value
      */
@@ -199,6 +201,7 @@ public class ShapelessRecipe implements Recipe {
                 count--;
             }
         }
+
         return this;
     }
 
@@ -217,10 +220,11 @@ public class ShapelessRecipe implements Recipe {
      * @return The input list
      */
     public List<ItemStack> getIngredientList() {
-        ArrayList<ItemStack> result = new ArrayList<ItemStack>(ingredients.size());
+        List<ItemStack> result = new ArrayList<ItemStack>(ingredients.size());
         for (ItemStack ingredient : ingredients) {
             result.add(ingredient.clone());
         }
+
         return result;
     }
 }
diff --git a/src/main/java/org/bukkit/inventory/meta/BookMeta.java b/src/main/java/org/bukkit/inventory/meta/BookMeta.java
index 0017596..ff28e13 100644
--- a/src/main/java/org/bukkit/inventory/meta/BookMeta.java
+++ b/src/main/java/org/bukkit/inventory/meta/BookMeta.java
@@ -1,9 +1,9 @@
 package org.bukkit.inventory.meta;
 
-import java.util.List;
-
 import org.bukkit.Material;
 
+import java.util.List;
+
 /**
  * Represents a book ({@link Material#BOOK_AND_QUILL} or {@link
  * Material#WRITTEN_BOOK}) that can have a title, an author, and pages.
@@ -99,17 +99,17 @@ public interface BookMeta extends ItemMeta {
      * Clears the existing book pages, and sets the book to use the provided
      * pages. Maximum 50 pages with 256 characters per page.
      *
-     * @param pages A list of pages to set the book to use
+     * @param pages A list of strings, each being a page
      */
-    void setPages(List<String> pages);
+    void setPages(String... pages);
 
     /**
      * Clears the existing book pages, and sets the book to use the provided
      * pages. Maximum 50 pages with 256 characters per page.
      *
-     * @param pages A list of strings, each being a page
+     * @param pages A list of pages to set the book to use
      */
-    void setPages(String... pages);
+    void setPages(List<String> pages);
 
     /**
      * Adds new pages to the end of the book. Up to a maximum of 50 pages with
diff --git a/src/main/java/org/bukkit/inventory/meta/EnchantmentStorageMeta.java b/src/main/java/org/bukkit/inventory/meta/EnchantmentStorageMeta.java
index fb93d03..1244988 100644
--- a/src/main/java/org/bukkit/inventory/meta/EnchantmentStorageMeta.java
+++ b/src/main/java/org/bukkit/inventory/meta/EnchantmentStorageMeta.java
@@ -1,10 +1,10 @@
 package org.bukkit.inventory.meta;
 
-import java.util.Map;
-
 import org.bukkit.Material;
 import org.bukkit.enchantments.Enchantment;
 
+import java.util.Map;
+
 /**
  * EnchantmentMeta is specific to items that can <i>store</i> enchantments, as
  * opposed to being enchanted. {@link Material#ENCHANTED_BOOK} is an example
@@ -32,7 +32,7 @@ public interface EnchantmentStorageMeta extends ItemMeta {
      *
      * @param ench enchantment to check
      * @return The level that the specified stored enchantment has, or 0 if
-     *     none
+     * none
      */
     int getStoredEnchantLevel(Enchantment ench);
 
@@ -46,12 +46,12 @@ public interface EnchantmentStorageMeta extends ItemMeta {
     /**
      * Stores the specified enchantment in this item meta.
      *
-     * @param ench Enchantment to store
-     * @param level Level for the enchantment
+     * @param ench                   Enchantment to store
+     * @param level                  Level for the enchantment
      * @param ignoreLevelRestriction this indicates the enchantment should be
-     *     applied, ignoring the level limit
+     *                               applied, ignoring the level limit
      * @return true if the item meta changed as a result of this call, false
-     *     otherwise
+     * otherwise
      * @throws IllegalArgumentException if enchantment is null
      */
     boolean addStoredEnchant(Enchantment ench, int level, boolean ignoreLevelRestriction);
@@ -61,7 +61,7 @@ public interface EnchantmentStorageMeta extends ItemMeta {
      *
      * @param ench Enchantment to remove
      * @return true if the item meta changed as a result of this call, false
-     *     otherwise
+     * otherwise
      * @throws IllegalArgumentException if enchantment is null
      */
     boolean removeStoredEnchant(Enchantment ench) throws IllegalArgumentException;
diff --git a/src/main/java/org/bukkit/inventory/meta/FireworkEffectMeta.java b/src/main/java/org/bukkit/inventory/meta/FireworkEffectMeta.java
index 47046f1..40445cb 100644
--- a/src/main/java/org/bukkit/inventory/meta/FireworkEffectMeta.java
+++ b/src/main/java/org/bukkit/inventory/meta/FireworkEffectMeta.java
@@ -10,13 +10,6 @@ import org.bukkit.Material;
 public interface FireworkEffectMeta extends ItemMeta {
 
     /**
-     * Sets the firework effect for this meta.
-     *
-     * @param effect the effect to set, or null to indicate none.
-     */
-    void setEffect(FireworkEffect effect);
-
-    /**
      * Checks if this meta has an effect.
      *
      * @return true if this meta has an effect, false otherwise
@@ -30,5 +23,12 @@ public interface FireworkEffectMeta extends ItemMeta {
      */
     FireworkEffect getEffect();
 
+    /**
+     * Sets the firework effect for this meta.
+     *
+     * @param effect the effect to set, or null to indicate none.
+     */
+    void setEffect(FireworkEffect effect);
+
     FireworkEffectMeta clone();
 }
diff --git a/src/main/java/org/bukkit/inventory/meta/FireworkMeta.java b/src/main/java/org/bukkit/inventory/meta/FireworkMeta.java
index 3e06ee0..acc5718 100644
--- a/src/main/java/org/bukkit/inventory/meta/FireworkMeta.java
+++ b/src/main/java/org/bukkit/inventory/meta/FireworkMeta.java
@@ -1,10 +1,10 @@
 package org.bukkit.inventory.meta;
 
-import java.util.List;
-
 import org.bukkit.FireworkEffect;
 import org.bukkit.Material;
 
+import java.util.List;
+
 /**
  * Represents a {@link Material#FIREWORK} and its effects.
  */
@@ -24,18 +24,18 @@ public interface FireworkMeta extends ItemMeta {
      * @param effects The firework effects to add
      * @throws IllegalArgumentException If effects is null
      * @throws IllegalArgumentException If any effect is null (may be thrown
-     *     after changes have occurred)
+     *                                  after changes have occurred)
      */
-    void addEffects(FireworkEffect...effects) throws IllegalArgumentException;
+    void addEffects(FireworkEffect... effects) throws IllegalArgumentException;
 
     /**
      * Add several firework effects to this firework.
      *
      * @param effects An iterable object whose iterator yields the desired
-     *     firework effects
+     *                firework effects
      * @throws IllegalArgumentException If effects is null
      * @throws IllegalArgumentException If any effect is null (may be thrown
-     *     after changes have occurred)
+     *                                  after changes have occurred)
      */
     void addEffects(Iterable<FireworkEffect> effects) throws IllegalArgumentException;
 
@@ -58,7 +58,7 @@ public interface FireworkMeta extends ItemMeta {
      *
      * @param index The index of the effect to remove
      * @throws IndexOutOfBoundsException If index < 0 or index > {@link
-     *     #getEffectsSize()}
+     *                                   #getEffectsSize()}
      */
     void removeEffect(int index) throws IndexOutOfBoundsException;
 
diff --git a/src/main/java/org/bukkit/inventory/meta/ItemMeta.java b/src/main/java/org/bukkit/inventory/meta/ItemMeta.java
index 9ae3e4c..602f6db 100644
--- a/src/main/java/org/bukkit/inventory/meta/ItemMeta.java
+++ b/src/main/java/org/bukkit/inventory/meta/ItemMeta.java
@@ -1,11 +1,11 @@
 package org.bukkit.inventory.meta;
 
-import java.util.List;
-import java.util.Map;
-
 import org.bukkit.configuration.serialization.ConfigurationSerializable;
 import org.bukkit.enchantments.Enchantment;
 
+import java.util.List;
+import java.util.Map;
+
 /**
  * This type represents the storage mechanism for auxiliary item data.
  * <p>
@@ -50,13 +50,13 @@ public interface ItemMeta extends Cloneable, ConfigurationSerializable {
      * <p>
      * Plugins should check if hasLore() returns <code>true</code> before
      * calling this method.
-     * 
+     *
      * @return a list of lore that is set
      */
     List<String> getLore();
 
     /**
-     * Sets the lore for this item. 
+     * Sets the lore for this item.
      * Removes lore when given null.
      *
      * @param lore the lore that will be set
@@ -97,12 +97,12 @@ public interface ItemMeta extends Cloneable, ConfigurationSerializable {
     /**
      * Adds the specified enchantment to this item meta.
      *
-     * @param ench Enchantment to add
-     * @param level Level for the enchantment
+     * @param ench                   Enchantment to add
+     * @param level                  Level for the enchantment
      * @param ignoreLevelRestriction this indicates the enchantment should be
-     *     applied, ignoring the level limit
+     *                               applied, ignoring the level limit
      * @return true if the item meta changed as a result of this call, false
-     *     otherwise
+     * otherwise
      */
     boolean addEnchant(Enchantment ench, int level, boolean ignoreLevelRestriction);
 
@@ -111,47 +111,44 @@ public interface ItemMeta extends Cloneable, ConfigurationSerializable {
      *
      * @param ench Enchantment to remove
      * @return true if the item meta changed as a result of this call, false
-     *     otherwise
+     * otherwise
      */
     boolean removeEnchant(Enchantment ench);
 
-   /**
-    * Checks if the specified enchantment conflicts with any enchantments in
-    * this ItemMeta.
-    *
-    * @param ench enchantment to test
-    * @return true if the enchantment conflicts, false otherwise
-    */
+    /**
+     * Checks if the specified enchantment conflicts with any enchantments in
+     * this ItemMeta.
+     *
+     * @param ench enchantment to test
+     * @return true if the enchantment conflicts, false otherwise
+     */
     boolean hasConflictingEnchant(Enchantment ench);
 
+    Spigot spigot();
+
+    @SuppressWarnings("javadoc")
+    ItemMeta clone();
+    // Spigot end
+
     // Spigot start
-    public class Spigot
-    {
+    public class Spigot {
 
         /**
-         * Sets the unbreakable tag
+         * Return if the unbreakable tag is true
          *
-         * @param unbreakable true if set unbreakable
+         * @return true if the unbreakable tag is true
          */
-        public void setUnbreakable(boolean unbreakable)
-        {
-            throw new UnsupportedOperationException( "Not supported yet." );
+        public boolean isUnbreakable() {
+            throw new UnsupportedOperationException("Not supported yet.");
         }
 
         /**
-         * Return if the unbreakable tag is true
+         * Sets the unbreakable tag
          *
-         * @return true if the unbreakable tag is true
+         * @param unbreakable true if set unbreakable
          */
-        public boolean isUnbreakable()
-        {
-            throw new UnsupportedOperationException( "Not supported yet." );
+        public void setUnbreakable(boolean unbreakable) {
+            throw new UnsupportedOperationException("Not supported yet.");
         }
     }
-
-    Spigot spigot();
-    // Spigot end
-
-    @SuppressWarnings("javadoc")
-    ItemMeta clone();
 }
diff --git a/src/main/java/org/bukkit/inventory/meta/LeatherArmorMeta.java b/src/main/java/org/bukkit/inventory/meta/LeatherArmorMeta.java
index 2dc2420..6f2e26d 100644
--- a/src/main/java/org/bukkit/inventory/meta/LeatherArmorMeta.java
+++ b/src/main/java/org/bukkit/inventory/meta/LeatherArmorMeta.java
@@ -23,7 +23,7 @@ public interface LeatherArmorMeta extends ItemMeta {
      * Sets the color of the armor.
      *
      * @param color the color to set. Setting it to null is equivalent to
-     *     setting it to {@link ItemFactory#getDefaultLeatherColor()}.
+     *              setting it to {@link ItemFactory#getDefaultLeatherColor()}.
      */
     void setColor(Color color);
 
diff --git a/src/main/java/org/bukkit/inventory/meta/PotionMeta.java b/src/main/java/org/bukkit/inventory/meta/PotionMeta.java
index 8dca983..926d83b 100644
--- a/src/main/java/org/bukkit/inventory/meta/PotionMeta.java
+++ b/src/main/java/org/bukkit/inventory/meta/PotionMeta.java
@@ -32,9 +32,9 @@ public interface PotionMeta extends ItemMeta {
     /**
      * Adds a custom potion effect to this potion.
      *
-     * @param effect the potion effect to add
+     * @param effect    the potion effect to add
      * @param overwrite true if any existing effect of the same type should be
-     *     overwritten
+     *                  overwritten
      * @return true if the potion meta changed as a result of this call
      */
     boolean addCustomEffect(PotionEffect effect, boolean overwrite);
@@ -49,7 +49,7 @@ public interface PotionMeta extends ItemMeta {
 
     /**
      * Checks for a specific custom potion effect type on this potion.
-     * 
+     *
      * @param type the potion effect type to check for
      * @return true if the potion has this effect
      */
diff --git a/src/main/java/org/bukkit/map/MapCanvas.java b/src/main/java/org/bukkit/map/MapCanvas.java
index d68bb17..fb207ce 100644
--- a/src/main/java/org/bukkit/map/MapCanvas.java
+++ b/src/main/java/org/bukkit/map/MapCanvas.java
@@ -1,6 +1,6 @@
 package org.bukkit.map;
 
-import java.awt.Image;
+import java.awt.*;
 
 /**
  * Represents a canvas for drawing to a map. Each canvas is associated with a
@@ -14,14 +14,14 @@ public interface MapCanvas {
      *
      * @return The MapView this canvas is attached to.
      */
-    public MapView getMapView();
+    MapView getMapView();
 
     /**
      * Get the cursor collection associated with this canvas.
      *
      * @return The MapCursorCollection associated with this canvas.
      */
-    public MapCursorCollection getCursors();
+    MapCursorCollection getCursors();
 
     /**
      * Set the cursor collection associated with this canvas. This does not
@@ -30,16 +30,16 @@ public interface MapCanvas {
      *
      * @param cursors The MapCursorCollection to associate with this canvas.
      */
-    public void setCursors(MapCursorCollection cursors);
+    void setCursors(MapCursorCollection cursors);
 
     /**
      * Draw a pixel to the canvas.
      *
-     * @param x The x coordinate, from 0 to 127.
-     * @param y The y coordinate, from 0 to 127.
+     * @param x     The x coordinate, from 0 to 127.
+     * @param y     The y coordinate, from 0 to 127.
      * @param color The color. See {@link MapPalette}.
      */
-    public void setPixel(int x, int y, byte color);
+    void setPixel(int x, int y, byte color);
 
     /**
      * Get a pixel from the canvas.
@@ -48,7 +48,7 @@ public interface MapCanvas {
      * @param y The y coordinate, from 0 to 127.
      * @return The color. See {@link MapPalette}.
      */
-    public byte getPixel(int x, int y);
+    byte getPixel(int x, int y);
 
     /**
      * Get a pixel from the layers below this canvas.
@@ -57,16 +57,16 @@ public interface MapCanvas {
      * @param y The y coordinate, from 0 to 127.
      * @return The color. See {@link MapPalette}.
      */
-    public byte getBasePixel(int x, int y);
+    byte getBasePixel(int x, int y);
 
     /**
      * Draw an image to the map. The image will be clipped if necessary.
      *
-     * @param x The x coordinate of the image.
-     * @param y The y coordinate of the image.
+     * @param x     The x coordinate of the image.
+     * @param y     The y coordinate of the image.
      * @param image The Image to draw.
      */
-    public void drawImage(int x, int y, Image image);
+    void drawImage(int x, int y, Image image);
 
     /**
      * Render text to the map using fancy formatting. Newline (\n) characters
@@ -74,11 +74,10 @@ public interface MapCanvas {
      * color can be changed using sequences such as "§12;", replacing 12 with
      * the palette index of the color (see {@link MapPalette}).
      *
-     * @param x The column to start rendering on.
-     * @param y The row to start rendering on.
+     * @param x    The column to start rendering on.
+     * @param y    The row to start rendering on.
      * @param font The font to use.
      * @param text The formatted text to render.
      */
-    public void drawText(int x, int y, MapFont font, String text);
-
+    void drawText(int x, int y, MapFont font, String text);
 }
diff --git a/src/main/java/org/bukkit/map/MapCursor.java b/src/main/java/org/bukkit/map/MapCursor.java
index d3698a6..7d6d0cf 100644
--- a/src/main/java/org/bukkit/map/MapCursor.java
+++ b/src/main/java/org/bukkit/map/MapCursor.java
@@ -4,18 +4,18 @@ package org.bukkit.map;
  * Represents a cursor on a map.
  */
 public final class MapCursor {
-    private byte x, y;
-    private byte direction, type;
+
+    private byte x, y, direction, type;
     private boolean visible;
 
     /**
      * Initialize the map cursor.
      *
-     * @param x The x coordinate, from -128 to 127.
-     * @param y The y coordinate, from -128 to 127.
+     * @param x         The x coordinate, from -128 to 127.
+     * @param y         The y coordinate, from -128 to 127.
      * @param direction The facing of the cursor, from 0 to 15.
-     * @param type The type (color/style) of the map cursor.
-     * @param visible Whether the cursor is visible by default.
+     * @param type      The type (color/style) of the map cursor.
+     * @param visible   Whether the cursor is visible by default.
      * @deprecated Magic value
      */
     @Deprecated
@@ -37,68 +37,39 @@ public final class MapCursor {
     }
 
     /**
-     * Get the Y position of this cursor.
-     *
-     * @return The Y coordinate.
-     */
-    public byte getY() {
-        return y;
-    }
-
-    /**
-     * Get the direction of this cursor.
-     *
-     * @return The facing of the cursor, from 0 to 15.
-     */
-    public byte getDirection() {
-        return direction;
-    }
-
-    /**
-     * Get the type of this cursor.
-     *
-     * @return The type (color/style) of the map cursor.
-     */
-    public Type getType() {
-        return Type.byValue(type);
-    }
-
-    /**
-     * Get the type of this cursor.
+     * Set the X position of this cursor.
      *
-     * @return The type (color/style) of the map cursor.
-     * @deprecated Magic value
+     * @param x The X coordinate.
      */
-    @Deprecated
-    public byte getRawType() {
-        return type;
+    public void setX(byte x) {
+        this.x = x;
     }
 
     /**
-     * Get the visibility status of this cursor.
+     * Get the Y position of this cursor.
      *
-     * @return True if visible, false otherwise.
+     * @return The Y coordinate.
      */
-    public boolean isVisible() {
-        return visible;
+    public byte getY() {
+        return y;
     }
 
     /**
-     * Set the X position of this cursor.
+     * Set the Y position of this cursor.
      *
-     * @param x The X coordinate.
+     * @param y The Y coordinate.
      */
-    public void setX(byte x) {
-        this.x = x;
+    public void setY(byte y) {
+        this.y = y;
     }
 
     /**
-     * Set the Y position of this cursor.
+     * Get the direction of this cursor.
      *
-     * @param y The Y coordinate.
+     * @return The facing of the cursor, from 0 to 15.
      */
-    public void setY(byte y) {
-        this.y = y;
+    public byte getDirection() {
+        return direction;
     }
 
     /**
@@ -110,10 +81,20 @@ public final class MapCursor {
         if (direction < 0 || direction > 15) {
             throw new IllegalArgumentException("Direction must be in the range 0-15");
         }
+
         this.direction = direction;
     }
 
     /**
+     * Get the type of this cursor.
+     *
+     * @return The type (color/style) of the map cursor.
+     */
+    public Type getType() {
+        return Type.byValue(type);
+    }
+
+    /**
      * Set the type of this cursor.
      *
      * @param type The type (color/style) of the map cursor.
@@ -123,6 +104,17 @@ public final class MapCursor {
     }
 
     /**
+     * Get the type of this cursor.
+     *
+     * @return The type (color/style) of the map cursor.
+     * @deprecated Magic value
+     */
+    @Deprecated
+    public byte getRawType() {
+        return type;
+    }
+
+    /**
      * Set the type of this cursor.
      *
      * @param type The type (color/style) of the map cursor.
@@ -133,10 +125,20 @@ public final class MapCursor {
         if (type < 0 || type > 15) {
             throw new IllegalArgumentException("Type must be in the range 0-15");
         }
+
         this.type = type;
     }
 
     /**
+     * Get the visibility status of this cursor.
+     *
+     * @return True if visible, false otherwise.
+     */
+    public boolean isVisible() {
+        return visible;
+    }
+
+    /**
      * Set the visibility status of this cursor.
      *
      * @param visible True if visible.
@@ -152,6 +154,7 @@ public final class MapCursor {
      * texture pack.
      */
     public enum Type {
+
         WHITE_POINTER(0),
         GREEN_POINTER(1),
         RED_POINTER(2),
@@ -160,30 +163,30 @@ public final class MapCursor {
 
         private byte value;
 
-        private Type(int value) {
+        Type(int value) {
             this.value = (byte) value;
         }
 
         /**
-         *
          * @deprecated Magic value
          */
         @Deprecated
-        public byte getValue() {
-            return value;
+        public static Type byValue(byte value) {
+            for (Type type : values()) {
+                if (type.value == value) {
+                    return type;
+                }
+            }
+
+            return null;
         }
 
         /**
-         *
          * @deprecated Magic value
          */
         @Deprecated
-        public static Type byValue(byte value) {
-            for (Type t : values()) {
-                if (t.value == value) return t;
-            }
-            return null;
+        public byte getValue() {
+            return value;
         }
     }
-
 }
diff --git a/src/main/java/org/bukkit/map/MapCursorCollection.java b/src/main/java/org/bukkit/map/MapCursorCollection.java
index 1dc9025..e8d8829 100644
--- a/src/main/java/org/bukkit/map/MapCursorCollection.java
+++ b/src/main/java/org/bukkit/map/MapCursorCollection.java
@@ -8,7 +8,8 @@ import java.util.List;
  * MapCursorCollection is linked to a specific {@link MapRenderer}.
  */
 public final class MapCursorCollection {
-    private List<MapCursor> cursors = new ArrayList<MapCursor>();
+
+    private final List<MapCursor> cursors = new ArrayList<MapCursor>();
 
     /**
      * Get the amount of cursors in this collection.
@@ -53,8 +54,8 @@ public final class MapCursorCollection {
     /**
      * Add a cursor to the collection.
      *
-     * @param x The x coordinate, from -128 to 127.
-     * @param y The y coordinate, from -128 to 127.
+     * @param x         The x coordinate, from -128 to 127.
+     * @param y         The y coordinate, from -128 to 127.
      * @param direction The facing of the cursor, from 0 to 15.
      * @return The newly added MapCursor.
      */
@@ -65,10 +66,10 @@ public final class MapCursorCollection {
     /**
      * Add a cursor to the collection.
      *
-     * @param x The x coordinate, from -128 to 127.
-     * @param y The y coordinate, from -128 to 127.
+     * @param x         The x coordinate, from -128 to 127.
+     * @param y         The y coordinate, from -128 to 127.
      * @param direction The facing of the cursor, from 0 to 15.
-     * @param type The type (color/style) of the map cursor.
+     * @param type      The type (color/style) of the map cursor.
      * @return The newly added MapCursor.
      * @deprecated Magic value
      */
@@ -80,11 +81,11 @@ public final class MapCursorCollection {
     /**
      * Add a cursor to the collection.
      *
-     * @param x The x coordinate, from -128 to 127.
-     * @param y The y coordinate, from -128 to 127.
+     * @param x         The x coordinate, from -128 to 127.
+     * @param y         The y coordinate, from -128 to 127.
      * @param direction The facing of the cursor, from 0 to 15.
-     * @param type The type (color/style) of the map cursor.
-     * @param visible Whether the cursor is visible.
+     * @param type      The type (color/style) of the map cursor.
+     * @param visible   Whether the cursor is visible.
      * @return The newly added MapCursor.
      * @deprecated Magic value
      */
@@ -92,5 +93,4 @@ public final class MapCursorCollection {
     public MapCursor addCursor(int x, int y, byte direction, byte type, boolean visible) {
         return addCursor(new MapCursor((byte) x, (byte) y, direction, type, visible));
     }
-
 }
diff --git a/src/main/java/org/bukkit/map/MapFont.java b/src/main/java/org/bukkit/map/MapFont.java
index ea8f0ea..a3a8277 100644
--- a/src/main/java/org/bukkit/map/MapFont.java
+++ b/src/main/java/org/bukkit/map/MapFont.java
@@ -8,13 +8,13 @@ import java.util.HashMap;
 public class MapFont {
 
     private final HashMap<Character, CharacterSprite> chars = new HashMap<Character, CharacterSprite>();
-    private int height = 0;
     protected boolean malleable = true;
+    private int height = 0;
 
     /**
      * Set the sprite for a given character.
      *
-     * @param ch The character to set the sprite for.
+     * @param ch     The character to set the sprite for.
      * @param sprite The CharacterSprite to set.
      * @throws IllegalStateException if this font is static.
      */
@@ -34,7 +34,7 @@ public class MapFont {
      *
      * @param ch The character to get the sprite for.
      * @return The CharacterSprite associated with the character, or null if
-     *     there is none.
+     * there is none.
      */
     public CharacterSprite getChar(char ch) {
         return chars.get(ch);
@@ -52,7 +52,7 @@ public class MapFont {
             throw new IllegalArgumentException("text contains invalid characters");
         }
 
-        if (text.length() == 0){
+        if (text.length() == 0) {
             return 0;
         }
 
@@ -60,8 +60,8 @@ public class MapFont {
         for (int i = 0; i < text.length(); ++i) {
             result += chars.get(text.charAt(i)).getWidth();
         }
-        result += text.length() - 1; // Account for 1px spacing between characters
 
+        result += text.length() - 1; // Account for 1px spacing between characters
         return result;
     }
 
@@ -79,7 +79,7 @@ public class MapFont {
      *
      * @param text The text.
      * @return True if the string contains only defined characters, false
-     *     otherwise.
+     * otherwise.
      */
     public boolean isValid(String text) {
         for (int i = 0; i < text.length(); ++i) {
@@ -87,6 +87,7 @@ public class MapFont {
             if (ch == '\u00A7' || ch == '\n') continue;
             if (chars.get(ch) == null) return false;
         }
+
         return true;
     }
 
@@ -117,8 +118,7 @@ public class MapFont {
          * @return True if the pixel is solid, false if transparent.
          */
         public boolean get(int row, int col) {
-            if (row < 0 || col < 0 || row >= height || col >= width) return false;
-            return data[row * width + col];
+            return !(row < 0 || col < 0 || row >= height || col >= width) && data[row * width + col];
         }
 
         /**
@@ -138,7 +138,5 @@ public class MapFont {
         public int getHeight() {
             return height;
         }
-
     }
-
 }
diff --git a/src/main/java/org/bukkit/map/MapPalette.java b/src/main/java/org/bukkit/map/MapPalette.java
index 35f3e19..41675a3 100644
--- a/src/main/java/org/bukkit/map/MapPalette.java
+++ b/src/main/java/org/bukkit/map/MapPalette.java
@@ -1,8 +1,6 @@
 package org.bukkit.map;
 
-import java.awt.Color;
-import java.awt.Graphics2D;
-import java.awt.Image;
+import java.awt.*;
 import java.awt.image.BufferedImage;
 
 /**
@@ -12,65 +10,7 @@ import java.awt.image.BufferedImage;
  * colors of varying shades with values entry to entry + 3.
  */
 public final class MapPalette {
-    // Internal mechanisms
-    private MapPalette() {}
-
-    private static Color c(int r, int g, int b) {
-        return new Color(r, g, b);
-    }
-
-    private static double getDistance(Color c1, Color c2) {
-        double rmean = (c1.getRed() + c2.getRed()) / 2.0;
-        double r = c1.getRed() - c2.getRed();
-        double g = c1.getGreen() - c2.getGreen();
-        int b = c1.getBlue() - c2.getBlue();
-        double weightR = 2 + rmean / 256.0;
-        double weightG = 4.0;
-        double weightB = 2 + (255 - rmean) / 256.0;
-        return weightR * r * r + weightG * g * g + weightB * b * b;
-    }
 
-    private static final Color[] colors = {
-        new Color(0, 0, 0, 0), new Color(0, 0, 0, 0),
-        new Color(0, 0, 0, 0), new Color(0, 0, 0, 0),
-        c(89, 125, 39), c(109, 153, 48), c(127, 178, 56), c(67, 94, 29),
-        c(174, 164, 115), c(213, 201, 140), c(247, 233, 163), c(130, 123, 86),
-        c(117, 117, 117), c(144, 144, 144), c(167, 167, 167), c(88, 88, 88),
-        c(180, 0, 0), c(220, 0, 0), c(255, 0, 0), c(135, 0, 0),
-        c(112, 112, 180), c(138, 138, 220), c(160, 160, 255), c(84, 84, 135),
-        c(117, 117, 117), c(144, 144, 144), c(167, 167, 167), c(88, 88, 88),
-        c(0, 87, 0), c(0, 106, 0), c(0, 124, 0), c(0, 65, 0),
-        c(180, 180, 180), c(220, 220, 220), c(255, 255, 255), c(135, 135, 135),
-        c(115, 118, 129), c(141, 144, 158), c(164, 168, 184), c(86, 88, 97),
-        c(129, 74, 33), c(157, 91, 40), c(183, 106, 47), c(96, 56, 24),
-        c(79, 79, 79), c(96, 96, 96), c(112, 112, 112), c(59, 59, 59),
-        c(45, 45, 180), c(55, 55, 220), c(64, 64, 255), c(33, 33, 135),
-        c(73, 58, 35), c(89, 71, 43), c(104, 83, 50), c(55, 43, 26),
-        c(180, 177, 172), c(220, 217, 211), c(255, 252, 245), c(135, 133, 129),
-        c(152, 89, 36), c(186, 109, 44), c(216, 127, 51), c(114, 67, 27),
-        c(125, 53, 152), c(153, 65, 186), c(178, 76, 216), c(94, 40, 114),
-        c(72, 108, 152), c(88, 132, 186), c(102, 153, 216), c(54, 81, 114),
-        c(161, 161, 36), c(197, 197, 44), c(229, 229, 51), c(121, 121, 27),
-        c(89, 144, 17), c(109, 176, 21), c(127, 204, 25), c(67, 108, 13),
-        c(170, 89, 116), c(208, 109, 142), c(242, 127, 165), c(128, 67, 87),
-        c(53, 53, 53), c(65, 65, 65), c(76, 76, 76), c(40, 40, 40),
-        c(108, 108, 108), c(132, 132, 132), c(153, 153, 153), c(81, 81, 81),
-        c(53, 89, 108), c(65, 109, 132), c(76, 127, 153), c(40, 67, 81),
-        c(89, 44, 125), c(109, 54, 153), c(127, 63, 178), c(67, 33, 94),
-        c(36, 53, 125), c(44, 65, 153), c(51, 76, 178), c(27, 40, 94),
-        c(72, 53, 36), c(88, 65, 44), c(102, 76, 51), c(54, 40, 27),
-        c(72, 89, 36), c(88, 109, 44), c(102, 127, 51), c(54, 67, 27),
-        c(108, 36, 36), c(132, 44, 44), c(153, 51, 51), c(81, 27, 27),
-        c(17, 17, 17), c(21, 21, 21), c(25, 25, 25), c(13, 13, 13),
-        c(176, 168, 54), c(215, 205, 66), c(250, 238, 77), c(132, 126, 40),
-        c(64, 154, 150), c(79, 188, 183), c(92, 219, 213), c(48, 115, 112),
-        c(52, 90, 180), c(63, 110, 220), c(74, 128, 255), c(39, 67, 135),
-        c(0, 153, 40), c(0, 187, 50), c(0, 217, 58), c(0, 114, 30),
-        c(14, 14, 21), c(18, 17, 26), c(21, 20, 31), c(11, 10, 16),
-        c(79, 1, 0), c(96, 1, 0), c(112, 2, 0), c(59, 1, 0)
-    };
-
-    // Interface
     /**
      * @deprecated Magic value
      */
@@ -91,6 +31,8 @@ public final class MapPalette {
      */
     @Deprecated
     public static final byte GRAY_1 = 12;
+
+    // Interface
     /**
      * @deprecated Magic value
      */
@@ -141,6 +83,65 @@ public final class MapPalette {
      */
     @Deprecated
     public static final byte DARK_BROWN = 52;
+    private static final Color[] colors = {
+            new Color(0, 0, 0, 0), new Color(0, 0, 0, 0),
+            new Color(0, 0, 0, 0), new Color(0, 0, 0, 0),
+            c(89, 125, 39), c(109, 153, 48), c(127, 178, 56), c(67, 94, 29),
+            c(174, 164, 115), c(213, 201, 140), c(247, 233, 163), c(130, 123, 86),
+            c(117, 117, 117), c(144, 144, 144), c(167, 167, 167), c(88, 88, 88),
+            c(180, 0, 0), c(220, 0, 0), c(255, 0, 0), c(135, 0, 0),
+            c(112, 112, 180), c(138, 138, 220), c(160, 160, 255), c(84, 84, 135),
+            c(117, 117, 117), c(144, 144, 144), c(167, 167, 167), c(88, 88, 88),
+            c(0, 87, 0), c(0, 106, 0), c(0, 124, 0), c(0, 65, 0),
+            c(180, 180, 180), c(220, 220, 220), c(255, 255, 255), c(135, 135, 135),
+            c(115, 118, 129), c(141, 144, 158), c(164, 168, 184), c(86, 88, 97),
+            c(129, 74, 33), c(157, 91, 40), c(183, 106, 47), c(96, 56, 24),
+            c(79, 79, 79), c(96, 96, 96), c(112, 112, 112), c(59, 59, 59),
+            c(45, 45, 180), c(55, 55, 220), c(64, 64, 255), c(33, 33, 135),
+            c(73, 58, 35), c(89, 71, 43), c(104, 83, 50), c(55, 43, 26),
+            c(180, 177, 172), c(220, 217, 211), c(255, 252, 245), c(135, 133, 129),
+            c(152, 89, 36), c(186, 109, 44), c(216, 127, 51), c(114, 67, 27),
+            c(125, 53, 152), c(153, 65, 186), c(178, 76, 216), c(94, 40, 114),
+            c(72, 108, 152), c(88, 132, 186), c(102, 153, 216), c(54, 81, 114),
+            c(161, 161, 36), c(197, 197, 44), c(229, 229, 51), c(121, 121, 27),
+            c(89, 144, 17), c(109, 176, 21), c(127, 204, 25), c(67, 108, 13),
+            c(170, 89, 116), c(208, 109, 142), c(242, 127, 165), c(128, 67, 87),
+            c(53, 53, 53), c(65, 65, 65), c(76, 76, 76), c(40, 40, 40),
+            c(108, 108, 108), c(132, 132, 132), c(153, 153, 153), c(81, 81, 81),
+            c(53, 89, 108), c(65, 109, 132), c(76, 127, 153), c(40, 67, 81),
+            c(89, 44, 125), c(109, 54, 153), c(127, 63, 178), c(67, 33, 94),
+            c(36, 53, 125), c(44, 65, 153), c(51, 76, 178), c(27, 40, 94),
+            c(72, 53, 36), c(88, 65, 44), c(102, 76, 51), c(54, 40, 27),
+            c(72, 89, 36), c(88, 109, 44), c(102, 127, 51), c(54, 67, 27),
+            c(108, 36, 36), c(132, 44, 44), c(153, 51, 51), c(81, 27, 27),
+            c(17, 17, 17), c(21, 21, 21), c(25, 25, 25), c(13, 13, 13),
+            c(176, 168, 54), c(215, 205, 66), c(250, 238, 77), c(132, 126, 40),
+            c(64, 154, 150), c(79, 188, 183), c(92, 219, 213), c(48, 115, 112),
+            c(52, 90, 180), c(63, 110, 220), c(74, 128, 255), c(39, 67, 135),
+            c(0, 153, 40), c(0, 187, 50), c(0, 217, 58), c(0, 114, 30),
+            c(14, 14, 21), c(18, 17, 26), c(21, 20, 31), c(11, 10, 16),
+            c(79, 1, 0), c(96, 1, 0), c(112, 2, 0), c(59, 1, 0)
+    };
+
+    // Internal mechanisms
+    private MapPalette() {
+
+    }
+
+    private static Color c(int r, int g, int b) {
+        return new Color(r, g, b);
+    }
+
+    private static double getDistance(Color c1, Color c2) {
+        double rmean = (c1.getRed() + c2.getRed()) / 2.0;
+        double r = c1.getRed() - c2.getRed();
+        double g = c1.getGreen() - c2.getGreen();
+        int b = c1.getBlue() - c2.getBlue();
+        double weightR = 2 + rmean / 256.0;
+        double weightG = 4.0;
+        double weightB = 2 + (255 - rmean) / 256.0;
+        return weightR * r * r + weightG * g * g + weightB * b * b;
+    }
 
     /**
      * Resize an image to 128x128.
@@ -177,6 +178,7 @@ public final class MapPalette {
         for (int i = 0; i < pixels.length; i++) {
             result[i] = matchColor(new Color(pixels[i], true));
         }
+
         return result;
     }
 
diff --git a/src/main/java/org/bukkit/map/MapRenderer.java b/src/main/java/org/bukkit/map/MapRenderer.java
index 322d0ce..67d495d 100644
--- a/src/main/java/org/bukkit/map/MapRenderer.java
+++ b/src/main/java/org/bukkit/map/MapRenderer.java
@@ -21,7 +21,7 @@ public abstract class MapRenderer {
      * Initialize the map renderer base with the given contextual status.
      *
      * @param contextual Whether the renderer is contextual. See {@link
-     *     #isContextual()}.
+     *                   #isContextual()}.
      */
     public MapRenderer(boolean contextual) {
         this.contextual = contextual;
@@ -33,7 +33,7 @@ public abstract class MapRenderer {
      *
      * @return True if contextual, false otherwise.
      */
-    final public boolean isContextual() {
+    public final boolean isContextual() {
         return contextual;
     }
 
@@ -42,15 +42,15 @@ public abstract class MapRenderer {
      *
      * @param map The MapView being initialized.
      */
-    public void initialize(MapView map) {}
+    public void initialize(MapView map) {
+    }
 
     /**
      * Render to the given map.
      *
-     * @param map The MapView being rendered to.
+     * @param map    The MapView being rendered to.
      * @param canvas The canvas to use for rendering.
      * @param player The player who triggered the rendering.
      */
-    abstract public void render(MapView map, MapCanvas canvas, Player player);
-
+    public abstract void render(MapView map, MapCanvas canvas, Player player);
 }
diff --git a/src/main/java/org/bukkit/map/MapView.java b/src/main/java/org/bukkit/map/MapView.java
index ff370f4..12c791e 100644
--- a/src/main/java/org/bukkit/map/MapView.java
+++ b/src/main/java/org/bukkit/map/MapView.java
@@ -1,61 +1,15 @@
 package org.bukkit.map;
 
-import java.util.List;
 import org.bukkit.World;
 
+import java.util.List;
+
 /**
  * Represents a map item.
  */
 public interface MapView {
 
     /**
-     * An enum representing all possible scales a map can be set to.
-     */
-    public static enum Scale {
-        CLOSEST(0),
-        CLOSE(1),
-        NORMAL(2),
-        FAR(3),
-        FARTHEST(4);
-
-        private byte value;
-
-        private Scale(int value) {
-            this.value = (byte) value;
-        }
-
-        /**
-         * Get the scale given the raw value.
-         *
-         * @param value The raw scale
-         * @return The enum scale, or null for an invalid input
-         * @deprecated Magic value
-         */
-        @Deprecated
-        public static Scale valueOf(byte value) {
-            switch (value) {
-            case 0: return CLOSEST;
-            case 1: return CLOSE;
-            case 2: return NORMAL;
-            case 3: return FAR;
-            case 4: return FARTHEST;
-            default: return null;
-            }
-        }
-
-        /**
-         * Get the raw value of this scale level.
-         *
-         * @return The scale value
-         * @deprecated Magic value
-         */
-        @Deprecated
-        public byte getValue() {
-            return value;
-        }
-    }
-
-    /**
      * Get the ID of this map item. Corresponds to the damage value of a map
      * in an inventory.
      *
@@ -63,7 +17,7 @@ public interface MapView {
      * @deprecated Magic value
      */
     @Deprecated
-    public short getId();
+    short getId();
 
     /**
      * Check whether this map is virtual. A map is virtual if its lowermost
@@ -71,49 +25,49 @@ public interface MapView {
      *
      * @return Whether the map is virtual.
      */
-    public boolean isVirtual();
+    boolean isVirtual();
 
     /**
      * Get the scale of this map.
      *
      * @return The scale of the map.
      */
-    public Scale getScale();
+    Scale getScale();
 
     /**
      * Set the scale of this map.
      *
      * @param scale The scale to set.
      */
-    public void setScale(Scale scale);
+    void setScale(Scale scale);
 
     /**
      * Get the center X position of this map.
      *
      * @return The center X position.
      */
-    public int getCenterX();
+    int getCenterX();
 
     /**
-     * Get the center Z position of this map.
+     * Set the center X position of this map.
      *
-     * @return The center Z position.
+     * @param x The center X position.
      */
-    public int getCenterZ();
+    void setCenterX(int x);
 
     /**
-     * Set the center X position of this map.
+     * Get the center Z position of this map.
      *
-     * @param x The center X position.
+     * @return The center Z position.
      */
-    public void setCenterX(int x);
+    int getCenterZ();
 
     /**
      * Set the center Z position of this map.
      *
      * @param z The center Z position.
      */
-    public void setCenterZ(int z);
+    void setCenterZ(int z);
 
     /**
      * Get the world that this map is associated with. Primarily used by the
@@ -122,7 +76,7 @@ public interface MapView {
      *
      * @return The World this map is associated with.
      */
-    public World getWorld();
+    World getWorld();
 
     /**
      * Set the world that this map is associated with. The world is used by
@@ -130,21 +84,21 @@ public interface MapView {
      *
      * @param world The World to associate this map with.
      */
-    public void setWorld(World world);
+    void setWorld(World world);
 
     /**
      * Get a list of MapRenderers currently in effect.
      *
      * @return A List<MapRenderer> containing each map renderer.
      */
-    public List<MapRenderer> getRenderers();
+    List<MapRenderer> getRenderers();
 
     /**
      * Add a renderer to this map.
      *
      * @param renderer The MapRenderer to add.
      */
-    public void addRenderer(MapRenderer renderer);
+    void addRenderer(MapRenderer renderer);
 
     /**
      * Remove a renderer from this map.
@@ -152,6 +106,59 @@ public interface MapView {
      * @param renderer The MapRenderer to remove.
      * @return True if the renderer was successfully removed.
      */
-    public boolean removeRenderer(MapRenderer renderer);
+    boolean removeRenderer(MapRenderer renderer);
+
+    /**
+     * An enum representing all possible scales a map can be set to.
+     */
+    enum Scale {
 
+        CLOSEST(0),
+        CLOSE(1),
+        NORMAL(2),
+        FAR(3),
+        FARTHEST(4);
+
+        private byte value;
+
+        private Scale(int value) {
+            this.value = (byte) value;
+        }
+
+        /**
+         * Get the scale given the raw value.
+         *
+         * @param value The raw scale
+         * @return The enum scale, or null for an invalid input
+         * @deprecated Magic value
+         */
+        @Deprecated
+        public static Scale valueOf(byte value) {
+            switch (value) {
+                case 0:
+                    return CLOSEST;
+                case 1:
+                    return CLOSE;
+                case 2:
+                    return NORMAL;
+                case 3:
+                    return FAR;
+                case 4:
+                    return FARTHEST;
+                default:
+                    return null;
+            }
+        }
+
+        /**
+         * Get the raw value of this scale level.
+         *
+         * @return The scale value
+         * @deprecated Magic value
+         */
+        @Deprecated
+        public byte getValue() {
+            return value;
+        }
+    }
 }
diff --git a/src/main/java/org/bukkit/map/MinecraftFont.java b/src/main/java/org/bukkit/map/MinecraftFont.java
index 9ec8d10..3766cd1 100644
--- a/src/main/java/org/bukkit/map/MinecraftFont.java
+++ b/src/main/java/org/bukkit/map/MinecraftFont.java
@@ -5,282 +5,279 @@ package org.bukkit.map;
  */
 public class MinecraftFont extends MapFont {
 
-    private static final int spaceSize = 2;
-
-    private static final String fontChars =
-        " !\"#$%&'()*+,-./0123456789:;<=>?" +
-        "@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_" +
-        "'abcdefghijklmnopqrstuvwxyz{|}~\u007F" +
-        "\u00C7\u00FC\u00E9\u00E2\u00E4\u00E0\u00E5\u00E7" + // Çüéâäàåç
-        "\u00EA\u00EB\u00E8\u00EF\u00EE\u00EC\u00C4\u00C5" + // êëèïîìÄÅ
-        "\u00C9\u00E6\u00C6\u00F4\u00F6\u00F2\u00FB\u00F9" + // ÉæÆôöòûù
-        "\u00FF\u00D6\u00DC\u00F8\u00A3\u00D8\u00D7\u0191" + // ÿÖÜø£Ø×ƒ
-        "\u00E1\u00ED\u00F3\u00FA\u00F1\u00D1\u00AA\u00BA" + // áíóúñÑªº
-        "\u00BF\u00AE\u00AC\u00BD\u00BC\u00A1\u00AB\u00BB";  // ¿®¬½¼¡«»
-
-    private static final int[][] fontData = new int[][] {
-        /* null */  {0,0,0,0,0,0,0,0},
-        /* 1 */  {126,129,165,129,189,153,129,126},
-        /* 2 */  {126,255,219,255,195,231,255,126},
-        /* 3 */  {54,127,127,127,62,28,8,0},
-        /* 4 */  {8,28,62,127,62,28,8,0},
-        /* 5 */  {28,62,28,127,127,62,28,62},
-        /* 6 */  {8,8,28,62,127,62,28,62},
-        /* 7 */  {0,0,24,60,60,24,0,0},
-        /* 8 */  {255,255,231,195,195,231,255,255},
-        /* 9 */  {0,60,102,66,66,102,60,0},
-        /* 10 */  {255,195,153,189,189,153,195,255},
-        /* 11 */  {240,224,240,190,51,51,51,30},
-        /* 12 */  {60,102,102,102,60,24,126,24},
-        /* 13 */  {252,204,252,12,12,14,15,7},
-        /* 14 */  {254,198,254,198,198,230,103,3},
-        /* 15 */  {153,90,60,231,231,60,90,153},
-        /* 16 */  {1,7,31,127,31,7,1,0},
-        /* 17 */  {64,112,124,127,124,112,64,0},
-        /* 18 */  {24,60,126,24,24,126,60,24},
-        /* 19 */  {102,102,102,102,102,0,102,0},
-        /* 20 */  {254,219,219,222,216,216,216,0},
-        /* 21 */  {124,198,28,54,54,28,51,30},
-        /* 22 */  {0,0,0,0,126,126,126,0},
-        /* 23 */  {24,60,126,24,126,60,24,255},
-        /* 24 */  {24,60,126,24,24,24,24,0},
-        /* 25 */  {24,24,24,24,126,60,24,0},
-        /* 26 */  {0,24,48,127,48,24,0,0},
-        /* 27 */  {0,12,6,127,6,12,0,0},
-        /* 28 */  {0,0,3,3,3,127,0,0},
-        /* 29 */  {0,36,102,255,102,36,0,0},
-        /* 30 */  {0,24,60,126,255,255,0,0},
-        /* 31 */  {0,255,255,126,60,24,0,0},
-        /*   */  {0,0,0,0,0,0,0,0},
-        /* ! */  {1,1,1,1,1,0,1,0},
-        /* " */  {10,10,5,0,0,0,0,0},
-        /* # */  {10,10,31,10,31,10,10,0},
-        /* $ */  {4,30,1,14,16,15,4,0},
-        /* % */  {17,9,8,4,2,18,17,0},
-        /* & */  {4,10,4,22,13,9,22,0},
-        /* ' */  {2,2,1,0,0,0,0,0},
-        /* ( */  {12,2,1,1,1,2,12,0},
-        /* ) */  {3,4,8,8,8,4,3,0},
-        /* * */  {0,0,9,6,9,0,0,0},
-        /* + */  {0,4,4,31,4,4,0,0},
-        /* , */  {0,0,0,0,0,1,1,1},
-        /* - */  {0,0,0,31,0,0,0,0},
-        /* . */  {0,0,0,0,0,1,1,0},
-        /* / */  {16,8,8,4,2,2,1,0},
-        /* 0 */  {14,17,25,21,19,17,14,0},
-        /* 1 */  {4,6,4,4,4,4,31,0},
-        /* 2 */  {14,17,16,12,2,17,31,0},
-        /* 3 */  {14,17,16,12,16,17,14,0},
-        /* 4 */  {24,20,18,17,31,16,16,0},
-        /* 5 */  {31,1,15,16,16,17,14,0},
-        /* 6 */  {12,2,1,15,17,17,14,0},
-        /* 7 */  {31,17,16,8,4,4,4,0},
-        /* 8 */  {14,17,17,14,17,17,14,0},
-        /* 9 */  {14,17,17,30,16,8,6,0},
-        /* : */  {0,1,1,0,0,1,1,0},
-        /* ; */  {0,1,1,0,0,1,1,1},
-        /* < */  {8,4,2,1,2,4,8,0},
-        /* = */  {0,0,31,0,0,31,0,0},
-        /* > */  {1,2,4,8,4,2,1,0},
-        /* ? */  {14,17,16,8,4,0,4,0},
-        /* @ */  {30,33,45,45,61,1,30,0},
-        /* A */  {14,17,31,17,17,17,17,0},
-        /* B */  {15,17,15,17,17,17,15,0},
-        /* C */  {14,17,1,1,1,17,14,0},
-        /* D */  {15,17,17,17,17,17,15,0},
-        /* E */  {31,1,7,1,1,1,31,0},
-        /* F */  {31,1,7,1,1,1,1,0},
-        /* G */  {30,1,25,17,17,17,14,0},
-        /* H */  {17,17,31,17,17,17,17,0},
-        /* I */  {7,2,2,2,2,2,7,0},
-        /* J */  {16,16,16,16,16,17,14,0},
-        /* K */  {17,9,7,9,17,17,17,0},
-        /* L */  {1,1,1,1,1,1,31,0},
-        /* M */  {17,27,21,17,17,17,17,0},
-        /* N */  {17,19,21,25,17,17,17,0},
-        /* O */  {14,17,17,17,17,17,14,0},
-        /* P */  {15,17,15,1,1,1,1,0},
-        /* Q */  {14,17,17,17,17,9,22,0},
-        /* R */  {15,17,15,17,17,17,17,0},
-        /* S */  {30,1,14,16,16,17,14,0},
-        /* T */  {31,4,4,4,4,4,4,0},
-        /* U */  {17,17,17,17,17,17,14,0},
-        /* V */  {17,17,17,17,10,10,4,0},
-        /* W */  {17,17,17,17,21,27,17,0},
-        /* X */  {17,10,4,10,17,17,17,0},
-        /* Y */  {17,10,4,4,4,4,4,0},
-        /* Z */  {31,16,8,4,2,1,31,0},
-        /* [ */  {7,1,1,1,1,1,7,0},
-        /* \ */  {1,2,2,4,8,8,16,0},
-        /* ] */  {7,4,4,4,4,4,7,0},
-        /* ^ */  {4,10,17,0,0,0,0,0},
-        /* _ */  {0,0,0,0,0,0,0,31},
-        /* ` */  {1,1,2,0,0,0,0,0},
-        /* a */  {0,0,14,16,30,17,30,0},
-        /* b */  {1,1,13,19,17,17,15,0},
-        /* c */  {0,0,14,17,1,17,14,0},
-        /* d */  {16,16,22,25,17,17,30,0},
-        /* e */  {0,0,14,17,31,1,30,0},
-        /* f */  {12,2,15,2,2,2,2,0},
-        /* g */  {0,0,30,17,17,30,16,15},
-        /* h */  {1,1,13,19,17,17,17,0},
-        /* i */  {1,0,1,1,1,1,1,0},
-        /* j */  {16,0,16,16,16,17,17,14},
-        /* k */  {1,1,9,5,3,5,9,0},
-        /* l */  {1,1,1,1,1,1,2,0},
-        /* m */  {0,0,11,21,21,17,17,0},
-        /* n */  {0,0,15,17,17,17,17,0},
-        /* o */  {0,0,14,17,17,17,14,0},
-        /* p */  {0,0,13,19,17,15,1,1},
-        /* q */  {0,0,22,25,17,30,16,16},
-        /* r */  {0,0,13,19,1,1,1,0},
-        /* s */  {0,0,30,1,14,16,15,0},
-        /* t */  {2,2,7,2,2,2,4,0},
-        /* u */  {0,0,17,17,17,17,30,0},
-        /* v */  {0,0,17,17,17,10,4,0},
-        /* w */  {0,0,17,17,21,21,30,0},
-        /* x */  {0,0,17,10,4,10,17,0},
-        /* y */  {0,0,17,17,17,30,16,15},
-        /* z */  {0,0,31,8,4,2,31,0},
-        /* { */  {12,2,2,1,2,2,12,0},
-        /* | */  {1,1,1,0,1,1,1,0},
-        /* } */  {3,4,4,8,4,4,3,0},
-        /* ~ */  {38,25,0,0,0,0,0,0},
-        /* ⌂ */  {0,0,4,10,17,17,31,0},
-        /* Ç */  {14,17,1,1,17,14,16,12},
-        /* ü */  {10,0,17,17,17,17,30,0},
-        /* é */  {24,0,14,17,31,1,30,0},
-        /* â */  {14,17,14,16,30,17,30,0},
-        /* ä */  {10,0,14,16,30,17,30,0},
-        /* à */  {3,0,14,16,30,17,30,0},
-        /* å */  {4,0,14,16,30,17,30,0},
-        /* ç */  {0,14,17,1,17,14,16,12},
-        /* ê */  {14,17,14,17,31,1,30,0},
-        /* ë */  {10,0,14,17,31,1,30,0},
-        /* è */  {3,0,14,17,31,1,30,0},
-        /* ï */  {5,0,2,2,2,2,2,0},
-        /* î */  {14,17,4,4,4,4,4,0},
-        /* ì */  {3,0,2,2,2,2,2,0},
-        /* Ä */  {17,14,17,31,17,17,17,0},
-        /* Å */  {4,0,14,17,31,17,17,0},
-        /* É */  {24,0,31,1,7,1,31,0},
-        /* æ */  {0,0,10,20,30,5,30,0},
-        /* Æ */  {30,5,15,5,5,5,29,0},
-        /* ô */  {14,17,14,17,17,17,14,0},
-        /* ö */  {10,0,14,17,17,17,14,0},
-        /* ò */  {3,0,14,17,17,17,14,0},
-        /* û */  {14,17,0,17,17,17,30,0},
-        /* ù */  {3,0,17,17,17,17,30,0},
-        /* ÿ */  {10,0,17,17,17,30,16,15},
-        /* Ö */  {17,14,17,17,17,17,14,0},
-        /* Ü */  {17,0,17,17,17,17,14,0},
-        /* ø */  {0,0,14,25,21,19,14,4},
-        /* £ */  {12,18,2,15,2,2,31,0},
-        /* Ø */  {14,17,25,21,19,17,14,0},
-        /* × */  {0,0,5,2,5,0,0,0},
-        /* ƒ */  {8,20,4,14,4,4,5,2},
-        /* á */  {24,0,14,16,30,17,30,0},
-        /* í */  {3,0,1,1,1,1,1,0},
-        /* ó */  {24,0,14,17,17,17,14,0},
-        /* ú */  {24,0,17,17,17,17,30,0},
-        /* ñ */  {31,0,15,17,17,17,17,0},
-        /* Ñ */  {31,0,17,19,21,25,17,0},
-        /* ª */  {14,16,31,30,0,31,0,0},
-        /* º */  {14,17,17,14,0,31,0,0},
-        /* ¿ */  {4,0,4,2,1,17,14,0},
-        /* ® */  {0,30,45,37,43,30,0,0},
-        /* ¬ */  {0,0,0,31,16,16,0,0},
-        /* ½ */  {17,9,8,4,18,10,25,0},
-        /* ¼ */  {17,9,8,4,26,26,17,0},
-        /* ¡ */  {0,1,0,1,1,1,1,0},
-        /* « */  {0,20,10,5,10,20,0,0},
-        /* » */  {0,5,10,20,10,5,0,0},
-        /* 176 */  {68,17,68,17,68,17,68,17},
-        /* 177 */  {170,85,170,85,170,85,170,85},
-        /* 178 */  {219,238,219,119,219,238,219,119},
-        /* 179 */  {24,24,24,24,24,24,24,24},
-        /* 180 */  {24,24,24,24,31,24,24,24},
-        /* 181 */  {24,24,31,24,31,24,24,24},
-        /* 182 */  {108,108,108,108,111,108,108,108},
-        /* 183 */  {0,0,0,0,127,108,108,108},
-        /* 184 */  {0,0,31,24,31,24,24,24},
-        /* 185 */  {108,108,111,96,111,108,108,108},
-        /* 186 */  {108,108,108,108,108,108,108,108},
-        /* 187 */  {0,0,127,96,111,108,108,108},
-        /* 188 */  {108,108,111,96,127,0,0,0},
-        /* 189 */  {108,108,108,108,127,0,0,0},
-        /* 190 */  {24,24,31,24,31,0,0,0},
-        /* 191 */  {0,0,0,0,31,24,24,24},
-        /* 192 */  {24,24,24,24,248,0,0,0},
-        /* 193 */  {24,24,24,24,255,0,0,0},
-        /* 194 */  {0,0,0,0,255,24,24,24},
-        /* 195 */  {24,24,24,24,248,24,24,24},
-        /* 196 */  {0,0,0,0,255,0,0,0},
-        /* 197 */  {24,24,24,24,255,24,24,24},
-        /* 198 */  {24,24,248,24,248,24,24,24},
-        /* 199 */  {108,108,108,108,236,108,108,108},
-        /* 200 */  {108,108,236,12,252,0,0,0},
-        /* 201 */  {0,0,252,12,236,108,108,108},
-        /* 202 */  {108,108,239,0,255,0,0,0},
-        /* 203 */  {0,0,255,0,239,108,108,108},
-        /* 204 */  {108,108,236,12,236,108,108,108},
-        /* 205 */  {0,0,255,0,255,0,0,0},
-        /* 206 */  {108,108,239,0,239,108,108,108},
-        /* 207 */  {24,24,255,0,255,0,0,0},
-        /* 208 */  {108,108,108,108,255,0,0,0},
-        /* 209 */  {0,0,255,0,255,24,24,24},
-        /* 210 */  {0,0,0,0,255,108,108,108},
-        /* 211 */  {108,108,108,108,252,0,0,0},
-        /* 212 */  {24,24,248,24,248,0,0,0},
-        /* 213 */  {0,0,248,24,248,24,24,24},
-        /* 214 */  {0,0,0,0,252,108,108,108},
-        /* 215 */  {108,108,108,108,255,108,108,108},
-        /* 216 */  {24,24,255,24,255,24,24,24},
-        /* 217 */  {24,24,24,24,31,0,0,0},
-        /* 218 */  {0,0,0,0,248,24,24,24},
-        /* 219 */  {255,255,255,255,255,255,255,255},
-        /* 220 */  {0,0,0,0,255,255,255,255},
-        /* 221 */  {15,15,15,15,15,15,15,15},
-        /* 222 */  {240,240,240,240,240,240,240,240},
-        /* 223 */  {255,255,255,255,0,0,0,0},
-        /* 224 */  {0,0,110,59,19,59,110,0},
-        /* 225 */  {0,30,51,31,51,31,3,3},
-        /* 226 */  {0,63,51,3,3,3,3,0},
-        /* 227 */  {0,127,54,54,54,54,54,0},
-        /* 228 */  {63,51,6,12,6,51,63,0},
-        /* 229 */  {0,0,126,27,27,27,14,0},
-        /* 230 */  {0,102,102,102,102,62,6,3},
-        /* 231 */  {0,110,59,24,24,24,24,0},
-        /* 232 */  {63,12,30,51,51,30,12,63},
-        /* 233 */  {28,54,99,127,99,54,28,0},
-        /* 234 */  {28,54,99,99,54,54,119,0},
-        /* 235 */  {56,12,24,62,51,51,30,0},
-        /* 236 */  {0,0,126,219,219,126,0,0},
-        /* 237 */  {96,48,126,219,219,126,6,3},
-        /* 238 */  {28,6,3,31,3,6,28,0},
-        /* 239 */  {30,51,51,51,51,51,51,0},
-        /* 240 */  {0,63,0,63,0,63,0,0},
-        /* 241 */  {12,12,63,12,12,0,63,0},
-        /* 242 */  {6,12,24,12,6,0,63,0},
-        /* 243 */  {24,12,6,12,24,0,63,0},
-        /* 244 */  {112,216,216,24,24,24,24,24},
-        /* 245 */  {24,24,24,24,24,27,27,14},
-        /* 246 */  {12,12,0,63,0,12,12,0},
-        /* 247 */  {0,110,59,0,110,59,0,0},
-        /* 248 */  {28,54,54,28,0,0,0,0},
-        /* 249 */  {0,0,0,24,24,0,0,0},
-        /* 250 */  {0,0,0,0,24,0,0,0},
-        /* 251 */  {240,48,48,48,55,54,60,56},
-        /* 252 */  {30,54,54,54,54,0,0,0},
-        /* 253 */  {14,24,12,6,30,0,0,0},
-        /* 254 */  {0,0,60,60,60,60,0,0},
-        /* 255 */  {0,0,0,0,0,0,0,0},
-    };
-
     /**
      * A static non-malleable MinecraftFont.
      */
-    public static final MinecraftFont Font = new MinecraftFont(false);
+    public static final MinecraftFont FONT = new MinecraftFont(false);
+    private static final int spaceSize = 2;
+    private static final String fontChars =
+            " !\"#$%&'()*+,-./0123456789:;<=>?" +
+                    "@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_" +
+                    "'abcdefghijklmnopqrstuvwxyz{|}~\u007F" +
+                    "\u00C7\u00FC\u00E9\u00E2\u00E4\u00E0\u00E5\u00E7" + // Çüéâäàåç
+                    "\u00EA\u00EB\u00E8\u00EF\u00EE\u00EC\u00C4\u00C5" + // êëèïîìÄÅ
+                    "\u00C9\u00E6\u00C6\u00F4\u00F6\u00F2\u00FB\u00F9" + // ÉæÆôöòûù
+                    "\u00FF\u00D6\u00DC\u00F8\u00A3\u00D8\u00D7\u0191" + // ÿÖÜø£Ø×ƒ
+                    "\u00E1\u00ED\u00F3\u00FA\u00F1\u00D1\u00AA\u00BA" + // áíóúñÑªº
+                    "\u00BF\u00AE\u00AC\u00BD\u00BC\u00A1\u00AB\u00BB";  // ¿®¬½¼¡«»
+    private static final int[][] fontData = new int[][]{
+        /* null */  {0, 0, 0, 0, 0, 0, 0, 0},
+        /* 1 */  {126, 129, 165, 129, 189, 153, 129, 126},
+        /* 2 */  {126, 255, 219, 255, 195, 231, 255, 126},
+        /* 3 */  {54, 127, 127, 127, 62, 28, 8, 0},
+        /* 4 */  {8, 28, 62, 127, 62, 28, 8, 0},
+        /* 5 */  {28, 62, 28, 127, 127, 62, 28, 62},
+        /* 6 */  {8, 8, 28, 62, 127, 62, 28, 62},
+        /* 7 */  {0, 0, 24, 60, 60, 24, 0, 0},
+        /* 8 */  {255, 255, 231, 195, 195, 231, 255, 255},
+        /* 9 */  {0, 60, 102, 66, 66, 102, 60, 0},
+        /* 10 */  {255, 195, 153, 189, 189, 153, 195, 255},
+        /* 11 */  {240, 224, 240, 190, 51, 51, 51, 30},
+        /* 12 */  {60, 102, 102, 102, 60, 24, 126, 24},
+        /* 13 */  {252, 204, 252, 12, 12, 14, 15, 7},
+        /* 14 */  {254, 198, 254, 198, 198, 230, 103, 3},
+        /* 15 */  {153, 90, 60, 231, 231, 60, 90, 153},
+        /* 16 */  {1, 7, 31, 127, 31, 7, 1, 0},
+        /* 17 */  {64, 112, 124, 127, 124, 112, 64, 0},
+        /* 18 */  {24, 60, 126, 24, 24, 126, 60, 24},
+        /* 19 */  {102, 102, 102, 102, 102, 0, 102, 0},
+        /* 20 */  {254, 219, 219, 222, 216, 216, 216, 0},
+        /* 21 */  {124, 198, 28, 54, 54, 28, 51, 30},
+        /* 22 */  {0, 0, 0, 0, 126, 126, 126, 0},
+        /* 23 */  {24, 60, 126, 24, 126, 60, 24, 255},
+        /* 24 */  {24, 60, 126, 24, 24, 24, 24, 0},
+        /* 25 */  {24, 24, 24, 24, 126, 60, 24, 0},
+        /* 26 */  {0, 24, 48, 127, 48, 24, 0, 0},
+        /* 27 */  {0, 12, 6, 127, 6, 12, 0, 0},
+        /* 28 */  {0, 0, 3, 3, 3, 127, 0, 0},
+        /* 29 */  {0, 36, 102, 255, 102, 36, 0, 0},
+        /* 30 */  {0, 24, 60, 126, 255, 255, 0, 0},
+        /* 31 */  {0, 255, 255, 126, 60, 24, 0, 0},
+        /*   */  {0, 0, 0, 0, 0, 0, 0, 0},
+        /* ! */  {1, 1, 1, 1, 1, 0, 1, 0},
+        /* " */  {10, 10, 5, 0, 0, 0, 0, 0},
+        /* # */  {10, 10, 31, 10, 31, 10, 10, 0},
+        /* $ */  {4, 30, 1, 14, 16, 15, 4, 0},
+        /* % */  {17, 9, 8, 4, 2, 18, 17, 0},
+        /* & */  {4, 10, 4, 22, 13, 9, 22, 0},
+        /* ' */  {2, 2, 1, 0, 0, 0, 0, 0},
+        /* ( */  {12, 2, 1, 1, 1, 2, 12, 0},
+        /* ) */  {3, 4, 8, 8, 8, 4, 3, 0},
+        /* * */  {0, 0, 9, 6, 9, 0, 0, 0},
+        /* + */  {0, 4, 4, 31, 4, 4, 0, 0},
+        /* , */  {0, 0, 0, 0, 0, 1, 1, 1},
+        /* - */  {0, 0, 0, 31, 0, 0, 0, 0},
+        /* . */  {0, 0, 0, 0, 0, 1, 1, 0},
+        /* / */  {16, 8, 8, 4, 2, 2, 1, 0},
+        /* 0 */  {14, 17, 25, 21, 19, 17, 14, 0},
+        /* 1 */  {4, 6, 4, 4, 4, 4, 31, 0},
+        /* 2 */  {14, 17, 16, 12, 2, 17, 31, 0},
+        /* 3 */  {14, 17, 16, 12, 16, 17, 14, 0},
+        /* 4 */  {24, 20, 18, 17, 31, 16, 16, 0},
+        /* 5 */  {31, 1, 15, 16, 16, 17, 14, 0},
+        /* 6 */  {12, 2, 1, 15, 17, 17, 14, 0},
+        /* 7 */  {31, 17, 16, 8, 4, 4, 4, 0},
+        /* 8 */  {14, 17, 17, 14, 17, 17, 14, 0},
+        /* 9 */  {14, 17, 17, 30, 16, 8, 6, 0},
+        /* : */  {0, 1, 1, 0, 0, 1, 1, 0},
+        /* ; */  {0, 1, 1, 0, 0, 1, 1, 1},
+        /* < */  {8, 4, 2, 1, 2, 4, 8, 0},
+        /* = */  {0, 0, 31, 0, 0, 31, 0, 0},
+        /* > */  {1, 2, 4, 8, 4, 2, 1, 0},
+        /* ? */  {14, 17, 16, 8, 4, 0, 4, 0},
+        /* @ */  {30, 33, 45, 45, 61, 1, 30, 0},
+        /* A */  {14, 17, 31, 17, 17, 17, 17, 0},
+        /* B */  {15, 17, 15, 17, 17, 17, 15, 0},
+        /* C */  {14, 17, 1, 1, 1, 17, 14, 0},
+        /* D */  {15, 17, 17, 17, 17, 17, 15, 0},
+        /* E */  {31, 1, 7, 1, 1, 1, 31, 0},
+        /* F */  {31, 1, 7, 1, 1, 1, 1, 0},
+        /* G */  {30, 1, 25, 17, 17, 17, 14, 0},
+        /* H */  {17, 17, 31, 17, 17, 17, 17, 0},
+        /* I */  {7, 2, 2, 2, 2, 2, 7, 0},
+        /* J */  {16, 16, 16, 16, 16, 17, 14, 0},
+        /* K */  {17, 9, 7, 9, 17, 17, 17, 0},
+        /* L */  {1, 1, 1, 1, 1, 1, 31, 0},
+        /* M */  {17, 27, 21, 17, 17, 17, 17, 0},
+        /* N */  {17, 19, 21, 25, 17, 17, 17, 0},
+        /* O */  {14, 17, 17, 17, 17, 17, 14, 0},
+        /* P */  {15, 17, 15, 1, 1, 1, 1, 0},
+        /* Q */  {14, 17, 17, 17, 17, 9, 22, 0},
+        /* R */  {15, 17, 15, 17, 17, 17, 17, 0},
+        /* S */  {30, 1, 14, 16, 16, 17, 14, 0},
+        /* T */  {31, 4, 4, 4, 4, 4, 4, 0},
+        /* U */  {17, 17, 17, 17, 17, 17, 14, 0},
+        /* V */  {17, 17, 17, 17, 10, 10, 4, 0},
+        /* W */  {17, 17, 17, 17, 21, 27, 17, 0},
+        /* X */  {17, 10, 4, 10, 17, 17, 17, 0},
+        /* Y */  {17, 10, 4, 4, 4, 4, 4, 0},
+        /* Z */  {31, 16, 8, 4, 2, 1, 31, 0},
+        /* [ */  {7, 1, 1, 1, 1, 1, 7, 0},
+        /* \ */  {1, 2, 2, 4, 8, 8, 16, 0},
+        /* ] */  {7, 4, 4, 4, 4, 4, 7, 0},
+        /* ^ */  {4, 10, 17, 0, 0, 0, 0, 0},
+        /* _ */  {0, 0, 0, 0, 0, 0, 0, 31},
+        /* ` */  {1, 1, 2, 0, 0, 0, 0, 0},
+        /* a */  {0, 0, 14, 16, 30, 17, 30, 0},
+        /* b */  {1, 1, 13, 19, 17, 17, 15, 0},
+        /* c */  {0, 0, 14, 17, 1, 17, 14, 0},
+        /* d */  {16, 16, 22, 25, 17, 17, 30, 0},
+        /* e */  {0, 0, 14, 17, 31, 1, 30, 0},
+        /* f */  {12, 2, 15, 2, 2, 2, 2, 0},
+        /* g */  {0, 0, 30, 17, 17, 30, 16, 15},
+        /* h */  {1, 1, 13, 19, 17, 17, 17, 0},
+        /* i */  {1, 0, 1, 1, 1, 1, 1, 0},
+        /* j */  {16, 0, 16, 16, 16, 17, 17, 14},
+        /* k */  {1, 1, 9, 5, 3, 5, 9, 0},
+        /* l */  {1, 1, 1, 1, 1, 1, 2, 0},
+        /* m */  {0, 0, 11, 21, 21, 17, 17, 0},
+        /* n */  {0, 0, 15, 17, 17, 17, 17, 0},
+        /* o */  {0, 0, 14, 17, 17, 17, 14, 0},
+        /* p */  {0, 0, 13, 19, 17, 15, 1, 1},
+        /* q */  {0, 0, 22, 25, 17, 30, 16, 16},
+        /* r */  {0, 0, 13, 19, 1, 1, 1, 0},
+        /* s */  {0, 0, 30, 1, 14, 16, 15, 0},
+        /* t */  {2, 2, 7, 2, 2, 2, 4, 0},
+        /* u */  {0, 0, 17, 17, 17, 17, 30, 0},
+        /* v */  {0, 0, 17, 17, 17, 10, 4, 0},
+        /* w */  {0, 0, 17, 17, 21, 21, 30, 0},
+        /* x */  {0, 0, 17, 10, 4, 10, 17, 0},
+        /* y */  {0, 0, 17, 17, 17, 30, 16, 15},
+        /* z */  {0, 0, 31, 8, 4, 2, 31, 0},
+        /* { */  {12, 2, 2, 1, 2, 2, 12, 0},
+        /* | */  {1, 1, 1, 0, 1, 1, 1, 0},
+        /* } */  {3, 4, 4, 8, 4, 4, 3, 0},
+        /* ~ */  {38, 25, 0, 0, 0, 0, 0, 0},
+        /* ⌂ */  {0, 0, 4, 10, 17, 17, 31, 0},
+        /* Ç */  {14, 17, 1, 1, 17, 14, 16, 12},
+        /* ü */  {10, 0, 17, 17, 17, 17, 30, 0},
+        /* é */  {24, 0, 14, 17, 31, 1, 30, 0},
+        /* â */  {14, 17, 14, 16, 30, 17, 30, 0},
+        /* ä */  {10, 0, 14, 16, 30, 17, 30, 0},
+        /* à */  {3, 0, 14, 16, 30, 17, 30, 0},
+        /* å */  {4, 0, 14, 16, 30, 17, 30, 0},
+        /* ç */  {0, 14, 17, 1, 17, 14, 16, 12},
+        /* ê */  {14, 17, 14, 17, 31, 1, 30, 0},
+        /* ë */  {10, 0, 14, 17, 31, 1, 30, 0},
+        /* è */  {3, 0, 14, 17, 31, 1, 30, 0},
+        /* ï */  {5, 0, 2, 2, 2, 2, 2, 0},
+        /* î */  {14, 17, 4, 4, 4, 4, 4, 0},
+        /* ì */  {3, 0, 2, 2, 2, 2, 2, 0},
+        /* Ä */  {17, 14, 17, 31, 17, 17, 17, 0},
+        /* Å */  {4, 0, 14, 17, 31, 17, 17, 0},
+        /* É */  {24, 0, 31, 1, 7, 1, 31, 0},
+        /* æ */  {0, 0, 10, 20, 30, 5, 30, 0},
+        /* Æ */  {30, 5, 15, 5, 5, 5, 29, 0},
+        /* ô */  {14, 17, 14, 17, 17, 17, 14, 0},
+        /* ö */  {10, 0, 14, 17, 17, 17, 14, 0},
+        /* ò */  {3, 0, 14, 17, 17, 17, 14, 0},
+        /* û */  {14, 17, 0, 17, 17, 17, 30, 0},
+        /* ù */  {3, 0, 17, 17, 17, 17, 30, 0},
+        /* ÿ */  {10, 0, 17, 17, 17, 30, 16, 15},
+        /* Ö */  {17, 14, 17, 17, 17, 17, 14, 0},
+        /* Ü */  {17, 0, 17, 17, 17, 17, 14, 0},
+        /* ø */  {0, 0, 14, 25, 21, 19, 14, 4},
+        /* £ */  {12, 18, 2, 15, 2, 2, 31, 0},
+        /* Ø */  {14, 17, 25, 21, 19, 17, 14, 0},
+        /* × */  {0, 0, 5, 2, 5, 0, 0, 0},
+        /* ƒ */  {8, 20, 4, 14, 4, 4, 5, 2},
+        /* á */  {24, 0, 14, 16, 30, 17, 30, 0},
+        /* í */  {3, 0, 1, 1, 1, 1, 1, 0},
+        /* ó */  {24, 0, 14, 17, 17, 17, 14, 0},
+        /* ú */  {24, 0, 17, 17, 17, 17, 30, 0},
+        /* ñ */  {31, 0, 15, 17, 17, 17, 17, 0},
+        /* Ñ */  {31, 0, 17, 19, 21, 25, 17, 0},
+        /* ª */  {14, 16, 31, 30, 0, 31, 0, 0},
+        /* º */  {14, 17, 17, 14, 0, 31, 0, 0},
+        /* ¿ */  {4, 0, 4, 2, 1, 17, 14, 0},
+        /* ® */  {0, 30, 45, 37, 43, 30, 0, 0},
+        /* ¬ */  {0, 0, 0, 31, 16, 16, 0, 0},
+        /* ½ */  {17, 9, 8, 4, 18, 10, 25, 0},
+        /* ¼ */  {17, 9, 8, 4, 26, 26, 17, 0},
+        /* ¡ */  {0, 1, 0, 1, 1, 1, 1, 0},
+        /* « */  {0, 20, 10, 5, 10, 20, 0, 0},
+        /* » */  {0, 5, 10, 20, 10, 5, 0, 0},
+        /* 176 */  {68, 17, 68, 17, 68, 17, 68, 17},
+        /* 177 */  {170, 85, 170, 85, 170, 85, 170, 85},
+        /* 178 */  {219, 238, 219, 119, 219, 238, 219, 119},
+        /* 179 */  {24, 24, 24, 24, 24, 24, 24, 24},
+        /* 180 */  {24, 24, 24, 24, 31, 24, 24, 24},
+        /* 181 */  {24, 24, 31, 24, 31, 24, 24, 24},
+        /* 182 */  {108, 108, 108, 108, 111, 108, 108, 108},
+        /* 183 */  {0, 0, 0, 0, 127, 108, 108, 108},
+        /* 184 */  {0, 0, 31, 24, 31, 24, 24, 24},
+        /* 185 */  {108, 108, 111, 96, 111, 108, 108, 108},
+        /* 186 */  {108, 108, 108, 108, 108, 108, 108, 108},
+        /* 187 */  {0, 0, 127, 96, 111, 108, 108, 108},
+        /* 188 */  {108, 108, 111, 96, 127, 0, 0, 0},
+        /* 189 */  {108, 108, 108, 108, 127, 0, 0, 0},
+        /* 190 */  {24, 24, 31, 24, 31, 0, 0, 0},
+        /* 191 */  {0, 0, 0, 0, 31, 24, 24, 24},
+        /* 192 */  {24, 24, 24, 24, 248, 0, 0, 0},
+        /* 193 */  {24, 24, 24, 24, 255, 0, 0, 0},
+        /* 194 */  {0, 0, 0, 0, 255, 24, 24, 24},
+        /* 195 */  {24, 24, 24, 24, 248, 24, 24, 24},
+        /* 196 */  {0, 0, 0, 0, 255, 0, 0, 0},
+        /* 197 */  {24, 24, 24, 24, 255, 24, 24, 24},
+        /* 198 */  {24, 24, 248, 24, 248, 24, 24, 24},
+        /* 199 */  {108, 108, 108, 108, 236, 108, 108, 108},
+        /* 200 */  {108, 108, 236, 12, 252, 0, 0, 0},
+        /* 201 */  {0, 0, 252, 12, 236, 108, 108, 108},
+        /* 202 */  {108, 108, 239, 0, 255, 0, 0, 0},
+        /* 203 */  {0, 0, 255, 0, 239, 108, 108, 108},
+        /* 204 */  {108, 108, 236, 12, 236, 108, 108, 108},
+        /* 205 */  {0, 0, 255, 0, 255, 0, 0, 0},
+        /* 206 */  {108, 108, 239, 0, 239, 108, 108, 108},
+        /* 207 */  {24, 24, 255, 0, 255, 0, 0, 0},
+        /* 208 */  {108, 108, 108, 108, 255, 0, 0, 0},
+        /* 209 */  {0, 0, 255, 0, 255, 24, 24, 24},
+        /* 210 */  {0, 0, 0, 0, 255, 108, 108, 108},
+        /* 211 */  {108, 108, 108, 108, 252, 0, 0, 0},
+        /* 212 */  {24, 24, 248, 24, 248, 0, 0, 0},
+        /* 213 */  {0, 0, 248, 24, 248, 24, 24, 24},
+        /* 214 */  {0, 0, 0, 0, 252, 108, 108, 108},
+        /* 215 */  {108, 108, 108, 108, 255, 108, 108, 108},
+        /* 216 */  {24, 24, 255, 24, 255, 24, 24, 24},
+        /* 217 */  {24, 24, 24, 24, 31, 0, 0, 0},
+        /* 218 */  {0, 0, 0, 0, 248, 24, 24, 24},
+        /* 219 */  {255, 255, 255, 255, 255, 255, 255, 255},
+        /* 220 */  {0, 0, 0, 0, 255, 255, 255, 255},
+        /* 221 */  {15, 15, 15, 15, 15, 15, 15, 15},
+        /* 222 */  {240, 240, 240, 240, 240, 240, 240, 240},
+        /* 223 */  {255, 255, 255, 255, 0, 0, 0, 0},
+        /* 224 */  {0, 0, 110, 59, 19, 59, 110, 0},
+        /* 225 */  {0, 30, 51, 31, 51, 31, 3, 3},
+        /* 226 */  {0, 63, 51, 3, 3, 3, 3, 0},
+        /* 227 */  {0, 127, 54, 54, 54, 54, 54, 0},
+        /* 228 */  {63, 51, 6, 12, 6, 51, 63, 0},
+        /* 229 */  {0, 0, 126, 27, 27, 27, 14, 0},
+        /* 230 */  {0, 102, 102, 102, 102, 62, 6, 3},
+        /* 231 */  {0, 110, 59, 24, 24, 24, 24, 0},
+        /* 232 */  {63, 12, 30, 51, 51, 30, 12, 63},
+        /* 233 */  {28, 54, 99, 127, 99, 54, 28, 0},
+        /* 234 */  {28, 54, 99, 99, 54, 54, 119, 0},
+        /* 235 */  {56, 12, 24, 62, 51, 51, 30, 0},
+        /* 236 */  {0, 0, 126, 219, 219, 126, 0, 0},
+        /* 237 */  {96, 48, 126, 219, 219, 126, 6, 3},
+        /* 238 */  {28, 6, 3, 31, 3, 6, 28, 0},
+        /* 239 */  {30, 51, 51, 51, 51, 51, 51, 0},
+        /* 240 */  {0, 63, 0, 63, 0, 63, 0, 0},
+        /* 241 */  {12, 12, 63, 12, 12, 0, 63, 0},
+        /* 242 */  {6, 12, 24, 12, 6, 0, 63, 0},
+        /* 243 */  {24, 12, 6, 12, 24, 0, 63, 0},
+        /* 244 */  {112, 216, 216, 24, 24, 24, 24, 24},
+        /* 245 */  {24, 24, 24, 24, 24, 27, 27, 14},
+        /* 246 */  {12, 12, 0, 63, 0, 12, 12, 0},
+        /* 247 */  {0, 110, 59, 0, 110, 59, 0, 0},
+        /* 248 */  {28, 54, 54, 28, 0, 0, 0, 0},
+        /* 249 */  {0, 0, 0, 24, 24, 0, 0, 0},
+        /* 250 */  {0, 0, 0, 0, 24, 0, 0, 0},
+        /* 251 */  {240, 48, 48, 48, 55, 54, 60, 56},
+        /* 252 */  {30, 54, 54, 54, 54, 0, 0, 0},
+        /* 253 */  {14, 24, 12, 6, 30, 0, 0, 0},
+        /* 254 */  {0, 0, 60, 60, 60, 60, 0, 0},
+        /* 255 */  {0, 0, 0, 0, 0, 0, 0, 0},
+    };
 
     /**
      * Initialize a new MinecraftFont.
@@ -324,5 +321,4 @@ public class MinecraftFont extends MapFont {
 
         this.malleable = malleable;
     }
-
 }
diff --git a/src/main/java/org/bukkit/material/Attachable.java b/src/main/java/org/bukkit/material/Attachable.java
index 1d3f107..e9b95ae 100644
--- a/src/main/java/org/bukkit/material/Attachable.java
+++ b/src/main/java/org/bukkit/material/Attachable.java
@@ -12,5 +12,5 @@ public interface Attachable extends Directional {
      *
      * @return BlockFace attached to
      */
-    public BlockFace getAttachedFace();
+    BlockFace getAttachedFace();
 }
diff --git a/src/main/java/org/bukkit/material/Bed.java b/src/main/java/org/bukkit/material/Bed.java
index a1c087a..697cb04 100644
--- a/src/main/java/org/bukkit/material/Bed.java
+++ b/src/main/java/org/bukkit/material/Bed.java
@@ -26,7 +26,6 @@ public class Bed extends MaterialData implements Directional {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -39,7 +38,6 @@ public class Bed extends MaterialData implements Directional {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -48,7 +46,6 @@ public class Bed extends MaterialData implements Directional {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -80,23 +77,19 @@ public class Bed extends MaterialData implements Directional {
      */
     public void setFacingDirection(BlockFace face) {
         byte data;
-
         switch (face) {
-        case SOUTH:
-            data = 0x0;
-            break;
-
-        case WEST:
-            data = 0x1;
-            break;
-
-        case NORTH:
-            data = 0x2;
-            break;
-
-        case EAST:
-        default:
-            data = 0x3;
+            case SOUTH:
+                data = 0x0;
+                break;
+            case WEST:
+                data = 0x1;
+                break;
+            case NORTH:
+                data = 0x2;
+                break;
+            case EAST:
+            default:
+                data = 0x3;
         }
 
         if (isHeadOfBed()) {
@@ -113,20 +106,16 @@ public class Bed extends MaterialData implements Directional {
      */
     public BlockFace getFacing() {
         byte data = (byte) (getData() & 0x7);
-
         switch (data) {
-        case 0x0:
-            return BlockFace.SOUTH;
-
-        case 0x1:
-            return BlockFace.WEST;
-
-        case 0x2:
-            return BlockFace.NORTH;
-
-        case 0x3:
-        default:
-            return BlockFace.EAST;
+            case 0x0:
+                return BlockFace.SOUTH;
+            case 0x1:
+                return BlockFace.WEST;
+            case 0x2:
+                return BlockFace.NORTH;
+            case 0x3:
+            default:
+                return BlockFace.EAST;
         }
     }
 
diff --git a/src/main/java/org/bukkit/material/Button.java b/src/main/java/org/bukkit/material/Button.java
index 2eeeaa6..eb12774 100644
--- a/src/main/java/org/bukkit/material/Button.java
+++ b/src/main/java/org/bukkit/material/Button.java
@@ -1,18 +1,18 @@
 package org.bukkit.material;
 
-import org.bukkit.block.BlockFace;
 import org.bukkit.Material;
+import org.bukkit.block.BlockFace;
 
 /**
  * Represents a button
  */
 public class Button extends SimpleAttachableMaterialData implements Redstone {
+
     public Button() {
         super(Material.STONE_BUTTON);
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -25,7 +25,6 @@ public class Button extends SimpleAttachableMaterialData implements Redstone {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -34,7 +33,6 @@ public class Button extends SimpleAttachableMaterialData implements Redstone {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -55,8 +53,7 @@ public class Button extends SimpleAttachableMaterialData implements Redstone {
     /**
      * Sets the current state of this button
      *
-     * @param bool
-     *            whether or not the button is powered
+     * @param bool whether or not the button is powered
      */
     public void setPowered(boolean bool) {
         setData((byte) (bool ? (getData() | 0x8) : (getData() & ~0x8)));
@@ -69,19 +66,15 @@ public class Button extends SimpleAttachableMaterialData implements Redstone {
      */
     public BlockFace getAttachedFace() {
         byte data = (byte) (getData() & 0x7);
-
         switch (data) {
-        case 0x1:
-            return BlockFace.WEST;
-
-        case 0x2:
-            return BlockFace.EAST;
-
-        case 0x3:
-            return BlockFace.NORTH;
-
-        case 0x4:
-            return BlockFace.SOUTH;
+            case 0x1:
+                return BlockFace.WEST;
+            case 0x2:
+                return BlockFace.EAST;
+            case 0x3:
+                return BlockFace.NORTH;
+            case 0x4:
+                return BlockFace.SOUTH;
         }
 
         return null;
@@ -92,23 +85,19 @@ public class Button extends SimpleAttachableMaterialData implements Redstone {
      */
     public void setFacingDirection(BlockFace face) {
         byte data = (byte) (getData() & 0x8);
-
         switch (face) {
-        case EAST:
-            data |= 0x1;
-            break;
-
-        case WEST:
-            data |= 0x2;
-            break;
-
-        case SOUTH:
-            data |= 0x3;
-            break;
-
-        case NORTH:
-            data |= 0x4;
-            break;
+            case EAST:
+                data |= 0x1;
+                break;
+            case WEST:
+                data |= 0x2;
+                break;
+            case SOUTH:
+                data |= 0x3;
+                break;
+            case NORTH:
+                data |= 0x4;
+                break;
         }
 
         setData(data);
diff --git a/src/main/java/org/bukkit/material/Cake.java b/src/main/java/org/bukkit/material/Cake.java
index 360ae58..b57675f 100644
--- a/src/main/java/org/bukkit/material/Cake.java
+++ b/src/main/java/org/bukkit/material/Cake.java
@@ -3,12 +3,12 @@ package org.bukkit.material;
 import org.bukkit.Material;
 
 public class Cake extends MaterialData {
+
     public Cake() {
         super(Material.CAKE_BLOCK);
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -21,7 +21,6 @@ public class Cake extends MaterialData {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -30,7 +29,6 @@ public class Cake extends MaterialData {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -48,15 +46,6 @@ public class Cake extends MaterialData {
     }
 
     /**
-     * Gets the number of slices remaining on this cake
-     *
-     * @return The number of slices remaining
-     */
-    public int getSlicesRemaining() {
-        return 6 - getData();
-    }
-
-    /**
      * Sets the number of slices eaten from this cake
      *
      * @param n The number of slices eaten
@@ -68,6 +57,15 @@ public class Cake extends MaterialData {
     }
 
     /**
+     * Gets the number of slices remaining on this cake
+     *
+     * @return The number of slices remaining
+     */
+    public int getSlicesRemaining() {
+        return 6 - getData();
+    }
+
+    /**
      * Sets the number of slices remaining on this cake
      *
      * @param n The number of slices remaining
@@ -76,6 +74,7 @@ public class Cake extends MaterialData {
         if (n > 6) {
             n = 6;
         }
+
         setData((byte) (6 - n));
     }
 
diff --git a/src/main/java/org/bukkit/material/Cauldron.java b/src/main/java/org/bukkit/material/Cauldron.java
index b464bbd..2d01c37 100644
--- a/src/main/java/org/bukkit/material/Cauldron.java
+++ b/src/main/java/org/bukkit/material/Cauldron.java
@@ -6,6 +6,7 @@ import org.bukkit.Material;
  * Represents a cauldron
  */
 public class Cauldron extends MaterialData {
+
     private static final int CAULDRON_FULL = 3;
     private static final int CAULDRON_EMPTY = 0;
 
@@ -14,16 +15,14 @@ public class Cauldron extends MaterialData {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
-    public Cauldron(int type, byte data){
+    public Cauldron(int type, byte data) {
         super(type, data);
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
diff --git a/src/main/java/org/bukkit/material/Chest.java b/src/main/java/org/bukkit/material/Chest.java
index b9f6988..4baadf9 100644
--- a/src/main/java/org/bukkit/material/Chest.java
+++ b/src/main/java/org/bukkit/material/Chest.java
@@ -23,7 +23,6 @@ public class Chest extends DirectionalContainer {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -36,7 +35,6 @@ public class Chest extends DirectionalContainer {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -45,7 +43,6 @@ public class Chest extends DirectionalContainer {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
diff --git a/src/main/java/org/bukkit/material/Coal.java b/src/main/java/org/bukkit/material/Coal.java
index 3a4f7c3..d630015 100644
--- a/src/main/java/org/bukkit/material/Coal.java
+++ b/src/main/java/org/bukkit/material/Coal.java
@@ -7,6 +7,7 @@ import org.bukkit.Material;
  * Represents the different types of coals.
  */
 public class Coal extends MaterialData {
+
     public Coal() {
         super(Material.COAL);
     }
@@ -17,7 +18,6 @@ public class Coal extends MaterialData {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -30,7 +30,6 @@ public class Coal extends MaterialData {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -39,7 +38,6 @@ public class Coal extends MaterialData {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
diff --git a/src/main/java/org/bukkit/material/CocoaPlant.java b/src/main/java/org/bukkit/material/CocoaPlant.java
index b8280b5..210ae75 100644
--- a/src/main/java/org/bukkit/material/CocoaPlant.java
+++ b/src/main/java/org/bukkit/material/CocoaPlant.java
@@ -8,18 +8,11 @@ import org.bukkit.block.BlockFace;
  */
 public class CocoaPlant extends MaterialData implements Directional, Attachable {
 
-    public enum CocoaPlantSize {
-        SMALL,
-        MEDIUM,
-        LARGE
-    }
-
     public CocoaPlant() {
         super(Material.COCOA);
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -28,7 +21,6 @@ public class CocoaPlant extends MaterialData implements Directional, Attachable
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -80,6 +72,7 @@ public class CocoaPlant extends MaterialData implements Directional, Attachable
                 dat |= 0x8;
                 break;
         }
+
         setData((byte) dat);
     }
 
@@ -103,6 +96,7 @@ public class CocoaPlant extends MaterialData implements Directional, Attachable
                 dat |= 0x3;
                 break;
         }
+
         setData((byte) dat);
     }
 
@@ -117,6 +111,7 @@ public class CocoaPlant extends MaterialData implements Directional, Attachable
             case 3:
                 return BlockFace.EAST;
         }
+
         return null;
     }
 
@@ -129,4 +124,10 @@ public class CocoaPlant extends MaterialData implements Directional, Attachable
     public String toString() {
         return super.toString() + " facing " + getFacing() + " " + getSize();
     }
+
+    public enum CocoaPlantSize {
+        SMALL,
+        MEDIUM,
+        LARGE
+    }
 }
diff --git a/src/main/java/org/bukkit/material/Colorable.java b/src/main/java/org/bukkit/material/Colorable.java
index 3b91b24..6ca4d69 100644
--- a/src/main/java/org/bukkit/material/Colorable.java
+++ b/src/main/java/org/bukkit/material/Colorable.java
@@ -12,13 +12,12 @@ public interface Colorable {
      *
      * @return The DyeColor of this object.
      */
-    public DyeColor getColor();
+    DyeColor getColor();
 
     /**
      * Sets the color of this object to the specified DyeColor.
      *
      * @param color The color of the object, as a DyeColor.
      */
-    public void setColor(DyeColor color);
-
+    void setColor(DyeColor color);
 }
diff --git a/src/main/java/org/bukkit/material/Command.java b/src/main/java/org/bukkit/material/Command.java
index 174e1ff..8d5077e 100644
--- a/src/main/java/org/bukkit/material/Command.java
+++ b/src/main/java/org/bukkit/material/Command.java
@@ -6,12 +6,12 @@ import org.bukkit.Material;
  * Represents a command block
  */
 public class Command extends MaterialData implements Redstone {
+
     public Command() {
         super(Material.COMMAND);
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -24,7 +24,6 @@ public class Command extends MaterialData implements Redstone {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -33,7 +32,6 @@ public class Command extends MaterialData implements Redstone {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -54,11 +52,10 @@ public class Command extends MaterialData implements Redstone {
     /**
      * Sets the current state of this Material
      *
-     * @param bool
-     *            whether or not the command block is powered
+     * @param powered whether or not the command block is powered
      */
-    public void setPowered(boolean bool) {
-        setData((byte) (bool ? (getData() | 1) : (getData() & -2)));
+    public void setPowered(boolean powered) {
+        setData((byte) (powered ? (getData() | 1) : (getData() & -2)));
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/material/Crops.java b/src/main/java/org/bukkit/material/Crops.java
index 2791998..a1b9900 100644
--- a/src/main/java/org/bukkit/material/Crops.java
+++ b/src/main/java/org/bukkit/material/Crops.java
@@ -7,6 +7,7 @@ import org.bukkit.Material;
  * Represents the different types of crops.
  */
 public class Crops extends MaterialData {
+
     public Crops() {
         super(Material.CROPS);
     }
@@ -17,7 +18,6 @@ public class Crops extends MaterialData {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -30,7 +30,6 @@ public class Crops extends MaterialData {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -39,7 +38,6 @@ public class Crops extends MaterialData {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
diff --git a/src/main/java/org/bukkit/material/DetectorRail.java b/src/main/java/org/bukkit/material/DetectorRail.java
index b1d3073..faf5b7c 100644
--- a/src/main/java/org/bukkit/material/DetectorRail.java
+++ b/src/main/java/org/bukkit/material/DetectorRail.java
@@ -6,12 +6,12 @@ import org.bukkit.Material;
  * Represents a detector rail
  */
 public class DetectorRail extends ExtendedRails implements PressureSensor {
+
     public DetectorRail() {
         super(Material.DETECTOR_RAIL);
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -24,7 +24,6 @@ public class DetectorRail extends ExtendedRails implements PressureSensor {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -33,7 +32,6 @@ public class DetectorRail extends ExtendedRails implements PressureSensor {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
diff --git a/src/main/java/org/bukkit/material/Diode.java b/src/main/java/org/bukkit/material/Diode.java
index 04210b7..b503618 100644
--- a/src/main/java/org/bukkit/material/Diode.java
+++ b/src/main/java/org/bukkit/material/Diode.java
@@ -4,12 +4,12 @@ import org.bukkit.Material;
 import org.bukkit.block.BlockFace;
 
 public class Diode extends MaterialData implements Directional {
+
     public Diode() {
         super(Material.DIODE_BLOCK_ON);
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -22,7 +22,6 @@ public class Diode extends MaterialData implements Directional {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -31,7 +30,6 @@ public class Diode extends MaterialData implements Directional {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -40,52 +38,48 @@ public class Diode extends MaterialData implements Directional {
     }
 
     /**
+     * Gets the delay of the repeater in ticks
+     *
+     * @return The delay (1-4)
+     */
+    public int getDelay() {
+        return (getData() >> 2) + 1;
+    }
+
+    /**
      * Sets the delay of the repeater
      *
-     * @param delay
-     *            The new delay (1-4)
+     * @param delay The new delay (1-4)
      */
     public void setDelay(int delay) {
         if (delay > 4) {
             delay = 4;
         }
+
         if (delay < 1) {
             delay = 1;
         }
-        byte newData = (byte) (getData() & 0x3);
 
+        byte newData = (byte) (getData() & 0x3);
         setData((byte) (newData | ((delay - 1) << 2)));
     }
 
-    /**
-     * Gets the delay of the repeater in ticks
-     *
-     * @return The delay (1-4)
-     */
-    public int getDelay() {
-        return (getData() >> 2) + 1;
-    }
-
     public void setFacingDirection(BlockFace face) {
         int delay = getDelay();
         byte data;
-
         switch (face) {
-        case EAST:
-            data = 0x1;
-            break;
-
-        case SOUTH:
-            data = 0x2;
-            break;
-
-        case WEST:
-            data = 0x3;
-            break;
-
-        case NORTH:
-        default:
-            data = 0x0;
+            case EAST:
+                data = 0x1;
+                break;
+            case SOUTH:
+                data = 0x2;
+                break;
+            case WEST:
+                data = 0x3;
+                break;
+            case NORTH:
+            default:
+                data = 0x0;
         }
 
         setData(data);
@@ -94,20 +88,16 @@ public class Diode extends MaterialData implements Directional {
 
     public BlockFace getFacing() {
         byte data = (byte) (getData() & 0x3);
-
         switch (data) {
-        case 0x0:
-        default:
-            return BlockFace.NORTH;
-
-        case 0x1:
-            return BlockFace.EAST;
-
-        case 0x2:
-            return BlockFace.SOUTH;
-
-        case 0x3:
-            return BlockFace.WEST;
+            case 0x0:
+            default:
+                return BlockFace.NORTH;
+            case 0x1:
+                return BlockFace.EAST;
+            case 0x2:
+                return BlockFace.SOUTH;
+            case 0x3:
+                return BlockFace.WEST;
         }
     }
 
diff --git a/src/main/java/org/bukkit/material/Directional.java b/src/main/java/org/bukkit/material/Directional.java
index 25624d2..2ad9bbc 100644
--- a/src/main/java/org/bukkit/material/Directional.java
+++ b/src/main/java/org/bukkit/material/Directional.java
@@ -9,12 +9,12 @@ public interface Directional {
      *
      * @param face The facing direction
      */
-    public void setFacingDirection(BlockFace face);
+    void setFacingDirection(BlockFace face);
 
     /**
      * Gets the direction this block is facing
      *
      * @return the direction this block is facing
      */
-    public BlockFace getFacing();
+    BlockFace getFacing();
 }
diff --git a/src/main/java/org/bukkit/material/DirectionalContainer.java b/src/main/java/org/bukkit/material/DirectionalContainer.java
index 9b0a047..bf39598 100644
--- a/src/main/java/org/bukkit/material/DirectionalContainer.java
+++ b/src/main/java/org/bukkit/material/DirectionalContainer.java
@@ -7,8 +7,8 @@ import org.bukkit.block.BlockFace;
  * Represents a furnace or a dispenser.
  */
 public class DirectionalContainer extends MaterialData implements Directional {
+
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -21,7 +21,6 @@ public class DirectionalContainer extends MaterialData implements Directional {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -30,7 +29,6 @@ public class DirectionalContainer extends MaterialData implements Directional {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -40,23 +38,19 @@ public class DirectionalContainer extends MaterialData implements Directional {
 
     public void setFacingDirection(BlockFace face) {
         byte data;
-
         switch (face) {
-        case NORTH:
-            data = 0x2;
-            break;
-
-        case SOUTH:
-            data = 0x3;
-            break;
-
-        case WEST:
-            data = 0x4;
-            break;
-
-        case EAST:
-        default:
-            data = 0x5;
+            case NORTH:
+                data = 0x2;
+                break;
+            case SOUTH:
+                data = 0x3;
+                break;
+            case WEST:
+                data = 0x4;
+                break;
+            case EAST:
+            default:
+                data = 0x5;
         }
 
         setData(data);
@@ -64,20 +58,16 @@ public class DirectionalContainer extends MaterialData implements Directional {
 
     public BlockFace getFacing() {
         byte data = getData();
-
         switch (data) {
-        case 0x2:
-            return BlockFace.NORTH;
-
-        case 0x3:
-            return BlockFace.SOUTH;
-
-        case 0x4:
-            return BlockFace.WEST;
-
-        case 0x5:
-        default:
-            return BlockFace.EAST;
+            case 0x2:
+                return BlockFace.NORTH;
+            case 0x3:
+                return BlockFace.SOUTH;
+            case 0x4:
+                return BlockFace.WEST;
+            case 0x5:
+            default:
+                return BlockFace.EAST;
         }
     }
 
diff --git a/src/main/java/org/bukkit/material/Dispenser.java b/src/main/java/org/bukkit/material/Dispenser.java
index b62f8c9..6f69c13 100644
--- a/src/main/java/org/bukkit/material/Dispenser.java
+++ b/src/main/java/org/bukkit/material/Dispenser.java
@@ -18,7 +18,6 @@ public class Dispenser extends FurnaceAndDispenser {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -31,7 +30,6 @@ public class Dispenser extends FurnaceAndDispenser {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -40,7 +38,6 @@ public class Dispenser extends FurnaceAndDispenser {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -50,28 +47,22 @@ public class Dispenser extends FurnaceAndDispenser {
 
     public void setFacingDirection(BlockFace face) {
         byte data;
-
         switch (face) {
             case DOWN:
                 data = 0x0;
                 break;
-
             case UP:
                 data = 0x1;
                 break;
-
             case NORTH:
                 data = 0x2;
                 break;
-
             case SOUTH:
                 data = 0x3;
                 break;
-
             case WEST:
                 data = 0x4;
                 break;
-
             case EAST:
             default:
                 data = 0x5;
@@ -82,23 +73,17 @@ public class Dispenser extends FurnaceAndDispenser {
 
     public BlockFace getFacing() {
         int data = getData() & 0x7;
-
         switch (data) {
             case 0x0:
                 return BlockFace.DOWN;
-
             case 0x1:
                 return BlockFace.UP;
-
             case 0x2:
                 return BlockFace.NORTH;
-
             case 0x3:
                 return BlockFace.SOUTH;
-
             case 0x4:
                 return BlockFace.WEST;
-
             case 0x5:
             default:
                 return BlockFace.EAST;
diff --git a/src/main/java/org/bukkit/material/Door.java b/src/main/java/org/bukkit/material/Door.java
index 65fa32c..06de44d 100644
--- a/src/main/java/org/bukkit/material/Door.java
+++ b/src/main/java/org/bukkit/material/Door.java
@@ -10,12 +10,12 @@ import org.bukkit.block.BlockFace;
  */
 @Deprecated
 public class Door extends MaterialData implements Directional, Openable {
+
     public Door() {
         super(Material.WOODEN_DOOR);
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -28,7 +28,6 @@ public class Door extends MaterialData implements Directional, Openable {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -37,7 +36,6 @@ public class Door extends MaterialData implements Directional, Openable {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -113,17 +111,17 @@ public class Door extends MaterialData implements Directional, Openable {
     public void setFacingDirection(BlockFace face) {
         byte data = (byte) (getData() & 0x12);
         switch (face) {
-        case NORTH:
-            data |= 0x1;
-            break;
+            case NORTH:
+                data |= 0x1;
+                break;
 
-        case EAST:
-            data |= 0x2;
-            break;
+            case EAST:
+                data |= 0x2;
+                break;
 
-        case SOUTH:
-            data |= 0x3;
-            break;
+            case SOUTH:
+                data |= 0x3;
+                break;
         }
         setData(data);
     }
@@ -138,17 +136,17 @@ public class Door extends MaterialData implements Directional, Openable {
     public BlockFace getFacing() {
         byte data = (byte) (getData() & 0x3);
         switch (data) {
-        case 0:
-            return BlockFace.WEST;
+            case 0:
+                return BlockFace.WEST;
 
-        case 1:
-            return BlockFace.NORTH;
+            case 1:
+                return BlockFace.NORTH;
 
-        case 2:
-            return BlockFace.EAST;
+            case 2:
+                return BlockFace.EAST;
 
-        case 3:
-            return BlockFace.SOUTH;
+            case 3:
+                return BlockFace.SOUTH;
         }
         return null; // shouldn't happen
     }
diff --git a/src/main/java/org/bukkit/material/Dye.java b/src/main/java/org/bukkit/material/Dye.java
index 4412c1f..7f65357 100644
--- a/src/main/java/org/bukkit/material/Dye.java
+++ b/src/main/java/org/bukkit/material/Dye.java
@@ -7,12 +7,12 @@ import org.bukkit.Material;
  * Represents dye
  */
 public class Dye extends MaterialData implements Colorable {
+
     public Dye() {
         super(Material.INK_SACK);
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -25,7 +25,6 @@ public class Dye extends MaterialData implements Colorable {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -34,7 +33,6 @@ public class Dye extends MaterialData implements Colorable {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
diff --git a/src/main/java/org/bukkit/material/EnderChest.java b/src/main/java/org/bukkit/material/EnderChest.java
index 696dc65..1162285 100644
--- a/src/main/java/org/bukkit/material/EnderChest.java
+++ b/src/main/java/org/bukkit/material/EnderChest.java
@@ -23,7 +23,6 @@ public class EnderChest extends DirectionalContainer {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -36,7 +35,6 @@ public class EnderChest extends DirectionalContainer {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -45,7 +43,6 @@ public class EnderChest extends DirectionalContainer {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
diff --git a/src/main/java/org/bukkit/material/ExtendedRails.java b/src/main/java/org/bukkit/material/ExtendedRails.java
index 0dbbf7c..fb63771 100644
--- a/src/main/java/org/bukkit/material/ExtendedRails.java
+++ b/src/main/java/org/bukkit/material/ExtendedRails.java
@@ -8,8 +8,8 @@ import org.bukkit.block.BlockFace;
  * classes
  */
 public class ExtendedRails extends Rails {
+
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -22,7 +22,6 @@ public class ExtendedRails extends Rails {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -31,7 +30,6 @@ public class ExtendedRails extends Rails {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -45,7 +43,6 @@ public class ExtendedRails extends Rails {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
diff --git a/src/main/java/org/bukkit/material/FlowerPot.java b/src/main/java/org/bukkit/material/FlowerPot.java
index 787c58d..2d4d256 100644
--- a/src/main/java/org/bukkit/material/FlowerPot.java
+++ b/src/main/java/org/bukkit/material/FlowerPot.java
@@ -17,7 +17,6 @@ public class FlowerPot extends MaterialData {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -30,7 +29,6 @@ public class FlowerPot extends MaterialData {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -39,7 +37,6 @@ public class FlowerPot extends MaterialData {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -51,7 +48,7 @@ public class FlowerPot extends MaterialData {
      * Get the material in the flower pot
      *
      * @return material MaterialData for the block currently in the flower pot
-     *     or null if empty
+     * or null if empty
      */
     public MaterialData getContents() {
         switch (getData()) {
diff --git a/src/main/java/org/bukkit/material/Furnace.java b/src/main/java/org/bukkit/material/Furnace.java
index 49645aa..659ce7f 100644
--- a/src/main/java/org/bukkit/material/Furnace.java
+++ b/src/main/java/org/bukkit/material/Furnace.java
@@ -23,7 +23,6 @@ public class Furnace extends FurnaceAndDispenser {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -36,7 +35,6 @@ public class Furnace extends FurnaceAndDispenser {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -45,7 +43,6 @@ public class Furnace extends FurnaceAndDispenser {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
diff --git a/src/main/java/org/bukkit/material/FurnaceAndDispenser.java b/src/main/java/org/bukkit/material/FurnaceAndDispenser.java
index 3665479..7d8cdec 100644
--- a/src/main/java/org/bukkit/material/FurnaceAndDispenser.java
+++ b/src/main/java/org/bukkit/material/FurnaceAndDispenser.java
@@ -8,7 +8,6 @@ import org.bukkit.Material;
 public class FurnaceAndDispenser extends DirectionalContainer {
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -21,7 +20,6 @@ public class FurnaceAndDispenser extends DirectionalContainer {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -30,7 +28,6 @@ public class FurnaceAndDispenser extends DirectionalContainer {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
diff --git a/src/main/java/org/bukkit/material/Gate.java b/src/main/java/org/bukkit/material/Gate.java
index 8adc1cf..53c8888 100644
--- a/src/main/java/org/bukkit/material/Gate.java
+++ b/src/main/java/org/bukkit/material/Gate.java
@@ -7,6 +7,7 @@ import org.bukkit.block.BlockFace;
  * Represents a fence gate
  */
 public class Gate extends MaterialData implements Directional, Openable {
+
     private static final byte OPEN_BIT = 0x4;
     private static final byte DIR_BIT = 0x3;
     private static final byte GATE_SOUTH = 0x0;
@@ -18,7 +19,7 @@ public class Gate extends MaterialData implements Directional, Openable {
         super(Material.FENCE_GATE);
     }
 
-    public Gate(int type, byte data){
+    public Gate(int type, byte data) {
         super(type, data);
     }
 
@@ -27,7 +28,7 @@ public class Gate extends MaterialData implements Directional, Openable {
     }
 
     public void setFacingDirection(BlockFace face) {
-        byte data = (byte) (getData() &~ DIR_BIT);
+        byte data = (byte) (getData() & ~DIR_BIT);
 
         switch (face) {
             default:
@@ -69,7 +70,6 @@ public class Gate extends MaterialData implements Directional, Openable {
 
     public void setOpen(boolean isOpen) {
         byte data = getData();
-
         if (isOpen) {
             data |= OPEN_BIT;
         } else {
diff --git a/src/main/java/org/bukkit/material/Ladder.java b/src/main/java/org/bukkit/material/Ladder.java
index 09862bf..de8aa34 100644
--- a/src/main/java/org/bukkit/material/Ladder.java
+++ b/src/main/java/org/bukkit/material/Ladder.java
@@ -1,18 +1,18 @@
 package org.bukkit.material;
 
-import org.bukkit.block.BlockFace;
 import org.bukkit.Material;
+import org.bukkit.block.BlockFace;
 
 /**
  * Represents Ladder data
  */
 public class Ladder extends SimpleAttachableMaterialData {
+
     public Ladder() {
         super(Material.LADDER);
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -25,7 +25,6 @@ public class Ladder extends SimpleAttachableMaterialData {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -34,7 +33,6 @@ public class Ladder extends SimpleAttachableMaterialData {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -49,19 +47,15 @@ public class Ladder extends SimpleAttachableMaterialData {
      */
     public BlockFace getAttachedFace() {
         byte data = getData();
-
         switch (data) {
-        case 0x2:
-            return BlockFace.SOUTH;
-
-        case 0x3:
-            return BlockFace.NORTH;
-
-        case 0x4:
-            return BlockFace.EAST;
-
-        case 0x5:
-            return BlockFace.WEST;
+            case 0x2:
+                return BlockFace.SOUTH;
+            case 0x3:
+                return BlockFace.NORTH;
+            case 0x4:
+                return BlockFace.EAST;
+            case 0x5:
+                return BlockFace.WEST;
         }
 
         return null;
@@ -72,23 +66,19 @@ public class Ladder extends SimpleAttachableMaterialData {
      */
     public void setFacingDirection(BlockFace face) {
         byte data = (byte) 0x0;
-
         switch (face) {
-        case SOUTH:
-            data = 0x2;
-            break;
-
-        case NORTH:
-            data = 0x3;
-            break;
-
-        case EAST:
-            data = 0x4;
-            break;
-
-        case WEST:
-            data = 0x5;
-            break;
+            case SOUTH:
+                data = 0x2;
+                break;
+            case NORTH:
+                data = 0x3;
+                break;
+            case EAST:
+                data = 0x4;
+                break;
+            case WEST:
+                data = 0x5;
+                break;
         }
 
         setData(data);
diff --git a/src/main/java/org/bukkit/material/Leaves.java b/src/main/java/org/bukkit/material/Leaves.java
index 97ba382..dc56cb7 100644
--- a/src/main/java/org/bukkit/material/Leaves.java
+++ b/src/main/java/org/bukkit/material/Leaves.java
@@ -7,6 +7,7 @@ import org.bukkit.TreeSpecies;
  * Represents the different types of leaves.
  */
 public class Leaves extends MaterialData {
+
     public Leaves() {
         super(Material.LEAVES);
     }
@@ -17,7 +18,6 @@ public class Leaves extends MaterialData {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -30,7 +30,6 @@ public class Leaves extends MaterialData {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -39,7 +38,6 @@ public class Leaves extends MaterialData {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
diff --git a/src/main/java/org/bukkit/material/Lever.java b/src/main/java/org/bukkit/material/Lever.java
index b88c536..572a3b6 100644
--- a/src/main/java/org/bukkit/material/Lever.java
+++ b/src/main/java/org/bukkit/material/Lever.java
@@ -1,18 +1,18 @@
 package org.bukkit.material;
 
-import org.bukkit.block.BlockFace;
 import org.bukkit.Material;
+import org.bukkit.block.BlockFace;
 
 /**
  * Represents a lever
  */
 public class Lever extends SimpleAttachableMaterialData implements Redstone {
+
     public Lever() {
         super(Material.LEVER);
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -25,7 +25,6 @@ public class Lever extends SimpleAttachableMaterialData implements Redstone {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -34,7 +33,6 @@ public class Lever extends SimpleAttachableMaterialData implements Redstone {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -68,28 +66,21 @@ public class Lever extends SimpleAttachableMaterialData implements Redstone {
      */
     public BlockFace getAttachedFace() {
         byte data = (byte) (getData() & 0x7);
-
         switch (data) {
-        case 0x1:
-            return BlockFace.WEST;
-
-        case 0x2:
-            return BlockFace.EAST;
-
-        case 0x3:
-            return BlockFace.NORTH;
-
-        case 0x4:
-            return BlockFace.SOUTH;
-
-        case 0x5:
-        case 0x6:
-            return BlockFace.DOWN;
-
-        case 0x0:
-        case 0x7:
-            return BlockFace.UP;
-
+            case 0x1:
+                return BlockFace.WEST;
+            case 0x2:
+                return BlockFace.EAST;
+            case 0x3:
+                return BlockFace.NORTH;
+            case 0x4:
+                return BlockFace.SOUTH;
+            case 0x5:
+            case 0x6:
+                return BlockFace.DOWN;
+            case 0x0:
+            case 0x7:
+                return BlockFace.UP;
         }
 
         return null;
@@ -104,47 +95,43 @@ public class Lever extends SimpleAttachableMaterialData implements Redstone {
 
         if (attach == BlockFace.DOWN) {
             switch (face) {
-            case SOUTH:
-            case NORTH:
-                data |= 0x5;
-                break;
-
-            case EAST:
-            case WEST:
-                data |= 0x6;
-                break;
+                case SOUTH:
+                case NORTH:
+                    data |= 0x5;
+                    break;
+                case EAST:
+                case WEST:
+                    data |= 0x6;
+                    break;
             }
         } else if (attach == BlockFace.UP) {
             switch (face) {
-            case SOUTH:
-            case NORTH:
-                data |= 0x7;
-                break;
-
-            case EAST:
-            case WEST:
-                data |= 0x0;
-                break;
+                case SOUTH:
+                case NORTH:
+                    data |= 0x7;
+                    break;
+                case EAST:
+                case WEST:
+                    data |= 0x0;
+                    break;
             }
         } else {
             switch (face) {
-            case EAST:
-                data |= 0x1;
-                break;
-
-            case WEST:
-                data |= 0x2;
-                break;
-
-            case SOUTH:
-                data |= 0x3;
-                break;
-
-            case NORTH:
-                data |= 0x4;
-                break;
+                case EAST:
+                    data |= 0x1;
+                    break;
+                case WEST:
+                    data |= 0x2;
+                    break;
+                case SOUTH:
+                    data |= 0x3;
+                    break;
+                case NORTH:
+                    data |= 0x4;
+                    break;
             }
         }
+
         setData(data);
     }
 
diff --git a/src/main/java/org/bukkit/material/LongGrass.java b/src/main/java/org/bukkit/material/LongGrass.java
index e8d1f38..fe232e9 100644
--- a/src/main/java/org/bukkit/material/LongGrass.java
+++ b/src/main/java/org/bukkit/material/LongGrass.java
@@ -7,6 +7,7 @@ import org.bukkit.Material;
  * Represents the different types of long grasses.
  */
 public class LongGrass extends MaterialData {
+
     public LongGrass() {
         super(Material.LONG_GRASS);
     }
@@ -17,7 +18,6 @@ public class LongGrass extends MaterialData {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -30,7 +30,6 @@ public class LongGrass extends MaterialData {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -39,7 +38,6 @@ public class LongGrass extends MaterialData {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
diff --git a/src/main/java/org/bukkit/material/MaterialData.java b/src/main/java/org/bukkit/material/MaterialData.java
index ad7675f..c9747d4 100644
--- a/src/main/java/org/bukkit/material/MaterialData.java
+++ b/src/main/java/org/bukkit/material/MaterialData.java
@@ -1,17 +1,17 @@
 package org.bukkit.material;
 
-import org.bukkit.inventory.ItemStack;
 import org.bukkit.Material;
+import org.bukkit.inventory.ItemStack;
 
 /**
  * Handles specific metadata for certain items or blocks
  */
 public class MaterialData implements Cloneable {
+
     private final int type;
     private byte data = 0;
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -24,7 +24,6 @@ public class MaterialData implements Cloneable {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -34,7 +33,6 @@ public class MaterialData implements Cloneable {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -117,7 +115,6 @@ public class MaterialData implements Cloneable {
     public boolean equals(Object obj) {
         if (obj != null && obj instanceof MaterialData) {
             MaterialData md = (MaterialData) obj;
-
             return (md.getItemTypeId() == getItemTypeId() && md.getData() == getData());
         } else {
             return false;
diff --git a/src/main/java/org/bukkit/material/MonsterEggs.java b/src/main/java/org/bukkit/material/MonsterEggs.java
index d8b627b..f1be6ca 100644
--- a/src/main/java/org/bukkit/material/MonsterEggs.java
+++ b/src/main/java/org/bukkit/material/MonsterEggs.java
@@ -1,20 +1,21 @@
 package org.bukkit.material;
 
+import org.bukkit.Material;
+
 import java.util.ArrayList;
 import java.util.List;
 
-import org.bukkit.Material;
-
 /**
  * Represents the different types of monster eggs
  */
 public class MonsterEggs extends TexturedMaterial {
 
-    private static final List<Material> textures = new ArrayList<Material>();
+    private static final List<Material> TEXTURES = new ArrayList<Material>();
+
     static {
-        textures.add(Material.STONE);
-        textures.add(Material.COBBLESTONE);
-        textures.add(Material.SMOOTH_BRICK);
+        TEXTURES.add(Material.STONE);
+        TEXTURES.add(Material.COBBLESTONE);
+        TEXTURES.add(Material.SMOOTH_BRICK);
     }
 
     public MonsterEggs() {
@@ -22,7 +23,6 @@ public class MonsterEggs extends TexturedMaterial {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -31,14 +31,13 @@ public class MonsterEggs extends TexturedMaterial {
     }
 
     public MonsterEggs(final Material type) {
-        super((textures.contains(type)) ? Material.MONSTER_EGGS : type);
-        if (textures.contains(type)) {
+        super((TEXTURES.contains(type)) ? Material.MONSTER_EGGS : type);
+        if (TEXTURES.contains(type)) {
             setMaterial(type);
         }
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -47,7 +46,6 @@ public class MonsterEggs extends TexturedMaterial {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -57,7 +55,7 @@ public class MonsterEggs extends TexturedMaterial {
 
     @Override
     public List<Material> getTextures() {
-        return textures;
+        return TEXTURES;
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/material/Mushroom.java b/src/main/java/org/bukkit/material/Mushroom.java
index 716d378..d634c1a 100644
--- a/src/main/java/org/bukkit/material/Mushroom.java
+++ b/src/main/java/org/bukkit/material/Mushroom.java
@@ -1,16 +1,17 @@
 package org.bukkit.material;
 
-import java.util.EnumSet;
-import java.util.Set;
-
 import org.apache.commons.lang.Validate;
 import org.bukkit.Material;
 import org.bukkit.block.BlockFace;
 
+import java.util.EnumSet;
+import java.util.Set;
+
 /**
  * Represents a huge mushroom block
  */
 public class Mushroom extends MaterialData {
+
     private static final byte SHROOM_NONE = 0;
     private static final byte SHROOM_STEM = 10;
     private static final byte NORTH_LIMIT = 4;
@@ -27,7 +28,6 @@ public class Mushroom extends MaterialData {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -37,11 +37,10 @@ public class Mushroom extends MaterialData {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
-    public Mushroom(int type, byte data){
+    public Mushroom(int type, byte data) {
         super(type, data);
         Validate.isTrue(type == Material.HUGE_MUSHROOM_1.getId() || type == Material.HUGE_MUSHROOM_2.getId(), "Not a mushroom!");
     }
@@ -68,7 +67,6 @@ public class Mushroom extends MaterialData {
      */
     public boolean isFacePainted(BlockFace face) {
         byte data = getData();
-
         if (data == SHROOM_NONE || data == SHROOM_STEM) {
             return false;
         }
@@ -94,9 +92,9 @@ public class Mushroom extends MaterialData {
      * nature of how the data is stored, setting a face painted or not is not
      * guaranteed to leave the other faces unchanged.
      *
-     * @param face The face to paint or unpaint.
+     * @param face    The face to paint or unpaint.
      * @param painted True if you want to paint it, false if you want the
-     *     pores to show.
+     *                pores to show.
      */
     public void setFacePainted(BlockFace face, boolean painted) {
         if (painted == isFacePainted(face)) {
@@ -104,7 +102,6 @@ public class Mushroom extends MaterialData {
         }
 
         byte data = getData();
-
         if (data == SHROOM_STEM) {
             data = 5;
         }
@@ -157,7 +154,7 @@ public class Mushroom extends MaterialData {
 
     /**
      * @return A set of all faces that are currently painted (an empty set if
-     *     it is a stem)
+     * it is a stem)
      */
     public Set<BlockFace> getPaintedFaces() {
         EnumSet<BlockFace> faces = EnumSet.noneOf(BlockFace.class);
@@ -187,7 +184,12 @@ public class Mushroom extends MaterialData {
 
     @Override
     public String toString() {
-        return Material.getMaterial(getItemTypeId()).toString() + (isStem() ? "{STEM}" : getPaintedFaces());
+        Material material = Material.getMaterial(getItemTypeId());
+        if (material == null) {
+            return getClass().getSimpleName();
+        }
+
+        return material.toString() + (isStem() ? "{STEM}" : getPaintedFaces());
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/material/NetherWarts.java b/src/main/java/org/bukkit/material/NetherWarts.java
index 99ea3f0..a4d0729 100644
--- a/src/main/java/org/bukkit/material/NetherWarts.java
+++ b/src/main/java/org/bukkit/material/NetherWarts.java
@@ -7,6 +7,7 @@ import org.bukkit.NetherWartsState;
  * Represents nether wart
  */
 public class NetherWarts extends MaterialData {
+
     public NetherWarts() {
         super(Material.NETHER_WARTS);
     }
@@ -17,7 +18,6 @@ public class NetherWarts extends MaterialData {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -26,11 +26,10 @@ public class NetherWarts extends MaterialData {
     }
 
     public NetherWarts(final Material type) {
-        super (type);
+        super(type);
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -39,7 +38,6 @@ public class NetherWarts extends MaterialData {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -83,7 +81,6 @@ public class NetherWarts extends MaterialData {
                 return;
             case RIPE:
                 setData((byte) 0x3);
-                return;
         }
     }
 
diff --git a/src/main/java/org/bukkit/material/PistonBaseMaterial.java b/src/main/java/org/bukkit/material/PistonBaseMaterial.java
index f3586dc..1e30aa0 100644
--- a/src/main/java/org/bukkit/material/PistonBaseMaterial.java
+++ b/src/main/java/org/bukkit/material/PistonBaseMaterial.java
@@ -7,8 +7,8 @@ import org.bukkit.block.BlockFace;
  * Material data for the piston base block
  */
 public class PistonBaseMaterial extends MaterialData implements Directional, Redstone {
+
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -21,7 +21,6 @@ public class PistonBaseMaterial extends MaterialData implements Directional, Red
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -30,7 +29,6 @@ public class PistonBaseMaterial extends MaterialData implements Directional, Red
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -40,45 +38,44 @@ public class PistonBaseMaterial extends MaterialData implements Directional, Red
 
     public void setFacingDirection(BlockFace face) {
         byte data = (byte) (getData() & 0x8);
-
         switch (face) {
-        case UP:
-            data |= 1;
-            break;
-        case NORTH:
-            data |= 2;
-            break;
-        case SOUTH:
-            data |= 3;
-            break;
-        case WEST:
-            data |= 4;
-            break;
-        case EAST:
-            data |= 5;
-            break;
+            case UP:
+                data |= 1;
+                break;
+            case NORTH:
+                data |= 2;
+                break;
+            case SOUTH:
+                data |= 3;
+                break;
+            case WEST:
+                data |= 4;
+                break;
+            case EAST:
+                data |= 5;
+                break;
         }
+
         setData(data);
     }
 
     public BlockFace getFacing() {
         byte dir = (byte) (getData() & 7);
-
         switch (dir) {
-        case 0:
-            return BlockFace.DOWN;
-        case 1:
-            return BlockFace.UP;
-        case 2:
-            return BlockFace.NORTH;
-        case 3:
-            return BlockFace.SOUTH;
-        case 4:
-            return BlockFace.WEST;
-        case 5:
-            return BlockFace.EAST;
-        default:
-            return BlockFace.SELF;
+            case 0:
+                return BlockFace.DOWN;
+            case 1:
+                return BlockFace.UP;
+            case 2:
+                return BlockFace.NORTH;
+            case 3:
+                return BlockFace.SOUTH;
+            case 4:
+                return BlockFace.WEST;
+            case 5:
+                return BlockFace.EAST;
+            default:
+                return BlockFace.SELF;
         }
     }
 
diff --git a/src/main/java/org/bukkit/material/PistonExtensionMaterial.java b/src/main/java/org/bukkit/material/PistonExtensionMaterial.java
index 85dee84..d322933 100644
--- a/src/main/java/org/bukkit/material/PistonExtensionMaterial.java
+++ b/src/main/java/org/bukkit/material/PistonExtensionMaterial.java
@@ -7,8 +7,8 @@ import org.bukkit.block.BlockFace;
  * Material data for the piston extension block
  */
 public class PistonExtensionMaterial extends MaterialData implements Attachable {
+
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -21,7 +21,6 @@ public class PistonExtensionMaterial extends MaterialData implements Attachable
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -30,7 +29,6 @@ public class PistonExtensionMaterial extends MaterialData implements Attachable
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -40,45 +38,44 @@ public class PistonExtensionMaterial extends MaterialData implements Attachable
 
     public void setFacingDirection(BlockFace face) {
         byte data = (byte) (getData() & 0x8);
-
         switch (face) {
-        case UP:
-            data |= 1;
-            break;
-        case NORTH:
-            data |= 2;
-            break;
-        case SOUTH:
-            data |= 3;
-            break;
-        case WEST:
-            data |= 4;
-            break;
-        case EAST:
-            data |= 5;
-            break;
+            case UP:
+                data |= 1;
+                break;
+            case NORTH:
+                data |= 2;
+                break;
+            case SOUTH:
+                data |= 3;
+                break;
+            case WEST:
+                data |= 4;
+                break;
+            case EAST:
+                data |= 5;
+                break;
         }
+
         setData(data);
     }
 
     public BlockFace getFacing() {
         byte dir = (byte) (getData() & 7);
-
         switch (dir) {
-        case 0:
-            return BlockFace.DOWN;
-        case 1:
-            return BlockFace.UP;
-        case 2:
-            return BlockFace.NORTH;
-        case 3:
-            return BlockFace.SOUTH;
-        case 4:
-            return BlockFace.WEST;
-        case 5:
-            return BlockFace.EAST;
-        default:
-            return BlockFace.SELF;
+            case 0:
+                return BlockFace.DOWN;
+            case 1:
+                return BlockFace.UP;
+            case 2:
+                return BlockFace.NORTH;
+            case 3:
+                return BlockFace.SOUTH;
+            case 4:
+                return BlockFace.WEST;
+            case 5:
+                return BlockFace.EAST;
+            default:
+                return BlockFace.SELF;
         }
     }
 
diff --git a/src/main/java/org/bukkit/material/PoweredRail.java b/src/main/java/org/bukkit/material/PoweredRail.java
index 444e53b..0febba7 100644
--- a/src/main/java/org/bukkit/material/PoweredRail.java
+++ b/src/main/java/org/bukkit/material/PoweredRail.java
@@ -6,12 +6,12 @@ import org.bukkit.Material;
  * Represents a powered rail
  */
 public class PoweredRail extends ExtendedRails implements Redstone {
+
     public PoweredRail() {
         super(Material.POWERED_RAIL);
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -24,7 +24,6 @@ public class PoweredRail extends ExtendedRails implements Redstone {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -33,7 +32,6 @@ public class PoweredRail extends ExtendedRails implements Redstone {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
diff --git a/src/main/java/org/bukkit/material/PressurePlate.java b/src/main/java/org/bukkit/material/PressurePlate.java
index 8c3bc75..b02a39b 100644
--- a/src/main/java/org/bukkit/material/PressurePlate.java
+++ b/src/main/java/org/bukkit/material/PressurePlate.java
@@ -6,12 +6,12 @@ import org.bukkit.Material;
  * Represents a pressure plate
  */
 public class PressurePlate extends MaterialData implements PressureSensor {
+
     public PressurePlate() {
         super(Material.WOOD_PLATE);
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -24,7 +24,6 @@ public class PressurePlate extends MaterialData implements PressureSensor {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -33,7 +32,6 @@ public class PressurePlate extends MaterialData implements PressureSensor {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
diff --git a/src/main/java/org/bukkit/material/PressureSensor.java b/src/main/java/org/bukkit/material/PressureSensor.java
index de20bd3..6b56826 100644
--- a/src/main/java/org/bukkit/material/PressureSensor.java
+++ b/src/main/java/org/bukkit/material/PressureSensor.java
@@ -1,5 +1,6 @@
 package org.bukkit.material;
 
 public interface PressureSensor {
-    public boolean isPressed();
+
+    boolean isPressed();
 }
diff --git a/src/main/java/org/bukkit/material/Pumpkin.java b/src/main/java/org/bukkit/material/Pumpkin.java
index d6ca83c..20cf69c 100644
--- a/src/main/java/org/bukkit/material/Pumpkin.java
+++ b/src/main/java/org/bukkit/material/Pumpkin.java
@@ -23,7 +23,6 @@ public class Pumpkin extends MaterialData implements Directional {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -36,7 +35,6 @@ public class Pumpkin extends MaterialData implements Directional {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -45,7 +43,6 @@ public class Pumpkin extends MaterialData implements Directional {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -59,23 +56,19 @@ public class Pumpkin extends MaterialData implements Directional {
 
     public void setFacingDirection(BlockFace face) {
         byte data;
-
         switch (face) {
-        case NORTH:
-            data = 0x0;
-            break;
-
-        case EAST:
-            data = 0x1;
-            break;
-
-        case SOUTH:
-            data = 0x2;
-            break;
-
-        case WEST:
-        default:
-            data = 0x3;
+            case NORTH:
+                data = 0x0;
+                break;
+            case EAST:
+                data = 0x1;
+                break;
+            case SOUTH:
+                data = 0x2;
+                break;
+            case WEST:
+            default:
+                data = 0x3;
         }
 
         setData(data);
@@ -83,20 +76,16 @@ public class Pumpkin extends MaterialData implements Directional {
 
     public BlockFace getFacing() {
         byte data = getData();
-
         switch (data) {
-        case 0x0:
-            return BlockFace.NORTH;
-
-        case 0x1:
-            return BlockFace.EAST;
-
-        case 0x2:
-            return BlockFace.SOUTH;
-
-        case 0x3:
-        default:
-            return BlockFace.EAST;
+            case 0x0:
+                return BlockFace.NORTH;
+            case 0x1:
+                return BlockFace.EAST;
+            case 0x2:
+                return BlockFace.SOUTH;
+            case 0x3:
+            default:
+                return BlockFace.EAST;
         }
     }
 
diff --git a/src/main/java/org/bukkit/material/Rails.java b/src/main/java/org/bukkit/material/Rails.java
index 74fd95a..c0e9f3a 100644
--- a/src/main/java/org/bukkit/material/Rails.java
+++ b/src/main/java/org/bukkit/material/Rails.java
@@ -13,7 +13,6 @@ public class Rails extends MaterialData {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -26,7 +25,6 @@ public class Rails extends MaterialData {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -35,7 +33,6 @@ public class Rails extends MaterialData {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -48,7 +45,6 @@ public class Rails extends MaterialData {
      */
     public boolean isOnSlope() {
         byte d = getConvertedData();
-
         return (d == 0x2 || d == 0x3 || d == 0x4 || d == 0x5);
     }
 
@@ -57,51 +53,40 @@ public class Rails extends MaterialData {
      */
     public boolean isCurve() {
         byte d = getConvertedData();
-
         return (d == 0x6 || d == 0x7 || d == 0x8 || d == 0x9);
     }
 
     /**
      * @return the direction these tracks are set
-     *     <p>
-     *     Note that tracks are bidirectional and that the direction returned
-     *     is the ascending direction if the track is set on a slope. If it is
-     *     set as a curve, the corner of the track is returned.
+     * <p>
+     * Note that tracks are bidirectional and that the direction returned
+     * is the ascending direction if the track is set on a slope. If it is
+     * set as a curve, the corner of the track is returned.
      */
     public BlockFace getDirection() {
         byte d = getConvertedData();
-
         switch (d) {
-        case 0x0:
-        default:
-            return BlockFace.SOUTH;
-
-        case 0x1:
-            return BlockFace.EAST;
-
-        case 0x2:
-            return BlockFace.EAST;
-
-        case 0x3:
-            return BlockFace.WEST;
-
-        case 0x4:
-            return BlockFace.NORTH;
-
-        case 0x5:
-            return BlockFace.SOUTH;
-
-        case 0x6:
-            return BlockFace.NORTH_WEST;
-
-        case 0x7:
-            return BlockFace.NORTH_EAST;
-
-        case 0x8:
-            return BlockFace.SOUTH_EAST;
-
-        case 0x9:
-            return BlockFace.SOUTH_WEST;
+            case 0x0:
+            default:
+                return BlockFace.SOUTH;
+            case 0x1:
+                return BlockFace.EAST;
+            case 0x2:
+                return BlockFace.EAST;
+            case 0x3:
+                return BlockFace.WEST;
+            case 0x4:
+                return BlockFace.NORTH;
+            case 0x5:
+                return BlockFace.SOUTH;
+            case 0x6:
+                return BlockFace.NORTH_WEST;
+            case 0x7:
+                return BlockFace.NORTH_EAST;
+            case 0x8:
+                return BlockFace.SOUTH_EAST;
+            case 0x9:
+                return BlockFace.SOUTH_WEST;
         }
     }
 
@@ -130,42 +115,35 @@ public class Rails extends MaterialData {
      * the ascending direction if the track is set on a slope. If it is set as
      * a curve, the corner of the track should be supplied.
      *
-     * @param face the direction the track should be facing
+     * @param face      the direction the track should be facing
      * @param isOnSlope whether or not the track should be on a slope
      */
     public void setDirection(BlockFace face, boolean isOnSlope) {
         switch (face) {
-        case EAST:
-            setData((byte) (isOnSlope ? 0x2 : 0x1));
-            break;
-
-        case WEST:
-            setData((byte) (isOnSlope ? 0x3 : 0x1));
-            break;
-
-        case NORTH:
-            setData((byte) (isOnSlope ? 0x4 : 0x0));
-            break;
-
-        case SOUTH:
-            setData((byte) (isOnSlope ? 0x5 : 0x0));
-            break;
-
-        case NORTH_WEST:
-            setData((byte) 0x6);
-            break;
-
-        case NORTH_EAST:
-            setData((byte) 0x7);
-            break;
-
-        case SOUTH_EAST:
-            setData((byte) 0x8);
-            break;
-
-        case SOUTH_WEST:
-            setData((byte) 0x9);
-            break;
+            case EAST:
+                setData((byte) (isOnSlope ? 0x2 : 0x1));
+                break;
+            case WEST:
+                setData((byte) (isOnSlope ? 0x3 : 0x1));
+                break;
+            case NORTH:
+                setData((byte) (isOnSlope ? 0x4 : 0x0));
+                break;
+            case SOUTH:
+                setData((byte) (isOnSlope ? 0x5 : 0x0));
+                break;
+            case NORTH_WEST:
+                setData((byte) 0x6);
+                break;
+            case NORTH_EAST:
+                setData((byte) 0x7);
+                break;
+            case SOUTH_EAST:
+                setData((byte) 0x8);
+                break;
+            case SOUTH_WEST:
+                setData((byte) 0x9);
+                break;
         }
     }
 
diff --git a/src/main/java/org/bukkit/material/Redstone.java b/src/main/java/org/bukkit/material/Redstone.java
index 3e46603..ccf8e6f 100644
--- a/src/main/java/org/bukkit/material/Redstone.java
+++ b/src/main/java/org/bukkit/material/Redstone.java
@@ -11,5 +11,5 @@ public interface Redstone {
      *
      * @return true if powered, otherwise false
      */
-    public boolean isPowered();
+    boolean isPowered();
 }
diff --git a/src/main/java/org/bukkit/material/RedstoneTorch.java b/src/main/java/org/bukkit/material/RedstoneTorch.java
index 76a3ddd..449e769 100644
--- a/src/main/java/org/bukkit/material/RedstoneTorch.java
+++ b/src/main/java/org/bukkit/material/RedstoneTorch.java
@@ -6,12 +6,12 @@ import org.bukkit.Material;
  * Represents a redstone torch
  */
 public class RedstoneTorch extends Torch implements Redstone {
+
     public RedstoneTorch() {
         super(Material.REDSTONE_TORCH_ON);
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -24,7 +24,6 @@ public class RedstoneTorch extends Torch implements Redstone {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -33,7 +32,6 @@ public class RedstoneTorch extends Torch implements Redstone {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
diff --git a/src/main/java/org/bukkit/material/RedstoneWire.java b/src/main/java/org/bukkit/material/RedstoneWire.java
index b429af0..725a1f3 100644
--- a/src/main/java/org/bukkit/material/RedstoneWire.java
+++ b/src/main/java/org/bukkit/material/RedstoneWire.java
@@ -6,12 +6,12 @@ import org.bukkit.Material;
  * Represents redstone wire
  */
 public class RedstoneWire extends MaterialData implements Redstone {
+
     public RedstoneWire() {
         super(Material.REDSTONE_WIRE);
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -24,7 +24,6 @@ public class RedstoneWire extends MaterialData implements Redstone {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -33,7 +32,6 @@ public class RedstoneWire extends MaterialData implements Redstone {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
diff --git a/src/main/java/org/bukkit/material/Sandstone.java b/src/main/java/org/bukkit/material/Sandstone.java
index 26cbbb5..1b79d9d 100644
--- a/src/main/java/org/bukkit/material/Sandstone.java
+++ b/src/main/java/org/bukkit/material/Sandstone.java
@@ -7,6 +7,7 @@ import org.bukkit.SandstoneType;
  * Represents the different types of sandstone.
  */
 public class Sandstone extends MaterialData {
+
     public Sandstone() {
         super(Material.SANDSTONE);
     }
@@ -17,7 +18,6 @@ public class Sandstone extends MaterialData {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -30,7 +30,6 @@ public class Sandstone extends MaterialData {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -39,7 +38,6 @@ public class Sandstone extends MaterialData {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
diff --git a/src/main/java/org/bukkit/material/Sign.java b/src/main/java/org/bukkit/material/Sign.java
index e8da7aa..cd84eec 100644
--- a/src/main/java/org/bukkit/material/Sign.java
+++ b/src/main/java/org/bukkit/material/Sign.java
@@ -1,18 +1,18 @@
 package org.bukkit.material;
 
-import org.bukkit.block.BlockFace;
 import org.bukkit.Material;
+import org.bukkit.block.BlockFace;
 
 /**
  * MaterialData for signs
  */
 public class Sign extends MaterialData implements Attachable {
+
     public Sign() {
         super(Material.SIGN_POST);
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -25,7 +25,6 @@ public class Sign extends MaterialData implements Attachable {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -34,7 +33,6 @@ public class Sign extends MaterialData implements Attachable {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -46,7 +44,7 @@ public class Sign extends MaterialData implements Attachable {
      * Check if this sign is attached to a wall
      *
      * @return true if this sign is attached to a wall, false if set on top of
-     *     a block
+     * a block
      */
     public boolean isWallSign() {
         return getItemType() == Material.WALL_SIGN;
@@ -58,26 +56,22 @@ public class Sign extends MaterialData implements Attachable {
      * @return BlockFace attached to
      */
     public BlockFace getAttachedFace() {
-        if (isWallSign()) {
-            byte data = getData();
+        if (!isWallSign()) {
+            return BlockFace.DOWN;
+        }
 
-            switch (data) {
+        byte data = getData();
+        switch (data) {
             case 0x2:
                 return BlockFace.SOUTH;
-
             case 0x3:
                 return BlockFace.NORTH;
-
             case 0x4:
                 return BlockFace.EAST;
-
             case 0x5:
                 return BlockFace.WEST;
-            }
-
-            return null;
-        } else {
-            return BlockFace.DOWN;
+            default:
+                return null;
         }
     }
 
@@ -87,151 +81,119 @@ public class Sign extends MaterialData implements Attachable {
      * @return BlockFace indicating where this sign is facing
      */
     public BlockFace getFacing() {
-        byte data = getData();
+        if (isWallSign()) {
+            return getAttachedFace().getOppositeFace();
+        }
 
-        if (!isWallSign()) {
-            switch (data) {
+        byte data = getData();
+        switch (data) {
             case 0x0:
                 return BlockFace.SOUTH;
-
             case 0x1:
                 return BlockFace.SOUTH_SOUTH_WEST;
-
             case 0x2:
                 return BlockFace.SOUTH_WEST;
-
             case 0x3:
                 return BlockFace.WEST_SOUTH_WEST;
-
             case 0x4:
                 return BlockFace.WEST;
-
             case 0x5:
                 return BlockFace.WEST_NORTH_WEST;
-
             case 0x6:
                 return BlockFace.NORTH_WEST;
-
             case 0x7:
                 return BlockFace.NORTH_NORTH_WEST;
-
             case 0x8:
                 return BlockFace.NORTH;
-
             case 0x9:
                 return BlockFace.NORTH_NORTH_EAST;
-
             case 0xA:
                 return BlockFace.NORTH_EAST;
-
             case 0xB:
                 return BlockFace.EAST_NORTH_EAST;
-
             case 0xC:
                 return BlockFace.EAST;
-
             case 0xD:
                 return BlockFace.EAST_SOUTH_EAST;
-
             case 0xE:
                 return BlockFace.SOUTH_EAST;
-
             case 0xF:
                 return BlockFace.SOUTH_SOUTH_EAST;
-            }
-
-            return null;
-        } else {
-            return getAttachedFace().getOppositeFace();
+            default:
+                return null;
         }
     }
 
     public void setFacingDirection(BlockFace face) {
         byte data;
-
         if (isWallSign()) {
             switch (face) {
-            case NORTH:
-                data = 0x2;
-                break;
+                case NORTH:
+                    data = 0x2;
+                    break;
 
-            case SOUTH:
-                data = 0x3;
-                break;
+                case SOUTH:
+                    data = 0x3;
+                    break;
 
-            case WEST:
-                data = 0x4;
-                break;
+                case WEST:
+                    data = 0x4;
+                    break;
 
-            case EAST:
-            default:
-                data = 0x5;
+                case EAST:
+                default:
+                    data = 0x5;
             }
         } else {
             switch (face) {
-            case SOUTH:
-                data = 0x0;
-                break;
-
-            case SOUTH_SOUTH_WEST:
-                data = 0x1;
-                break;
-
-            case SOUTH_WEST:
-                data = 0x2;
-                break;
-
-            case WEST_SOUTH_WEST:
-                data = 0x3;
-                break;
-
-            case WEST:
-                data = 0x4;
-                break;
-
-            case WEST_NORTH_WEST:
-                data = 0x5;
-                break;
-
-            case NORTH_WEST:
-                data = 0x6;
-                break;
-
-            case NORTH_NORTH_WEST:
-                data = 0x7;
-                break;
-
-            case NORTH:
-                data = 0x8;
-                break;
-
-            case NORTH_NORTH_EAST:
-                data = 0x9;
-                break;
-
-            case NORTH_EAST:
-                data = 0xA;
-                break;
-
-            case EAST_NORTH_EAST:
-                data = 0xB;
-                break;
-
-            case EAST:
-                data = 0xC;
-                break;
-
-            case EAST_SOUTH_EAST:
-                data = 0xD;
-                break;
-
-            case SOUTH_SOUTH_EAST:
-                data = 0xF;
-                break;
-
-            case SOUTH_EAST:
-            default:
-                data = 0xE;
+                case SOUTH:
+                    data = 0x0;
+                    break;
+                case SOUTH_SOUTH_WEST:
+                    data = 0x1;
+                    break;
+                case SOUTH_WEST:
+                    data = 0x2;
+                    break;
+                case WEST_SOUTH_WEST:
+                    data = 0x3;
+                    break;
+                case WEST:
+                    data = 0x4;
+                    break;
+                case WEST_NORTH_WEST:
+                    data = 0x5;
+                    break;
+                case NORTH_WEST:
+                    data = 0x6;
+                    break;
+                case NORTH_NORTH_WEST:
+                    data = 0x7;
+                    break;
+                case NORTH:
+                    data = 0x8;
+                    break;
+                case NORTH_NORTH_EAST:
+                    data = 0x9;
+                    break;
+                case NORTH_EAST:
+                    data = 0xA;
+                    break;
+                case EAST_NORTH_EAST:
+                    data = 0xB;
+                    break;
+                case EAST:
+                    data = 0xC;
+                    break;
+                case EAST_SOUTH_EAST:
+                    data = 0xD;
+                    break;
+                case SOUTH_SOUTH_EAST:
+                    data = 0xF;
+                    break;
+                case SOUTH_EAST:
+                default:
+                    data = 0xE;
             }
         }
 
diff --git a/src/main/java/org/bukkit/material/SimpleAttachableMaterialData.java b/src/main/java/org/bukkit/material/SimpleAttachableMaterialData.java
index b5703c6..c3e247c 100644
--- a/src/main/java/org/bukkit/material/SimpleAttachableMaterialData.java
+++ b/src/main/java/org/bukkit/material/SimpleAttachableMaterialData.java
@@ -9,7 +9,6 @@ import org.bukkit.block.BlockFace;
 public abstract class SimpleAttachableMaterialData extends MaterialData implements Attachable {
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -32,7 +31,6 @@ public abstract class SimpleAttachableMaterialData extends MaterialData implemen
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -41,7 +39,6 @@ public abstract class SimpleAttachableMaterialData extends MaterialData implemen
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
diff --git a/src/main/java/org/bukkit/material/Skull.java b/src/main/java/org/bukkit/material/Skull.java
index 6e0d71f..1bd2e76 100644
--- a/src/main/java/org/bukkit/material/Skull.java
+++ b/src/main/java/org/bukkit/material/Skull.java
@@ -7,6 +7,7 @@ import org.bukkit.block.BlockFace;
  * Represents a skull.
  */
 public class Skull extends MaterialData implements Directional {
+
     public Skull() {
         super(Material.SKULL);
     }
@@ -22,7 +23,6 @@ public class Skull extends MaterialData implements Directional {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -35,7 +35,6 @@ public class Skull extends MaterialData implements Directional {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -44,7 +43,6 @@ public class Skull extends MaterialData implements Directional {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -54,25 +52,20 @@ public class Skull extends MaterialData implements Directional {
 
     public void setFacingDirection(BlockFace face) {
         int data;
-
         switch (face) {
             case SELF:
             default:
                 data = 0x1;
                 break;
-
             case NORTH:
                 data = 0x2;
                 break;
-
             case EAST:
                 data = 0x4;
                 break;
-
             case SOUTH:
                 data = 0x3;
                 break;
-
             case WEST:
                 data = 0x5;
         }
@@ -82,21 +75,16 @@ public class Skull extends MaterialData implements Directional {
 
     public BlockFace getFacing() {
         int data = getData();
-
         switch (data) {
             case 0x1:
             default:
                 return BlockFace.SELF;
-
             case 0x2:
                 return BlockFace.NORTH;
-
             case 0x3:
                 return BlockFace.SOUTH;
-
             case 0x4:
                 return BlockFace.EAST;
-
             case 0x5:
                 return BlockFace.WEST;
         }
diff --git a/src/main/java/org/bukkit/material/SmoothBrick.java b/src/main/java/org/bukkit/material/SmoothBrick.java
index b7ab607..463dc9a 100644
--- a/src/main/java/org/bukkit/material/SmoothBrick.java
+++ b/src/main/java/org/bukkit/material/SmoothBrick.java
@@ -1,21 +1,22 @@
 package org.bukkit.material;
 
+import org.bukkit.Material;
+
 import java.util.ArrayList;
 import java.util.List;
 
-import org.bukkit.Material;
-
 /**
  * Represents the different types of smooth bricks.
  */
 public class SmoothBrick extends TexturedMaterial {
 
-    private static final List<Material> textures = new ArrayList<Material>();
+    private static final List<Material> TEXTURES = new ArrayList<Material>();
+
     static {
-        textures.add(Material.STONE);
-        textures.add(Material.MOSSY_COBBLESTONE);
-        textures.add(Material.COBBLESTONE);
-        textures.add(Material.SMOOTH_BRICK);
+        TEXTURES.add(Material.STONE);
+        TEXTURES.add(Material.MOSSY_COBBLESTONE);
+        TEXTURES.add(Material.COBBLESTONE);
+        TEXTURES.add(Material.SMOOTH_BRICK);
     }
 
     public SmoothBrick() {
@@ -23,7 +24,6 @@ public class SmoothBrick extends TexturedMaterial {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -32,14 +32,13 @@ public class SmoothBrick extends TexturedMaterial {
     }
 
     public SmoothBrick(final Material type) {
-        super((textures.contains(type)) ? Material.SMOOTH_BRICK : type);
-        if (textures.contains(type)) {
+        super((TEXTURES.contains(type)) ? Material.SMOOTH_BRICK : type);
+        if (TEXTURES.contains(type)) {
             setMaterial(type);
         }
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -48,7 +47,6 @@ public class SmoothBrick extends TexturedMaterial {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -58,7 +56,7 @@ public class SmoothBrick extends TexturedMaterial {
 
     @Override
     public List<Material> getTextures() {
-        return textures;
+        return TEXTURES;
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/material/SpawnEgg.java b/src/main/java/org/bukkit/material/SpawnEgg.java
index ed973c5..5846607 100644
--- a/src/main/java/org/bukkit/material/SpawnEgg.java
+++ b/src/main/java/org/bukkit/material/SpawnEgg.java
@@ -13,16 +13,14 @@ public class SpawnEgg extends MaterialData {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
-    public SpawnEgg(int type, byte data){
+    public SpawnEgg(int type, byte data) {
         super(type, data);
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
diff --git a/src/main/java/org/bukkit/material/Stairs.java b/src/main/java/org/bukkit/material/Stairs.java
index 1f73c77..c47f9cf 100644
--- a/src/main/java/org/bukkit/material/Stairs.java
+++ b/src/main/java/org/bukkit/material/Stairs.java
@@ -9,7 +9,6 @@ import org.bukkit.block.BlockFace;
 public class Stairs extends MaterialData implements Directional {
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -22,7 +21,6 @@ public class Stairs extends MaterialData implements Directional {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -31,7 +29,6 @@ public class Stairs extends MaterialData implements Directional {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -44,20 +41,16 @@ public class Stairs extends MaterialData implements Directional {
      */
     public BlockFace getAscendingDirection() {
         byte data = getData();
-
         switch (data & 0x3) {
-        case 0x0:
-        default:
-            return BlockFace.EAST;
-
-        case 0x1:
-            return BlockFace.WEST;
-
-        case 0x2:
-            return BlockFace.SOUTH;
-
-        case 0x3:
-            return BlockFace.NORTH;
+            case 0x0:
+            default:
+                return BlockFace.EAST;
+            case 0x1:
+                return BlockFace.WEST;
+            case 0x2:
+                return BlockFace.SOUTH;
+            case 0x3:
+                return BlockFace.NORTH;
         }
     }
 
@@ -73,24 +66,20 @@ public class Stairs extends MaterialData implements Directional {
      */
     public void setFacingDirection(BlockFace face) {
         byte data;
-
         switch (face) {
-        case NORTH:
-            data = 0x3;
-            break;
-
-        case SOUTH:
-            data = 0x2;
-            break;
-
-        case EAST:
-        default:
-            data = 0x0;
-            break;
-
-        case WEST:
-            data = 0x1;
-            break;
+            case NORTH:
+                data = 0x3;
+                break;
+            case SOUTH:
+                data = 0x2;
+                break;
+            case EAST:
+            default:
+                data = 0x0;
+                break;
+            case WEST:
+                data = 0x1;
+                break;
         }
 
         setData((byte) ((getData() & 0xC) | data));
@@ -116,19 +105,20 @@ public class Stairs extends MaterialData implements Directional {
      * Set step inverted state
      *
      * @param inv - true if step is inverted (top half), false if step is
-     *     normal (bottom half)
+     *            normal (bottom half)
      */
     public void setInverted(boolean inv) {
         int dat = getData() & 0x3;
         if (inv) {
             dat |= 0x4;
         }
+
         setData((byte) dat);
     }
 
     @Override
     public String toString() {
-        return super.toString() + " facing " + getFacing() + (isInverted()?" inverted":"");
+        return super.toString() + " facing " + getFacing() + (isInverted() ? " inverted" : "");
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/material/Step.java b/src/main/java/org/bukkit/material/Step.java
index 605f817..385dea3 100644
--- a/src/main/java/org/bukkit/material/Step.java
+++ b/src/main/java/org/bukkit/material/Step.java
@@ -1,24 +1,26 @@
 package org.bukkit.material;
 
+import org.bukkit.Material;
+
 import java.util.ArrayList;
 import java.util.List;
 
-import org.bukkit.Material;
-
 /**
  * Represents the different types of steps.
  */
 public class Step extends TexturedMaterial {
-    private static final List<Material> textures = new ArrayList<Material>();
+
+    private static final List<Material> TEXUTRES = new ArrayList<Material>();
+
     static {
-        textures.add(Material.STONE);
-        textures.add(Material.SANDSTONE);
-        textures.add(Material.WOOD);
-        textures.add(Material.COBBLESTONE);
-        textures.add(Material.BRICK);
-        textures.add(Material.SMOOTH_BRICK);
-        textures.add(Material.NETHER_BRICK);
-        textures.add(Material.QUARTZ_BLOCK);
+        TEXUTRES.add(Material.STONE);
+        TEXUTRES.add(Material.SANDSTONE);
+        TEXUTRES.add(Material.WOOD);
+        TEXUTRES.add(Material.COBBLESTONE);
+        TEXUTRES.add(Material.BRICK);
+        TEXUTRES.add(Material.SMOOTH_BRICK);
+        TEXUTRES.add(Material.NETHER_BRICK);
+        TEXUTRES.add(Material.QUARTZ_BLOCK);
     }
 
     public Step() {
@@ -26,7 +28,6 @@ public class Step extends TexturedMaterial {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -35,14 +36,13 @@ public class Step extends TexturedMaterial {
     }
 
     public Step(final Material type) {
-        super((textures.contains(type)) ? Material.STEP : type);
-        if (textures.contains(type)) {
+        super((TEXUTRES.contains(type)) ? Material.STEP : type);
+        if (TEXUTRES.contains(type)) {
             setMaterial(type);
         }
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -51,7 +51,6 @@ public class Step extends TexturedMaterial {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -61,7 +60,7 @@ public class Step extends TexturedMaterial {
 
     @Override
     public List<Material> getTextures() {
-        return textures;
+        return TEXUTRES;
     }
 
     /**
@@ -77,18 +76,18 @@ public class Step extends TexturedMaterial {
      * Set step inverted state
      *
      * @param inv - true if step is inverted (top half), false if step is
-     *     normal (bottom half)
+     *            normal (bottom half)
      */
     public void setInverted(boolean inv) {
         int dat = getData() & 0x7;
         if (inv) {
             dat |= 0x8;
         }
+
         setData((byte) dat);
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -98,7 +97,6 @@ public class Step extends TexturedMaterial {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -114,6 +112,6 @@ public class Step extends TexturedMaterial {
 
     @Override
     public String toString() {
-        return super.toString() + (isInverted()?"inverted":"");
+        return super.toString() + (isInverted() ? "inverted" : "");
     }
 }
diff --git a/src/main/java/org/bukkit/material/TexturedMaterial.java b/src/main/java/org/bukkit/material/TexturedMaterial.java
index cfd971b..c5cf4ba 100644
--- a/src/main/java/org/bukkit/material/TexturedMaterial.java
+++ b/src/main/java/org/bukkit/material/TexturedMaterial.java
@@ -1,20 +1,19 @@
 package org.bukkit.material;
 
-import java.util.List;
-
 import org.bukkit.Material;
 
+import java.util.List;
+
 /**
  * Represents textured materials like steps and smooth bricks
  */
 public abstract class TexturedMaterial extends MaterialData {
 
-    public TexturedMaterial(Material m) {
-        super(m);
+    public TexturedMaterial(Material mateiral) {
+        super(mateiral);
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -23,7 +22,6 @@ public abstract class TexturedMaterial extends MaterialData {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -32,7 +30,6 @@ public abstract class TexturedMaterial extends MaterialData {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -65,8 +62,7 @@ public abstract class TexturedMaterial extends MaterialData {
     /**
      * Sets the material this block is made of
      *
-     * @param material
-     *            New material of this block
+     * @param material New material of this block
      */
     public void setMaterial(Material material) {
         if (getTextures().contains(material)) {
@@ -95,7 +91,7 @@ public abstract class TexturedMaterial extends MaterialData {
      */
     @Deprecated
     protected void setTextureIndex(int idx) {
-        setData((byte) idx); // Defult to using all bits - override for other mappings
+        setData((byte) idx); // Default to using all bits - override for other mappings
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/material/Torch.java b/src/main/java/org/bukkit/material/Torch.java
index f03b3cf..6b4a402 100644
--- a/src/main/java/org/bukkit/material/Torch.java
+++ b/src/main/java/org/bukkit/material/Torch.java
@@ -1,18 +1,18 @@
 package org.bukkit.material;
 
-import org.bukkit.block.BlockFace;
 import org.bukkit.Material;
+import org.bukkit.block.BlockFace;
 
 /**
  * MaterialData for torches
  */
 public class Torch extends SimpleAttachableMaterialData {
+
     public Torch() {
         super(Material.TORCH);
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -25,7 +25,6 @@ public class Torch extends SimpleAttachableMaterialData {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -34,7 +33,6 @@ public class Torch extends SimpleAttachableMaterialData {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -49,49 +47,39 @@ public class Torch extends SimpleAttachableMaterialData {
      */
     public BlockFace getAttachedFace() {
         byte data = getData();
-
         switch (data) {
-        case 0x1:
-            return BlockFace.WEST;
-
-        case 0x2:
-            return BlockFace.EAST;
-
-        case 0x3:
-            return BlockFace.NORTH;
-
-        case 0x4:
-            return BlockFace.SOUTH;
-
-        case 0x5:
-        default:
-            return BlockFace.DOWN;
+            case 0x1:
+                return BlockFace.WEST;
+            case 0x2:
+                return BlockFace.EAST;
+            case 0x3:
+                return BlockFace.NORTH;
+            case 0x4:
+                return BlockFace.SOUTH;
+            case 0x5:
+            default:
+                return BlockFace.DOWN;
         }
     }
 
     public void setFacingDirection(BlockFace face) {
         byte data;
-
         switch (face) {
-        case EAST:
-            data = 0x1;
-            break;
-
-        case WEST:
-            data = 0x2;
-            break;
-
-        case SOUTH:
-            data = 0x3;
-            break;
-
-        case NORTH:
-            data = 0x4;
-            break;
-
-        case UP:
-        default:
-            data = 0x5;
+            case EAST:
+                data = 0x1;
+                break;
+            case WEST:
+                data = 0x2;
+                break;
+            case SOUTH:
+                data = 0x3;
+                break;
+            case NORTH:
+                data = 0x4;
+                break;
+            case UP:
+            default:
+                data = 0x5;
         }
 
         setData(data);
diff --git a/src/main/java/org/bukkit/material/TrapDoor.java b/src/main/java/org/bukkit/material/TrapDoor.java
index bd4bcc2..b58a438 100644
--- a/src/main/java/org/bukkit/material/TrapDoor.java
+++ b/src/main/java/org/bukkit/material/TrapDoor.java
@@ -7,12 +7,12 @@ import org.bukkit.block.BlockFace;
  * Represents a trap door
  */
 public class TrapDoor extends SimpleAttachableMaterialData implements Openable {
+
     public TrapDoor() {
         super(Material.TRAP_DOOR);
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -25,7 +25,6 @@ public class TrapDoor extends SimpleAttachableMaterialData implements Openable {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -34,7 +33,6 @@ public class TrapDoor extends SimpleAttachableMaterialData implements Openable {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -48,7 +46,6 @@ public class TrapDoor extends SimpleAttachableMaterialData implements Openable {
 
     public void setOpen(boolean isOpen) {
         byte data = getData();
-
         if (isOpen) {
             data |= 0x4;
         } else {
@@ -77,33 +74,28 @@ public class TrapDoor extends SimpleAttachableMaterialData implements Openable {
         if (inv) {
             dat |= 0x8;
         }
+
         setData((byte) dat);
     }
 
     public BlockFace getAttachedFace() {
         byte data = (byte) (getData() & 0x3);
-
         switch (data) {
             case 0x0:
                 return BlockFace.SOUTH;
-
             case 0x1:
                 return BlockFace.NORTH;
-
             case 0x2:
                 return BlockFace.EAST;
-
             case 0x3:
                 return BlockFace.WEST;
+            default:
+                return null;
         }
-
-        return null;
-
     }
 
     public void setFacingDirection(BlockFace face) {
         byte data = (byte) (getData() & 0xC);
-
         switch (face) {
             case SOUTH:
                 data |= 0x1;
@@ -121,7 +113,7 @@ public class TrapDoor extends SimpleAttachableMaterialData implements Openable {
 
     @Override
     public String toString() {
-        return (isOpen() ? "OPEN " : "CLOSED ") + super.toString() + " with hinges set " + getAttachedFace() + (isInverted() ? " inverted" : "");
+        return (isOpen() ? "OPEN" : "CLOSED") + " " + super.toString() + " with hinges set " + getAttachedFace() + (isInverted() ? " inverted" : "");
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/material/Tree.java b/src/main/java/org/bukkit/material/Tree.java
index fe56872..642f0fb 100644
--- a/src/main/java/org/bukkit/material/Tree.java
+++ b/src/main/java/org/bukkit/material/Tree.java
@@ -8,6 +8,7 @@ import org.bukkit.block.BlockFace;
  * Represents the different types of Trees.
  */
 public class Tree extends MaterialData {
+
     public Tree() {
         super(Material.LOG);
     }
@@ -24,7 +25,6 @@ public class Tree extends MaterialData {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -37,7 +37,6 @@ public class Tree extends MaterialData {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -46,7 +45,6 @@ public class Tree extends MaterialData {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -76,12 +74,12 @@ public class Tree extends MaterialData {
      * Get direction of the log
      *
      * @return one of:
-     *     <ul>
-     *     <li>BlockFace.TOP for upright (default)
-     *     <li>BlockFace.NORTH (east-west)
-     *     <li>BlockFace.WEST (north-south)
-     *     <li>BlockFace.SELF (directionless)
-     *     </ul>
+     * <ul>
+     * <li>BlockFace.TOP for upright (default)
+     * <li>BlockFace.NORTH (east-west)
+     * <li>BlockFace.WEST (north-south)
+     * <li>BlockFace.SELF (directionless)
+     * </ul>
      */
     public BlockFace getDirection() {
         switch ((getData() >> 2) & 0x3) {
@@ -96,6 +94,7 @@ public class Tree extends MaterialData {
                 return BlockFace.SELF;
         }
     }
+
     /**
      * Set direction of the log
      *
diff --git a/src/main/java/org/bukkit/material/Tripwire.java b/src/main/java/org/bukkit/material/Tripwire.java
index 583860b..27755cc 100644
--- a/src/main/java/org/bukkit/material/Tripwire.java
+++ b/src/main/java/org/bukkit/material/Tripwire.java
@@ -6,13 +6,12 @@ import org.bukkit.Material;
  * Represents the tripwire
  */
 public class Tripwire extends MaterialData {
-    
+
     public Tripwire() {
         super(Material.TRIPWIRE);
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -21,7 +20,6 @@ public class Tripwire extends MaterialData {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -37,7 +35,7 @@ public class Tripwire extends MaterialData {
     public boolean isActivated() {
         return (getData() & 0x4) != 0;
     }
-    
+
     /**
      * Set tripwire activated state
      *
@@ -49,8 +47,8 @@ public class Tripwire extends MaterialData {
             dat |= 0x4;
         }
         setData((byte) dat);
-    }    
-    
+    }
+
     /**
      * Test if object triggering this tripwire directly
      *
@@ -70,6 +68,7 @@ public class Tripwire extends MaterialData {
         if (trig) {
             dat |= 0x1;
         }
+
         setData((byte) dat);
     }
 
@@ -80,6 +79,6 @@ public class Tripwire extends MaterialData {
 
     @Override
     public String toString() {
-        return super.toString() + (isActivated()?" Activated":"") + (isObjectTriggering()?" Triggered":"");
+        return super.toString() + (isActivated() ? " Activated" : "") + (isObjectTriggering() ? " Triggered" : "");
     }
 }
diff --git a/src/main/java/org/bukkit/material/TripwireHook.java b/src/main/java/org/bukkit/material/TripwireHook.java
index 7ad2d2a..43758ae 100644
--- a/src/main/java/org/bukkit/material/TripwireHook.java
+++ b/src/main/java/org/bukkit/material/TripwireHook.java
@@ -13,7 +13,6 @@ public class TripwireHook extends SimpleAttachableMaterialData implements Redsto
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -22,7 +21,6 @@ public class TripwireHook extends SimpleAttachableMaterialData implements Redsto
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -54,6 +52,7 @@ public class TripwireHook extends SimpleAttachableMaterialData implements Redsto
         if (connected) {
             dat |= 0x4;
         }
+
         setData((byte) dat);
     }
 
@@ -82,34 +81,36 @@ public class TripwireHook extends SimpleAttachableMaterialData implements Redsto
     public void setFacingDirection(BlockFace face) {
         int dat = getData() & 0xC;
         switch (face) {
-        case WEST:
-            dat |= 0x1;
-            break;
-        case NORTH:
-            dat |= 0x2;
-            break;
-        case EAST:
-            dat |= 0x3;
-            break;
-        case SOUTH:
-        default:
-            break;
+            case WEST:
+                dat |= 0x1;
+                break;
+            case NORTH:
+                dat |= 0x2;
+                break;
+            case EAST:
+                dat |= 0x3;
+                break;
+            case SOUTH:
+            default:
+                break;
         }
+
         setData((byte) dat);
     }
 
     public BlockFace getAttachedFace() {
         switch (getData() & 0x3) {
-        case 0:
-            return BlockFace.NORTH;
-        case 1:
-            return BlockFace.EAST;
-        case 2:
-            return BlockFace.SOUTH;
-        case 3:
-            return BlockFace.WEST;
+            case 0:
+                return BlockFace.NORTH;
+            case 1:
+                return BlockFace.EAST;
+            case 2:
+                return BlockFace.SOUTH;
+            case 3:
+                return BlockFace.WEST;
+            default:
+                return null;
         }
-        return null;
     }
 
     public boolean isPowered() {
@@ -123,6 +124,6 @@ public class TripwireHook extends SimpleAttachableMaterialData implements Redsto
 
     @Override
     public String toString() {
-        return super.toString() + " facing " + getFacing() + (isActivated()?" Activated":"") + (isConnected()?" Connected":"");
+        return super.toString() + " facing " + getFacing() + (isActivated() ? " Activated" : "") + (isConnected() ? " Connected" : "");
     }
 }
diff --git a/src/main/java/org/bukkit/material/Vine.java b/src/main/java/org/bukkit/material/Vine.java
index a4f7ad5..8d11c79 100644
--- a/src/main/java/org/bukkit/material/Vine.java
+++ b/src/main/java/org/bukkit/material/Vine.java
@@ -1,19 +1,21 @@
 package org.bukkit.material;
 
-import java.util.Arrays;
-import java.util.EnumSet;
-
 import org.bukkit.Material;
 import org.bukkit.block.BlockFace;
 
+import java.util.Arrays;
+import java.util.EnumSet;
+
 /**
  * Represents a vine
  */
 public class Vine extends MaterialData {
+
     private static final int VINE_NORTH = 0x4;
     private static final int VINE_EAST = 0x8;
     private static final int VINE_WEST = 0x2;
     private static final int VINE_SOUTH = 0x1;
+
     EnumSet<BlockFace> possibleFaces = EnumSet.of(BlockFace.WEST, BlockFace.NORTH, BlockFace.SOUTH, BlockFace.EAST);
 
     public Vine() {
@@ -21,16 +23,14 @@ public class Vine extends MaterialData {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
-    public Vine(int type, byte data){
+    public Vine(int type, byte data) {
         super(type, data);
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -106,7 +106,7 @@ public class Vine extends MaterialData {
      * @param face The face to attach.
      */
     public void putOnFace(BlockFace face) {
-        switch(face) {
+        switch (face) {
             case WEST:
                 setData((byte) (getData() | VINE_WEST));
                 break;
@@ -148,7 +148,7 @@ public class Vine extends MaterialData {
      * @param face The face to detach.
      */
     public void removeFromFace(BlockFace face) {
-        switch(face) {
+        switch (face) {
             case WEST:
                 setData((byte) (getData() & ~VINE_WEST));
                 break;
diff --git a/src/main/java/org/bukkit/material/WoodenStep.java b/src/main/java/org/bukkit/material/WoodenStep.java
index 9584e25..7fa8de5 100644
--- a/src/main/java/org/bukkit/material/WoodenStep.java
+++ b/src/main/java/org/bukkit/material/WoodenStep.java
@@ -13,7 +13,6 @@ public class WoodenStep extends MaterialData {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -33,7 +32,6 @@ public class WoodenStep extends MaterialData {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -42,7 +40,6 @@ public class WoodenStep extends MaterialData {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -76,21 +73,22 @@ public class WoodenStep extends MaterialData {
     public boolean isInverted() {
         return ((getData() & 0x8) != 0);
     }
-    
+
     /**
      * Set step inverted state
      *
      * @param inv - true if step is inverted (top half), false if step is
-     *     normal (bottom half)
+     *            normal (bottom half)
      */
     public void setInverted(boolean inv) {
         int dat = getData() & 0x7;
         if (inv) {
             dat |= 0x8;
         }
+
         setData((byte) dat);
     }
-    
+
     @Override
     public WoodenStep clone() {
         return (WoodenStep) super.clone();
@@ -98,6 +96,6 @@ public class WoodenStep extends MaterialData {
 
     @Override
     public String toString() {
-        return super.toString() + " " + getSpecies() + (isInverted()?" inverted":"");
+        return super.toString() + " " + getSpecies() + (isInverted() ? " inverted" : "");
     }
 }
diff --git a/src/main/java/org/bukkit/material/Wool.java b/src/main/java/org/bukkit/material/Wool.java
index 8115bdc..55ff708 100644
--- a/src/main/java/org/bukkit/material/Wool.java
+++ b/src/main/java/org/bukkit/material/Wool.java
@@ -7,6 +7,7 @@ import org.bukkit.Material;
  * Represents a Wool/Cloth block
  */
 public class Wool extends MaterialData implements Colorable {
+
     public Wool() {
         super(Material.WOOL);
     }
@@ -17,7 +18,6 @@ public class Wool extends MaterialData implements Colorable {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -30,7 +30,6 @@ public class Wool extends MaterialData implements Colorable {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
@@ -39,7 +38,6 @@ public class Wool extends MaterialData implements Colorable {
     }
 
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
diff --git a/src/main/java/org/bukkit/metadata/FixedMetadataValue.java b/src/main/java/org/bukkit/metadata/FixedMetadataValue.java
index bce6f00..a7220cc 100644
--- a/src/main/java/org/bukkit/metadata/FixedMetadataValue.java
+++ b/src/main/java/org/bukkit/metadata/FixedMetadataValue.java
@@ -2,8 +2,6 @@ package org.bukkit.metadata;
 
 import org.bukkit.plugin.Plugin;
 
-import java.util.concurrent.Callable;
-
 /**
  * A FixedMetadataValue is a special case metadata item that contains the same
  * value forever after initialization. Invalidating a FixedMetadataValue has
@@ -24,7 +22,7 @@ public class FixedMetadataValue extends LazyMetadataValue {
      * Initializes a FixedMetadataValue with an Object
      *
      * @param owningPlugin the {@link Plugin} that created this metadata value
-     * @param value the value assigned to this metadata value
+     * @param value        the value assigned to this metadata value
      */
     public FixedMetadataValue(Plugin owningPlugin, final Object value) {
         super(owningPlugin);
diff --git a/src/main/java/org/bukkit/metadata/LazyMetadataValue.java b/src/main/java/org/bukkit/metadata/LazyMetadataValue.java
index a9546e5..aadc051 100644
--- a/src/main/java/org/bukkit/metadata/LazyMetadataValue.java
+++ b/src/main/java/org/bukkit/metadata/LazyMetadataValue.java
@@ -1,11 +1,11 @@
 package org.bukkit.metadata;
 
-import java.lang.ref.SoftReference;
-import java.util.concurrent.Callable;
-
 import org.apache.commons.lang.Validate;
 import org.bukkit.plugin.Plugin;
 
+import java.lang.ref.SoftReference;
+import java.util.concurrent.Callable;
+
 /**
  * The LazyMetadataValue class implements a type of metadata that is not
  * computed until another plugin asks for it.
@@ -18,18 +18,20 @@ import org.bukkit.plugin.Plugin;
  * when asked.
  */
 public class LazyMetadataValue extends MetadataValueAdapter implements MetadataValue {
+
+    private static final Object ACTUALLY_NULL = new Object();
+
     private Callable<Object> lazyValue;
     private CacheStrategy cacheStrategy;
     private SoftReference<Object> internalValue;
-    private static final Object ACTUALLY_NULL = new Object();
 
     /**
      * Initialized a LazyMetadataValue object with the default
      * CACHE_AFTER_FIRST_EVAL cache strategy.
      *
      * @param owningPlugin the {@link Plugin} that created this metadata
-     *     value.
-     * @param lazyValue the lazy value assigned to this metadata value.
+     *                     value.
+     * @param lazyValue    the lazy value assigned to this metadata value.
      */
     public LazyMetadataValue(Plugin owningPlugin, Callable<Object> lazyValue) {
         this(owningPlugin, CacheStrategy.CACHE_AFTER_FIRST_EVAL, lazyValue);
@@ -38,11 +40,11 @@ public class LazyMetadataValue extends MetadataValueAdapter implements MetadataV
     /**
      * Initializes a LazyMetadataValue object with a specific cache strategy.
      *
-     * @param owningPlugin the {@link Plugin} that created this metadata
-     *     value.
+     * @param owningPlugin  the {@link Plugin} that created this metadata
+     *                      value.
      * @param cacheStrategy determines the rules for caching this metadata
-     *     value.
-     * @param lazyValue the lazy value assigned to this metadata value.
+     *                      value.
+     * @param lazyValue     the lazy value assigned to this metadata value.
      */
     public LazyMetadataValue(Plugin owningPlugin, CacheStrategy cacheStrategy, Callable<Object> lazyValue) {
         super(owningPlugin);
@@ -62,11 +64,13 @@ public class LazyMetadataValue extends MetadataValueAdapter implements MetadataV
     }
 
     public Object value() {
-        eval();
+        this.eval();
+
         Object value = internalValue.get();
         if (value == ACTUALLY_NULL) {
             return null;
         }
+
         return value;
     }
 
@@ -74,7 +78,7 @@ public class LazyMetadataValue extends MetadataValueAdapter implements MetadataV
      * Lazily evaluates the value of this metadata item.
      *
      * @throws MetadataEvaluationException if computing the metadata value
-     *     fails.
+     *                                     fails.
      */
     private synchronized void eval() throws MetadataEvaluationException {
         if (cacheStrategy == CacheStrategy.NEVER_CACHE || internalValue.get() == null) {
@@ -100,17 +104,20 @@ public class LazyMetadataValue extends MetadataValueAdapter implements MetadataV
      * Describes possible caching strategies for metadata.
      */
     public enum CacheStrategy {
+
         /**
          * Once the metadata value has been evaluated, do not re-evaluate the
          * value until it is manually invalidated.
          */
         CACHE_AFTER_FIRST_EVAL,
 
+
         /**
          * Re-evaluate the metadata item every time it is requested
          */
         NEVER_CACHE,
 
+
         /**
          * Once the metadata value has been evaluated, do not re-evaluate the
          * value in spite of manual invalidation.
diff --git a/src/main/java/org/bukkit/metadata/MetadataConversionException.java b/src/main/java/org/bukkit/metadata/MetadataConversionException.java
index a3def46..77d4fc3 100644
--- a/src/main/java/org/bukkit/metadata/MetadataConversionException.java
+++ b/src/main/java/org/bukkit/metadata/MetadataConversionException.java
@@ -7,6 +7,7 @@ package org.bukkit.metadata;
  */
 @SuppressWarnings("serial")
 public class MetadataConversionException extends RuntimeException {
+
     MetadataConversionException(String message) {
         super(message);
     }
diff --git a/src/main/java/org/bukkit/metadata/MetadataEvaluationException.java b/src/main/java/org/bukkit/metadata/MetadataEvaluationException.java
index 918e7c8..712bee9 100644
--- a/src/main/java/org/bukkit/metadata/MetadataEvaluationException.java
+++ b/src/main/java/org/bukkit/metadata/MetadataEvaluationException.java
@@ -7,6 +7,7 @@ package org.bukkit.metadata;
  */
 @SuppressWarnings("serial")
 public class MetadataEvaluationException extends RuntimeException {
+
     MetadataEvaluationException(Throwable cause) {
         super(cause);
     }
diff --git a/src/main/java/org/bukkit/metadata/MetadataStore.java b/src/main/java/org/bukkit/metadata/MetadataStore.java
index 700d0bf..7969f8f 100644
--- a/src/main/java/org/bukkit/metadata/MetadataStore.java
+++ b/src/main/java/org/bukkit/metadata/MetadataStore.java
@@ -5,48 +5,49 @@ import org.bukkit.plugin.Plugin;
 import java.util.List;
 
 public interface MetadataStore<T> {
+
     /**
-     * Adds a metadata value to an object.
+     * Tests to see if a metadata attribute has been set on an object.
      *
-     * @param subject The object receiving the metadata.
-     * @param metadataKey A unique key to identify this metadata.
-     * @param newMetadataValue The metadata value to apply.
-     * @throws IllegalArgumentException If value is null, or the owning plugin
-     *     is null
+     * @param subject     the object upon which the has-metadata test is
+     *                    performed.
+     * @param metadataKey the unique metadata key being queried.
+     * @return the existence of the metadataKey within subject.
      */
-    public void setMetadata(T subject, String metadataKey, MetadataValue newMetadataValue);
+    boolean hasMetadata(T subject, String metadataKey);
 
     /**
      * Returns all metadata values attached to an object. If multiple plugins
      * have attached metadata, each will value will be included.
      *
-     * @param subject the object being interrogated.
+     * @param subject     the object being interrogated.
      * @param metadataKey the unique metadata key being sought.
      * @return A list of values, one for each plugin that has set the
-     *     requested value.
+     * requested value.
      */
-    public List<MetadataValue> getMetadata(T subject, String metadataKey);
+    List<MetadataValue> getMetadata(T subject, String metadataKey);
 
     /**
-     * Tests to see if a metadata attribute has been set on an object.
+     * Adds a metadata value to an object.
      *
-     * @param subject the object upon which the has-metadata test is
-     *     performed.
-     * @param metadataKey the unique metadata key being queried.
-     * @return the existence of the metadataKey within subject.
+     * @param subject          The object receiving the metadata.
+     * @param metadataKey      A unique key to identify this metadata.
+     * @param newMetadataValue The metadata value to apply.
+     * @throws IllegalArgumentException If value is null, or the owning plugin
+     *                                  is null
      */
-    public boolean hasMetadata(T subject, String metadataKey);
+    void setMetadata(T subject, String metadataKey, MetadataValue newMetadataValue);
 
     /**
      * Removes a metadata item owned by a plugin from a subject.
      *
-     * @param subject the object to remove the metadata from.
-     * @param metadataKey the unique metadata key identifying the metadata to
-     *     remove.
+     * @param subject      the object to remove the metadata from.
+     * @param metadataKey  the unique metadata key identifying the metadata to
+     *                     remove.
      * @param owningPlugin the plugin attempting to remove a metadata item.
      * @throws IllegalArgumentException If plugin is null
      */
-    public void removeMetadata(T subject, String metadataKey, Plugin owningPlugin);
+    void removeMetadata(T subject, String metadataKey, Plugin owningPlugin);
 
     /**
      * Invalidates all metadata in the metadata store that originates from the
@@ -56,5 +57,5 @@ public interface MetadataStore<T> {
      * @param owningPlugin the plugin requesting the invalidation.
      * @throws IllegalArgumentException If plugin is null
      */
-    public void invalidateAll(Plugin owningPlugin);
+    void invalidateAll(Plugin owningPlugin);
 }
diff --git a/src/main/java/org/bukkit/metadata/MetadataStoreBase.java b/src/main/java/org/bukkit/metadata/MetadataStoreBase.java
index 093c144..f7c8afb 100644
--- a/src/main/java/org/bukkit/metadata/MetadataStoreBase.java
+++ b/src/main/java/org/bukkit/metadata/MetadataStoreBase.java
@@ -3,7 +3,13 @@ package org.bukkit.metadata;
 import org.apache.commons.lang.Validate;
 import org.bukkit.plugin.Plugin;
 
-import java.util.*;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.WeakHashMap;
 
 public abstract class MetadataStoreBase<T> {
     private Map<String, Map<Plugin, MetadataValue>> metadataMap = new HashMap<String, Map<Plugin, MetadataValue>>();
@@ -23,12 +29,12 @@ public abstract class MetadataStoreBase<T> {
      * Bukkit is almost entirely single threaded so locking overhead shouldn't
      * pose a problem.
      *
-     * @param subject The object receiving the metadata.
-     * @param metadataKey A unique key to identify this metadata.
+     * @param subject          The object receiving the metadata.
+     * @param metadataKey      A unique key to identify this metadata.
      * @param newMetadataValue The metadata value to apply.
-     * @see MetadataStore#setMetadata(Object, String, MetadataValue)
      * @throws IllegalArgumentException If value is null, or the owning plugin
-     *     is null
+     *                                  is null
+     * @see MetadataStore#setMetadata(Object, String, MetadataValue)
      */
     public synchronized void setMetadata(T subject, String metadataKey, MetadataValue newMetadataValue) {
         Validate.notNull(newMetadataValue, "Value cannot be null");
@@ -40,6 +46,7 @@ public abstract class MetadataStoreBase<T> {
             entry = new WeakHashMap<Plugin, MetadataValue>(1);
             metadataMap.put(key, entry);
         }
+
         entry.put(owningPlugin, newMetadataValue);
     }
 
@@ -47,10 +54,10 @@ public abstract class MetadataStoreBase<T> {
      * Returns all metadata values attached to an object. If multiple
      * have attached metadata, each will value will be included.
      *
-     * @param subject the object being interrogated.
+     * @param subject     the object being interrogated.
      * @param metadataKey the unique metadata key being sought.
      * @return A list of values, one for each plugin that has set the
-     *     requested value.
+     * requested value.
      * @see MetadataStore#getMetadata(Object, String)
      */
     public synchronized List<MetadataValue> getMetadata(T subject, String metadataKey) {
@@ -66,8 +73,8 @@ public abstract class MetadataStoreBase<T> {
     /**
      * Tests to see if a metadata attribute has been set on an object.
      *
-     * @param subject the object upon which the has-metadata test is
-     *     performed.
+     * @param subject     the object upon which the has-metadata test is
+     *                    performed.
      * @param metadataKey the unique metadata key being queried.
      * @return the existence of the metadataKey within subject.
      */
@@ -79,13 +86,13 @@ public abstract class MetadataStoreBase<T> {
     /**
      * Removes a metadata item owned by a plugin from a subject.
      *
-     * @param subject the object to remove the metadata from.
-     * @param metadataKey the unique metadata key identifying the metadata to
-     *     remove.
+     * @param subject      the object to remove the metadata from.
+     * @param metadataKey  the unique metadata key identifying the metadata to
+     *                     remove.
      * @param owningPlugin the plugin attempting to remove a metadata item.
-     * @see MetadataStore#removeMetadata(Object, String,
-     *     org.bukkit.plugin.Plugin)
      * @throws IllegalArgumentException If plugin is null
+     * @see MetadataStore#removeMetadata(Object, String,
+     * org.bukkit.plugin.Plugin)
      */
     public synchronized void removeMetadata(T subject, String metadataKey, Plugin owningPlugin) {
         Validate.notNull(owningPlugin, "Plugin cannot be null");
@@ -107,8 +114,8 @@ public abstract class MetadataStoreBase<T> {
      * be recalculated the next time it is accessed.
      *
      * @param owningPlugin the plugin requesting the invalidation.
-     * @see MetadataStore#invalidateAll(org.bukkit.plugin.Plugin)
      * @throws IllegalArgumentException If plugin is null
+     * @see MetadataStore#invalidateAll(org.bukkit.plugin.Plugin)
      */
     public synchronized void invalidateAll(Plugin owningPlugin) {
         Validate.notNull(owningPlugin, "Plugin cannot be null");
@@ -128,7 +135,7 @@ public abstract class MetadataStoreBase<T> {
      * two Player objects must generate the same string if they represent the
      * same player, even if the objects would fail a reference equality test.
      *
-     * @param subject The object for which this key is being generated.
+     * @param subject     The object for which this key is being generated.
      * @param metadataKey The name identifying the metadata value.
      * @return a unique metadata key for the given subject.
      */
diff --git a/src/main/java/org/bukkit/metadata/MetadataValue.java b/src/main/java/org/bukkit/metadata/MetadataValue.java
index eded8c0..118a828 100644
--- a/src/main/java/org/bukkit/metadata/MetadataValue.java
+++ b/src/main/java/org/bukkit/metadata/MetadataValue.java
@@ -9,75 +9,75 @@ public interface MetadataValue {
      *
      * @return the metadata value.
      */
-    public Object value();
+    Object value();
 
     /**
      * Attempts to convert the value of this metadata item into an int.
      *
      * @return the value as an int.
      */
-    public int asInt();
+    int asInt();
 
     /**
      * Attempts to convert the value of this metadata item into a float.
      *
      * @return the value as a float.
      */
-    public float asFloat();
+    float asFloat();
 
     /**
      * Attempts to convert the value of this metadata item into a double.
      *
      * @return the value as a double.
      */
-    public double asDouble();
+    double asDouble();
 
     /**
      * Attempts to convert the value of this metadata item into a long.
      *
      * @return the value as a long.
      */
-    public long asLong();
+    long asLong();
 
     /**
      * Attempts to convert the value of this metadata item into a short.
      *
      * @return the value as a short.
      */
-    public short asShort();
+    short asShort();
 
     /**
      * Attempts to convert the value of this metadata item into a byte.
      *
      * @return the value as a byte.
      */
-    public byte asByte();
+    byte asByte();
 
     /**
      * Attempts to convert the value of this metadata item into a boolean.
      *
      * @return the value as a boolean.
      */
-    public boolean asBoolean();
+    boolean asBoolean();
 
     /**
      * Attempts to convert the value of this metadata item into a string.
      *
      * @return the value as a string.
      */
-    public String asString();
+    String asString();
 
     /**
      * Returns the {@link Plugin} that created this metadata item.
      *
      * @return the plugin that owns this metadata value. This should never be
-     *     null.
+     * null.
      */
-    public Plugin getOwningPlugin();
+    Plugin getOwningPlugin();
 
     /**
      * Invalidates this metadata item, forcing it to recompute when next
      * accessed.
      */
-    public void invalidate();
+    void invalidate();
 }
diff --git a/src/main/java/org/bukkit/metadata/MetadataValueAdapter.java b/src/main/java/org/bukkit/metadata/MetadataValueAdapter.java
index bbc3da8..71235f7 100644
--- a/src/main/java/org/bukkit/metadata/MetadataValueAdapter.java
+++ b/src/main/java/org/bukkit/metadata/MetadataValueAdapter.java
@@ -1,11 +1,11 @@
 package org.bukkit.metadata;
 
-import java.lang.ref.WeakReference;
-
 import org.apache.commons.lang.Validate;
 import org.bukkit.plugin.Plugin;
 import org.bukkit.util.NumberConversions;
 
+import java.lang.ref.WeakReference;
+
 /**
  * Optional base class for facilitating MetadataValue implementations.
  * <p>
@@ -14,6 +14,7 @@ import org.bukkit.util.NumberConversions;
  * value() and invalidate().
  */
 public abstract class MetadataValueAdapter implements MetadataValue {
+
     protected final WeakReference<Plugin> owningPlugin;
 
     protected MetadataValueAdapter(Plugin owningPlugin) {
@@ -68,11 +69,6 @@ public abstract class MetadataValueAdapter implements MetadataValue {
 
     public String asString() {
         Object value = value();
-
-        if (value == null) {
-            return "";
-        }
-        return value.toString();
+        return value == null ? "" : value.toString();
     }
-
 }
diff --git a/src/main/java/org/bukkit/metadata/Metadatable.java b/src/main/java/org/bukkit/metadata/Metadatable.java
index b47cf2b..da31e7b 100644
--- a/src/main/java/org/bukkit/metadata/Metadatable.java
+++ b/src/main/java/org/bukkit/metadata/Metadatable.java
@@ -9,15 +9,15 @@ import java.util.List;
  * about themselves.
  */
 public interface Metadatable {
+
     /**
-     * Sets a metadata value in the implementing object's metadata store.
+     * Tests to see whether the implementing object contains the given
+     * metadata value in its metadata store.
      *
-     * @param metadataKey A unique key to identify this metadata.
-     * @param newMetadataValue The metadata value to apply.
-     * @throws IllegalArgumentException If value is null, or the owning plugin
-     *     is null
+     * @param metadataKey the unique metadata key being queried.
+     * @return the existence of the metadataKey within subject.
      */
-    public void setMetadata(String metadataKey, MetadataValue newMetadataValue);
+    boolean hasMetadata(String metadataKey);
 
     /**
      * Returns a list of previously set metadata values from the implementing
@@ -25,28 +25,29 @@ public interface Metadatable {
      *
      * @param metadataKey the unique metadata key being sought.
      * @return A list of values, one for each plugin that has set the
-     *     requested value.
+     * requested value.
      */
-    public List<MetadataValue> getMetadata(String metadataKey);
+    List<MetadataValue> getMetadata(String metadataKey);
 
     /**
-     * Tests to see whether the implementing object contains the given
-     * metadata value in its metadata store.
+     * Sets a metadata value in the implementing object's metadata store.
      *
-     * @param metadataKey the unique metadata key being queried.
-     * @return the existence of the metadataKey within subject.
+     * @param metadataKey      A unique key to identify this metadata.
+     * @param newMetadataValue The metadata value to apply.
+     * @throws IllegalArgumentException If value is null, or the owning plugin
+     *                                  is null
      */
-    public boolean hasMetadata(String metadataKey);
+    void setMetadata(String metadataKey, MetadataValue newMetadataValue);
 
     /**
      * Removes the given metadata value from the implementing object's
      * metadata store.
      *
-     * @param metadataKey the unique metadata key identifying the metadata to
-     *     remove.
+     * @param metadataKey  the unique metadata key identifying the metadata to
+     *                     remove.
      * @param owningPlugin This plugin's metadata value will be removed. All
-     *     other values will be left untouched.
+     *                     other values will be left untouched.
      * @throws IllegalArgumentException If plugin is null
      */
-    public void removeMetadata(String metadataKey, Plugin owningPlugin);
+    void removeMetadata(String metadataKey, Plugin owningPlugin);
 }
diff --git a/src/main/java/org/bukkit/permissions/Permissible.java b/src/main/java/org/bukkit/permissions/Permissible.java
index 5cd3cff..09f3cfb 100644
--- a/src/main/java/org/bukkit/permissions/Permissible.java
+++ b/src/main/java/org/bukkit/permissions/Permissible.java
@@ -1,8 +1,9 @@
 package org.bukkit.permissions;
 
-import java.util.Set;
 import org.bukkit.plugin.Plugin;
 
+import java.util.Set;
+
 /**
  * Represents an object that may be assigned permissions
  */
@@ -15,7 +16,7 @@ public interface Permissible extends ServerOperator {
      * @param name Name of the permission
      * @return true if the permission is set, otherwise false
      */
-    public boolean isPermissionSet(String name);
+    boolean isPermissionSet(String name);
 
     /**
      * Checks if this object contains an override for the specified {@link
@@ -24,7 +25,7 @@ public interface Permissible extends ServerOperator {
      * @param perm Permission to check
      * @return true if the permission is set, otherwise false
      */
-    public boolean isPermissionSet(Permission perm);
+    boolean isPermissionSet(Permission perm);
 
     /**
      * Gets the value of the specified permission, if set.
@@ -35,7 +36,7 @@ public interface Permissible extends ServerOperator {
      * @param name Name of the permission
      * @return Value of the permission
      */
-    public boolean hasPermission(String name);
+    boolean hasPermission(String name);
 
     /**
      * Gets the value of the specified permission, if set.
@@ -46,63 +47,63 @@ public interface Permissible extends ServerOperator {
      * @param perm Permission to get
      * @return Value of the permission
      */
-    public boolean hasPermission(Permission perm);
+    boolean hasPermission(Permission perm);
 
     /**
      * Adds a new {@link PermissionAttachment} with a single permission by
      * name and value
      *
      * @param plugin Plugin responsible for this attachment, may not be null
-     *     or disabled
-     * @param name Name of the permission to attach
-     * @param value Value of the permission
+     *               or disabled
+     * @param name   Name of the permission to attach
+     * @param value  Value of the permission
      * @return The PermissionAttachment that was just created
      */
-    public PermissionAttachment addAttachment(Plugin plugin, String name, boolean value);
+    PermissionAttachment addAttachment(Plugin plugin, String name, boolean value);
 
     /**
      * Adds a new empty {@link PermissionAttachment} to this object
      *
      * @param plugin Plugin responsible for this attachment, may not be null
-     *     or disabled
+     *               or disabled
      * @return The PermissionAttachment that was just created
      */
-    public PermissionAttachment addAttachment(Plugin plugin);
+    PermissionAttachment addAttachment(Plugin plugin);
 
     /**
      * Temporarily adds a new {@link PermissionAttachment} with a single
      * permission by name and value
      *
      * @param plugin Plugin responsible for this attachment, may not be null
-     *     or disabled
-     * @param name Name of the permission to attach
-     * @param value Value of the permission
-     * @param ticks Amount of ticks to automatically remove this attachment
-     *     after
+     *               or disabled
+     * @param name   Name of the permission to attach
+     * @param value  Value of the permission
+     * @param ticks  Amount of ticks to automatically remove this attachment
+     *               after
      * @return The PermissionAttachment that was just created
      */
-    public PermissionAttachment addAttachment(Plugin plugin, String name, boolean value, int ticks);
+    PermissionAttachment addAttachment(Plugin plugin, String name, boolean value, int ticks);
 
     /**
      * Temporarily adds a new empty {@link PermissionAttachment} to this
      * object
      *
      * @param plugin Plugin responsible for this attachment, may not be null
-     *     or disabled
-     * @param ticks Amount of ticks to automatically remove this attachment
-     *     after
+     *               or disabled
+     * @param ticks  Amount of ticks to automatically remove this attachment
+     *               after
      * @return The PermissionAttachment that was just created
      */
-    public PermissionAttachment addAttachment(Plugin plugin, int ticks);
+    PermissionAttachment addAttachment(Plugin plugin, int ticks);
 
     /**
      * Removes the given {@link PermissionAttachment} from this object
      *
      * @param attachment Attachment to remove
      * @throws IllegalArgumentException Thrown when the specified attachment
-     *     isn't part of this object
+     *                                  isn't part of this object
      */
-    public void removeAttachment(PermissionAttachment attachment);
+    void removeAttachment(PermissionAttachment attachment);
 
     /**
      * Recalculates the permissions for this object, if the attachments have
@@ -110,7 +111,7 @@ public interface Permissible extends ServerOperator {
      * <p>
      * This should very rarely need to be called from a plugin.
      */
-    public void recalculatePermissions();
+    void recalculatePermissions();
 
     /**
      * Gets a set containing all of the permissions currently in effect by
@@ -118,5 +119,5 @@ public interface Permissible extends ServerOperator {
      *
      * @return Set of currently effective permissions
      */
-    public Set<PermissionAttachmentInfo> getEffectivePermissions();
+    Set<PermissionAttachmentInfo> getEffectivePermissions();
 }
diff --git a/src/main/java/org/bukkit/permissions/PermissibleBase.java b/src/main/java/org/bukkit/permissions/PermissibleBase.java
index 3b95061..65f905e 100644
--- a/src/main/java/org/bukkit/permissions/PermissibleBase.java
+++ b/src/main/java/org/bukkit/permissions/PermissibleBase.java
@@ -1,5 +1,8 @@
 package org.bukkit.permissions;
 
+import org.bukkit.Bukkit;
+import org.bukkit.plugin.Plugin;
+
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.LinkedList;
@@ -7,18 +10,18 @@ import java.util.List;
 import java.util.Map;
 import java.util.Set;
 import java.util.logging.Level;
-import org.bukkit.Bukkit;
-import org.bukkit.plugin.Plugin;
 
 /**
  * Base Permissible for use in any Permissible object via proxy or extension
  */
 public class PermissibleBase implements Permissible {
-    private ServerOperator opable = null;
-    private Permissible parent = this;
+
     private final List<PermissionAttachment> attachments = new LinkedList<PermissionAttachment>();
     private final Map<String, PermissionAttachmentInfo> permissions = new HashMap<String, PermissionAttachmentInfo>();
 
+    private ServerOperator opable = null;
+    private Permissible parent = this;
+
     public PermissibleBase(ServerOperator opable) {
         this.opable = opable;
 
@@ -30,19 +33,15 @@ public class PermissibleBase implements Permissible {
     }
 
     public boolean isOp() {
-        if (opable == null) {
-            return false;
-        } else {
-            return opable.isOp();
-        }
+        return opable != null && opable.isOp();
     }
 
     public void setOp(boolean value) {
         if (opable == null) {
             throw new UnsupportedOperationException("Cannot change op value as no ServerOperator is set");
-        } else {
-            opable.setOp(value);
         }
+
+        opable.setOp(value);
     }
 
     public boolean isPermissionSet(String name) {
@@ -68,16 +67,15 @@ public class PermissibleBase implements Permissible {
 
         String name = inName.toLowerCase();
 
-        if (isPermissionSet(name)) {
+        if (!isPermissionSet(name)) {
             return permissions.get(name).getValue();
-        } else {
-            Permission perm = Bukkit.getServer().getPluginManager().getPermission(name);
+        }
 
-            if (perm != null) {
-                return perm.getDefault().getValue(isOp());
-            } else {
-                return Permission.DEFAULT_PERMISSION.getValue(isOp());
-            }
+        Permission perm = Bukkit.getServer().getPluginManager().getPermission(name);
+        if (perm != null) {
+            return perm.getDefault().getValue(isOp());
+        } else {
+            return Permission.DEFAULT_PERMISSION.getValue(isOp());
         }
     }
 
@@ -87,10 +85,10 @@ public class PermissibleBase implements Permissible {
         }
 
         String name = perm.getName().toLowerCase();
-
         if (isPermissionSet(name)) {
             return permissions.get(name).getValue();
         }
+
         return perm.getDefault().getValue(isOp());
     }
 
@@ -105,9 +103,7 @@ public class PermissibleBase implements Permissible {
 
         PermissionAttachment result = addAttachment(plugin);
         result.setPermission(name, value);
-
         recalculatePermissions();
-
         return result;
     }
 
@@ -119,10 +115,8 @@ public class PermissibleBase implements Permissible {
         }
 
         PermissionAttachment result = new PermissionAttachment(plugin, parent);
-
         attachments.add(result);
         recalculatePermissions();
-
         return result;
     }
 
@@ -131,18 +125,18 @@ public class PermissibleBase implements Permissible {
             throw new IllegalArgumentException("Attachment cannot be null");
         }
 
-        if (attachments.contains(attachment)) {
-            attachments.remove(attachment);
-            PermissionRemovedExecutor ex = attachment.getRemovalCallback();
+        if (!attachments.contains(attachment)) {
+            throw new IllegalArgumentException("Given attachment is not part of Permissible object " + parent);
+        }
 
-            if (ex != null) {
-                ex.attachmentRemoved(attachment);
-            }
+        attachments.remove(attachment);
+        PermissionRemovedExecutor ex = attachment.getRemovalCallback();
 
-            recalculatePermissions();
-        } else {
-            throw new IllegalArgumentException("Given attachment is not part of Permissible object " + parent);
+        if (ex != null) {
+            ex.attachmentRemoved(attachment);
         }
+
+        recalculatePermissions();
     }
 
     public void recalculatePermissions() {
@@ -171,7 +165,6 @@ public class PermissibleBase implements Permissible {
 
         Bukkit.getServer().getPluginManager().unsubscribeFromDefaultPerms(false, parent);
         Bukkit.getServer().getPluginManager().unsubscribeFromDefaultPerms(true, parent);
-
         permissions.clear();
     }
 
@@ -202,7 +195,6 @@ public class PermissibleBase implements Permissible {
         }
 
         PermissionAttachment result = addAttachment(plugin, ticks);
-
         if (result != null) {
             result.setPermission(name, value);
         }
@@ -218,14 +210,13 @@ public class PermissibleBase implements Permissible {
         }
 
         PermissionAttachment result = addAttachment(plugin);
-
         if (Bukkit.getServer().getScheduler().scheduleSyncDelayedTask(plugin, new RemoveAttachmentRunnable(result), ticks) == -1) {
             Bukkit.getServer().getLogger().log(Level.WARNING, "Could not add PermissionAttachment to " + parent + " for plugin " + plugin.getDescription().getFullName() + ": Scheduler returned -1");
             result.remove();
             return null;
-        } else {
-            return result;
         }
+
+        return result;
     }
 
     public Set<PermissionAttachmentInfo> getEffectivePermissions() {
@@ -233,6 +224,7 @@ public class PermissibleBase implements Permissible {
     }
 
     private class RemoveAttachmentRunnable implements Runnable {
+
         private PermissionAttachment attachment;
 
         public RemoveAttachmentRunnable(PermissionAttachment attachment) {
diff --git a/src/main/java/org/bukkit/permissions/Permission.java b/src/main/java/org/bukkit/permissions/Permission.java
index 26f6f2b..cc49ede 100644
--- a/src/main/java/org/bukkit/permissions/Permission.java
+++ b/src/main/java/org/bukkit/permissions/Permission.java
@@ -1,5 +1,9 @@
 package org.bukkit.permissions;
 
+import org.apache.commons.lang.Validate;
+import org.bukkit.Bukkit;
+import org.bukkit.plugin.PluginManager;
+
 import java.util.ArrayList;
 import java.util.LinkedHashMap;
 import java.util.List;
@@ -7,19 +11,17 @@ import java.util.Map;
 import java.util.Set;
 import java.util.logging.Level;
 
-import org.apache.commons.lang.Validate;
-import org.bukkit.Bukkit;
-import org.bukkit.plugin.PluginManager;
-
 /**
  * Represents a unique permission that may be attached to a {@link
  * Permissible}
  */
 public class Permission {
+
     public static final PermissionDefault DEFAULT_PERMISSION = PermissionDefault.OP;
 
     private final String name;
     private final Map<String, Boolean> children = new LinkedHashMap<String, Boolean>();
+
     private PermissionDefault defaultValue = DEFAULT_PERMISSION;
     private String description;
 
@@ -67,6 +69,140 @@ public class Permission {
     }
 
     /**
+     * Loads a list of Permissions from a map of data, usually used from
+     * retrieval from a yaml file.
+     * <p>
+     * The data may contain a list of name:data, where the data contains the
+     * following keys:
+     * <ul>
+     * <li>default: Boolean true or false. If not specified, false.
+     * <li>children: Map<String, Boolean> of child permissions. If not
+     * specified, empty list.
+     * <li>description: Short string containing a very small description of
+     * this description. If not specified, empty string.
+     * </ul>
+     *
+     * @param data  Map of permissions
+     * @param error An error message to show if a permission is invalid.
+     * @param def   Default permission value to use if missing
+     * @return Permission object
+     */
+    public static List<Permission> loadPermissions(Map<?, ?> data, String error, PermissionDefault def) {
+        List<Permission> result = new ArrayList<Permission>();
+        for (Map.Entry<?, ?> entry : data.entrySet()) {
+            try {
+                result.add(Permission.loadPermission(entry.getKey().toString(), (Map<?, ?>) entry.getValue(), def, result));
+            } catch (Throwable ex) {
+                Bukkit.getServer().getLogger().log(Level.SEVERE, String.format(error, entry.getKey()), ex);
+            }
+        }
+
+        return result;
+    }
+
+    /**
+     * Loads a Permission from a map of data, usually used from retrieval from
+     * a yaml file.
+     * <p>
+     * The data may contain the following keys:
+     * <ul>
+     * <li>default: Boolean true or false. If not specified, false.
+     * <li>children: Map<String, Boolean> of child permissions. If not
+     * specified, empty list.
+     * <li>description: Short string containing a very small description of
+     * this description. If not specified, empty string.
+     *
+     * @param name Name of the permission
+     * @param data Map of keys
+     * @return Permission object
+     */
+    public static Permission loadPermission(String name, Map<String, Object> data) {
+        return loadPermission(name, data, DEFAULT_PERMISSION, null);
+    }
+
+    /**
+     * Loads a Permission from a map of data, usually used from retrieval from
+     * a yaml file.
+     * <p>
+     * The data may contain the following keys:
+     * <ul>
+     * <li>default: Boolean true or false. If not specified, false.
+     * <li>children: Map<String, Boolean> of child permissions. If not
+     * specified, empty list.
+     * <li>description: Short string containing a very small description of
+     * this description. If not specified, empty string.
+     * </ul>
+     *
+     * @param name   Name of the permission
+     * @param data   Map of keys
+     * @param def    Default permission value to use if not set
+     * @param output A list to append any created child-Permissions to, may be null
+     * @return Permission object
+     */
+    public static Permission loadPermission(String name, Map<?, ?> data, PermissionDefault def, List<Permission> output) {
+        Validate.notNull(name, "Name cannot be null");
+        Validate.notNull(data, "Data cannot be null");
+
+        String desc = null;
+        Map<String, Boolean> children = null;
+
+        if (data.get("default") != null) {
+            PermissionDefault value = PermissionDefault.getByName(data.get("default").toString());
+            if (value != null) {
+                def = value;
+            } else {
+                throw new IllegalArgumentException("'default' key contained unknown value");
+            }
+        }
+
+        if (data.get("children") != null) {
+            Object childrenNode = data.get("children");
+            if (childrenNode instanceof Iterable) {
+                children = new LinkedHashMap<String, Boolean>();
+                for (Object child : (Iterable<?>) childrenNode) {
+                    if (child != null) {
+                        children.put(child.toString(), Boolean.TRUE);
+                    }
+                }
+            } else if (childrenNode instanceof Map) {
+                children = extractChildren((Map<?, ?>) childrenNode, name, def, output);
+            } else {
+                throw new IllegalArgumentException("'children' key is of wrong type");
+            }
+        }
+
+        if (data.get("description") != null) {
+            desc = data.get("description").toString();
+        }
+
+        return new Permission(name, desc, def, children);
+    }
+
+    private static Map<String, Boolean> extractChildren(Map<?, ?> input, String name, PermissionDefault def, List<Permission> output) {
+        Map<String, Boolean> children = new LinkedHashMap<String, Boolean>();
+        for (Map.Entry<?, ?> entry : input.entrySet()) {
+            if ((entry.getValue() instanceof Boolean)) {
+                children.put(entry.getKey().toString(), (Boolean) entry.getValue());
+            } else if ((entry.getValue() instanceof Map)) {
+                try {
+                    Permission perm = loadPermission(entry.getKey().toString(), (Map<?, ?>) entry.getValue(), def, output);
+                    children.put(perm.getName(), Boolean.TRUE);
+
+                    if (output != null) {
+                        output.add(perm);
+                    }
+                } catch (Throwable ex) {
+                    throw new IllegalArgumentException("Permission node '" + entry.getKey().toString() + "' in child of " + name + " is invalid", ex);
+                }
+            } else {
+                throw new IllegalArgumentException("Child '" + entry.getKey().toString() + "' contains invalid value");
+            }
+        }
+
+        return children;
+    }
+
+    /**
      * Returns the unique fully qualified name of this Permission
      *
      * @return Fully qualified name
@@ -133,11 +269,7 @@ public class Permission {
      * @param value The new description to set
      */
     public void setDescription(String value) {
-        if (value == null) {
-            description = "";
-        } else {
-            description = value;
-        }
+        this.description = (value == null) ? "" : value;
     }
 
     /**
@@ -160,11 +292,9 @@ public class Permission {
      */
     public void recalculatePermissibles() {
         Set<Permissible> perms = getPermissibles();
-
         Bukkit.getServer().getPluginManager().recalculatePermissionDefaults(this);
-
-        for (Permissible p : perms) {
-            p.recalculatePermissions();
+        for (Permissible permissible : perms) {
+            permissible.recalculatePermissions();
         }
     }
 
@@ -174,7 +304,7 @@ public class Permission {
      * If the parent permission does not exist, it will be created and
      * registered.
      *
-     * @param name Name of the parent permission
+     * @param name  Name of the parent permission
      * @param value The value to set this permission to
      * @return Parent permission it created or loaded
      */
@@ -183,161 +313,23 @@ public class Permission {
         String lname = name.toLowerCase();
 
         Permission perm = pm.getPermission(lname);
-
         if (perm == null) {
             perm = new Permission(lname);
             pm.addPermission(perm);
         }
 
         addParent(perm, value);
-
         return perm;
     }
 
     /**
      * Adds this permission to the specified parent permission.
      *
-     * @param perm Parent permission to register with
+     * @param perm  Parent permission to register with
      * @param value The value to set this permission to
      */
     public void addParent(Permission perm, boolean value) {
         perm.getChildren().put(getName(), value);
         perm.recalculatePermissibles();
     }
-
-    /**
-     * Loads a list of Permissions from a map of data, usually used from
-     * retrieval from a yaml file.
-     * <p>
-     * The data may contain a list of name:data, where the data contains the
-     * following keys:
-     * <ul>
-     * <li>default: Boolean true or false. If not specified, false.
-     * <li>children: Map<String, Boolean> of child permissions. If not
-     *     specified, empty list.
-     * <li>description: Short string containing a very small description of
-     *     this description. If not specified, empty string.
-     * </ul>
-     *
-     * @param data Map of permissions
-     * @param error An error message to show if a permission is invalid.
-     * @param def Default permission value to use if missing
-     * @return Permission object
-     */
-    public static List<Permission> loadPermissions(Map<?, ?> data, String error, PermissionDefault def) {
-        List<Permission> result = new ArrayList<Permission>();
-
-        for (Map.Entry<?, ?> entry : data.entrySet()) {
-            try {
-                result.add(Permission.loadPermission(entry.getKey().toString(), (Map<?, ?>) entry.getValue(), def, result));
-            } catch (Throwable ex) {
-                Bukkit.getServer().getLogger().log(Level.SEVERE, String.format(error, entry.getKey()), ex);
-            }
-        }
-
-        return result;
-    }
-
-    /**
-     * Loads a Permission from a map of data, usually used from retrieval from
-     * a yaml file.
-     * <p>
-     * The data may contain the following keys:
-     * <ul>
-     * <li>default: Boolean true or false. If not specified, false.
-     * <li>children: Map<String, Boolean> of child permissions. If not
-     *     specified, empty list.
-     * <li>description: Short string containing a very small description of
-     *     this description. If not specified, empty string.
-     *
-     * @param name Name of the permission
-     * @param data Map of keys
-     * @return Permission object
-     */
-    public static Permission loadPermission(String name, Map<String, Object> data) {
-        return loadPermission(name, data, DEFAULT_PERMISSION, null);
-    }
-
-    /**
-     * Loads a Permission from a map of data, usually used from retrieval from
-     * a yaml file.
-     * <p>
-     * The data may contain the following keys:
-     * <ul>
-     * <li>default: Boolean true or false. If not specified, false.
-     * <li>children: Map<String, Boolean> of child permissions. If not
-     *     specified, empty list.
-     * <li>description: Short string containing a very small description of
-     *     this description. If not specified, empty string.
-     * </ul>
-     *
-     * @param name Name of the permission
-     * @param data Map of keys
-     * @param def Default permission value to use if not set
-     * @param output A list to append any created child-Permissions to, may be null
-     * @return Permission object
-     */
-    public static Permission loadPermission(String name, Map<?, ?> data, PermissionDefault def, List<Permission> output) {
-        Validate.notNull(name, "Name cannot be null");
-        Validate.notNull(data, "Data cannot be null");
-
-        String desc = null;
-        Map<String, Boolean> children = null;
-
-        if (data.get("default") != null) {
-            PermissionDefault value = PermissionDefault.getByName(data.get("default").toString());
-            if (value != null) {
-                def = value;
-            } else {
-                throw new IllegalArgumentException("'default' key contained unknown value");
-            }
-        }
-
-        if (data.get("children") != null) {
-            Object childrenNode = data.get("children");
-            if (childrenNode instanceof Iterable) {
-                children = new LinkedHashMap<String, Boolean>();
-                for (Object child : (Iterable<?>) childrenNode) {
-                    if (child != null) {
-                        children.put(child.toString(), Boolean.TRUE);
-                    }
-                }
-            } else if (childrenNode instanceof Map) {
-                children = extractChildren((Map<?,?>) childrenNode, name, def, output);
-            } else {
-                throw new IllegalArgumentException("'children' key is of wrong type");
-            }
-        }
-
-        if (data.get("description") != null) {
-            desc = data.get("description").toString();
-        }
-
-        return new Permission(name, desc, def, children);
-    }
-
-    private static Map<String, Boolean> extractChildren(Map<?, ?> input, String name, PermissionDefault def, List<Permission> output) {
-        Map<String, Boolean> children = new LinkedHashMap<String, Boolean>();
-
-        for (Map.Entry<?, ?> entry : input.entrySet()) {
-            if ((entry.getValue() instanceof Boolean)) {
-                children.put(entry.getKey().toString(), (Boolean) entry.getValue());
-            } else if ((entry.getValue() instanceof Map)) {
-                try {
-                    Permission perm = loadPermission(entry.getKey().toString(), (Map<?, ?>) entry.getValue(), def, output);
-                    children.put(perm.getName(), Boolean.TRUE);
-
-                    if (output != null) {
-                        output.add(perm);
-                    }
-                } catch (Throwable ex) {
-                    throw new IllegalArgumentException("Permission node '" + entry.getKey().toString() + "' in child of " + name + " is invalid", ex);
-                }
-            } else {
-                throw new IllegalArgumentException("Child '" + entry.getKey().toString() + "' contains invalid value");
-            }
-        }
-
-        return children;
-    }
 }
diff --git a/src/main/java/org/bukkit/permissions/PermissionAttachment.java b/src/main/java/org/bukkit/permissions/PermissionAttachment.java
index b2a44d5..b136e09 100644
--- a/src/main/java/org/bukkit/permissions/PermissionAttachment.java
+++ b/src/main/java/org/bukkit/permissions/PermissionAttachment.java
@@ -1,19 +1,22 @@
 package org.bukkit.permissions;
 
+import org.bukkit.plugin.Plugin;
+
 import java.util.LinkedHashMap;
 import java.util.Map;
-import org.bukkit.plugin.Plugin;
 
 /**
  * Holds information about a permission attachment on a {@link Permissible}
  * object
  */
 public class PermissionAttachment {
-    private PermissionRemovedExecutor removed;
+
     private final Map<String, Boolean> permissions = new LinkedHashMap<String, Boolean>();
     private final Permissible permissible;
     private final Plugin plugin;
 
+    private PermissionRemovedExecutor removed;
+
     public PermissionAttachment(Plugin plugin, Permissible Permissible) {
         if (plugin == null) {
             throw new IllegalArgumentException("Plugin cannot be null");
@@ -35,16 +38,6 @@ public class PermissionAttachment {
     }
 
     /**
-     * Sets an object to be called for when this attachment is removed from a
-     * {@link Permissible}. May be null.
-     *
-     * @param ex Object to be called when this is removed
-     */
-    public void setRemovalCallback(PermissionRemovedExecutor ex) {
-        removed = ex;
-    }
-
-    /**
      * Gets the class that was previously set to be called when this
      * attachment was removed from a {@link Permissible}. May be null.
      *
@@ -55,6 +48,16 @@ public class PermissionAttachment {
     }
 
     /**
+     * Sets an object to be called for when this attachment is removed from a
+     * {@link Permissible}. May be null.
+     *
+     * @param ex Object to be called when this is removed
+     */
+    public void setRemovalCallback(PermissionRemovedExecutor ex) {
+        removed = ex;
+    }
+
+    /**
      * Gets the Permissible that this is attached to
      *
      * @return Permissible containing this attachment
@@ -79,7 +82,7 @@ public class PermissionAttachment {
     /**
      * Sets a permission to the given value, by its fully qualified name
      *
-     * @param name Name of the permission
+     * @param name  Name of the permission
      * @param value New value of the permission
      */
     public void setPermission(String name, boolean value) {
@@ -90,7 +93,7 @@ public class PermissionAttachment {
     /**
      * Sets a permission to the given value
      *
-     * @param perm Permission to set
+     * @param perm  Permission to set
      * @param value New value of the permission
      */
     public void setPermission(Permission perm, boolean value) {
@@ -126,7 +129,7 @@ public class PermissionAttachment {
      * Removes this attachment from its registered {@link Permissible}
      *
      * @return true if the permissible was removed successfully, false if it
-     *     did not exist
+     * did not exist
      */
     public boolean remove() {
         try {
diff --git a/src/main/java/org/bukkit/permissions/PermissionAttachmentInfo.java b/src/main/java/org/bukkit/permissions/PermissionAttachmentInfo.java
index 8e8e335..6041931 100644
--- a/src/main/java/org/bukkit/permissions/PermissionAttachmentInfo.java
+++ b/src/main/java/org/bukkit/permissions/PermissionAttachmentInfo.java
@@ -5,6 +5,7 @@ package org.bukkit.permissions;
  * provides it
  */
 public class PermissionAttachmentInfo {
+
     private final Permissible permissible;
     private final String permission;
     private final PermissionAttachment attachment;
diff --git a/src/main/java/org/bukkit/permissions/PermissionDefault.java b/src/main/java/org/bukkit/permissions/PermissionDefault.java
index 045e733..5dfbebb 100644
--- a/src/main/java/org/bukkit/permissions/PermissionDefault.java
+++ b/src/main/java/org/bukkit/permissions/PermissionDefault.java
@@ -7,19 +7,39 @@ import java.util.Map;
  * Represents the possible default values for permissions
  */
 public enum PermissionDefault {
+
     TRUE("true"),
     FALSE("false"),
     OP("op", "isop", "operator", "isoperator", "admin", "isadmin"),
     NOT_OP("!op", "notop", "!operator", "notoperator", "!admin", "notadmin");
 
-    private final String[] names;
     private final static Map<String, PermissionDefault> lookup = new HashMap<String, PermissionDefault>();
 
+    static {
+        for (PermissionDefault value : values()) {
+            for (String name : value.names) {
+                lookup.put(name, value);
+            }
+        }
+    }
+
+    private final String[] names;
+
     private PermissionDefault(String... names) {
         this.names = names;
     }
 
     /**
+     * Looks up a PermissionDefault by name
+     *
+     * @param name Name of the default
+     * @return Specified value, or null if not found
+     */
+    public static PermissionDefault getByName(String name) {
+        return lookup.get(name.toLowerCase().replaceAll("[^a-z!]", ""));
+    }
+
+    /**
      * Calculates the value of this PermissionDefault for the given operator
      * value
      *
@@ -28,39 +48,21 @@ public enum PermissionDefault {
      */
     public boolean getValue(boolean op) {
         switch (this) {
-        case TRUE:
-            return true;
-        case FALSE:
-            return false;
-        case OP:
-            return op;
-        case NOT_OP:
-            return !op;
-        default:
-            return false;
+            case TRUE:
+                return true;
+            case FALSE:
+                return false;
+            case OP:
+                return op;
+            case NOT_OP:
+                return !op;
+            default:
+                return false;
         }
     }
 
-    /**
-     * Looks up a PermissionDefault by name
-     *
-     * @param name Name of the default
-     * @return Specified value, or null if not found
-     */
-    public static PermissionDefault getByName(String name) {
-        return lookup.get(name.toLowerCase().replaceAll("[^a-z!]", ""));
-    }
-
     @Override
     public String toString() {
         return names[0];
     }
-
-    static {
-        for (PermissionDefault value : values()) {
-            for (String name : value.names) {
-                lookup.put(name, value);
-            }
-        }
-    }
 }
diff --git a/src/main/java/org/bukkit/permissions/PermissionRemovedExecutor.java b/src/main/java/org/bukkit/permissions/PermissionRemovedExecutor.java
index b13d008..f08ad96 100644
--- a/src/main/java/org/bukkit/permissions/PermissionRemovedExecutor.java
+++ b/src/main/java/org/bukkit/permissions/PermissionRemovedExecutor.java
@@ -12,5 +12,5 @@ public interface PermissionRemovedExecutor {
      *
      * @param attachment Attachment which was removed
      */
-    public void attachmentRemoved(PermissionAttachment attachment);
+    void attachmentRemoved(PermissionAttachment attachment);
 }
diff --git a/src/main/java/org/bukkit/permissions/ServerOperator.java b/src/main/java/org/bukkit/permissions/ServerOperator.java
index 26ed243..cb40479 100644
--- a/src/main/java/org/bukkit/permissions/ServerOperator.java
+++ b/src/main/java/org/bukkit/permissions/ServerOperator.java
@@ -13,12 +13,12 @@ public interface ServerOperator {
      *
      * @return true if this is an operator, otherwise false
      */
-    public boolean isOp();
+    boolean isOp();
 
     /**
      * Sets the operator status of this object
      *
      * @param value New operator value
      */
-    public void setOp(boolean value);
+    void setOp(boolean value);
 }
diff --git a/src/main/java/org/bukkit/plugin/AuthorNagException.java b/src/main/java/org/bukkit/plugin/AuthorNagException.java
index 6565a44..aae84e3 100644
--- a/src/main/java/org/bukkit/plugin/AuthorNagException.java
+++ b/src/main/java/org/bukkit/plugin/AuthorNagException.java
@@ -2,6 +2,7 @@ package org.bukkit.plugin;
 
 @SuppressWarnings("serial")
 public class AuthorNagException extends RuntimeException {
+
     private final String message;
 
     /**
diff --git a/src/main/java/org/bukkit/plugin/EventExecutor.java b/src/main/java/org/bukkit/plugin/EventExecutor.java
index 3b2c99e..0428e64 100644
--- a/src/main/java/org/bukkit/plugin/EventExecutor.java
+++ b/src/main/java/org/bukkit/plugin/EventExecutor.java
@@ -8,5 +8,6 @@ import org.bukkit.event.Listener;
  * Interface which defines the class for event call backs to plugins
  */
 public interface EventExecutor {
-    public void execute(Listener listener, Event event) throws EventException;
+
+    void execute(Listener listener, Event event) throws EventException;
 }
diff --git a/src/main/java/org/bukkit/plugin/IllegalPluginAccessException.java b/src/main/java/org/bukkit/plugin/IllegalPluginAccessException.java
index b25447d..9546f5e 100644
--- a/src/main/java/org/bukkit/plugin/IllegalPluginAccessException.java
+++ b/src/main/java/org/bukkit/plugin/IllegalPluginAccessException.java
@@ -11,7 +11,9 @@ public class IllegalPluginAccessException extends RuntimeException {
      * Creates a new instance of <code>IllegalPluginAccessException</code>
      * without detail message.
      */
-    public IllegalPluginAccessException() {}
+    public IllegalPluginAccessException() {
+
+    }
 
     /**
      * Constructs an instance of <code>IllegalPluginAccessException</code>
diff --git a/src/main/java/org/bukkit/plugin/InvalidDescriptionException.java b/src/main/java/org/bukkit/plugin/InvalidDescriptionException.java
index 0a77c2e..4582629 100644
--- a/src/main/java/org/bukkit/plugin/InvalidDescriptionException.java
+++ b/src/main/java/org/bukkit/plugin/InvalidDescriptionException.java
@@ -4,6 +4,7 @@ package org.bukkit.plugin;
  * Thrown when attempting to load an invalid PluginDescriptionFile
  */
 public class InvalidDescriptionException extends Exception {
+
     private static final long serialVersionUID = 5721389122281775896L;
 
     /**
@@ -11,7 +12,7 @@ public class InvalidDescriptionException extends Exception {
      * Exception
      *
      * @param message Brief message explaining the cause of the exception
-     * @param cause Exception that triggered this Exception
+     * @param cause   Exception that triggered this Exception
      */
     public InvalidDescriptionException(final Throwable cause, final String message) {
         super(message, cause);
diff --git a/src/main/java/org/bukkit/plugin/InvalidPluginException.java b/src/main/java/org/bukkit/plugin/InvalidPluginException.java
index 7ddf7b6..7ca918d 100644
--- a/src/main/java/org/bukkit/plugin/InvalidPluginException.java
+++ b/src/main/java/org/bukkit/plugin/InvalidPluginException.java
@@ -4,6 +4,7 @@ package org.bukkit.plugin;
  * Thrown when attempting to load an invalid Plugin file
  */
 public class InvalidPluginException extends Exception {
+
     private static final long serialVersionUID = -8242141640709409544L;
 
     /**
@@ -27,10 +28,10 @@ public class InvalidPluginException extends Exception {
      * message and cause.
      *
      * @param message the detail message (which is saved for later retrieval
-     *     by the getMessage() method).
-     * @param cause the cause (which is saved for later retrieval by the
-     *     getCause() method). (A null value is permitted, and indicates that
-     *     the cause is nonexistent or unknown.)
+     *                by the getMessage() method).
+     * @param cause   the cause (which is saved for later retrieval by the
+     *                getCause() method). (A null value is permitted, and indicates that
+     *                the cause is nonexistent or unknown.)
      */
     public InvalidPluginException(final String message, final Throwable cause) {
         super(message, cause);
@@ -41,7 +42,7 @@ public class InvalidPluginException extends Exception {
      * message
      *
      * @param message TThe detail message is saved for later retrieval by the
-     *     getMessage() method.
+     *                getMessage() method.
      */
     public InvalidPluginException(final String message) {
         super(message);
diff --git a/src/main/java/org/bukkit/plugin/Plugin.java b/src/main/java/org/bukkit/plugin/Plugin.java
index 7bdc809..8436f72 100644
--- a/src/main/java/org/bukkit/plugin/Plugin.java
+++ b/src/main/java/org/bukkit/plugin/Plugin.java
@@ -1,15 +1,14 @@
 package org.bukkit.plugin;
 
-import java.io.File;
-import java.io.InputStream;
-import java.util.logging.Logger;
-
+import com.avaje.ebean.EbeanServer;
 import org.bukkit.Server;
 import org.bukkit.command.TabExecutor;
 import org.bukkit.configuration.file.FileConfiguration;
 import org.bukkit.generator.ChunkGenerator;
 
-import com.avaje.ebean.EbeanServer;
+import java.io.File;
+import java.io.InputStream;
+import java.util.logging.Logger;
 
 /**
  * Represents a Plugin
@@ -17,20 +16,21 @@ import com.avaje.ebean.EbeanServer;
  * The use of {@link PluginBase} is recommended for actual Implementation
  */
 public interface Plugin extends TabExecutor {
+
     /**
      * Returns the folder that the plugin data's files are located in. The
      * folder may not yet exist.
      *
      * @return The folder
      */
-    public File getDataFolder();
+    File getDataFolder();
 
     /**
      * Returns the plugin.yaml file containing the details for this plugin
      *
      * @return Contents of the plugin.yaml file
      */
-    public PluginDescriptionFile getDescription();
+    PluginDescriptionFile getDescription();
 
     /**
      * Gets a {@link FileConfiguration} for this plugin, read through
@@ -41,7 +41,7 @@ public interface Plugin extends TabExecutor {
      *
      * @return Plugin configuration
      */
-    public FileConfiguration getConfig();
+    FileConfiguration getConfig();
 
     /**
      * Gets an embedded resource in this plugin
@@ -49,12 +49,12 @@ public interface Plugin extends TabExecutor {
      * @param filename Filename of the resource
      * @return File if found, otherwise null
      */
-    public InputStream getResource(String filename);
+    InputStream getResource(String filename);
 
     /**
      * Saves the {@link FileConfiguration} retrievable by {@link #getConfig()}.
      */
-    public void saveConfig();
+    void saveConfig();
 
     /**
      * Saves the raw contents of the default config.yml file to the location
@@ -62,7 +62,7 @@ public interface Plugin extends TabExecutor {
      * embedded in the plugin, an empty config.yml file is saved. This should
      * fail silently if the config.yml already exists.
      */
-    public void saveDefaultConfig();
+    void saveDefaultConfig();
 
     /**
      * Saves the raw contents of any resource embedded with a plugin's .jar
@@ -72,32 +72,32 @@ public interface Plugin extends TabExecutor {
      * hierarchy as the .jar file (subdirectories are preserved).
      *
      * @param resourcePath the embedded resource path to look for within the
-     *     plugin's .jar file. (No preceding slash).
-     * @param replace if true, the embedded resource will overwrite the
-     *     contents of an existing file.
+     *                     plugin's .jar file. (No preceding slash).
+     * @param replace      if true, the embedded resource will overwrite the
+     *                     contents of an existing file.
      * @throws IllegalArgumentException if the resource path is null, empty,
-     *     or points to a nonexistent resource.
+     *                                  or points to a nonexistent resource.
      */
-    public void saveResource(String resourcePath, boolean replace);
+    void saveResource(String resourcePath, boolean replace);
 
     /**
      * Discards any data in {@link #getConfig()} and reloads from disk.
      */
-    public void reloadConfig();
+    void reloadConfig();
 
     /**
      * Gets the associated PluginLoader responsible for this plugin
      *
      * @return PluginLoader that controls this plugin
      */
-    public PluginLoader getPluginLoader();
+    PluginLoader getPluginLoader();
 
     /**
      * Returns the Server instance currently running this plugin
      *
      * @return Server running this plugin
      */
-    public Server getServer();
+    Server getServer();
 
     /**
      * Returns a value indicating whether or not this plugin is currently
@@ -105,12 +105,12 @@ public interface Plugin extends TabExecutor {
      *
      * @return true if this plugin is enabled, otherwise false
      */
-    public boolean isEnabled();
+    boolean isEnabled();
 
     /**
      * Called when this plugin is disabled
      */
-    public void onDisable();
+    void onDisable();
 
     /**
      * Called after a plugin is loaded but before it has been enabled.
@@ -118,26 +118,26 @@ public interface Plugin extends TabExecutor {
      * When mulitple plugins are loaded, the onLoad() for all plugins is
      * called before any onEnable() is called.
      */
-    public void onLoad();
+    void onLoad();
 
     /**
      * Called when this plugin is enabled
      */
-    public void onEnable();
+    void onEnable();
 
     /**
      * Simple boolean if we can still nag to the logs about things
      *
      * @return boolean whether we can nag
      */
-    public boolean isNaggable();
+    boolean isNaggable();
 
     /**
      * Set naggable state
      *
      * @param canNag is this plugin still naggable?
      */
-    public void setNaggable(boolean canNag);
+    void setNaggable(boolean canNag);
 
     /**
      * Gets the {@link EbeanServer} tied to this plugin. This will only be
@@ -155,18 +155,18 @@ public interface Plugin extends TabExecutor {
      *
      * @return ebean server instance or null if not enabled
      */
-    public EbeanServer getDatabase();
+    EbeanServer getDatabase();
 
     /**
      * Gets a {@link ChunkGenerator} for use in a default world, as specified
      * in the server configuration
      *
      * @param worldName Name of the world that this will be applied to
-     * @param id Unique ID, if any, that was specified to indicate which
-     *     generator was requested
+     * @param id        Unique ID, if any, that was specified to indicate which
+     *                  generator was requested
      * @return ChunkGenerator for use in the default world generation
      */
-    public ChunkGenerator getDefaultWorldGenerator(String worldName, String id);
+    ChunkGenerator getDefaultWorldGenerator(String worldName, String id);
 
     /**
      * Returns the plugin logger associated with this server's logger. The
@@ -175,7 +175,7 @@ public interface Plugin extends TabExecutor {
      *
      * @return Logger associated with this plugin
      */
-    public Logger getLogger();
+    Logger getLogger();
 
     /**
      * Returns the name of the plugin.
@@ -185,5 +185,5 @@ public interface Plugin extends TabExecutor {
      *
      * @return name of the plugin
      */
-    public String getName();
+    String getName();
 }
diff --git a/src/main/java/org/bukkit/plugin/PluginAwareness.java b/src/main/java/org/bukkit/plugin/PluginAwareness.java
index ddb47b7..253b56c 100644
--- a/src/main/java/org/bukkit/plugin/PluginAwareness.java
+++ b/src/main/java/org/bukkit/plugin/PluginAwareness.java
@@ -1,9 +1,9 @@
 package org.bukkit.plugin;
 
-import java.util.Set;
-
 import org.bukkit.plugin.java.JavaPlugin;
 
+import java.util.Set;
+
 /**
  * Represents a concept that a plugin is aware of.
  * <p>
@@ -11,19 +11,19 @@ import org.bukkit.plugin.java.JavaPlugin;
  * instance, but must be immutable.
  */
 public interface PluginAwareness {
+
     /**
      * Each entry here represents a particular plugin's awareness. These can
      * be checked by using {@link PluginDescriptionFile#getAwareness()}.{@link
      * Set#contains(Object) contains(flag)}.
      */
-    public enum Flags implements PluginAwareness {
+    enum Flags implements PluginAwareness {
         /**
          * This specifies that all (text) resources stored in a plugin's jar
          * use UTF-8 encoding.
          *
          * @see JavaPlugin#getTextResource(String)
          */
-        UTF8,
-        ;
+        UTF8
     }
 }
diff --git a/src/main/java/org/bukkit/plugin/PluginBase.java b/src/main/java/org/bukkit/plugin/PluginBase.java
index 6031af1..c73a6e3 100644
--- a/src/main/java/org/bukkit/plugin/PluginBase.java
+++ b/src/main/java/org/bukkit/plugin/PluginBase.java
@@ -7,6 +7,7 @@ package org.bukkit.plugin;
  * org.bukkit.plugin.java.JavaPlugin}
  */
 public abstract class PluginBase implements Plugin {
+
     @Override
     public final int hashCode() {
         return getName().hashCode();
@@ -17,12 +18,15 @@ public abstract class PluginBase implements Plugin {
         if (this == obj) {
             return true;
         }
+
         if (obj == null) {
             return false;
         }
+
         if (!(obj instanceof Plugin)) {
             return false;
         }
+
         return getName().equals(((Plugin) obj).getName());
     }
 
diff --git a/src/main/java/org/bukkit/plugin/PluginDescriptionFile.java b/src/main/java/org/bukkit/plugin/PluginDescriptionFile.java
index 0fd966c..6cb14de 100644
--- a/src/main/java/org/bukkit/plugin/PluginDescriptionFile.java
+++ b/src/main/java/org/bukkit/plugin/PluginDescriptionFile.java
@@ -1,30 +1,30 @@
 package org.bukkit.plugin;
 
-import java.io.InputStream;
-import java.io.Reader;
-import java.io.Writer;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-
+import com.google.common.collect.ImmutableList;
+import com.google.common.collect.ImmutableMap;
+import com.google.common.collect.ImmutableSet;
+import org.bukkit.command.Command;
 import org.bukkit.command.CommandExecutor;
+import org.bukkit.command.CommandSender;
 import org.bukkit.command.PluginCommand;
-import org.bukkit.plugin.Plugin;
-import org.bukkit.plugin.java.JavaPlugin;
 import org.bukkit.permissions.Permissible;
 import org.bukkit.permissions.Permission;
 import org.bukkit.permissions.PermissionDefault;
+import org.bukkit.plugin.java.JavaPlugin;
 import org.yaml.snakeyaml.Yaml;
 import org.yaml.snakeyaml.constructor.AbstractConstruct;
 import org.yaml.snakeyaml.constructor.SafeConstructor;
 import org.yaml.snakeyaml.nodes.Node;
 import org.yaml.snakeyaml.nodes.Tag;
 
-import com.google.common.collect.ImmutableList;
-import com.google.common.collect.ImmutableMap;
-import com.google.common.collect.ImmutableSet;
+import java.io.InputStream;
+import java.io.Reader;
+import java.io.Writer;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
 
 /**
  * This type is the runtime-container for the information in the plugin.yml.
@@ -52,94 +52,94 @@ import com.google.common.collect.ImmutableSet;
  * the respective method documentations:
  * <table border=1>
  * <tr>
- *     <th>Node</th>
- *     <th>Method</th>
- *     <th>Summary</th>
+ * <th>Node</th>
+ * <th>Method</th>
+ * <th>Summary</th>
  * </tr><tr>
- *     <td><code>name</code></td>
- *     <td>{@link #getName()}</td>
- *     <td>The unique name of plugin</td>
+ * <td><code>name</code></td>
+ * <td>{@link #getName()}</td>
+ * <td>The unique name of plugin</td>
  * </tr><tr>
- *     <td><code>version</code></td>
- *     <td>{@link #getVersion()}</td>
- *     <td>A plugin revision identifier</td>
+ * <td><code>version</code></td>
+ * <td>{@link #getVersion()}</td>
+ * <td>A plugin revision identifier</td>
  * </tr><tr>
- *     <td><code>main</code></td>
- *     <td>{@link #getMain()}</td>
- *     <td>The plugin's initial class file</td>
+ * <td><code>main</code></td>
+ * <td>{@link #getMain()}</td>
+ * <td>The plugin's initial class file</td>
  * </tr><tr>
- *     <td><code>author</code><br><code>authors</code></td>
- *     <td>{@link #getAuthors()}</td>
- *     <td>The plugin contributors</td>
+ * <td><code>author</code><br><code>authors</code></td>
+ * <td>{@link #getAuthors()}</td>
+ * <td>The plugin contributors</td>
  * </tr><tr>
- *     <td><code>description</code></td>
- *     <td>{@link #getDescription()}</td>
- *     <td>Human readable plugin summary</td>
+ * <td><code>description</code></td>
+ * <td>{@link #getDescription()}</td>
+ * <td>Human readable plugin summary</td>
  * </tr><tr>
- *     <td><code>website</code></td>
- *     <td>{@link #getWebsite()}</td>
- *     <td>The URL to the plugin's site</td>
+ * <td><code>website</code></td>
+ * <td>{@link #getWebsite()}</td>
+ * <td>The URL to the plugin's site</td>
  * </tr><tr>
- *     <td><code>prefix</code></td>
- *     <td>{@link #getPrefix()}</td>
- *     <td>The token to prefix plugin log entries</td>
+ * <td><code>prefix</code></td>
+ * <td>{@link #getPrefix()}</td>
+ * <td>The token to prefix plugin log entries</td>
  * </tr><tr>
- *     <td><code>database</code></td>
- *     <td>{@link #isDatabaseEnabled()}</td>
- *     <td>Indicator to enable database support</td>
+ * <td><code>database</code></td>
+ * <td>{@link #isDatabaseEnabled()}</td>
+ * <td>Indicator to enable database support</td>
  * </tr><tr>
- *     <td><code>load</code></td>
- *     <td>{@link #getLoad()}</td>
- *     <td>The phase of server-startup this plugin will load during</td>
+ * <td><code>load</code></td>
+ * <td>{@link #getLoad()}</td>
+ * <td>The phase of server-startup this plugin will load during</td>
  * </tr><tr>
- *     <td><code>depend</code></td>
- *     <td>{@link #getDepend()}</td>
- *     <td>Other required plugins</td>
+ * <td><code>depend</code></td>
+ * <td>{@link #getDepend()}</td>
+ * <td>Other required plugins</td>
  * </tr><tr>
- *     <td><code>softdepend</code></td>
- *     <td>{@link #getSoftDepend()}</td>
- *     <td>Other plugins that add functionality</td>
+ * <td><code>softdepend</code></td>
+ * <td>{@link #getSoftDepend()}</td>
+ * <td>Other plugins that add functionality</td>
  * </tr><tr>
- *     <td><code>loadbefore</code></td>
- *     <td>{@link #getLoadBefore()}</td>
- *     <td>The inverse softdepend</td>
+ * <td><code>loadbefore</code></td>
+ * <td>{@link #getLoadBefore()}</td>
+ * <td>The inverse softdepend</td>
  * </tr><tr>
- *     <td><code>commands</code></td>
- *     <td>{@link #getCommands()}</td>
- *     <td>The commands the plugin will register</td>
+ * <td><code>commands</code></td>
+ * <td>{@link #getCommands()}</td>
+ * <td>The commands the plugin will register</td>
  * </tr><tr>
- *     <td><code>permissions</code></td>
- *     <td>{@link #getPermissions()}</td>
- *     <td>The permissions the plugin will register</td>
+ * <td><code>permissions</code></td>
+ * <td>{@link #getPermissions()}</td>
+ * <td>The permissions the plugin will register</td>
  * </tr><tr>
- *     <td><code>default-permission</code></td>
- *     <td>{@link #getPermissionDefault()}</td>
- *     <td>The default {@link Permission#getDefault() default} permission
- *         state for defined {@link #getPermissions() permissions} the plugin
- *         will register</td>
+ * <td><code>default-permission</code></td>
+ * <td>{@link #getPermissionDefault()}</td>
+ * <td>The default {@link Permission#getDefault() default} permission
+ * state for defined {@link #getPermissions() permissions} the plugin
+ * will register</td>
  * </tr><tr>
- *     <td><code>awareness</code></td>
- *     <td>{@link #getAwareness()}</td>
- *     <td>The concepts that the plugin acknowledges</td>
+ * <td><code>awareness</code></td>
+ * <td>{@link #getAwareness()}</td>
+ * <td>The concepts that the plugin acknowledges</td>
  * </tr>
  * </table>
  * <p>
  * A plugin.yml example:<blockquote><pre>
- *name: Inferno
- *version: 1.4.1
- *description: This plugin is so 31337. You can set yourself on fire.
- *# We could place every author in the authors list, but chose not to for illustrative purposes
- *# Also, having an author distinguishes that person as the project lead, and ensures their
- *# name is displayed first
- *author: CaptainInflamo
- *authors: [Cogito, verrier, EvilSeph]
- *website: http://www.curse.com/server-mods/minecraft/myplugin
- *
- *main: com.captaininflamo.bukkit.inferno.Inferno
- *database: false
- *depend: [NewFire, FlameWire]
- *
- *commands:
+ * name: Inferno
+ * version: 1.4.1
+ * description: This plugin is so 31337. You can set yourself on fire.
+ * # We could place every author in the authors list, but chose not to for illustrative purposes
+ * # Also, having an author distinguishes that person as the project lead, and ensures their
+ * # name is displayed first
+ * author: CaptainInflamo
+ * authors: [Cogito, verrier, EvilSeph]
+ * website: http://www.curse.com/server-mods/minecraft/myplugin
+ * <p>
+ * main: com.captaininflamo.bukkit.inferno.Inferno
+ * database: false
+ * depend: [NewFire, FlameWire]
+ * <p>
+ * commands:
  *  flagrate:
  *    description: Set yourself on fire.
  *    aliases: [combust_me, combustMe]
@@ -153,8 +153,8 @@ import com.google.common.collect.ImmutableSet;
  *      /&lt;command&gt; [player]
  *      Example: /&lt;command&gt; - see how many times you have burned to death
  *      Example: /&lt;command&gt; CaptainIce - see how many times CaptainIce has burned to death
- *
- *permissions:
+ * <p>
+ * permissions:
  *  inferno.*:
  *    description: Gives access to all Inferno commands
  *    children:
@@ -172,9 +172,10 @@ import com.google.common.collect.ImmutableSet;
  *    default: op
  *    children:
  *      inferno.burningdeaths: true
- *</pre></blockquote>
+ * </pre></blockquote>
  */
 public final class PluginDescriptionFile {
+
     private static final ThreadLocal<Yaml> YAML = new ThreadLocal<Yaml>() {
         @Override
         protected Yaml initialValue() {
@@ -208,7 +209,9 @@ public final class PluginDescriptionFile {
             });
         }
     };
+
     String rawName = null;
+
     private String name = null;
     private String main = null;
     private String classLoaderOf = null;
@@ -237,7 +240,7 @@ public final class PluginDescriptionFile {
      *
      * @param reader The reader
      * @throws InvalidDescriptionException If the PluginDescriptionFile is
-     *     invalid
+     *                                     invalid
      */
     public PluginDescriptionFile(final Reader reader) throws InvalidDescriptionException {
         loadMap(asMap(YAML.get().load(reader)));
@@ -246,9 +249,9 @@ public final class PluginDescriptionFile {
     /**
      * Creates a new PluginDescriptionFile with the given detailed
      *
-     * @param pluginName Name of this plugin
+     * @param pluginName    Name of this plugin
      * @param pluginVersion Version of this plugin
-     * @param mainClass Full location of the main class of this plugin
+     * @param mainClass     Full location of the main class of this plugin
      */
     public PluginDescriptionFile(final String pluginName, final String pluginVersion, final String mainClass) {
         name = pluginName.replace(' ', '_');
@@ -256,22 +259,42 @@ public final class PluginDescriptionFile {
         main = mainClass;
     }
 
+    private static List<String> makePluginNameList(final Map<?, ?> map, final String key) throws InvalidDescriptionException {
+        final Object value = map.get(key);
+        if (value == null) {
+            return ImmutableList.of();
+        }
+
+        final ImmutableList.Builder<String> builder = ImmutableList.<String>builder();
+        try {
+            for (final Object entry : (Iterable<?>) value) {
+                builder.add(entry.toString().replace(' ', '_'));
+            }
+        } catch (ClassCastException ex) {
+            throw new InvalidDescriptionException(ex, key + " is of wrong type");
+        } catch (NullPointerException ex) {
+            throw new InvalidDescriptionException(ex, "invalid " + key + " format");
+        }
+
+        return builder.build();
+    }
+
     /**
      * Gives the name of the plugin. This name is a unique identifier for
      * plugins.
      * <ul>
      * <li>Must consist of all alphanumeric characters, underscores, hyphon,
-     *     and period (a-z,A-Z,0-9, _.-). Any other character will cause the
-     *     plugin.yml to fail loading.
+     * and period (a-z,A-Z,0-9, _.-). Any other character will cause the
+     * plugin.yml to fail loading.
      * <li>Used to determine the name of the plugin's data folder. Data
-     *     folders are placed in the ./plugins/ directory by default, but this
-     *     behavior should not be relied on. {@link Plugin#getDataFolder()}
-     *     should be used to reference the data folder.
+     * folders are placed in the ./plugins/ directory by default, but this
+     * behavior should not be relied on. {@link Plugin#getDataFolder()}
+     * should be used to reference the data folder.
      * <li>It is good practice to name your jar the same as this, for example
-     *     'MyPlugin.jar'.
+     * 'MyPlugin.jar'.
      * <li>Case sensitive.
      * <li>The is the token referenced in {@link #getDepend()}, {@link
-     *     #getSoftDepend()}, and {@link #getLoadBefore()}.
+     * #getSoftDepend()}, and {@link #getLoadBefore()}.
      * <li>Using spaces in the plugin's name is deprecated.
      * </ul>
      * <p>
@@ -289,9 +312,9 @@ public final class PluginDescriptionFile {
      * Gives the version of the plugin.
      * <ul>
      * <li>Version is an arbitrary string, however the most common format is
-     *     MajorRelease.MinorRelease.Build (eg: 1.4.1).
+     * MajorRelease.MinorRelease.Build (eg: 1.4.1).
      * <li>Typically you will increment this every time you release a new
-     *     feature or bug fix.
+     * feature or bug fix.
      * <li>Displayed when a user types <code>/version PluginName</code>
      * </ul>
      * <p>
@@ -312,12 +335,12 @@ public final class PluginDescriptionFile {
      * class that extends {@link JavaPlugin}.
      * <ul>
      * <li>This must contain the full namespace including the class file
-     *     itself.
+     * itself.
      * <li>If your namespace is <code>org.bukkit.plugin</code>, and your class
-     *     file is called <code>MyPlugin</code> then this must be
-     *     <code>org.bukkit.plugin.MyPlugin</code>
+     * file is called <code>MyPlugin</code> then this must be
+     * <code>org.bukkit.plugin.MyPlugin</code>
      * <li>No plugin can use <code>org.bukkit.</code> as a base package for
-     *     <b>any class</b>, including the main class.
+     * <b>any class</b>, including the main class.
      * </ul>
      * <p>
      * In the plugin.yml, this entry is named <code>main</code>.
@@ -357,10 +380,10 @@ public final class PluginDescriptionFile {
      * <li>Defaults to {@link PluginLoadOrder#POSTWORLD}.
      * <li>Certain caveats apply to each phase.
      * <li>When different, {@link #getDepend()}, {@link #getSoftDepend()}, and
-     *     {@link #getLoadBefore()} become relative in order loaded per-phase.
-     *     If a plugin loads at <code>STARTUP</code>, but a dependency loads
-     *     at <code>POSTWORLD</code>, the dependency will not be loaded before
-     *     the plugin is loaded.
+     * {@link #getLoadBefore()} become relative in order loaded per-phase.
+     * If a plugin loads at <code>STARTUP</code>, but a dependency loads
+     * at <code>POSTWORLD</code>, the dependency will not be loaded before
+     * the plugin is loaded.
      * </ul>
      * <p>
      * In the plugin.yml, this entry is named <code>load</code>.
@@ -378,12 +401,12 @@ public final class PluginDescriptionFile {
      * <ul>
      * <li>Gives credit to the developer.
      * <li>Used in some server error messages to provide helpful feedback on
-     *     who to contact when an error occurs.
+     * who to contact when an error occurs.
      * <li>A bukkit.org forum handle or email address is recommended.
      * <li>Is displayed when a user types <code>/version PluginName</code>
      * <li><code>authors</code> must be in <a
-     *     href="http://en.wikipedia.org/wiki/YAML#Lists">YAML list
-     *     format</a>.
+     * href="http://en.wikipedia.org/wiki/YAML#Lists">YAML list
+     * format</a>.
      * </ul>
      * <p>
      * In the plugin.yml, this has two entries, <code>author</code> and
@@ -396,9 +419,9 @@ public final class PluginDescriptionFile {
      * When both are specified, author will be the first entry in the list, so
      * this example:
      * <blockquote><pre>author: Grum
-     *authors:
-     *- feildmaster
-     *- amaranth</pre></blockquote>
+     * authors:
+     * - feildmaster
+     * - amaranth</pre></blockquote>
      * Is equivilant to this example:
      * <blockquote><pre>authors: [Grum, feildmaster, aramanth]<pre></blockquote>
      *
@@ -412,7 +435,7 @@ public final class PluginDescriptionFile {
      * Gives the plugin's or plugin's author's website.
      * <ul>
      * <li>A link to the Curse page that includes documentation and downloads
-     *     is highly recommended.
+     * is highly recommended.
      * <li>Displayed when a user types <code>/version PluginName</code>
      * </ul>
      * <p>
@@ -446,29 +469,33 @@ public final class PluginDescriptionFile {
         return database;
     }
 
+    public void setDatabaseEnabled(boolean database) {
+        this.database = database;
+    }
+
     /**
      * Gives a list of other plugins that the plugin requires.
      * <ul>
      * <li>Use the value in the {@link #getName()} of the target plugin to
-     *     specify the dependency.
+     * specify the dependency.
      * <li>If any plugin listed here is not found, your plugin will fail to
-     *     load at startup.
+     * load at startup.
      * <li>If multiple plugins list each other in <code>depend</code>,
-     *     creating a network with no individual plugin does not list another
-     *     plugin in the <a
-     *     href=https://en.wikipedia.org/wiki/Circular_dependency>network</a>,
-     *     all plugins in that network will fail.
+     * creating a network with no individual plugin does not list another
+     * plugin in the <a
+     * href=https://en.wikipedia.org/wiki/Circular_dependency>network</a>,
+     * all plugins in that network will fail.
      * <li><code>depend</code> must be in must be in <a
-     *     href="http://en.wikipedia.org/wiki/YAML#Lists">YAML list
-     *     format</a>.
+     * href="http://en.wikipedia.org/wiki/YAML#Lists">YAML list
+     * format</a>.
      * </ul>
      * <p>
      * In the plugin.yml, this entry is named <code>depend</code>.
      * <p>
      * Example:
      * <blockquote><pre>depend:
-     *- OnePlugin
-     *- AnotherPlugin</pre></blockquote>
+     * - OnePlugin
+     * - AnotherPlugin</pre></blockquote>
      *
      * @return immutable list of the plugin's dependencies
      */
@@ -483,15 +510,15 @@ public final class PluginDescriptionFile {
      * will never fail because of one of these entries.
      * <ul>
      * <li>Use the value in the {@link #getName()} of the target plugin to
-     *     specify the dependency.
+     * specify the dependency.
      * <li>When an unresolvable plugin is listed, it will be ignored and does
-     *     not affect load order.
+     * not affect load order.
      * <li>When a circular dependency occurs (a network of plugins depending
-     *     or soft-dependending each other), it will arbitrarily choose a
-     *     plugin that can be resolved when ignoring soft-dependencies.
+     * or soft-dependending each other), it will arbitrarily choose a
+     * plugin that can be resolved when ignoring soft-dependencies.
      * <li><code>softdepend</code> must be in <a
-     *     href="http://en.wikipedia.org/wiki/YAML#Lists">YAML list
-     *     format</a>.
+     * href="http://en.wikipedia.org/wiki/YAML#Lists">YAML list
+     * format</a>.
      * </ul>
      * <p>
      * In the plugin.yml, this entry is named <code>softdepend</code>.
@@ -510,25 +537,25 @@ public final class PluginDescriptionFile {
      * soft-dependency.
      * <ul>
      * <li>Use the value in the {@link #getName()} of the target plugin to
-     *     specify the dependency.
+     * specify the dependency.
      * <li>The plugin should load before any other plugins listed here.
      * <li>Specifying another plugin here is strictly equivalent to having the
-     *     specified plugin's {@link #getSoftDepend()} include {@link
-     *     #getName() this plugin}.
+     * specified plugin's {@link #getSoftDepend()} include {@link
+     * #getName() this plugin}.
      * <li><code>loadbefore</code> must be in <a
-     *     href="http://en.wikipedia.org/wiki/YAML#Lists">YAML list
-     *     format</a>.
+     * href="http://en.wikipedia.org/wiki/YAML#Lists">YAML list
+     * format</a>.
      * </ul>
      * <p>
      * In the plugin.yml, this entry is named <code>loadbefore</code>.
      * <p>
      * Example:
      * <blockquote><pre>loadbefore:
-     *- OnePlugin
-     *- AnotherPlugin</pre></blockquote>
+     * - OnePlugin
+     * - AnotherPlugin</pre></blockquote>
      *
      * @return immutable list of plugins that should consider this plugin a
-     *     soft-dependency
+     * soft-dependency
      */
     public List<String> getLoadBefore() {
         return loadBefore;
@@ -539,7 +566,7 @@ public final class PluginDescriptionFile {
      * <ul>
      * <li>This includes all messages using {@link Plugin#getLogger()}.
      * <li>If not specified, the server uses the plugin's {@link #getName()
-     *     name}.
+     * name}.
      * <li>This should clearly indicate what plugin is being logged.
      * </ul>
      * <p>
@@ -561,77 +588,77 @@ public final class PluginDescriptionFile {
      * PluginCommand} and are defined here only as a convenience.
      * <table border=1>
      * <tr>
-     *     <th>Node</th>
-     *     <th>Method</th>
-     *     <th>Type</th>
-     *     <th>Description</th>
-     *     <th>Example</th>
+     * <th>Node</th>
+     * <th>Method</th>
+     * <th>Type</th>
+     * <th>Description</th>
+     * <th>Example</th>
      * </tr><tr>
-     *     <td><code>description</code></td>
-     *     <td>{@link PluginCommand#setDescription(String)}</td>
-     *     <td>String</td>
-     *     <td>A user-friendly description for a command. It is useful for
-     *         documentation purposes as well as in-game help.</td>
-     *     <td><blockquote><pre>description: Set yourself on fire</pre></blockquote></td>
+     * <td><code>description</code></td>
+     * <td>{@link PluginCommand#setDescription(String)}</td>
+     * <td>String</td>
+     * <td>A user-friendly description for a command. It is useful for
+     * documentation purposes as well as in-game help.</td>
+     * <td><blockquote><pre>description: Set yourself on fire</pre></blockquote></td>
      * </tr><tr>
-     *     <td><code>aliases</code></td>
-     *     <td>{@link PluginCommand#setAliases(List)}</td>
-     *     <td>String or <a
-     *         href="http://en.wikipedia.org/wiki/YAML#Lists">List</a> of
-     *         strings</td>
-     *     <td>Alternative command names, with special usefulness for commands
-     *         that are already registered. <i>Aliases are not effective when
-     *         defined at runtime,</i> so the plugin description file is the
-     *         only way to have them properly defined.
-     *         <p>
-     *         Note: Command aliases may not have a colon in them.</td>
-     *     <td>Single alias format:
-     *         <blockquote><pre>aliases: combust_me</pre></blockquote> or
-     *         multiple alias format:
-     *         <blockquote><pre>aliases: [combust_me, combustMe]</pre></blockquote></td>
+     * <td><code>aliases</code></td>
+     * <td>{@link PluginCommand#setAliases(List)}</td>
+     * <td>String or <a
+     * href="http://en.wikipedia.org/wiki/YAML#Lists">List</a> of
+     * strings</td>
+     * <td>Alternative command names, with special usefulness for commands
+     * that are already registered. <i>Aliases are not effective when
+     * defined at runtime,</i> so the plugin description file is the
+     * only way to have them properly defined.
+     * <p>
+     * Note: Command aliases may not have a colon in them.</td>
+     * <td>Single alias format:
+     * <blockquote><pre>aliases: combust_me</pre></blockquote> or
+     * multiple alias format:
+     * <blockquote><pre>aliases: [combust_me, combustMe]</pre></blockquote></td>
      * </tr><tr>
-     *     <td><code>permission</code></td>
-     *     <td>{@link PluginCommand#setPermission(String)}</td>
-     *     <td>String</td>
-     *     <td>The name of the {@link Permission} required to use the command.
-     *         A user without the permission will receive the specified
-     *         message (see {@linkplain
-     *         PluginCommand#setPermissionMessage(String) below}), or a
-     *         standard one if no specific message is defined. Without the
-     *         permission node, no {@link
-     *         PluginCommand#setExecutor(CommandExecutor) CommandExecutor} or
-     *         {@link PluginCommand#setTabCompleter(TabCompleter)
-     *         TabCompleter} will be called.</td>
-     *     <td><blockquote><pre>permission: inferno.flagrate</pre></blockquote></td>
+     * <td><code>permission</code></td>
+     * <td>{@link PluginCommand#setPermission(String)}</td>
+     * <td>String</td>
+     * <td>The name of the {@link Permission} required to use the command.
+     * A user without the permission will receive the specified
+     * message (see {@linkplain
+     * PluginCommand#setPermissionMessage(String) below}), or a
+     * standard one if no specific message is defined. Without the
+     * permission node, no {@link
+     * PluginCommand#setExecutor(CommandExecutor) CommandExecutor} or
+     * {@link PluginCommand#setTabCompleter(TabCompleter)
+     * TabCompleter} will be called.</td>
+     * <td><blockquote><pre>permission: inferno.flagrate</pre></blockquote></td>
      * </tr><tr>
-     *     <td><code>permission-message</code></td>
-     *     <td>{@link PluginCommand#setPermissionMessage(String)}</td>
-     *     <td>String</td>
-     *     <td><ul>
-     *         <li>Displayed to a player that attempts to use a command, but
-     *             does not have the required permission. See {@link
-     *             PluginCommand#getPermission() above}.
-     *         <li>&lt;permission&gt; is a macro that is replaced with the
-     *             permission node required to use the command.
-     *         <li>Using empty quotes is a valid way to indicate nothing
-     *             should be displayed to a player.
-     *         </ul></td>
-     *     <td><blockquote><pre>permission-message: You do not have /&lt;permission&gt;</pre></blockquote></td>
+     * <td><code>permission-message</code></td>
+     * <td>{@link PluginCommand#setPermissionMessage(String)}</td>
+     * <td>String</td>
+     * <td><ul>
+     * <li>Displayed to a player that attempts to use a command, but
+     * does not have the required permission. See {@link
+     * PluginCommand#getPermission() above}.
+     * <li>&lt;permission&gt; is a macro that is replaced with the
+     * permission node required to use the command.
+     * <li>Using empty quotes is a valid way to indicate nothing
+     * should be displayed to a player.
+     * </ul></td>
+     * <td><blockquote><pre>permission-message: You do not have /&lt;permission&gt;</pre></blockquote></td>
      * </tr><tr>
-     *     <td><code>usage</code></td>
-     *     <td>{@link PluginCommand#setUsage(String)}</td>
-     *     <td>String</td>
-     *     <td>This message is displayed to a player when the {@link
-     *         PluginCommand#setExecutor(CommandExecutor)} {@linkplain
-     *         CommandExecutor#onCommand(CommandSender,Command,String,String[])
-     *         returns false}. &lt;command&gt; is a macro that is replaced
-     *         the command issued.</td>
-     *     <td><blockquote><pre>usage: Syntax error! Perhaps you meant /&lt;command&gt; PlayerName?</pre></blockquote>
-     *         It is worth noting that to use a colon in a yaml, like
-     *         <code>`usage: Usage: /god [player]'</code>, you need to
-     *         <a href="http://yaml.org/spec/current.html#id2503232">surround
-     *         the message with double-quote</a>:
-     *         <blockquote><pre>usage: "Usage: /god [player]"</pre></blockquote></td>
+     * <td><code>usage</code></td>
+     * <td>{@link PluginCommand#setUsage(String)}</td>
+     * <td>String</td>
+     * <td>This message is displayed to a player when the {@link
+     * PluginCommand#setExecutor(CommandExecutor)} {@linkplain
+     * CommandExecutor#onCommand(CommandSender, Command, String, String[])}
+     * returns false}. &lt;command&gt; is a macro that is replaced
+     * the command issued.</td>
+     * <td><blockquote><pre>usage: Syntax error! Perhaps you meant /&lt;command&gt; PlayerName?</pre></blockquote>
+     * It is worth noting that to use a colon in a yaml, like
+     * <code>`usage: Usage: /god [player]'</code>, you need to
+     * <a href="http://yaml.org/spec/current.html#id2503232">surround
+     * the message with double-quote</a>:
+     * <blockquote><pre>usage: "Usage: /god [player]"</pre></blockquote></td>
      * </tr>
      * </table>
      * The commands are structured as a hiearchy of <a
@@ -643,7 +670,7 @@ public final class PluginDescriptionFile {
      * <p>
      * Here is an example bringing together the piecemeal examples above, as
      * well as few more definitions:<blockquote><pre>
-     *commands:
+     * commands:
      *  flagrate:
      *    description: Set yourself on fire.
      *    aliases: [combust_me, combustMe]
@@ -663,7 +690,7 @@ public final class PluginDescriptionFile {
      *  # The next command has no description, aliases, etc. defined, but is still valid
      *  # Having an empty declaration is useful for defining the description, permission, and messages from a configuration dynamically
      *  apocalypse:
-     *</pre></blockquote>
+     * </pre></blockquote>
      * Note: Command names may not have a colon in their name.
      *
      * @return the commands this plugin will register
@@ -684,73 +711,73 @@ public final class PluginDescriptionFile {
      * A list of optional properties for permissions:
      * <table border=1>
      * <tr>
-     *     <th>Node</th>
-     *     <th>Description</th>
-     *     <th>Example</th>
+     * <th>Node</th>
+     * <th>Description</th>
+     * <th>Example</th>
      * </tr><tr>
-     *     <td><code>description</code></td>
-     *     <td>Plaintext (user-friendly) description of what the permission
-     *         is for.</td>
-     *     <td><blockquote><pre>description: Allows you to set yourself on fire</pre></blockquote></td>
+     * <td><code>description</code></td>
+     * <td>Plaintext (user-friendly) description of what the permission
+     * is for.</td>
+     * <td><blockquote><pre>description: Allows you to set yourself on fire</pre></blockquote></td>
      * </tr><tr>
-     *     <td><code>default</code></td>
-     *     <td>The default state for the permission, as defined by {@link
-     *         Permission#getDefault()}. If not defined, it will be set to
-     *         the value of {@link PluginDescriptionFile#getPermissionDefault()}.
-     *         <p>
-     *         For reference:<ul>
-     *         <li><code>true</code> - Represents a positive assignment to
-     *             {@link Permissible permissibles}.
-     *         <li><code>false</code> - Represents no assignment to {@link
-     *             Permissible permissibles}.
-     *         <li><code>op</code> - Represents a positive assignment to
-     *             {@link Permissible#isOp() operator permissibles}.
-     *         <li><code>notop</code> - Represents a positive assignment to
-     *             {@link Permissible#isOp() non-operator permissibiles}.
-     *         </ul></td>
-     *     <td><blockquote><pre>default: true</pre></blockquote></td>
+     * <td><code>default</code></td>
+     * <td>The default state for the permission, as defined by {@link
+     * Permission#getDefault()}. If not defined, it will be set to
+     * the value of {@link PluginDescriptionFile#getPermissionDefault()}.
+     * <p>
+     * For reference:<ul>
+     * <li><code>true</code> - Represents a positive assignment to
+     * {@link Permissible permissibles}.
+     * <li><code>false</code> - Represents no assignment to {@link
+     * Permissible permissibles}.
+     * <li><code>op</code> - Represents a positive assignment to
+     * {@link Permissible#isOp() operator permissibles}.
+     * <li><code>notop</code> - Represents a positive assignment to
+     * {@link Permissible#isOp() non-operator permissibiles}.
+     * </ul></td>
+     * <td><blockquote><pre>default: true</pre></blockquote></td>
      * </tr><tr>
-     *     <td><code>children</code></td>
-     *     <td>Allows other permissions to be set as a {@linkplain
-     *         Permission#getChildren() relation} to the parent permission.
-     *         When a parent permissions is assigned, child permissions are
-     *         respectively assigned as well.
-     *         <ul>
-     *         <li>When a parent permission is assigned negatively, child
-     *             permissions are assigned based on an inversion of their
-     *             association.
-     *         <li>When a parent permission is assigned positively, child
-     *             permissions are assigned based on their association.
-     *         </ul>
-     *         <p>
-     *         Child permissions may be defined in a number of ways:<ul>
-     *         <li>Children may be defined as a <a
-     *             href="http://en.wikipedia.org/wiki/YAML#Lists">list</a> of
-     *             names. Using a list will treat all children associated
-     *             positively to their parent.
-     *         <li>Children may be defined as a map. Each permission name maps
-     *             to either a boolean (representing the association), or a
-     *             nested permission definition (just as another permission).
-     *             Using a nested definition treats the child as a positive
-     *             association.
-     *         <li>A nested permission definition must be a map of these same
-     *             properties. To define a valid nested permission without
-     *             defining any specific property, empty curly-braces (
-     *             <code>&#123;&#125;</code> ) must be used.
-     *          <li>A nested permission may carry it's own nested permissions
-     *              as children, as they may also have nested permissions, and
-     *              so forth. There is no direct limit to how deep the
-     *              permission tree is defined.
-     *         </ul></td>
-     *     <td>As a list:
-     *         <blockquote><pre>children: [inferno.flagrate, inferno.burningdeaths]</pre></blockquote>
-     *         Or as a mapping:
-     *         <blockquote><pre>children:
+     * <td><code>children</code></td>
+     * <td>Allows other permissions to be set as a {@linkplain
+     * Permission#getChildren() relation} to the parent permission.
+     * When a parent permissions is assigned, child permissions are
+     * respectively assigned as well.
+     * <ul>
+     * <li>When a parent permission is assigned negatively, child
+     * permissions are assigned based on an inversion of their
+     * association.
+     * <li>When a parent permission is assigned positively, child
+     * permissions are assigned based on their association.
+     * </ul>
+     * <p>
+     * Child permissions may be defined in a number of ways:<ul>
+     * <li>Children may be defined as a <a
+     * href="http://en.wikipedia.org/wiki/YAML#Lists">list</a> of
+     * names. Using a list will treat all children associated
+     * positively to their parent.
+     * <li>Children may be defined as a map. Each permission name maps
+     * to either a boolean (representing the association), or a
+     * nested permission definition (just as another permission).
+     * Using a nested definition treats the child as a positive
+     * association.
+     * <li>A nested permission definition must be a map of these same
+     * properties. To define a valid nested permission without
+     * defining any specific property, empty curly-braces (
+     * <code>&#123;&#125;</code> ) must be used.
+     * <li>A nested permission may carry it's own nested permissions
+     * as children, as they may also have nested permissions, and
+     * so forth. There is no direct limit to how deep the
+     * permission tree is defined.
+     * </ul></td>
+     * <td>As a list:
+     * <blockquote><pre>children: [inferno.flagrate, inferno.burningdeaths]</pre></blockquote>
+     * Or as a mapping:
+     * <blockquote><pre>children:
      *  inferno.flagrate: true
      *  inferno.burningdeaths: true</pre></blockquote>
-     *         An additional example showing basic nested values can be seen
-     *         <a href="doc-files/permissions-example_plugin.yml">here</a>.
-     *         </td>
+     * An additional example showing basic nested values can be seen
+     * <a href="doc-files/permissions-example_plugin.yml">here</a>.
+     * </td>
      * </tr>
      * </table>
      * The permissions are structured as a hiearchy of <a
@@ -761,7 +788,7 @@ public final class PluginDescriptionFile {
      * properties of the table above).
      * <p>
      * Here is an example using some of the properties:<blockquote><pre>
-     *permissions:
+     * permissions:
      *  inferno.*:
      *    description: Gives access to all Inferno commands
      *    children:
@@ -773,7 +800,7 @@ public final class PluginDescriptionFile {
      *  inferno.burningdeaths:
      *    description: Allows you to see how many times you have burned to death
      *    default: true
-     *</pre></blockquote>
+     * </pre></blockquote>
      * Another example, with nested definitions, can be found <a
      * href="doc-files/permissions-example_plugin.yml">here</a>.
      */
@@ -796,7 +823,7 @@ public final class PluginDescriptionFile {
      * <li>If not specified, it will be {@link PermissionDefault#OP}.
      * <li>It is matched using {@link PermissionDefault#getByName(String)}
      * <li>It only affects permissions that do not define the
-     *     <code>default</code> node.
+     * <code>default</code> node.
      * <li>It may be any value in {@link PermissionDefault}.
      * </ul>
      * <p>
@@ -820,23 +847,23 @@ public final class PluginDescriptionFile {
      * <p>
      * <ul>
      * <li>Currently only supports the enumerated values in {@link
-     *     PluginAwareness.Flags}.
+     * PluginAwareness.Flags}.
      * <li>Each awareness starts the identifier with bang-at
-     *     (<code>!@</code>).
+     * (<code>!@</code>).
      * <li>Unrecognized (future / unimplemented) entries are quietly replaced
-     *     by a generic object that implements PluginAwareness.
+     * by a generic object that implements PluginAwareness.
      * <li>A type of awareness must be defined by the runtime and acknowledged
-     *     by the API, effectively discluding any derived type from any
-     *     plugin's classpath.
+     * by the API, effectively discluding any derived type from any
+     * plugin's classpath.
      * <li><code>awareness</code> must be in <a
-     *     href="http://en.wikipedia.org/wiki/YAML#Lists">YAML list
-     *     format</a>.
+     * href="http://en.wikipedia.org/wiki/YAML#Lists">YAML list
+     * format</a>.
      * </ul>
      * <p>
      * In the plugin.yml, this entry is named <code>awareness</code>.
      * <p>
      * Example:<blockquote><pre>awareness:
-     *- !@UTF8</pre></blockquote>
+     * - !@UTF8</pre></blockquote>
      * <p>
      * <b>Note:</b> Although unknown versions of some future awareness are
      * gracefully substituted, previous versions of Bukkit (ones prior to the
@@ -868,10 +895,6 @@ public final class PluginDescriptionFile {
         return classLoaderOf;
     }
 
-    public void setDatabaseEnabled(boolean database) {
-        this.database = database;
-    }
-
     /**
      * Saves this PluginDescriptionFile to the given writer
      *
@@ -1031,28 +1054,8 @@ public final class PluginDescriptionFile {
         }
     }
 
-    private static List<String> makePluginNameList(final Map<?, ?> map, final String key) throws InvalidDescriptionException {
-        final Object value = map.get(key);
-        if (value == null) {
-            return ImmutableList.of();
-        }
-
-        final ImmutableList.Builder<String> builder = ImmutableList.<String>builder();
-        try {
-            for (final Object entry : (Iterable<?>) value) {
-                builder.add(entry.toString().replace(' ', '_'));
-            }
-        } catch (ClassCastException ex) {
-            throw new InvalidDescriptionException(ex, key + " is of wrong type");
-        } catch (NullPointerException ex) {
-            throw new InvalidDescriptionException(ex, "invalid " + key + " format");
-        }
-        return builder.build();
-    }
-
     private Map<String, Object> saveMap() {
         Map<String, Object> map = new HashMap<String, Object>();
-
         map.put("name", name);
         map.put("main", main);
         map.put("version", version);
@@ -1063,15 +1066,19 @@ public final class PluginDescriptionFile {
         if (commands != null) {
             map.put("command", commands);
         }
+
         if (depend != null) {
             map.put("depend", depend);
         }
+
         if (softDepend != null) {
             map.put("softdepend", softDepend);
         }
+
         if (website != null) {
             map.put("website", website);
         }
+
         if (description != null) {
             map.put("description", description);
         }
@@ -1093,9 +1100,9 @@ public final class PluginDescriptionFile {
         return map;
     }
 
-    private Map<?,?> asMap(Object object) throws InvalidDescriptionException {
+    private Map<?, ?> asMap(Object object) throws InvalidDescriptionException {
         if (object instanceof Map) {
-            return (Map<?,?>) object;
+            return (Map<?, ?>) object;
         }
         throw new InvalidDescriptionException(object + " is not properly structured.");
     }
diff --git a/src/main/java/org/bukkit/plugin/PluginLoadOrder.java b/src/main/java/org/bukkit/plugin/PluginLoadOrder.java
index b77436f..0b3403b 100644
--- a/src/main/java/org/bukkit/plugin/PluginLoadOrder.java
+++ b/src/main/java/org/bukkit/plugin/PluginLoadOrder.java
@@ -9,6 +9,7 @@ public enum PluginLoadOrder {
      * Indicates that the plugin will be loaded at startup
      */
     STARTUP,
+
     /**
      * Indicates that the plugin will be loaded after the first/default world
      * was created
diff --git a/src/main/java/org/bukkit/plugin/PluginLoader.java b/src/main/java/org/bukkit/plugin/PluginLoader.java
index e7981a1..10418ba 100644
--- a/src/main/java/org/bukkit/plugin/PluginLoader.java
+++ b/src/main/java/org/bukkit/plugin/PluginLoader.java
@@ -1,13 +1,13 @@
 package org.bukkit.plugin;
 
+import org.bukkit.event.Event;
+import org.bukkit.event.Listener;
+
 import java.io.File;
 import java.util.Map;
 import java.util.Set;
 import java.util.regex.Pattern;
 
-import org.bukkit.event.Event;
-import org.bukkit.event.Listener;
-
 /**
  * Represents a plugin loader, which handles direct access to specific types
  * of plugins
@@ -19,41 +19,41 @@ public interface PluginLoader {
      *
      * @param file File to attempt to load
      * @return Plugin that was contained in the specified file, or null if
-     *     unsuccessful
-     * @throws InvalidPluginException Thrown when the specified file is not a
-     *     plugin
+     * unsuccessful
+     * @throws InvalidPluginException     Thrown when the specified file is not a
+     *                                    plugin
      * @throws UnknownDependencyException If a required dependency could not
-     *     be found
+     *                                    be found
      */
-    public Plugin loadPlugin(File file) throws InvalidPluginException, UnknownDependencyException;
+    Plugin loadPlugin(File file) throws InvalidPluginException, UnknownDependencyException;
 
     /**
      * Loads a PluginDescriptionFile from the specified file
      *
      * @param file File to attempt to load from
      * @return A new PluginDescriptionFile loaded from the plugin.yml in the
-     *     specified file
+     * specified file
      * @throws InvalidDescriptionException If the plugin description file
-     *     could not be created
+     *                                     could not be created
      */
-    public PluginDescriptionFile getPluginDescription(File file) throws InvalidDescriptionException;
+    PluginDescriptionFile getPluginDescription(File file) throws InvalidDescriptionException;
 
     /**
      * Returns a list of all filename filters expected by this PluginLoader
      *
      * @return The filters
      */
-    public Pattern[] getPluginFileFilters();
+    Pattern[] getPluginFileFilters();
 
     /**
      * Creates and returns registered listeners for the event classes used in
      * this listener
      *
      * @param listener The object that will handle the eventual call back
-     * @param plugin The plugin to use when creating registered listeners
+     * @param plugin   The plugin to use when creating registered listeners
      * @return The registered listeners.
      */
-    public Map<Class<? extends Event>, Set<RegisteredListener>> createRegisteredListeners(Listener listener, Plugin plugin);
+    Map<Class<? extends Event>, Set<RegisteredListener>> createRegisteredListeners(Listener listener, Plugin plugin);
 
     /**
      * Enables the specified plugin
@@ -63,7 +63,7 @@ public interface PluginLoader {
      *
      * @param plugin Plugin to enable
      */
-    public void enablePlugin(Plugin plugin);
+    void enablePlugin(Plugin plugin);
 
     /**
      * Disables the specified plugin
@@ -72,5 +72,5 @@ public interface PluginLoader {
      *
      * @param plugin Plugin to disable
      */
-    public void disablePlugin(Plugin plugin);
+    void disablePlugin(Plugin plugin);
 }
diff --git a/src/main/java/org/bukkit/plugin/PluginLogger.java b/src/main/java/org/bukkit/plugin/PluginLogger.java
index f43c10b..9e7f0c8 100644
--- a/src/main/java/org/bukkit/plugin/PluginLogger.java
+++ b/src/main/java/org/bukkit/plugin/PluginLogger.java
@@ -12,6 +12,7 @@ import java.util.logging.Logger;
  * @see Logger
  */
 public class PluginLogger extends Logger {
+
     private String pluginName;
 
     /**
@@ -32,5 +33,4 @@ public class PluginLogger extends Logger {
         logRecord.setMessage(pluginName + logRecord.getMessage());
         super.log(logRecord);
     }
-
 }
diff --git a/src/main/java/org/bukkit/plugin/PluginManager.java b/src/main/java/org/bukkit/plugin/PluginManager.java
index e5638d5..49a0111 100644
--- a/src/main/java/org/bukkit/plugin/PluginManager.java
+++ b/src/main/java/org/bukkit/plugin/PluginManager.java
@@ -1,14 +1,14 @@
 package org.bukkit.plugin;
 
-import java.io.File;
-import java.util.Set;
-
 import org.bukkit.event.Event;
 import org.bukkit.event.EventPriority;
 import org.bukkit.event.Listener;
 import org.bukkit.permissions.Permissible;
 import org.bukkit.permissions.Permission;
 
+import java.io.File;
+import java.util.Set;
+
 /**
  * Handles all plugin management from the Server
  */
@@ -19,9 +19,9 @@ public interface PluginManager {
      *
      * @param loader Class name of the PluginLoader to register
      * @throws IllegalArgumentException Thrown when the given Class is not a
-     *     valid PluginLoader
+     *                                  valid PluginLoader
      */
-    public void registerInterface(Class<? extends PluginLoader> loader) throws IllegalArgumentException;
+    void registerInterface(Class<? extends PluginLoader> loader) throws IllegalArgumentException;
 
     /**
      * Checks if the given plugin is loaded and returns it when applicable
@@ -31,14 +31,14 @@ public interface PluginManager {
      * @param name Name of the plugin to check
      * @return Plugin if it exists, otherwise null
      */
-    public Plugin getPlugin(String name);
+    Plugin getPlugin(String name);
 
     /**
      * Gets a list of all currently loaded plugins
      *
      * @return Array of Plugins
      */
-    public Plugin[] getPlugins();
+    Plugin[] getPlugins();
 
     /**
      * Checks if the given plugin is enabled or not
@@ -48,7 +48,7 @@ public interface PluginManager {
      * @param name Name of the plugin to check
      * @return true if the plugin is enabled, otherwise false
      */
-    public boolean isPluginEnabled(String name);
+    boolean isPluginEnabled(String name);
 
     /**
      * Checks if the given plugin is enabled or not
@@ -56,7 +56,7 @@ public interface PluginManager {
      * @param plugin Plugin to check
      * @return true if the plugin is enabled, otherwise false
      */
-    public boolean isPluginEnabled(Plugin plugin);
+    boolean isPluginEnabled(Plugin plugin);
 
     /**
      * Loads the plugin in the specified file
@@ -65,14 +65,14 @@ public interface PluginManager {
      *
      * @param file File containing the plugin to load
      * @return The Plugin loaded, or null if it was invalid
-     * @throws InvalidPluginException Thrown when the specified file is not a
-     *     valid plugin
+     * @throws InvalidPluginException      Thrown when the specified file is not a
+     *                                     valid plugin
      * @throws InvalidDescriptionException Thrown when the specified file
-     *     contains an invalid description
-     * @throws UnknownDependencyException If a required dependency could not
-     *     be resolved
+     *                                     contains an invalid description
+     * @throws UnknownDependencyException  If a required dependency could not
+     *                                     be resolved
      */
-    public Plugin loadPlugin(File file) throws InvalidPluginException, InvalidDescriptionException, UnknownDependencyException;
+    Plugin loadPlugin(File file) throws InvalidPluginException, InvalidDescriptionException, UnknownDependencyException;
 
     /**
      * Loads the plugins contained within the specified directory
@@ -80,60 +80,60 @@ public interface PluginManager {
      * @param directory Directory to check for plugins
      * @return A list of all plugins loaded
      */
-    public Plugin[] loadPlugins(File directory);
+    Plugin[] loadPlugins(File directory);
 
     /**
      * Disables all the loaded plugins
      */
-    public void disablePlugins();
+    void disablePlugins();
 
     /**
      * Disables and removes all plugins
      */
-    public void clearPlugins();
+    void clearPlugins();
 
     /**
      * Calls an event with the given details
      *
      * @param event Event details
      * @throws IllegalStateException Thrown when an asynchronous event is
-     *     fired from synchronous code.
-     *     <p>
-     *     <i>Note: This is best-effort basis, and should not be used to test
-     *     synchronized state. This is an indicator for flawed flow logic.</i>
+     *                               fired from synchronous code.
+     *                               <p>
+     *                               <i>Note: This is best-effort basis, and should not be used to test
+     *                               synchronized state. This is an indicator for flawed flow logic.</i>
      */
-    public void callEvent(Event event) throws IllegalStateException;
+    void callEvent(Event event) throws IllegalStateException;
 
     /**
      * Registers all the events in the given listener class
      *
      * @param listener Listener to register
-     * @param plugin Plugin to register
+     * @param plugin   Plugin to register
      */
-    public void registerEvents(Listener listener, Plugin plugin);
+    void registerEvents(Listener listener, Plugin plugin);
 
     /**
      * Registers the specified executor to the given event class
      *
-     * @param event Event type to register
+     * @param event    Event type to register
      * @param listener Listener to register
      * @param priority Priority to register this event at
      * @param executor EventExecutor to register
-     * @param plugin Plugin to register
+     * @param plugin   Plugin to register
      */
-    public void registerEvent(Class<? extends Event> event, Listener listener, EventPriority priority, EventExecutor executor, Plugin plugin);
+    void registerEvent(Class<? extends Event> event, Listener listener, EventPriority priority, EventExecutor executor, Plugin plugin);
 
     /**
      * Registers the specified executor to the given event class
      *
-     * @param event Event type to register
-     * @param listener Listener to register
-     * @param priority Priority to register this event at
-     * @param executor EventExecutor to register
-     * @param plugin Plugin to register
+     * @param event           Event type to register
+     * @param listener        Listener to register
+     * @param priority        Priority to register this event at
+     * @param executor        EventExecutor to register
+     * @param plugin          Plugin to register
      * @param ignoreCancelled Whether to pass cancelled events or not
      */
-    public void registerEvent(Class<? extends Event> event, Listener listener, EventPriority priority, EventExecutor executor, Plugin plugin, boolean ignoreCancelled);
+    void registerEvent(Class<? extends Event> event, Listener listener, EventPriority priority, EventExecutor executor, Plugin plugin, boolean ignoreCancelled);
 
     /**
      * Enables the specified plugin
@@ -143,7 +143,7 @@ public interface PluginManager {
      *
      * @param plugin Plugin to enable
      */
-    public void enablePlugin(Plugin plugin);
+    void enablePlugin(Plugin plugin);
 
     /**
      * Disables the specified plugin
@@ -152,7 +152,7 @@ public interface PluginManager {
      *
      * @param plugin Plugin to disable
      */
-    public void disablePlugin(Plugin plugin);
+    void disablePlugin(Plugin plugin);
 
     /**
      * Gets a {@link Permission} from its fully qualified name
@@ -160,7 +160,7 @@ public interface PluginManager {
      * @param name Name of the permission
      * @return Permission, or null if none
      */
-    public Permission getPermission(String name);
+    Permission getPermission(String name);
 
     /**
      * Adds a {@link Permission} to this plugin manager.
@@ -170,9 +170,9 @@ public interface PluginManager {
      *
      * @param perm Permission to add
      * @throws IllegalArgumentException Thrown when a permission with the same
-     *     name already exists
+     *                                  name already exists
      */
-    public void addPermission(Permission perm);
+    void addPermission(Permission perm);
 
     /**
      * Removes a {@link Permission} registration from this plugin manager.
@@ -185,7 +185,7 @@ public interface PluginManager {
      *
      * @param perm Permission to remove
      */
-    public void removePermission(Permission perm);
+    void removePermission(Permission perm);
 
     /**
      * Removes a {@link Permission} registration from this plugin manager.
@@ -198,7 +198,7 @@ public interface PluginManager {
      *
      * @param name Permission to remove
      */
-    public void removePermission(String name);
+    void removePermission(String name);
 
     /**
      * Gets the default permissions for the given op status
@@ -206,7 +206,7 @@ public interface PluginManager {
      * @param op Which set of default permissions to get
      * @return The default permissions
      */
-    public Set<Permission> getDefaultPermissions(boolean op);
+    Set<Permission> getDefaultPermissions(boolean op);
 
     /**
      * Recalculates the defaults for the given {@link Permission}.
@@ -216,7 +216,7 @@ public interface PluginManager {
      *
      * @param perm Permission to recalculate
      */
-    public void recalculatePermissionDefaults(Permission perm);
+    void recalculatePermissionDefaults(Permission perm);
 
     /**
      * Subscribes the given Permissible for information about the requested
@@ -225,19 +225,19 @@ public interface PluginManager {
      * If the specified Permission changes in any form, the Permissible will
      * be asked to recalculate.
      *
-     * @param permission Permission to subscribe to
+     * @param permission  Permission to subscribe to
      * @param permissible Permissible subscribing
      */
-    public void subscribeToPermission(String permission, Permissible permissible);
+    void subscribeToPermission(String permission, Permissible permissible);
 
     /**
      * Unsubscribes the given Permissible for information about the requested
      * Permission, by name.
      *
-     * @param permission Permission to unsubscribe from
+     * @param permission  Permission to unsubscribe from
      * @param permissible Permissible subscribing
      */
-    public void unsubscribeFromPermission(String permission, Permissible permissible);
+    void unsubscribeFromPermission(String permission, Permissible permissible);
 
     /**
      * Gets a set containing all subscribed {@link Permissible}s to the given
@@ -246,7 +246,7 @@ public interface PluginManager {
      * @param permission Permission to query for
      * @return Set containing all subscribed permissions
      */
-    public Set<Permissible> getPermissionSubscriptions(String permission);
+    Set<Permissible> getPermissionSubscriptions(String permission);
 
     /**
      * Subscribes to the given Default permissions by operator status
@@ -254,18 +254,18 @@ public interface PluginManager {
      * If the specified defaults change in any form, the Permissible will be
      * asked to recalculate.
      *
-     * @param op Default list to subscribe to
+     * @param op          Default list to subscribe to
      * @param permissible Permissible subscribing
      */
-    public void subscribeToDefaultPerms(boolean op, Permissible permissible);
+    void subscribeToDefaultPerms(boolean op, Permissible permissible);
 
     /**
      * Unsubscribes from the given Default permissions by operator status
      *
-     * @param op Default list to unsubscribe from
+     * @param op          Default list to unsubscribe from
      * @param permissible Permissible subscribing
      */
-    public void unsubscribeFromDefaultPerms(boolean op, Permissible permissible);
+    void unsubscribeFromDefaultPerms(boolean op, Permissible permissible);
 
     /**
      * Gets a set containing all subscribed {@link Permissible}s to the given
@@ -274,7 +274,7 @@ public interface PluginManager {
      * @param op Default list to query for
      * @return Set containing all subscribed permissions
      */
-    public Set<Permissible> getDefaultPermSubscriptions(boolean op);
+    Set<Permissible> getDefaultPermSubscriptions(boolean op);
 
     /**
      * Gets a set of all registered permissions.
@@ -283,12 +283,12 @@ public interface PluginManager {
      *
      * @return Set containing all current registered permissions
      */
-    public Set<Permission> getPermissions();
+    Set<Permission> getPermissions();
 
     /**
      * Returns whether or not timing code should be used for event calls
      *
      * @return True if event timings are to be used
      */
-    public boolean useTimings();
+    boolean useTimings();
 }
diff --git a/src/main/java/org/bukkit/plugin/RegisteredListener.java b/src/main/java/org/bukkit/plugin/RegisteredListener.java
index 9dd0b7a..26816d9 100644
--- a/src/main/java/org/bukkit/plugin/RegisteredListener.java
+++ b/src/main/java/org/bukkit/plugin/RegisteredListener.java
@@ -1,11 +1,16 @@
 package org.bukkit.plugin;
 
-import org.bukkit.event.*;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.Event;
+import org.bukkit.event.EventException;
+import org.bukkit.event.EventPriority;
+import org.bukkit.event.Listener;
 
 /**
  * Stores relevant information for plugin listeners
  */
 public class RegisteredListener {
+
     private final Listener listener;
     private final EventPriority priority;
     private final Plugin plugin;
@@ -54,15 +59,16 @@ public class RegisteredListener {
      * @throws EventException If an event handler throws an exception.
      */
     public void callEvent(final Event event) throws EventException {
-        if (event instanceof Cancellable){
-            if (((Cancellable) event).isCancelled() && isIgnoringCancelled()){
+        if (event instanceof Cancellable) {
+            if (((Cancellable) event).isCancelled() && isIgnoringCancelled()) {
                 return;
             }
         }
+
         executor.execute(listener, event);
     }
 
-     /**
+    /**
      * Whether this listener accepts cancelled events
      *
      * @return True when ignoring cancelled events
diff --git a/src/main/java/org/bukkit/plugin/RegisteredServiceProvider.java b/src/main/java/org/bukkit/plugin/RegisteredServiceProvider.java
index ba3ff15..b1ff6f1 100644
--- a/src/main/java/org/bukkit/plugin/RegisteredServiceProvider.java
+++ b/src/main/java/org/bukkit/plugin/RegisteredServiceProvider.java
@@ -1,5 +1,7 @@
 package org.bukkit.plugin;
 
+import javax.annotation.Nonnull;
+
 /**
  * A registered service provider.
  *
@@ -13,7 +15,6 @@ public class RegisteredServiceProvider<T> implements Comparable<RegisteredServic
     private ServicePriority priority;
 
     public RegisteredServiceProvider(Class<T> service, T provider, ServicePriority priority, Plugin plugin) {
-
         this.service = service;
         this.plugin = plugin;
         this.provider = provider;
@@ -36,7 +37,7 @@ public class RegisteredServiceProvider<T> implements Comparable<RegisteredServic
         return priority;
     }
 
-    public int compareTo(RegisteredServiceProvider<?> other) {
+    public int compareTo(@Nonnull RegisteredServiceProvider<?> other) {
         if (priority.ordinal() == other.getPriority().ordinal()) {
             return 0;
         } else {
diff --git a/src/main/java/org/bukkit/plugin/ServicePriority.java b/src/main/java/org/bukkit/plugin/ServicePriority.java
index 4afe0fb..1a5bf41 100644
--- a/src/main/java/org/bukkit/plugin/ServicePriority.java
+++ b/src/main/java/org/bukkit/plugin/ServicePriority.java
@@ -4,9 +4,10 @@ package org.bukkit.plugin;
  * Represents various priorities of a provider.
  */
 public enum ServicePriority {
-    Lowest,
-    Low,
-    Normal,
-    High,
-    Highest
+
+    LOWEST,
+    LOW,
+    NORMAL,
+    HIGH,
+    HIGHEST
 }
diff --git a/src/main/java/org/bukkit/plugin/ServicesManager.java b/src/main/java/org/bukkit/plugin/ServicesManager.java
index 5d45ffb..e5ea329 100644
--- a/src/main/java/org/bukkit/plugin/ServicesManager.java
+++ b/src/main/java/org/bukkit/plugin/ServicesManager.java
@@ -16,55 +16,55 @@ public interface ServicesManager {
     /**
      * Register a provider of a service.
      *
-     * @param <T> Provider
-     * @param service service class
+     * @param <T>      Provider
+     * @param service  service class
      * @param provider provider to register
-     * @param plugin plugin with the provider
+     * @param plugin   plugin with the provider
      * @param priority priority of the provider
      */
-    public <T> void register(Class<T> service, T provider, Plugin plugin, ServicePriority priority);
+    <T> void register(Class<T> service, T provider, Plugin plugin, ServicePriority priority);
 
     /**
      * Unregister all the providers registered by a particular plugin.
      *
      * @param plugin The plugin
      */
-    public void unregisterAll(Plugin plugin);
+    void unregisterAll(Plugin plugin);
 
     /**
      * Unregister a particular provider for a particular service.
      *
-     * @param service The service interface
+     * @param service  The service interface
      * @param provider The service provider implementation
      */
-    public void unregister(Class<?> service, Object provider);
+    void unregister(Class<?> service, Object provider);
 
     /**
      * Unregister a particular provider.
      *
      * @param provider The service provider implementation
      */
-    public void unregister(Object provider);
+    void unregister(Object provider);
 
     /**
      * Queries for a provider. This may return if no provider has been
      * registered for a service. The highest priority provider is returned.
      *
-     * @param <T> The service interface
+     * @param <T>     The service interface
      * @param service The service interface
      * @return provider or null
      */
-    public <T> T load(Class<T> service);
+    <T> T load(Class<T> service);
 
     /**
      * Queries for a provider registration. This may return if no provider
      * has been registered for a service.
      *
-     * @param <T> The service interface
+     * @param <T>     The service interface
      * @param service The service interface
      * @return provider registration or null
      */
-    public <T> RegisteredServiceProvider<T> getRegistration(Class<T> service);
+    <T> RegisteredServiceProvider<T> getRegistration(Class<T> service);
 
     /**
      * Get registrations of providers for a plugin.
@@ -72,17 +72,17 @@ public interface ServicesManager {
      * @param plugin The plugin
      * @return provider registration or null
      */
-    public List<RegisteredServiceProvider<?>> getRegistrations(Plugin plugin);
+    List<RegisteredServiceProvider<?>> getRegistrations(Plugin plugin);
 
     /**
      * Get registrations of providers for a service. The returned list is
      * unmodifiable.
      *
-     * @param <T> The service interface
+     * @param <T>     The service interface
      * @param service The service interface
      * @return list of registrations
      */
-    public <T> Collection<RegisteredServiceProvider<T>> getRegistrations(Class<T> service);
+    <T> Collection<RegisteredServiceProvider<T>> getRegistrations(Class<T> service);
 
     /**
      * Get a list of known services. A service is known if it has registered
@@ -90,17 +90,16 @@ public interface ServicesManager {
      *
      * @return list of known services
      */
-    public Collection<Class<?>> getKnownServices();
+    Collection<Class<?>> getKnownServices();
 
     /**
      * Returns whether a provider has been registered for a service. Do not
      * check this first only to call <code>load(service)</code> later, as that
      * would be a non-thread safe situation.
      *
-     * @param <T> service
+     * @param <T>     service
      * @param service service to check
      * @return whether there has been a registered provider
      */
-    public <T> boolean isProvidedFor(Class<T> service);
-
+    <T> boolean isProvidedFor(Class<T> service);
 }
diff --git a/src/main/java/org/bukkit/plugin/SimplePluginManager.java b/src/main/java/org/bukkit/plugin/SimplePluginManager.java
index b3002e8..c015c5b 100644
--- a/src/main/java/org/bukkit/plugin/SimplePluginManager.java
+++ b/src/main/java/org/bukkit/plugin/SimplePluginManager.java
@@ -1,5 +1,20 @@
 package org.bukkit.plugin;
 
+import com.google.common.collect.ImmutableSet;
+import org.apache.commons.lang.Validate;
+import org.bukkit.Server;
+import org.bukkit.command.Command;
+import org.bukkit.command.PluginCommandYamlParser;
+import org.bukkit.command.SimpleCommandMap;
+import org.bukkit.event.Event;
+import org.bukkit.event.EventPriority;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.Listener;
+import org.bukkit.permissions.Permissible;
+import org.bukkit.permissions.Permission;
+import org.bukkit.permissions.PermissionDefault;
+import org.bukkit.util.FileUtil;
+
 import java.io.File;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Method;
@@ -18,42 +33,27 @@ import java.util.logging.Level;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
-import org.apache.commons.lang.Validate;
-import org.bukkit.Server;
-import org.bukkit.command.Command;
-import org.bukkit.command.PluginCommandYamlParser;
-import org.bukkit.command.SimpleCommandMap;
-import org.bukkit.event.Event;
-import org.bukkit.event.EventPriority;
-import org.bukkit.event.HandlerList;
-import org.bukkit.event.Listener;
-import org.bukkit.permissions.Permissible;
-import org.bukkit.permissions.Permission;
-import org.bukkit.permissions.PermissionDefault;
-import org.bukkit.util.FileUtil;
-
-import com.google.common.collect.ImmutableSet;
-
 /**
  * Handles all plugin management from the Server
  */
 public final class SimplePluginManager implements PluginManager {
+
+    private static File updateDirectory = null;
     private final Server server;
     private final Map<Pattern, PluginLoader> fileAssociations = new HashMap<Pattern, PluginLoader>();
     private final List<Plugin> plugins = new ArrayList<Plugin>();
     private final Map<String, Plugin> lookupNames = new HashMap<String, Plugin>();
-    private static File updateDirectory = null;
     private final SimpleCommandMap commandMap;
     private final Map<String, Permission> permissions = new HashMap<String, Permission>();
     private final Map<Boolean, Set<Permission>> defaultPerms = new LinkedHashMap<Boolean, Set<Permission>>();
     private final Map<String, Map<Permissible, Boolean>> permSubs = new HashMap<String, Map<Permissible, Boolean>>();
     private final Map<Boolean, Map<Permissible, Boolean>> defSubs = new HashMap<Boolean, Map<Permissible, Boolean>>();
+
     private boolean useTimings = false;
 
     public SimplePluginManager(Server instance, SimpleCommandMap commandMap) {
-        server = instance;
+        this.server = instance;
         this.commandMap = commandMap;
-
         defaultPerms.put(true, new HashSet<Permission>());
         defaultPerms.put(false, new HashSet<Permission>());
     }
@@ -63,7 +63,7 @@ public final class SimplePluginManager implements PluginManager {
      *
      * @param loader Class name of the PluginLoader to register
      * @throws IllegalArgumentException Thrown when the given Class is not a
-     *     valid PluginLoader
+     *                                  valid PluginLoader
      */
     public void registerInterface(Class<? extends PluginLoader> loader) throws IllegalArgumentException {
         PluginLoader instance;
@@ -76,7 +76,6 @@ public final class SimplePluginManager implements PluginManager {
                 instance = constructor.newInstance(server);
             } catch (NoSuchMethodException ex) {
                 String className = loader.getName();
-
                 throw new IllegalArgumentException(String.format("Class %s does not have a public %s(Server) constructor", className, className), ex);
             } catch (Exception ex) {
                 throw new IllegalArgumentException(String.format("Unexpected exception %s while attempting to construct a new instance of %s", ex.getClass().getName(), loader.getName()), ex);
@@ -86,7 +85,6 @@ public final class SimplePluginManager implements PluginManager {
         }
 
         Pattern[] patterns = instance.getPluginFileFilters();
-
         synchronized (this) {
             for (Pattern pattern : patterns) {
                 fileAssociations.put(pattern, instance);
@@ -116,8 +114,11 @@ public final class SimplePluginManager implements PluginManager {
         Map<String, Collection<String>> dependencies = new HashMap<String, Collection<String>>();
         Map<String, Collection<String>> softDependencies = new HashMap<String, Collection<String>>();
 
+        File[] files = directory.listFiles();
+        Validate.notNull(files, "Files cannot be null");
+
         // This is where it figures out all possible plugins
-        for (File file : directory.listFiles()) {
+        for (File file : files) {
             PluginLoader loader = null;
             for (Pattern filter : filters) {
                 Matcher match = filter.matcher(file.getName());
@@ -133,21 +134,21 @@ public final class SimplePluginManager implements PluginManager {
                 description = loader.getPluginDescription(file);
                 String name = description.getName();
                 // Spigot Start
-                if ( name.equalsIgnoreCase( "Orebfuscator" ) )
-                {
-                    server.getLogger().log( Level.WARNING, "Skipping loading of Orebfuscator as it does not work with Spigot 1.8 builds!" );
+                if (name.equalsIgnoreCase("Orebfuscator")) {
+                    server.getLogger().log(Level.WARNING, "Skipping loading of Orebfuscator as it does not work with Spigot 1.8 builds!");
                     continue;
                 }
+
                 // Spigot End
                 if (name.equalsIgnoreCase("bukkit") || name.equalsIgnoreCase("minecraft") || name.equalsIgnoreCase("mojang")) {
                     server.getLogger().log(Level.SEVERE, "Could not load '" + file.getPath() + "' in folder '" + directory.getPath() + "': Restricted Name");
                     continue;
                 } else if (description.rawName.indexOf(' ') != -1) {
                     server.getLogger().warning(String.format(
-                        "Plugin `%s' uses the space-character (0x20) in its name `%s' - this is discouraged",
-                        description.getFullName(),
-                        description.rawName
-                        ));
+                            "Plugin `%s' uses the space-character (0x20) in its name `%s' - this is discouraged",
+                            description.getFullName(),
+                            description.rawName
+                    ));
                 }
             } catch (InvalidDescriptionException ex) {
                 server.getLogger().log(Level.SEVERE, "Could not load '" + file.getPath() + "' in folder '" + directory.getPath() + "'", ex);
@@ -157,12 +158,12 @@ public final class SimplePluginManager implements PluginManager {
             File replacedFile = plugins.put(description.getName(), file);
             if (replacedFile != null) {
                 server.getLogger().severe(String.format(
-                    "Ambiguous plugin name `%s' for files `%s' and `%s' in `%s'",
-                    description.getName(),
-                    file.getPath(),
-                    replacedFile.getPath(),
-                    directory.getPath()
-                    ));
+                        "Ambiguous plugin name `%s' for files `%s' and `%s' in `%s'",
+                        description.getName(),
+                        file.getPath(),
+                        replacedFile.getPath(),
+                        directory.getPath()
+                ));
             }
 
             Collection<String> softDependencySet = description.getSoftDepend();
@@ -201,7 +202,6 @@ public final class SimplePluginManager implements PluginManager {
 
             while (pluginIterator.hasNext()) {
                 String plugin = pluginIterator.next();
-
                 if (dependencies.containsKey(plugin)) {
                     Iterator<String> dependencyIterator = dependencies.get(plugin).iterator();
 
@@ -212,7 +212,7 @@ public final class SimplePluginManager implements PluginManager {
                         if (loadedPlugins.contains(dependency)) {
                             dependencyIterator.remove();
 
-                        // We have a dependency not found
+                            // We have a dependency not found
                         } else if (!plugins.containsKey(dependency)) {
                             missingDependency = false;
                             File file = plugins.get(plugin);
@@ -221,9 +221,9 @@ public final class SimplePluginManager implements PluginManager {
                             dependencies.remove(plugin);
 
                             server.getLogger().log(
-                                Level.SEVERE,
-                                "Could not load '" + file.getPath() + "' in folder '" + directory.getPath() + "'",
-                                new UnknownDependencyException(dependency));
+                                    Level.SEVERE,
+                                    "Could not load '" + file.getPath() + "' in folder '" + directory.getPath() + "'",
+                                    new UnknownDependencyException(dependency));
                             break;
                         }
                     }
@@ -232,6 +232,7 @@ public final class SimplePluginManager implements PluginManager {
                         dependencies.remove(plugin);
                     }
                 }
+
                 if (softDependencies.containsKey(plugin)) {
                     Iterator<String> softDependencyIterator = softDependencies.get(plugin).iterator();
 
@@ -248,6 +249,7 @@ public final class SimplePluginManager implements PluginManager {
                         softDependencies.remove(plugin);
                     }
                 }
+
                 if (!(dependencies.containsKey(plugin) || softDependencies.containsKey(plugin)) && plugins.containsKey(plugin)) {
                     // We're clear to load, no more soft or hard dependencies left
                     File file = plugins.get(plugin);
@@ -257,7 +259,6 @@ public final class SimplePluginManager implements PluginManager {
                     try {
                         result.add(loadPlugin(file));
                         loadedPlugins.add(plugin);
-                        continue;
                     } catch (InvalidPluginException ex) {
                         server.getLogger().log(Level.SEVERE, "Could not load '" + file.getPath() + "' in folder '" + directory.getPath() + "'", ex);
                     }
@@ -313,10 +314,10 @@ public final class SimplePluginManager implements PluginManager {
      *
      * @param file File containing the plugin to load
      * @return The Plugin loaded, or null if it was invalid
-     * @throws InvalidPluginException Thrown when the specified file is not a
-     *     valid plugin
+     * @throws InvalidPluginException     Thrown when the specified file is not a
+     *                                    valid plugin
      * @throws UnknownDependencyException If a required dependency could not
-     *     be found
+     *                                    be found
      */
     public synchronized Plugin loadPlugin(File file) throws InvalidPluginException, UnknownDependencyException {
         Validate.notNull(file, "File cannot be null");
@@ -454,7 +455,7 @@ public final class SimplePluginManager implements PluginManager {
             try {
                 server.getMessenger().unregisterIncomingPluginChannel(plugin);
                 server.getMessenger().unregisterOutgoingPluginChannel(plugin);
-            } catch(Throwable ex) {
+            } catch (Throwable ex) {
                 server.getLogger().log(Level.SEVERE, "Error occurred (in the plugin loader) while unregistering plugin channels for " + plugin.getDescription().getFullName() + " (Is it up to date?)", ex);
             }
         }
@@ -518,7 +519,7 @@ public final class SimplePluginManager implements PluginManager {
                             plugin.getDescription().getAuthors(),
                             plugin.getDescription().getFullName(),
                             ex.getMessage()
-                            ));
+                    ));
                 }
             } catch (Throwable ex) {
                 server.getLogger().log(Level.SEVERE, "Could not pass event " + event.getEventName() + " to " + registration.getPlugin().getDescription().getFullName(), ex);
@@ -545,13 +546,13 @@ public final class SimplePluginManager implements PluginManager {
      * Registers the given event to the specified listener using a directly
      * passed EventExecutor
      *
-     * @param event Event class to register
-     * @param listener PlayerListener to register
-     * @param priority Priority of this event
-     * @param executor EventExecutor to register
-     * @param plugin Plugin to register
+     * @param event           Event class to register
+     * @param listener        PlayerListener to register
+     * @param priority        Priority of this event
+     * @param executor        EventExecutor to register
+     * @param plugin          Plugin to register
      * @param ignoreCancelled Do not call executor if event was already
-     *     cancelled
+     *                        cancelled
      */
     public void registerEvent(Class<? extends Event> event, Listener listener, EventPriority priority, EventExecutor executor, Plugin plugin, boolean ignoreCancelled) {
         Validate.notNull(listener, "Listener cannot be null");
diff --git a/src/main/java/org/bukkit/plugin/SimpleServicesManager.java b/src/main/java/org/bukkit/plugin/SimpleServicesManager.java
index 4e17711..779becb 100644
--- a/src/main/java/org/bukkit/plugin/SimpleServicesManager.java
+++ b/src/main/java/org/bukkit/plugin/SimpleServicesManager.java
@@ -1,18 +1,17 @@
 package org.bukkit.plugin;
 
+import com.google.common.collect.ImmutableList;
+import com.google.common.collect.ImmutableSet;
 import org.bukkit.Bukkit;
 import org.bukkit.event.server.ServiceRegisterEvent;
 import org.bukkit.event.server.ServiceUnregisterEvent;
 
-import com.google.common.collect.ImmutableList;
-import com.google.common.collect.ImmutableSet;
-
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.Iterator;
-import java.util.Map;
 import java.util.List;
+import java.util.Map;
 import java.util.NoSuchElementException;
 import java.util.Set;
 
@@ -29,10 +28,10 @@ public class SimpleServicesManager implements ServicesManager {
     /**
      * Register a provider of a service.
      *
-     * @param <T> Provider
-     * @param service service class
+     * @param <T>      Provider
+     * @param service  service class
      * @param provider provider to register
-     * @param plugin plugin with the provider
+     * @param plugin   plugin with the provider
      * @param priority priority of the provider
      */
     public <T> void register(Class<T> service, T provider, Plugin plugin, ServicePriority priority) {
@@ -92,7 +91,8 @@ public class SimpleServicesManager implements ServicesManager {
                         it.remove();
                     }
                 }
-            } catch (NoSuchElementException e) {}
+            } catch (NoSuchElementException ignored) {
+            }
         }
         for (ServiceUnregisterEvent event : unregisteredEvents) {
             Bukkit.getServer().getPluginManager().callEvent(event);
@@ -102,7 +102,7 @@ public class SimpleServicesManager implements ServicesManager {
     /**
      * Unregister a particular provider for a particular service.
      *
-     * @param service The service interface
+     * @param service  The service interface
      * @param provider The service provider implementation
      */
     public void unregister(Class<?> service, Object provider) {
@@ -140,7 +140,8 @@ public class SimpleServicesManager implements ServicesManager {
                         it.remove();
                     }
                 }
-            } catch (NoSuchElementException e) {}
+            } catch (NoSuchElementException ignored) {
+            }
         }
         for (ServiceUnregisterEvent event : unregisteredEvents) {
             Bukkit.getServer().getPluginManager().callEvent(event);
@@ -181,7 +182,8 @@ public class SimpleServicesManager implements ServicesManager {
                         it.remove();
                     }
                 }
-            } catch (NoSuchElementException e) {}
+            } catch (NoSuchElementException ignored) {
+            }
         }
         for (ServiceUnregisterEvent event : unregisteredEvents) {
             Bukkit.getServer().getPluginManager().callEvent(event);
@@ -192,7 +194,7 @@ public class SimpleServicesManager implements ServicesManager {
      * Queries for a provider. This may return if no provider has been
      * registered for a service. The highest priority provider is returned.
      *
-     * @param <T> The service interface
+     * @param <T>     The service interface
      * @param service The service interface
      * @return provider or null
      */
@@ -213,7 +215,7 @@ public class SimpleServicesManager implements ServicesManager {
      * Queries for a provider registration. This may return if no provider
      * has been registered for a service.
      *
-     * @param <T> The service interface
+     * @param <T>     The service interface
      * @param service The service interface
      * @return provider registration or null
      */
@@ -255,7 +257,7 @@ public class SimpleServicesManager implements ServicesManager {
      * Get registrations of providers for a service. The returned list is
      * an unmodifiable copy.
      *
-     * @param <T> The service interface
+     * @param <T>     The service interface
      * @param service The service interface
      * @return a copy of the list of registrations
      */
@@ -294,7 +296,7 @@ public class SimpleServicesManager implements ServicesManager {
     /**
      * Returns whether a provider has been registered for a service.
      *
-     * @param <T> service
+     * @param <T>     service
      * @param service service to check
      * @return true if and only if there are registered providers
      */
diff --git a/src/main/java/org/bukkit/plugin/TimedRegisteredListener.java b/src/main/java/org/bukkit/plugin/TimedRegisteredListener.java
index e09234c..427db95 100644
--- a/src/main/java/org/bukkit/plugin/TimedRegisteredListener.java
+++ b/src/main/java/org/bukkit/plugin/TimedRegisteredListener.java
@@ -18,12 +18,21 @@ public class TimedRegisteredListener extends RegisteredListener {
         super(pluginListener, eventExecutor, eventPriority, registeredPlugin, listenCancelled);
     }
 
+    private static Class<?> getCommonSuperclass(Class<?> class1, Class<?> class2) {
+        while (!class1.isAssignableFrom(class2)) {
+            class1 = class1.getSuperclass();
+        }
+
+        return class1;
+    }
+
     @Override
     public void callEvent(Event event) throws EventException {
         if (event.isAsynchronous()) {
             super.callEvent(event);
             return;
         }
+
         count++;
         Class<? extends Event> newEventClass = event.getClass();
         if (this.eventClass == null) {
@@ -32,18 +41,12 @@ public class TimedRegisteredListener extends RegisteredListener {
             multiple = true;
             this.eventClass = getCommonSuperclass(newEventClass, this.eventClass).asSubclass(Event.class);
         }
+
         long start = System.nanoTime();
         super.callEvent(event);
         totalTime += System.nanoTime() - start;
     }
 
-    private static Class<?> getCommonSuperclass(Class<?> class1, Class<?> class2) {
-        while (!class1.isAssignableFrom(class2)) {
-            class1 = class1.getSuperclass();
-        }
-        return class1;
-    }
-
     /**
      * Resets the call count and total time for this listener
      */
diff --git a/src/main/java/org/bukkit/plugin/UnknownDependencyException.java b/src/main/java/org/bukkit/plugin/UnknownDependencyException.java
index a80251e..58771db 100644
--- a/src/main/java/org/bukkit/plugin/UnknownDependencyException.java
+++ b/src/main/java/org/bukkit/plugin/UnknownDependencyException.java
@@ -8,6 +8,13 @@ public class UnknownDependencyException extends RuntimeException {
     private static final long serialVersionUID = 5721389371901775895L;
 
     /**
+     * Constructs a new UnknownDependencyException
+     */
+    public UnknownDependencyException() {
+
+    }
+
+    /**
      * Constructs a new UnknownDependencyException based on the given
      * Exception
      *
@@ -30,17 +37,10 @@ public class UnknownDependencyException extends RuntimeException {
      * Constructs a new UnknownDependencyException based on the given
      * Exception
      *
-     * @param message Brief message explaining the cause of the exception
+     * @param message   Brief message explaining the cause of the exception
      * @param throwable Exception that triggered this Exception
      */
     public UnknownDependencyException(final Throwable throwable, final String message) {
         super(message, throwable);
     }
-
-    /**
-     * Constructs a new UnknownDependencyException
-     */
-    public UnknownDependencyException() {
-
-    }
 }
diff --git a/src/main/java/org/bukkit/plugin/java/JavaPlugin.java b/src/main/java/org/bukkit/plugin/java/JavaPlugin.java
index 19893f3..7582819 100644
--- a/src/main/java/org/bukkit/plugin/java/JavaPlugin.java
+++ b/src/main/java/org/bukkit/plugin/java/JavaPlugin.java
@@ -1,20 +1,13 @@
 package org.bukkit.plugin.java;
 
-import java.io.File;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.InputStreamReader;
-import java.io.OutputStream;
-import java.io.Reader;
-import java.net.URL;
-import java.net.URLConnection;
-import java.nio.charset.Charset;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.logging.Level;
-import java.util.logging.Logger;
-
+import com.avaje.ebean.EbeanServer;
+import com.avaje.ebean.EbeanServerFactory;
+import com.avaje.ebean.config.DataSourceConfig;
+import com.avaje.ebean.config.ServerConfig;
+import com.avaje.ebeaninternal.api.SpiEbeanServer;
+import com.avaje.ebeaninternal.server.ddl.DdlGenerator;
+import com.google.common.base.Charsets;
+import com.google.common.io.ByteStreams;
 import org.apache.commons.lang.Validate;
 import org.bukkit.Server;
 import org.bukkit.Warning.WarningState;
@@ -32,19 +25,26 @@ import org.bukkit.plugin.PluginDescriptionFile;
 import org.bukkit.plugin.PluginLoader;
 import org.bukkit.plugin.PluginLogger;
 
-import com.avaje.ebean.EbeanServer;
-import com.avaje.ebean.EbeanServerFactory;
-import com.avaje.ebean.config.DataSourceConfig;
-import com.avaje.ebean.config.ServerConfig;
-import com.avaje.ebeaninternal.api.SpiEbeanServer;
-import com.avaje.ebeaninternal.server.ddl.DdlGenerator;
-import com.google.common.base.Charsets;
-import com.google.common.io.ByteStreams;
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.io.OutputStream;
+import java.io.Reader;
+import java.net.URL;
+import java.net.URLConnection;
+import java.nio.charset.Charset;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.logging.Level;
+import java.util.logging.Logger;
 
 /**
  * Represents a Java plugin
  */
 public abstract class JavaPlugin extends PluginBase {
+
     private boolean isEnabled = false;
     private PluginLoader loader = null;
     private Server server = null;
@@ -63,15 +63,16 @@ public abstract class JavaPlugin extends PluginBase {
         if (!(classLoader instanceof PluginClassLoader)) {
             throw new IllegalStateException("JavaPlugin requires " + PluginClassLoader.class.getName());
         }
+
         ((PluginClassLoader) classLoader).initialize(this);
     }
 
     /**
      * @deprecated This method is intended for unit testing purposes when the
-     *     other {@linkplain #JavaPlugin(JavaPluginLoader,
-     *     PluginDescriptionFile, File, File) constructor} cannot be used.
-     *     <p>
-     *     Its existence may be temporary.
+     * other {@linkplain #JavaPlugin(JavaPluginLoader,
+     * PluginDescriptionFile, File, File) constructor} cannot be used.
+     * <p>
+     * Its existence may be temporary.
      */
     @Deprecated
     protected JavaPlugin(final PluginLoader loader, final Server server, final PluginDescriptionFile description, final File dataFolder, final File file) {
@@ -79,6 +80,7 @@ public abstract class JavaPlugin extends PluginBase {
         if (classLoader instanceof PluginClassLoader) {
             throw new IllegalStateException("Cannot use initialization constructor at runtime");
         }
+
         init(loader, server, description, dataFolder, file, classLoader);
     }
 
@@ -87,10 +89,78 @@ public abstract class JavaPlugin extends PluginBase {
         if (classLoader instanceof PluginClassLoader) {
             throw new IllegalStateException("Cannot use initialization constructor at runtime");
         }
+
         init(loader, loader.server, description, dataFolder, file, classLoader);
     }
 
     /**
+     * This method provides fast access to the plugin that has {@link
+     * #getProvidingPlugin(Class) provided} the given plugin class, which is
+     * usually the plugin that implemented it.
+     * <p>
+     * An exception to this would be if plugin's jar that contained the class
+     * does not extend the class, where the intended plugin would have
+     * resided in a different jar / classloader.
+     *
+     * @param clazz the class desired
+     * @return the plugin that provides and implements said class
+     * @throws IllegalArgumentException if clazz is null
+     * @throws IllegalArgumentException if clazz does not extend {@link
+     *                                  JavaPlugin}
+     * @throws IllegalStateException    if clazz was not provided by a plugin,
+     *                                  for example, if called with
+     *                                  <code>JavaPlugin.getPlugin(JavaPlugin.class)</code>
+     * @throws IllegalStateException    if called from the static initializer for
+     *                                  given JavaPlugin
+     * @throws ClassCastException       if plugin that provided the class does not
+     *                                  extend the class
+     */
+    public static <T extends JavaPlugin> T getPlugin(Class<T> clazz) {
+        Validate.notNull(clazz, "Null class cannot have a plugin");
+        if (!JavaPlugin.class.isAssignableFrom(clazz)) {
+            throw new IllegalArgumentException(clazz + " does not extend " + JavaPlugin.class);
+        }
+
+        final ClassLoader cl = clazz.getClassLoader();
+        if (!(cl instanceof PluginClassLoader)) {
+            throw new IllegalArgumentException(clazz + " is not initialized by " + PluginClassLoader.class);
+        }
+
+        JavaPlugin plugin = ((PluginClassLoader) cl).plugin;
+        if (plugin == null) {
+            throw new IllegalStateException("Cannot get plugin for " + clazz + " from a static initializer");
+        }
+
+        return clazz.cast(plugin);
+    }
+
+    /**
+     * This method provides fast access to the plugin that has provided the
+     * given class.
+     *
+     * @throws IllegalArgumentException if the class is not provided by a
+     *                                  JavaPlugin
+     * @throws IllegalArgumentException if class is null
+     * @throws IllegalStateException    if called from the static initializer for
+     *                                  given JavaPlugin
+     */
+    public static JavaPlugin getProvidingPlugin(Class<?> clazz) {
+        Validate.notNull(clazz, "Null class cannot have a plugin");
+
+        final ClassLoader cl = clazz.getClassLoader();
+        if (!(cl instanceof PluginClassLoader)) {
+            throw new IllegalArgumentException(clazz + " is not provided by " + PluginClassLoader.class);
+        }
+
+        JavaPlugin plugin = ((PluginClassLoader) cl).plugin;
+        if (plugin == null) {
+            throw new IllegalStateException("Cannot get plugin for " + clazz + " from a static initializer");
+        }
+
+        return plugin;
+    }
+
+    /**
      * Returns the folder that the plugin data's files are located in. The
      * folder may not yet exist.
      *
@@ -133,6 +203,23 @@ public abstract class JavaPlugin extends PluginBase {
     }
 
     /**
+     * Sets the enabled state of this plugin
+     *
+     * @param enabled true if enabled, otherwise false
+     */
+    protected final void setEnabled(final boolean enabled) {
+        if (isEnabled != enabled) {
+            isEnabled = enabled;
+
+            if (isEnabled) {
+                onEnable();
+            } else {
+                onDisable();
+            }
+        }
+    }
+
+    /**
      * Returns the file which contains this plugin
      *
      * @return File containing this plugin
@@ -156,6 +243,7 @@ public abstract class JavaPlugin extends PluginBase {
         if (newConfig == null) {
             reloadConfig();
         }
+
         return newConfig;
     }
 
@@ -173,7 +261,6 @@ public abstract class JavaPlugin extends PluginBase {
     @SuppressWarnings("deprecation")
     protected final Reader getTextResource(String file) {
         final InputStream in = getResource(file);
-
         return in == null ? null : new InputStreamReader(in, isStrictlyUTF8() || FileConfiguration.UTF8_OVERRIDE ? Charsets.UTF_8 : Charset.defaultCharset());
     }
 
@@ -281,7 +368,6 @@ public abstract class JavaPlugin extends PluginBase {
 
         try {
             URL url = getClassLoader().getResource(filename);
-
             if (url == null) {
                 return null;
             }
@@ -304,31 +390,15 @@ public abstract class JavaPlugin extends PluginBase {
     }
 
     /**
-     * Sets the enabled state of this plugin
-     *
-     * @param enabled true if enabled, otherwise false
-     */
-    protected final void setEnabled(final boolean enabled) {
-        if (isEnabled != enabled) {
-            isEnabled = enabled;
-
-            if (isEnabled) {
-                onEnable();
-            } else {
-                onDisable();
-            }
-        }
-    }
-
-    /**
      * @deprecated This method is legacy and will be removed - it must be
-     *     replaced by the specially provided constructor(s).
+     * replaced by the specially provided constructor(s).
      */
     @Deprecated
     protected final void initialize(PluginLoader loader, Server server, PluginDescriptionFile description, File dataFolder, File file, ClassLoader classLoader) {
         if (server.getWarningState() == WarningState.OFF) {
             return;
         }
+
         getLogger().log(Level.WARNING, getClass().getName() + " is already initialized", server.getWarningState() == WarningState.DEFAULT ? null : new AuthorNagException("Explicit initialization"));
     }
 
@@ -384,7 +454,7 @@ public abstract class JavaPlugin extends PluginBase {
      *
      * @return true if this plugin is initialized, otherwise false
      * @deprecated This method cannot return false, as {@link
-     *     JavaPlugin} is now initialized in the constructor.
+     * JavaPlugin} is now initialized in the constructor.
      */
     @Deprecated
     public final boolean isInitialized() {
@@ -431,13 +501,16 @@ public abstract class JavaPlugin extends PluginBase {
     }
 
     @Override
-    public void onLoad() {}
+    public void onLoad() {
+    }
 
     @Override
-    public void onDisable() {}
+    public void onDisable() {
+    }
 
     @Override
-    public void onEnable() {}
+    public void onEnable() {
+    }
 
     @Override
     public ChunkGenerator getDefaultWorldGenerator(String worldName, String id) {
@@ -462,7 +535,6 @@ public abstract class JavaPlugin extends PluginBase {
     protected void installDDL() {
         SpiEbeanServer serv = (SpiEbeanServer) getDatabase();
         DdlGenerator gen = serv.getDdlGenerator();
-
         gen.runScript(false, gen.generateCreateDdl());
     }
 
@@ -482,65 +554,4 @@ public abstract class JavaPlugin extends PluginBase {
     public String toString() {
         return description.getFullName();
     }
-
-    /**
-     * This method provides fast access to the plugin that has {@link
-     * #getProvidingPlugin(Class) provided} the given plugin class, which is
-     * usually the plugin that implemented it.
-     * <p>
-     * An exception to this would be if plugin's jar that contained the class
-     * does not extend the class, where the intended plugin would have
-     * resided in a different jar / classloader.
-     *
-     * @param clazz the class desired
-     * @return the plugin that provides and implements said class
-     * @throws IllegalArgumentException if clazz is null
-     * @throws IllegalArgumentException if clazz does not extend {@link
-     *     JavaPlugin}
-     * @throws IllegalStateException if clazz was not provided by a plugin,
-     *     for example, if called with
-     *     <code>JavaPlugin.getPlugin(JavaPlugin.class)</code>
-     * @throws IllegalStateException if called from the static initializer for
-     *     given JavaPlugin
-     * @throws ClassCastException if plugin that provided the class does not
-     *     extend the class
-     */
-    public static <T extends JavaPlugin> T getPlugin(Class<T> clazz) {
-        Validate.notNull(clazz, "Null class cannot have a plugin");
-        if (!JavaPlugin.class.isAssignableFrom(clazz)) {
-            throw new IllegalArgumentException(clazz + " does not extend " + JavaPlugin.class);
-        }
-        final ClassLoader cl = clazz.getClassLoader();
-        if (!(cl instanceof PluginClassLoader)) {
-            throw new IllegalArgumentException(clazz + " is not initialized by " + PluginClassLoader.class);
-        }
-        JavaPlugin plugin = ((PluginClassLoader) cl).plugin;
-        if (plugin == null) {
-            throw new IllegalStateException("Cannot get plugin for " + clazz + " from a static initializer");
-        }
-        return clazz.cast(plugin);
-    }
-
-    /**
-     * This method provides fast access to the plugin that has provided the
-     * given class.
-     *
-     * @throws IllegalArgumentException if the class is not provided by a
-     *     JavaPlugin
-     * @throws IllegalArgumentException if class is null
-     * @throws IllegalStateException if called from the static initializer for
-     *     given JavaPlugin
-     */
-    public static JavaPlugin getProvidingPlugin(Class<?> clazz) {
-        Validate.notNull(clazz, "Null class cannot have a plugin");
-        final ClassLoader cl = clazz.getClassLoader();
-        if (!(cl instanceof PluginClassLoader)) {
-            throw new IllegalArgumentException(clazz + " is not provided by " + PluginClassLoader.class);
-        }
-        JavaPlugin plugin = ((PluginClassLoader) cl).plugin;
-        if (plugin == null) {
-            throw new IllegalStateException("Cannot get plugin for " + clazz + " from a static initializer");
-        }
-        return plugin;
-    }
 }
diff --git a/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java b/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
index f8ef65b..74fccd0 100644
--- a/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
+++ b/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
@@ -1,22 +1,5 @@
 package org.bukkit.plugin.java;
 
-import java.io.File;
-import java.io.FileNotFoundException;
-import java.io.IOException;
-import java.io.InputStream;
-import java.lang.reflect.InvocationTargetException;
-import java.lang.reflect.Method;
-import java.util.Arrays;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.LinkedHashMap;
-import java.util.Map;
-import java.util.Set;
-import java.util.jar.JarEntry;
-import java.util.jar.JarFile;
-import java.util.logging.Level;
-import java.util.regex.Pattern;
-
 import org.apache.commons.lang.Validate;
 import org.bukkit.Server;
 import org.bukkit.Warning;
@@ -39,18 +22,37 @@ import org.bukkit.plugin.PluginLoader;
 import org.bukkit.plugin.RegisteredListener;
 import org.bukkit.plugin.TimedRegisteredListener;
 import org.bukkit.plugin.UnknownDependencyException;
-import org.spigotmc.CustomTimingsHandler; // Spigot
+import org.spigotmc.CustomTimingsHandler;
 import org.yaml.snakeyaml.error.YAMLException;
 
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.io.InputStream;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.LinkedHashMap;
+import java.util.Map;
+import java.util.Set;
+import java.util.jar.JarEntry;
+import java.util.jar.JarFile;
+import java.util.logging.Level;
+import java.util.regex.Pattern;
+
 /**
  * Represents a Java plugin loader, allowing plugins in the form of .jar
  */
 public final class JavaPluginLoader implements PluginLoader {
+
+    public static final CustomTimingsHandler pluginParentTimer = new CustomTimingsHandler("** Plugins"); // Spigot
     final Server server;
-    private final Pattern[] fileFilters = new Pattern[] { Pattern.compile("\\.jar$"), };
+    private final Pattern[] fileFilters = new Pattern[]{Pattern.compile("\\.jar$"),};
     private final Map<String, Class<?>> classes = new java.util.concurrent.ConcurrentHashMap<String, Class<?>>(); // Spigot
     private final Map<String, PluginClassLoader> loaders = new LinkedHashMap<String, PluginClassLoader>();
-    public static final CustomTimingsHandler pluginParentTimer = new CustomTimingsHandler("** Plugins"); // Spigot
 
     /**
      * This class was not meant to be constructed explicitly
@@ -85,31 +87,31 @@ public final class JavaPluginLoader implements PluginLoader {
             // They are equal -- nothing needs to be done!
         } else if (dataFolder.isDirectory() && oldDataFolder.isDirectory()) {
             server.getLogger().warning(String.format(
-                "While loading %s (%s) found old-data folder: `%s' next to the new one `%s'",
-                description.getFullName(),
-                file,
-                oldDataFolder,
-                dataFolder
+                    "While loading %s (%s) found old-data folder: `%s' next to the new one `%s'",
+                    description.getFullName(),
+                    file,
+                    oldDataFolder,
+                    dataFolder
             ));
         } else if (oldDataFolder.isDirectory() && !dataFolder.exists()) {
             if (!oldDataFolder.renameTo(dataFolder)) {
                 throw new InvalidPluginException("Unable to rename old data folder: `" + oldDataFolder + "' to: `" + dataFolder + "'");
             }
             server.getLogger().log(Level.INFO, String.format(
-                "While loading %s (%s) renamed data folder: `%s' to `%s'",
-                description.getFullName(),
-                file,
-                oldDataFolder,
-                dataFolder
+                    "While loading %s (%s) renamed data folder: `%s' to `%s'",
+                    description.getFullName(),
+                    file,
+                    oldDataFolder,
+                    dataFolder
             ));
         }
 
         if (dataFolder.exists() && !dataFolder.isDirectory()) {
             throw new InvalidPluginException(String.format(
-                "Projected datafolder: `%s' for %s (%s) exists and is not a directory",
-                dataFolder,
-                description.getFullName(),
-                file
+                    "Projected datafolder: `%s' for %s (%s) exists and is not a directory",
+                    dataFolder,
+                    description.getFullName(),
+                    file
             ));
         }
 
@@ -134,7 +136,6 @@ public final class JavaPluginLoader implements PluginLoader {
         }
 
         loaders.put(description.getName(), loader);
-
         return loader.plugin;
     }
 
@@ -153,9 +154,7 @@ public final class JavaPluginLoader implements PluginLoader {
             }
 
             stream = jar.getInputStream(entry);
-
             return new PluginDescriptionFile(stream);
-
         } catch (IOException ex) {
             throw new InvalidDescriptionException(ex);
         } catch (YAMLException ex) {
@@ -164,13 +163,13 @@ public final class JavaPluginLoader implements PluginLoader {
             if (jar != null) {
                 try {
                     jar.close();
-                } catch (IOException e) {
+                } catch (IOException ignored) {
                 }
             }
             if (stream != null) {
                 try {
                     stream.close();
-                } catch (IOException e) {
+                } catch (IOException ignored) {
                 }
             }
         }
@@ -191,7 +190,8 @@ public final class JavaPluginLoader implements PluginLoader {
 
                 try {
                     cachedClass = loader.findClass(name, false);
-                } catch (ClassNotFoundException cnfe) {}
+                } catch (ClassNotFoundException ignored) {
+                }
                 if (cachedClass != null) {
                     return cachedClass;
                 }
@@ -203,7 +203,6 @@ public final class JavaPluginLoader implements PluginLoader {
     void setClass(final String name, final Class<?> clazz) {
         if (!classes.containsKey(name)) {
             classes.put(name, clazz);
-
             if (ConfigurationSerializable.class.isAssignableFrom(clazz)) {
                 Class<? extends ConfigurationSerializable> serializable = clazz.asSubclass(ConfigurationSerializable.class);
                 ConfigurationSerialization.registerClass(serializable);
@@ -219,7 +218,7 @@ public final class JavaPluginLoader implements PluginLoader {
                 Class<? extends ConfigurationSerializable> serializable = clazz.asSubclass(ConfigurationSerializable.class);
                 ConfigurationSerialization.unregisterClass(serializable);
             }
-        } catch (NullPointerException ex) {
+        } catch (NullPointerException ignored) {
             // Boggle!
             // (Native methods throwing NPEs is not fun when you can't stop it before-hand)
         }
@@ -229,18 +228,14 @@ public final class JavaPluginLoader implements PluginLoader {
         Validate.notNull(plugin, "Plugin can not be null");
         Validate.notNull(listener, "Listener can not be null");
 
-        boolean useTimings = server.getPluginManager().useTimings();
+        //boolean useTimings = server.getPluginManager().useTimings();
         Map<Class<? extends Event>, Set<RegisteredListener>> ret = new HashMap<Class<? extends Event>, Set<RegisteredListener>>();
         Set<Method> methods;
         try {
             Method[] publicMethods = listener.getClass().getMethods();
             methods = new HashSet<Method>(publicMethods.length, Float.MAX_VALUE);
-            for (Method method : publicMethods) {
-                methods.add(method);
-            }
-            for (Method method : listener.getClass().getDeclaredMethods()) {
-                methods.add(method);
-            }
+            Collections.addAll(methods, publicMethods);
+            Collections.addAll(methods, listener.getClass().getDeclaredMethods());
         } catch (NoClassDefFoundError e) {
             plugin.getLogger().severe("Plugin " + plugin.getDescription().getFullName() + " has failed to register events for " + listener.getClass() + " because " + e.getMessage() + " does not exist.");
             return ret;
@@ -254,6 +249,7 @@ public final class JavaPluginLoader implements PluginLoader {
                 plugin.getLogger().severe(plugin.getDescription().getFullName() + " attempted to register an invalid EventHandler method signature \"" + method.toGenericString() + "\" in " + listener.getClass());
                 continue;
             }
+
             final Class<? extends Event> eventClass = checkClass.asSubclass(Event.class);
             method.setAccessible(true);
             Set<RegisteredListener> eventSet = ret.get(eventClass);
@@ -272,9 +268,7 @@ public final class JavaPluginLoader implements PluginLoader {
                     }
                     plugin.getLogger().log(
                             Level.WARNING,
-                            String.format(
-                                    "\"%s\" has registered a listener for %s on method \"%s\", but the event is Deprecated." +
-                                    " \"%s\"; please notify the authors %s.",
+                            String.format("\"%s\" has registered a listener for %s on method \"%s\", but the event is Deprecated. \"%s\"; please notify the authors %s.",
                                     plugin.getDescription().getFullName(),
                                     clazz.getName(),
                                     method.toGenericString(),
@@ -285,7 +279,7 @@ public final class JavaPluginLoader implements PluginLoader {
                 }
             }
 
-            final CustomTimingsHandler timings = new CustomTimingsHandler("Plugin: " + plugin.getDescription().getFullName() + " Event: " + listener.getClass().getName() + "::" + method.getName()+"("+eventClass.getSimpleName()+")", pluginParentTimer); // Spigot
+            final CustomTimingsHandler timings = new CustomTimingsHandler("Plugin: " + plugin.getDescription().getFullName() + " Event: " + listener.getClass().getName() + "::" + method.getName() + "(" + eventClass.getSimpleName() + ")", pluginParentTimer); // Spigot
             EventExecutor executor = new EventExecutor() {
                 public void execute(Listener listener, Event event) throws EventException {
                     try {
@@ -300,28 +294,31 @@ public final class JavaPluginLoader implements PluginLoader {
                         // Spigot end
                     } catch (InvocationTargetException ex) {
                         throw new EventException(ex.getCause());
-                    } catch (Throwable t) {
-                        throw new EventException(t);
+                    } catch (Throwable throwable) {
+                        throw new EventException(throwable);
                     }
                 }
             };
+
             if (false) { // Spigot - RL handles useTimings check now
                 eventSet.add(new TimedRegisteredListener(listener, executor, eh.priority(), plugin, eh.ignoreCancelled()));
             } else {
                 eventSet.add(new RegisteredListener(listener, executor, eh.priority(), plugin, eh.ignoreCancelled()));
             }
         }
+
         return ret;
     }
 
     public void enablePlugin(final Plugin plugin) {
-        Validate.isTrue(plugin instanceof JavaPlugin, "Plugin is not associated with this PluginLoader");
+        if (!(plugin instanceof JavaPlugin)) {
+            throw new IllegalArgumentException("Plugin is not associated with this PluginLoader");
+        }
 
         if (!plugin.isEnabled()) {
             plugin.getLogger().info("Enabling " + plugin.getDescription().getFullName());
 
             JavaPlugin jPlugin = (JavaPlugin) plugin;
-
             String pluginName = jPlugin.getDescription().getName();
 
             if (!loaders.containsKey(pluginName)) {
@@ -330,8 +327,8 @@ public final class JavaPluginLoader implements PluginLoader {
 
             try {
                 jPlugin.setEnabled(true);
-            } catch (Throwable ex) {
-                server.getLogger().log(Level.SEVERE, "Error occurred while enabling " + plugin.getDescription().getFullName() + " (Is it up to date?)", ex);
+            } catch (Throwable throwable) {
+                server.getLogger().log(Level.SEVERE, "Error occurred while enabling " + plugin.getDescription().getFullName() + " (Is it up to date?)", throwable);
             }
 
             // Perhaps abort here, rather than continue going, but as it stands,
@@ -341,7 +338,9 @@ public final class JavaPluginLoader implements PluginLoader {
     }
 
     public void disablePlugin(Plugin plugin) {
-        Validate.isTrue(plugin instanceof JavaPlugin, "Plugin is not associated with this PluginLoader");
+        if (!(plugin instanceof JavaPlugin)) {
+            throw new IllegalArgumentException("Plugin is not associated with this PluginLoader");
+        }
 
         if (plugin.isEnabled()) {
             String message = String.format("Disabling %s", plugin.getDescription().getFullName());
@@ -354,12 +353,11 @@ public final class JavaPluginLoader implements PluginLoader {
 
             try {
                 jPlugin.setEnabled(false);
-            } catch (Throwable ex) {
-                server.getLogger().log(Level.SEVERE, "Error occurred while disabling " + plugin.getDescription().getFullName() + " (Is it up to date?)", ex);
+            } catch (Throwable throwable) {
+                server.getLogger().log(Level.SEVERE, "Error occurred while disabling " + plugin.getDescription().getFullName() + " (Is it up to date?)", throwable);
             }
 
             loaders.remove(jPlugin.getDescription().getName());
-
             if (cloader instanceof PluginClassLoader) {
                 PluginClassLoader loader = (PluginClassLoader) cloader;
                 Set<String> names = loader.getClasses();
diff --git a/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java b/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java
index 4cffa13..2ac4743 100644
--- a/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java
+++ b/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java
@@ -1,56 +1,50 @@
 package org.bukkit.plugin.java;
 
+import org.apache.commons.lang.Validate;
+import org.bukkit.plugin.InvalidPluginException;
+import org.bukkit.plugin.PluginDescriptionFile;
+
 import java.io.File;
 import java.net.MalformedURLException;
 import java.net.URL;
 import java.net.URLClassLoader;
-import java.util.HashMap;
 import java.util.Map;
 import java.util.Set;
 
-import org.apache.commons.lang.Validate;
-import org.bukkit.plugin.InvalidPluginException;
-import org.bukkit.plugin.PluginDescriptionFile;
-
 /**
  * A ClassLoader for plugins, to allow shared classes across multiple plugins
  */
 final class PluginClassLoader extends URLClassLoader {
+
+    // Spigot Start
+    static {
+        try {
+            java.lang.reflect.Method method = ClassLoader.class.getDeclaredMethod("registerAsParallelCapable");
+            if (method != null) {
+                boolean oldAccessible = method.isAccessible();
+                method.setAccessible(true);
+                method.invoke(null);
+                method.setAccessible(oldAccessible);
+                org.bukkit.Bukkit.getLogger().log(java.util.logging.Level.INFO, "Set PluginClassLoader as parallel capable");
+            }
+        } catch (NoSuchMethodException ignored) {
+        } catch (Exception ex) {
+            org.bukkit.Bukkit.getLogger().log(java.util.logging.Level.WARNING, "Error setting PluginClassLoader as parallel capable", ex);
+        }
+    }
+
+    final JavaPlugin plugin;
     private final JavaPluginLoader loader;
     private final Map<String, Class<?>> classes = new java.util.concurrent.ConcurrentHashMap<String, Class<?>>(); // Spigot
     private final PluginDescriptionFile description;
     private final File dataFolder;
     private final File file;
-    final JavaPlugin plugin;
     private JavaPlugin pluginInit;
     private IllegalStateException pluginState;
-
-    // Spigot Start
-    static
-    {
-        try
-        {
-            java.lang.reflect.Method method = ClassLoader.class.getDeclaredMethod( "registerAsParallelCapable" );
-            if ( method != null )
-            {
-                boolean oldAccessible = method.isAccessible();
-                method.setAccessible( true );
-                method.invoke( null );
-                method.setAccessible( oldAccessible );
-                org.bukkit.Bukkit.getLogger().log( java.util.logging.Level.INFO, "Set PluginClassLoader as parallel capable" );
-            }
-        } catch ( NoSuchMethodException ex )
-        {
-            // Ignore
-        } catch ( Exception ex )
-        {
-            org.bukkit.Bukkit.getLogger().log( java.util.logging.Level.WARNING, "Error setting PluginClassLoader as parallel capable", ex );
-        }
-    }
     // Spigot End
-    
+
     PluginClassLoader(final JavaPluginLoader loader, final ClassLoader parent, final PluginDescriptionFile description, final File dataFolder, final File file) throws InvalidPluginException, MalformedURLException {
-        super(new URL[] {file.toURI().toURL()}, parent);
+        super(new URL[]{file.toURI().toURL()}, parent);
         Validate.notNull(loader, "Loader cannot be null");
 
         this.loader = loader;
@@ -90,8 +84,8 @@ final class PluginClassLoader extends URLClassLoader {
         if (name.startsWith("org.bukkit.") || name.startsWith("net.minecraft.")) {
             throw new ClassNotFoundException(name);
         }
-        Class<?> result = classes.get(name);
 
+        Class<?> result = classes.get(name);
         if (result == null) {
             if (checkGlobal) {
                 result = loader.getClassByName(name);
@@ -122,9 +116,8 @@ final class PluginClassLoader extends URLClassLoader {
             throw new IllegalArgumentException("Plugin already initialized!", pluginState);
         }
 
-        pluginState = new IllegalStateException("Initial initialization");
+        this.pluginState = new IllegalStateException("Initial initialization");
         this.pluginInit = javaPlugin;
-
         javaPlugin.init(loader, loader.server, description, dataFolder, file, this);
     }
 }
diff --git a/src/main/java/org/bukkit/plugin/messaging/ChannelNameTooLongException.java b/src/main/java/org/bukkit/plugin/messaging/ChannelNameTooLongException.java
index 80ef8a2..b537d52 100644
--- a/src/main/java/org/bukkit/plugin/messaging/ChannelNameTooLongException.java
+++ b/src/main/java/org/bukkit/plugin/messaging/ChannelNameTooLongException.java
@@ -5,6 +5,7 @@ package org.bukkit.plugin.messaging;
  */
 @SuppressWarnings("serial")
 public class ChannelNameTooLongException extends RuntimeException {
+
     public ChannelNameTooLongException() {
         super("Attempted to send a Plugin Message to a channel that was too large. The maximum length a channel may be is " + Messenger.MAX_CHANNEL_SIZE + " chars.");
     }
diff --git a/src/main/java/org/bukkit/plugin/messaging/ChannelNotRegisteredException.java b/src/main/java/org/bukkit/plugin/messaging/ChannelNotRegisteredException.java
index 2266f17..d552c3d 100644
--- a/src/main/java/org/bukkit/plugin/messaging/ChannelNotRegisteredException.java
+++ b/src/main/java/org/bukkit/plugin/messaging/ChannelNotRegisteredException.java
@@ -5,6 +5,7 @@ package org.bukkit.plugin.messaging;
  */
 @SuppressWarnings("serial")
 public class ChannelNotRegisteredException extends RuntimeException {
+
     public ChannelNotRegisteredException() {
         this("Attempted to send a plugin message through an unregistered channel.");
     }
diff --git a/src/main/java/org/bukkit/plugin/messaging/MessageTooLargeException.java b/src/main/java/org/bukkit/plugin/messaging/MessageTooLargeException.java
index 61af8c4..2f688ff 100644
--- a/src/main/java/org/bukkit/plugin/messaging/MessageTooLargeException.java
+++ b/src/main/java/org/bukkit/plugin/messaging/MessageTooLargeException.java
@@ -5,6 +5,7 @@ package org.bukkit.plugin.messaging;
  */
 @SuppressWarnings("serial")
 public class MessageTooLargeException extends RuntimeException {
+
     public MessageTooLargeException() {
         this("Attempted to send a plugin message that was too large. The maximum length a plugin message may be is " + Messenger.MAX_MESSAGE_SIZE + " bytes.");
     }
diff --git a/src/main/java/org/bukkit/plugin/messaging/Messenger.java b/src/main/java/org/bukkit/plugin/messaging/Messenger.java
index aa009fe..d89f4f7 100644
--- a/src/main/java/org/bukkit/plugin/messaging/Messenger.java
+++ b/src/main/java/org/bukkit/plugin/messaging/Messenger.java
@@ -1,9 +1,10 @@
 package org.bukkit.plugin.messaging;
 
-import java.util.Set;
 import org.bukkit.entity.Player;
 import org.bukkit.plugin.Plugin;
 
+import java.util.Set;
+
 /**
  * A class responsible for managing the registrations of plugin channels and
  * their listeners.
@@ -13,12 +14,12 @@ public interface Messenger {
     /**
      * Represents the largest size that an individual Plugin Message may be.
      */
-    public static final int MAX_MESSAGE_SIZE = 32766;
+    int MAX_MESSAGE_SIZE = 32766;
 
     /**
      * Represents the largest size that a Plugin Channel may be.
      */
-    public static final int MAX_CHANNEL_SIZE = 16;
+    int MAX_CHANNEL_SIZE = 16;
 
     /**
      * Checks if the specified channel is a reserved name.
@@ -27,29 +28,29 @@ public interface Messenger {
      * @return True if the channel is reserved, otherwise false.
      * @throws IllegalArgumentException Thrown if channel is null.
      */
-    public boolean isReservedChannel(String channel);
+    boolean isReservedChannel(String channel);
 
     /**
      * Registers the specific plugin to the requested outgoing plugin channel,
      * allowing it to send messages through that channel to any clients.
      *
-     * @param plugin Plugin that wishes to send messages through the channel.
+     * @param plugin  Plugin that wishes to send messages through the channel.
      * @param channel Channel to register.
      * @throws IllegalArgumentException Thrown if plugin or channel is null.
      */
-    public void registerOutgoingPluginChannel(Plugin plugin, String channel);
+    void registerOutgoingPluginChannel(Plugin plugin, String channel);
 
     /**
      * Unregisters the specific plugin from the requested outgoing plugin
      * channel, no longer allowing it to send messages through that channel to
      * any clients.
      *
-     * @param plugin Plugin that no longer wishes to send messages through the
-     *     channel.
+     * @param plugin  Plugin that no longer wishes to send messages through the
+     *                channel.
      * @param channel Channel to unregister.
      * @throws IllegalArgumentException Thrown if plugin or channel is null.
      */
-    public void unregisterOutgoingPluginChannel(Plugin plugin, String channel);
+    void unregisterOutgoingPluginChannel(Plugin plugin, String channel);
 
     /**
      * Unregisters the specific plugin from all outgoing plugin channels, no
@@ -58,45 +59,45 @@ public interface Messenger {
      * @param plugin Plugin that no longer wishes to send plugin messages.
      * @throws IllegalArgumentException Thrown if plugin is null.
      */
-    public void unregisterOutgoingPluginChannel(Plugin plugin);
+    void unregisterOutgoingPluginChannel(Plugin plugin);
 
     /**
      * Registers the specific plugin for listening on the requested incoming
      * plugin channel, allowing it to act upon any plugin messages.
      *
-     * @param plugin Plugin that wishes to register to this channel.
-     * @param channel Channel to register.
+     * @param plugin   Plugin that wishes to register to this channel.
+     * @param channel  Channel to register.
      * @param listener Listener to receive messages on.
      * @return The resulting registration that was made as a result of this
-     *     method.
+     * method.
      * @throws IllegalArgumentException Thrown if plugin, channel or listener
-     *     is null, or the listener is already registered for this channel.
+     *                                  is null, or the listener is already registered for this channel.
      */
-    public PluginMessageListenerRegistration registerIncomingPluginChannel(Plugin plugin, String channel, PluginMessageListener listener);
+    PluginMessageListenerRegistration registerIncomingPluginChannel(Plugin plugin, String channel, PluginMessageListener listener);
 
     /**
      * Unregisters the specific plugin's listener from listening on the
      * requested incoming plugin channel, no longer allowing it to act upon
      * any plugin messages.
      *
-     * @param plugin Plugin that wishes to unregister from this channel.
-     * @param channel Channel to unregister.
+     * @param plugin   Plugin that wishes to unregister from this channel.
+     * @param channel  Channel to unregister.
      * @param listener Listener to stop receiving messages on.
      * @throws IllegalArgumentException Thrown if plugin, channel or listener
-     *     is null.
+     *                                  is null.
      */
-    public void unregisterIncomingPluginChannel(Plugin plugin, String channel, PluginMessageListener listener);
+    void unregisterIncomingPluginChannel(Plugin plugin, String channel, PluginMessageListener listener);
 
     /**
      * Unregisters the specific plugin from listening on the requested
      * incoming plugin channel, no longer allowing it to act upon any plugin
      * messages.
      *
-     * @param plugin Plugin that wishes to unregister from this channel.
+     * @param plugin  Plugin that wishes to unregister from this channel.
      * @param channel Channel to unregister.
      * @throws IllegalArgumentException Thrown if plugin or channel is null.
      */
-    public void unregisterIncomingPluginChannel(Plugin plugin, String channel);
+    void unregisterIncomingPluginChannel(Plugin plugin, String channel);
 
     /**
      * Unregisters the specific plugin from listening on all plugin channels
@@ -105,14 +106,14 @@ public interface Messenger {
      * @param plugin Plugin that wishes to unregister from this channel.
      * @throws IllegalArgumentException Thrown if plugin is null.
      */
-    public void unregisterIncomingPluginChannel(Plugin plugin);
+    void unregisterIncomingPluginChannel(Plugin plugin);
 
     /**
      * Gets a set containing all the outgoing plugin channels.
      *
      * @return List of all registered outgoing plugin channels.
      */
-    public Set<String> getOutgoingChannels();
+    Set<String> getOutgoingChannels();
 
     /**
      * Gets a set containing all the outgoing plugin channels that the
@@ -120,17 +121,17 @@ public interface Messenger {
      *
      * @param plugin Plugin to retrieve channels for.
      * @return List of all registered outgoing plugin channels that a plugin
-     *     is registered to.
+     * is registered to.
      * @throws IllegalArgumentException Thrown if plugin is null.
      */
-    public Set<String> getOutgoingChannels(Plugin plugin);
+    Set<String> getOutgoingChannels(Plugin plugin);
 
     /**
      * Gets a set containing all the incoming plugin channels.
      *
      * @return List of all registered incoming plugin channels.
      */
-    public Set<String> getIncomingChannels();
+    Set<String> getIncomingChannels();
 
     /**
      * Gets a set containing all the incoming plugin channels that the
@@ -138,10 +139,10 @@ public interface Messenger {
      *
      * @param plugin Plugin to retrieve channels for.
      * @return List of all registered incoming plugin channels that the plugin
-     *     is registered for.
+     * is registered for.
      * @throws IllegalArgumentException Thrown if plugin is null.
      */
-    public Set<String> getIncomingChannels(Plugin plugin);
+    Set<String> getIncomingChannels(Plugin plugin);
 
     /**
      * Gets a set containing all the incoming plugin channel registrations
@@ -151,7 +152,7 @@ public interface Messenger {
      * @return List of all registrations that the plugin has.
      * @throws IllegalArgumentException Thrown if plugin is null.
      */
-    public Set<PluginMessageListenerRegistration> getIncomingChannelRegistrations(Plugin plugin);
+    Set<PluginMessageListenerRegistration> getIncomingChannelRegistrations(Plugin plugin);
 
     /**
      * Gets a set containing all the incoming plugin channel registrations
@@ -161,18 +162,18 @@ public interface Messenger {
      * @return List of all registrations that are on the channel.
      * @throws IllegalArgumentException Thrown if channel is null.
      */
-    public Set<PluginMessageListenerRegistration> getIncomingChannelRegistrations(String channel);
+    Set<PluginMessageListenerRegistration> getIncomingChannelRegistrations(String channel);
 
     /**
      * Gets a set containing all the incoming plugin channel registrations
      * that the specified plugin has on the requested channel.
      *
-     * @param plugin Plugin to retrieve registrations for.
+     * @param plugin  Plugin to retrieve registrations for.
      * @param channel Channel to filter registrations by.
      * @return List of all registrations that the plugin has.
      * @throws IllegalArgumentException Thrown if plugin or channel is null.
      */
-    public Set<PluginMessageListenerRegistration> getIncomingChannelRegistrations(Plugin plugin, String channel);
+    Set<PluginMessageListenerRegistration> getIncomingChannelRegistrations(Plugin plugin, String channel);
 
     /**
      * Checks if the specified plugin message listener registration is valid.
@@ -183,34 +184,34 @@ public interface Messenger {
      * @param registration Registration to check.
      * @return True if the registration is valid, otherwise false.
      */
-    public boolean isRegistrationValid(PluginMessageListenerRegistration registration);
+    boolean isRegistrationValid(PluginMessageListenerRegistration registration);
 
     /**
      * Checks if the specified plugin has registered to receive incoming
      * messages through the requested channel.
      *
-     * @param plugin Plugin to check registration for.
+     * @param plugin  Plugin to check registration for.
      * @param channel Channel to test for.
      * @return True if the channel is registered, else false.
      */
-    public boolean isIncomingChannelRegistered(Plugin plugin, String channel);
+    boolean isIncomingChannelRegistered(Plugin plugin, String channel);
 
     /**
      * Checks if the specified plugin has registered to send outgoing messages
      * through the requested channel.
      *
-     * @param plugin Plugin to check registration for.
+     * @param plugin  Plugin to check registration for.
      * @param channel Channel to test for.
      * @return True if the channel is registered, else false.
      */
-    public boolean isOutgoingChannelRegistered(Plugin plugin, String channel);
+    boolean isOutgoingChannelRegistered(Plugin plugin, String channel);
 
     /**
      * Dispatches the specified incoming message to any registered listeners.
      *
-     * @param source Source of the message.
+     * @param source  Source of the message.
      * @param channel Channel that the message was sent by.
      * @param message Raw payload of the message.
      */
-    public void dispatchIncomingMessage(Player source, String channel, byte[] message);
+    void dispatchIncomingMessage(Player source, String channel, byte[] message);
 }
diff --git a/src/main/java/org/bukkit/plugin/messaging/PluginMessageListener.java b/src/main/java/org/bukkit/plugin/messaging/PluginMessageListener.java
index f1aa080..a93eb81 100644
--- a/src/main/java/org/bukkit/plugin/messaging/PluginMessageListener.java
+++ b/src/main/java/org/bukkit/plugin/messaging/PluginMessageListener.java
@@ -13,8 +13,8 @@ public interface PluginMessageListener {
      * message on a registered channel.
      *
      * @param channel Channel that the message was sent through.
-     * @param player Source of the message.
+     * @param player  Source of the message.
      * @param message The raw message that was sent.
      */
-    public void onPluginMessageReceived(String channel, Player player, byte[] message);
+    void onPluginMessageReceived(String channel, Player player, byte[] message);
 }
diff --git a/src/main/java/org/bukkit/plugin/messaging/PluginMessageListenerRegistration.java b/src/main/java/org/bukkit/plugin/messaging/PluginMessageListenerRegistration.java
index 29929bf..dc10d12 100644
--- a/src/main/java/org/bukkit/plugin/messaging/PluginMessageListenerRegistration.java
+++ b/src/main/java/org/bukkit/plugin/messaging/PluginMessageListenerRegistration.java
@@ -7,6 +7,7 @@ import org.bukkit.plugin.Plugin;
  * channel.
  */
 public final class PluginMessageListenerRegistration {
+
     private final Messenger messenger;
     private final Plugin plugin;
     private final String channel;
@@ -16,12 +17,15 @@ public final class PluginMessageListenerRegistration {
         if (messenger == null) {
             throw new IllegalArgumentException("Messenger cannot be null!");
         }
+
         if (plugin == null) {
             throw new IllegalArgumentException("Plugin cannot be null!");
         }
+
         if (channel == null) {
             throw new IllegalArgumentException("Channel cannot be null!");
         }
+
         if (listener == null) {
             throw new IllegalArgumentException("Listener cannot be null!");
         }
@@ -73,22 +77,28 @@ public final class PluginMessageListenerRegistration {
         if (obj == null) {
             return false;
         }
+
         if (getClass() != obj.getClass()) {
             return false;
         }
+
         final PluginMessageListenerRegistration other = (PluginMessageListenerRegistration) obj;
         if (this.messenger != other.messenger && (this.messenger == null || !this.messenger.equals(other.messenger))) {
             return false;
         }
+
         if (this.plugin != other.plugin && (this.plugin == null || !this.plugin.equals(other.plugin))) {
             return false;
         }
+
         if ((this.channel == null) ? (other.channel != null) : !this.channel.equals(other.channel)) {
             return false;
         }
+
         if (this.listener != other.listener && (this.listener == null || !this.listener.equals(other.listener))) {
             return false;
         }
+
         return true;
     }
 
diff --git a/src/main/java/org/bukkit/plugin/messaging/PluginMessageRecipient.java b/src/main/java/org/bukkit/plugin/messaging/PluginMessageRecipient.java
index e5c5916..89cb475 100644
--- a/src/main/java/org/bukkit/plugin/messaging/PluginMessageRecipient.java
+++ b/src/main/java/org/bukkit/plugin/messaging/PluginMessageRecipient.java
@@ -1,12 +1,14 @@
 package org.bukkit.plugin.messaging;
 
-import java.util.Set;
 import org.bukkit.plugin.Plugin;
 
+import java.util.Set;
+
 /**
  * Represents a possible recipient for a Plugin Message.
  */
 public interface PluginMessageRecipient {
+
     /**
      * Sends this recipient a Plugin Message on the specified outgoing
      * channel.
@@ -15,18 +17,18 @@ public interface PluginMessageRecipient {
      * bytes, and the plugin must be registered to send messages on the
      * specified channel.
      *
-     * @param source The plugin that sent this message.
+     * @param source  The plugin that sent this message.
      * @param channel The channel to send this message on.
      * @param message The raw message to send.
-     * @throws IllegalArgumentException Thrown if the source plugin is
-     *     disabled.
-     * @throws IllegalArgumentException Thrown if source, channel or message
-     *     is null.
-     * @throws MessageTooLargeException Thrown if the message is too big.
+     * @throws IllegalArgumentException      Thrown if the source plugin is
+     *                                       disabled.
+     * @throws IllegalArgumentException      Thrown if source, channel or message
+     *                                       is null.
+     * @throws MessageTooLargeException      Thrown if the message is too big.
      * @throws ChannelNotRegisteredException Thrown if the channel is not
-     *     registered for this plugin.
+     *                                       registered for this plugin.
      */
-    public void sendPluginMessage(Plugin source, String channel, byte[] message);
+    void sendPluginMessage(Plugin source, String channel, byte[] message);
 
     /**
      * Gets a set containing all the Plugin Channels that this client is
@@ -34,5 +36,5 @@ public interface PluginMessageRecipient {
      *
      * @return Set containing all the channels that this client may accept.
      */
-    public Set<String> getListeningPluginChannels();
+    Set<String> getListeningPluginChannels();
 }
diff --git a/src/main/java/org/bukkit/plugin/messaging/ReservedChannelException.java b/src/main/java/org/bukkit/plugin/messaging/ReservedChannelException.java
index 0221f04..3637c11 100644
--- a/src/main/java/org/bukkit/plugin/messaging/ReservedChannelException.java
+++ b/src/main/java/org/bukkit/plugin/messaging/ReservedChannelException.java
@@ -6,6 +6,7 @@ package org.bukkit.plugin.messaging;
  */
 @SuppressWarnings("serial")
 public class ReservedChannelException extends RuntimeException {
+
     public ReservedChannelException() {
         this("Attempted to register for a reserved channel name.");
     }
diff --git a/src/main/java/org/bukkit/plugin/messaging/StandardMessenger.java b/src/main/java/org/bukkit/plugin/messaging/StandardMessenger.java
index 4c171e8..aa19ea9 100644
--- a/src/main/java/org/bukkit/plugin/messaging/StandardMessenger.java
+++ b/src/main/java/org/bukkit/plugin/messaging/StandardMessenger.java
@@ -2,24 +2,88 @@ package org.bukkit.plugin.messaging;
 
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.ImmutableSet.Builder;
+import org.bukkit.entity.Player;
+import org.bukkit.plugin.Plugin;
+
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Map;
 import java.util.Set;
-import org.bukkit.entity.Player;
-import org.bukkit.plugin.Plugin;
 
 /**
  * Standard implementation to {@link Messenger}
  */
 public class StandardMessenger implements Messenger {
+
     private final Map<String, Set<PluginMessageListenerRegistration>> incomingByChannel = new HashMap<String, Set<PluginMessageListenerRegistration>>();
     private final Map<Plugin, Set<PluginMessageListenerRegistration>> incomingByPlugin = new HashMap<Plugin, Set<PluginMessageListenerRegistration>>();
     private final Map<String, Set<Plugin>> outgoingByChannel = new HashMap<String, Set<Plugin>>();
     private final Map<Plugin, Set<String>> outgoingByPlugin = new HashMap<Plugin, Set<String>>();
+
     private final Object incomingLock = new Object();
     private final Object outgoingLock = new Object();
 
+    /**
+     * Validates a Plugin Channel name.
+     *
+     * @param channel Channel name to validate.
+     */
+    public static void validateChannel(String channel) {
+        if (channel == null) {
+            throw new IllegalArgumentException("Channel cannot be null");
+        }
+
+        if (channel.length() > Messenger.MAX_CHANNEL_SIZE) {
+            throw new ChannelNameTooLongException(channel);
+        }
+    }
+
+    /**
+     * Validates the input of a Plugin Message, ensuring the arguments are all
+     * valid.
+     *
+     * @param messenger Messenger to use for validation.
+     * @param source    Source plugin of the Message.
+     * @param channel   Plugin Channel to send the message by.
+     * @param message   Raw message payload to send.
+     * @throws IllegalArgumentException      Thrown if the source plugin is
+     *                                       disabled.
+     * @throws IllegalArgumentException      Thrown if source, channel or message
+     *                                       is null.
+     * @throws MessageTooLargeException      Thrown if the message is too big.
+     * @throws ChannelNameTooLongException   Thrown if the channel name is too
+     *                                       long.
+     * @throws ChannelNotRegisteredException Thrown if the channel is not
+     *                                       registered for this plugin.
+     */
+    public static void validatePluginMessage(Messenger messenger, Plugin source, String channel, byte[] message) {
+        if (messenger == null) {
+            throw new IllegalArgumentException("Messenger cannot be null");
+        }
+
+        if (source == null) {
+            throw new IllegalArgumentException("Plugin source cannot be null");
+        }
+
+        if (!source.isEnabled()) {
+            throw new IllegalArgumentException("Plugin must be enabled to send messages");
+        }
+
+        if (message == null) {
+            throw new IllegalArgumentException("Message cannot be null");
+        }
+
+        if (!messenger.isOutgoingChannelRegistered(source, channel)) {
+            throw new ChannelNotRegisteredException(channel);
+        }
+
+        if (message.length > Messenger.MAX_MESSAGE_SIZE) {
+            throw new MessageTooLargeException(message);
+        }
+
+        validateChannel(channel);
+    }
+
     private void addToOutgoing(Plugin plugin, String channel) {
         synchronized (outgoingLock) {
             Set<Plugin> plugins = outgoingByChannel.get(channel);
@@ -69,7 +133,6 @@ public class StandardMessenger implements Messenger {
 
             if (channels != null) {
                 String[] toRemove = channels.toArray(new String[0]);
-
                 outgoingByPlugin.remove(plugin);
 
                 for (String channel : toRemove) {
@@ -155,7 +218,6 @@ public class StandardMessenger implements Messenger {
 
             if (registrations != null) {
                 PluginMessageListenerRegistration[] toRemove = registrations.toArray(new PluginMessageListenerRegistration[0]);
-
                 incomingByPlugin.remove(plugin);
 
                 for (PluginMessageListenerRegistration registration : toRemove) {
@@ -167,7 +229,6 @@ public class StandardMessenger implements Messenger {
 
     public boolean isReservedChannel(String channel) {
         validateChannel(channel);
-
         return channel.equals("REGISTER") || channel.equals("UNREGISTER");
     }
 
@@ -175,6 +236,7 @@ public class StandardMessenger implements Messenger {
         if (plugin == null) {
             throw new IllegalArgumentException("Plugin cannot be null");
         }
+
         validateChannel(channel);
         if (isReservedChannel(channel)) {
             throw new ReservedChannelException(channel);
@@ -204,18 +266,18 @@ public class StandardMessenger implements Messenger {
         if (plugin == null) {
             throw new IllegalArgumentException("Plugin cannot be null");
         }
+
         validateChannel(channel);
         if (isReservedChannel(channel)) {
             throw new ReservedChannelException(channel);
         }
+
         if (listener == null) {
             throw new IllegalArgumentException("Listener cannot be null");
         }
 
         PluginMessageListenerRegistration result = new PluginMessageListenerRegistration(this, plugin, channel, listener);
-
         addToIncoming(result);
-
         return result;
     }
 
@@ -223,11 +285,12 @@ public class StandardMessenger implements Messenger {
         if (plugin == null) {
             throw new IllegalArgumentException("Plugin cannot be null");
         }
+
         if (listener == null) {
             throw new IllegalArgumentException("Listener cannot be null");
         }
-        validateChannel(channel);
 
+        validateChannel(channel);
         removeFromIncoming(new PluginMessageListenerRegistration(this, plugin, channel, listener));
     }
 
@@ -235,8 +298,8 @@ public class StandardMessenger implements Messenger {
         if (plugin == null) {
             throw new IllegalArgumentException("Plugin cannot be null");
         }
-        validateChannel(channel);
 
+        validateChannel(channel);
         removeFromIncoming(plugin, channel);
     }
 
@@ -262,7 +325,6 @@ public class StandardMessenger implements Messenger {
 
         synchronized (outgoingLock) {
             Set<String> channels = outgoingByPlugin.get(plugin);
-
             if (channels != null) {
                 return ImmutableSet.copyOf(channels);
             } else {
@@ -288,7 +350,6 @@ public class StandardMessenger implements Messenger {
 
             if (registrations != null) {
                 Builder<String> builder = ImmutableSet.builder();
-
                 for (PluginMessageListenerRegistration registration : registrations) {
                     builder.add(registration.getChannel());
                 }
@@ -307,7 +368,6 @@ public class StandardMessenger implements Messenger {
 
         synchronized (incomingLock) {
             Set<PluginMessageListenerRegistration> registrations = incomingByPlugin.get(plugin);
-
             if (registrations != null) {
                 return ImmutableSet.copyOf(registrations);
             } else {
@@ -321,7 +381,6 @@ public class StandardMessenger implements Messenger {
 
         synchronized (incomingLock) {
             Set<PluginMessageListenerRegistration> registrations = incomingByChannel.get(channel);
-
             if (registrations != null) {
                 return ImmutableSet.copyOf(registrations);
             } else {
@@ -334,14 +393,13 @@ public class StandardMessenger implements Messenger {
         if (plugin == null) {
             throw new IllegalArgumentException("Plugin cannot be null");
         }
-        validateChannel(channel);
 
+        validateChannel(channel);
         synchronized (incomingLock) {
             Set<PluginMessageListenerRegistration> registrations = incomingByPlugin.get(plugin);
 
             if (registrations != null) {
                 Builder<PluginMessageListenerRegistration> builder = ImmutableSet.builder();
-
                 for (PluginMessageListenerRegistration registration : registrations) {
                     if (registration.getChannel().equals(channel)) {
                         builder.add(registration);
@@ -362,12 +420,7 @@ public class StandardMessenger implements Messenger {
 
         synchronized (incomingLock) {
             Set<PluginMessageListenerRegistration> registrations = incomingByPlugin.get(registration.getPlugin());
-
-            if (registrations != null) {
-                return registrations.contains(registration);
-            }
-
-            return false;
+            return registrations != null && registrations.contains(registration);
         }
     }
 
@@ -396,16 +449,11 @@ public class StandardMessenger implements Messenger {
         if (plugin == null) {
             throw new IllegalArgumentException("Plugin cannot be null");
         }
-        validateChannel(channel);
 
+        validateChannel(channel);
         synchronized (outgoingLock) {
             Set<String> channels = outgoingByPlugin.get(plugin);
-
-            if (channels != null) {
-                return channels.contains(channel);
-            }
-
-            return false;
+            return channels != null && channels.contains(channel);
         }
     }
 
@@ -413,77 +461,21 @@ public class StandardMessenger implements Messenger {
         if (source == null) {
             throw new IllegalArgumentException("Player source cannot be null");
         }
+
         if (message == null) {
             throw new IllegalArgumentException("Message cannot be null");
         }
-        validateChannel(channel);
 
+        validateChannel(channel);
         Set<PluginMessageListenerRegistration> registrations = getIncomingChannelRegistrations(channel);
-
         for (PluginMessageListenerRegistration registration : registrations) {
             // Spigot Start
-            try
-            {
-                registration.getListener().onPluginMessageReceived( channel, source, message );
-            } catch ( Throwable t )
-            {
-                org.bukkit.Bukkit.getLogger().log( java.util.logging.Level.WARNING, "Could not pass incoming plugin message to " + registration.getPlugin(), t );
+            try {
+                registration.getListener().onPluginMessageReceived(channel, source, message);
+            } catch (Throwable throwable) {
+                org.bukkit.Bukkit.getLogger().log(java.util.logging.Level.WARNING, "Could not pass incoming plugin message to " + registration.getPlugin(), throwable);
             }
             // Spigot End
         }
     }
-
-    /**
-     * Validates a Plugin Channel name.
-     *
-     * @param channel Channel name to validate.
-     */
-    public static void validateChannel(String channel) {
-        if (channel == null) {
-            throw new IllegalArgumentException("Channel cannot be null");
-        }
-        if (channel.length() > Messenger.MAX_CHANNEL_SIZE) {
-            throw new ChannelNameTooLongException(channel);
-        }
-    }
-
-    /**
-     * Validates the input of a Plugin Message, ensuring the arguments are all
-     * valid.
-     *
-     * @param messenger Messenger to use for validation.
-     * @param source Source plugin of the Message.
-     * @param channel Plugin Channel to send the message by.
-     * @param message Raw message payload to send.
-     * @throws IllegalArgumentException Thrown if the source plugin is
-     *     disabled.
-     * @throws IllegalArgumentException Thrown if source, channel or message
-     *     is null.
-     * @throws MessageTooLargeException Thrown if the message is too big.
-     * @throws ChannelNameTooLongException Thrown if the channel name is too
-     *     long.
-     * @throws ChannelNotRegisteredException Thrown if the channel is not
-     *     registered for this plugin.
-     */
-    public static void validatePluginMessage(Messenger messenger, Plugin source, String channel, byte[] message) {
-        if (messenger == null) {
-            throw new IllegalArgumentException("Messenger cannot be null");
-        }
-        if (source == null) {
-            throw new IllegalArgumentException("Plugin source cannot be null");
-        }
-        if (!source.isEnabled()) {
-            throw new IllegalArgumentException("Plugin must be enabled to send messages");
-        }
-        if (message == null) {
-            throw new IllegalArgumentException("Message cannot be null");
-        }
-        if (!messenger.isOutgoingChannelRegistered(source, channel)) {
-            throw new ChannelNotRegisteredException(channel);
-        }
-        if (message.length > Messenger.MAX_MESSAGE_SIZE) {
-            throw new MessageTooLargeException(message);
-        }
-        validateChannel(channel);
-    }
 }
diff --git a/src/main/java/org/bukkit/potion/Potion.java b/src/main/java/org/bukkit/potion/Potion.java
index a358c29..bf5f095 100644
--- a/src/main/java/org/bukkit/potion/Potion.java
+++ b/src/main/java/org/bukkit/potion/Potion.java
@@ -1,18 +1,27 @@
 package org.bukkit.potion;
 
-import java.util.Collection;
-
+import com.google.common.collect.ImmutableList;
 import org.apache.commons.lang.Validate;
 import org.bukkit.Material;
 import org.bukkit.entity.LivingEntity;
 import org.bukkit.inventory.ItemStack;
 
-import com.google.common.collect.ImmutableList;
+import java.util.Collection;
 
 /**
  * Represents a minecraft potion
  */
 public class Potion {
+
+    private static final int EXTENDED_BIT = 0x40;
+    private static final int POTION_BIT = 0xF;
+    private static final int SPLASH_BIT = 0x4000;
+    private static final int TIER_BIT = 0x20;
+    private static final int TIER_SHIFT = 5;
+    private static final int NAME_BIT = 0x3F;
+
+    private static PotionBrewer brewer;
+
     private boolean extended = false;
     private boolean splash = false;
     private int level = 1;
@@ -59,7 +68,7 @@ public class Potion {
 
     /**
      * @deprecated In favour of {@link #Potion(PotionType, int, boolean,
-     *     boolean)}
+     * boolean)}
      */
     @SuppressWarnings("javadoc")
     @Deprecated
@@ -71,7 +80,7 @@ public class Potion {
     /**
      * Create a new potion of the given type and level.
      *
-     * @param type The type of potion.
+     * @param type  The type of potion.
      * @param level The potion's level.
      */
     public Potion(PotionType type, int level) {
@@ -85,11 +94,11 @@ public class Potion {
     /**
      * Create a new potion of the given type and level.
      *
-     * @param type The type of potion.
-     * @param level The potion's level.
+     * @param type   The type of potion.
+     * @param level  The potion's level.
      * @param splash Whether it is a splash potion.
      * @deprecated In favour of using {@link #Potion(PotionType)} with {@link
-     *     #splash()}.
+     * #splash()}.
      */
     @Deprecated
     public Potion(PotionType type, int level, boolean splash) {
@@ -100,12 +109,12 @@ public class Potion {
     /**
      * Create a new potion of the given type and level.
      *
-     * @param type The type of potion.
-     * @param level The potion's level.
-     * @param splash Whether it is a splash potion.
+     * @param type     The type of potion.
+     * @param level    The potion's level.
+     * @param splash   Whether it is a splash potion.
      * @param extended Whether it has an extended duration.
      * @deprecated In favour of using {@link #Potion(PotionType)} with {@link
-     *     #extend()} and possibly {@link #splash()}.
+     * #extend()} and possibly {@link #splash()}.
      */
     @Deprecated
     public Potion(PotionType type, int level, boolean splash, boolean extended) {
@@ -128,6 +137,64 @@ public class Potion {
     }
 
     /**
+     * @deprecated Magic value
+     */
+    @Deprecated
+    public static Potion fromDamage(int damage) {
+        PotionType type = PotionType.getByDamageValue(damage & POTION_BIT);
+        Potion potion;
+        if (type == null || (type == PotionType.WATER && damage != 0)) {
+            potion = new Potion(damage & NAME_BIT);
+        } else {
+            int level = (damage & TIER_BIT) >> TIER_SHIFT;
+            level++;
+            potion = new Potion(type, level);
+        }
+
+        if ((damage & SPLASH_BIT) > 0) {
+            potion = potion.splash();
+        }
+
+        if ((damage & EXTENDED_BIT) > 0) {
+            potion = potion.extend();
+        }
+
+        return potion;
+    }
+
+    public static Potion fromItemStack(ItemStack item) {
+        Validate.notNull(item, "item cannot be null");
+        if (item.getType() != Material.POTION) {
+            throw new IllegalArgumentException("item is not a potion");
+        }
+
+        return fromDamage(item.getDurability());
+    }
+
+    /**
+     * Returns an instance of {@link PotionBrewer}.
+     *
+     * @return An instance of PotionBrewer
+     */
+    public static PotionBrewer getBrewer() {
+        return brewer;
+    }
+
+    /**
+     * Sets the current instance of {@link PotionBrewer}. Generally not to be
+     * used from within a plugin.
+     *
+     * @param other The new PotionBrewer
+     */
+    public static void setPotionBrewer(PotionBrewer other) {
+        if (brewer != null) {
+            throw new IllegalArgumentException("brewer can only be set internally");
+        }
+
+        brewer = other;
+    }
+
+    /**
      * Chain this to the constructor to make the potion a splash potion.
      *
      * @return The potion.
@@ -163,33 +230,21 @@ public class Potion {
      * Applies the effects that would be applied by this potion to the given
      * {@link LivingEntity}.
      *
-     * @see LivingEntity#addPotionEffects(Collection)
      * @param to The entity to apply the effects to
+     * @see LivingEntity#addPotionEffects(Collection)
      */
     public void apply(LivingEntity to) {
         Validate.notNull(to, "entity cannot be null");
         to.addPotionEffects(getEffects());
     }
 
-    @Override
-    public boolean equals(Object obj) {
-        if (this == obj) {
-            return true;
-        }
-        if (obj == null || getClass() != obj.getClass()) {
-            return false;
-        }
-        Potion other = (Potion) obj;
-        return extended == other.extended && splash == other.splash && level == other.level && type == other.type;
-    }
-
     /**
      * Returns a collection of {@link PotionEffect}s that this {@link Potion}
      * would confer upon a {@link LivingEntity}.
      *
+     * @return The effects that this potion applies
      * @see PotionBrewer#getEffectsFromDamage(int)
      * @see Potion#toDamageValue()
-     * @return The effects that this potion applies
      */
     public Collection<PotionEffect> getEffects() {
         if (type == null) return ImmutableList.<PotionEffect>of();
@@ -206,6 +261,18 @@ public class Potion {
     }
 
     /**
+     * Sets the level of this potion.
+     *
+     * @param level The new level of this potion
+     */
+    public void setLevel(int level) {
+        Validate.notNull(this.type, "No-effect potions don't have a level.");
+        int max = type.getMaxLevel();
+        Validate.isTrue(level > 0 && level <= max, "Level must be " + (max == 1 ? "" : "between 1 and ") + max + " for this potion");
+        this.level = level;
+    }
+
+    /**
      * Returns the {@link Tier} of this potion.
      *
      * @return The tier of this potion
@@ -216,6 +283,18 @@ public class Potion {
     }
 
     /**
+     * Sets the {@link Tier} of this potion.
+     *
+     * @param tier The new tier of this potion
+     * @deprecated In favour of {@link #setLevel(int)}
+     */
+    @Deprecated
+    public void setTier(Tier tier) {
+        Validate.notNull(tier, "tier cannot be null");
+        this.level = (tier == Tier.TWO ? 2 : 1);
+    }
+
+    /**
      * Returns the {@link PotionType} of this potion.
      *
      * @return The type of this potion
@@ -225,6 +304,15 @@ public class Potion {
     }
 
     /**
+     * Sets the {@link PotionType} of this potion.
+     *
+     * @param type The new type of this potion
+     */
+    public void setType(PotionType type) {
+        this.type = type;
+    }
+
+    /**
      * Returns whether this potion has an extended duration.
      *
      * @return Whether this potion has extended duration
@@ -233,16 +321,6 @@ public class Potion {
         return extended;
     }
 
-    @Override
-    public int hashCode() {
-        final int prime = 31;
-        int result = prime + level;
-        result = prime * result + (extended ? 1231 : 1237);
-        result = prime * result + (splash ? 1231 : 1237);
-        result = prime * result + ((type == null) ? 0 : type.hashCode());
-        return result;
-    }
-
     /**
      * Returns whether this potion is a splash potion.
      *
@@ -253,17 +331,6 @@ public class Potion {
     }
 
     /**
-     * Set whether this potion has extended duration. This will cause the
-     * potion to have roughly 8/3 more duration than a regular potion.
-     *
-     * @param isExtended Whether the potion should have extended duration
-     */
-    public void setHasExtendedDuration(boolean isExtended) {
-        Validate.isTrue(type == null || !type.isInstant(), "Instant potions cannot be extended");
-        extended = isExtended;
-    }
-
-    /**
      * Sets whether this potion is a splash potion. Splash potions can be
      * thrown for a radius effect.
      *
@@ -274,36 +341,14 @@ public class Potion {
     }
 
     /**
-     * Sets the {@link Tier} of this potion.
-     *
-     * @param tier The new tier of this potion
-     * @deprecated In favour of {@link #setLevel(int)}
-     */
-    @Deprecated
-    public void setTier(Tier tier) {
-        Validate.notNull(tier, "tier cannot be null");
-        this.level = (tier == Tier.TWO ? 2 : 1);
-    }
-
-    /**
-     * Sets the {@link PotionType} of this potion.
-     *
-     * @param type The new type of this potion
-     */
-    public void setType(PotionType type) {
-        this.type = type;
-    }
-
-    /**
-     * Sets the level of this potion.
+     * Set whether this potion has extended duration. This will cause the
+     * potion to have roughly 8/3 more duration than a regular potion.
      *
-     * @param level The new level of this potion
+     * @param isExtended Whether the potion should have extended duration
      */
-    public void setLevel(int level) {
-        Validate.notNull(this.type, "No-effect potions don't have a level.");
-        int max = type.getMaxLevel();
-        Validate.isTrue(level > 0 && level <= max, "Level must be " + (max == 1 ? "" : "between 1 and ") + max + " for this potion");
-        this.level = level;
+    public void setHasExtendedDuration(boolean isExtended) {
+        Validate.isTrue(type == null || !type.isInstant(), "Instant potions cannot be extended");
+        extended = isExtended;
     }
 
     /**
@@ -326,12 +371,15 @@ public class Potion {
             damage <<= TIER_SHIFT;
             damage |= (short) type.getDamageValue();
         }
+
         if (splash) {
             damage |= SPLASH_BIT;
         }
+
         if (extended) {
             damage |= EXTENDED_BIT;
         }
+
         return damage;
     }
 
@@ -346,6 +394,38 @@ public class Potion {
         return new ItemStack(Material.POTION, amount, toDamageValue());
     }
 
+    /**
+     * @deprecated Magic value
+     */
+    @Deprecated
+    public int getNameId() {
+        return name;
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+        if (this == obj) {
+            return true;
+        }
+
+        if (obj == null || getClass() != obj.getClass()) {
+            return false;
+        }
+
+        Potion other = (Potion) obj;
+        return extended == other.extended && splash == other.splash && level == other.level && type == other.type;
+    }
+
+    @Override
+    public int hashCode() {
+        final int prime = 31;
+        int result = prime + level;
+        result = prime * result + (extended ? 1231 : 1237);
+        result = prime * result + (splash ? 1231 : 1237);
+        result = prime * result + ((type == null) ? 0 : type.hashCode());
+        return result;
+    }
+
     @Deprecated
     public enum Tier {
         ONE(0),
@@ -357,86 +437,18 @@ public class Potion {
             damageBit = bit;
         }
 
-        public int getDamageBit() {
-            return damageBit;
-        }
-
         public static Tier getByDamageBit(int damageBit) {
             for (Tier tier : Tier.values()) {
-                if (tier.damageBit == damageBit)
+                if (tier.damageBit == damageBit) {
                     return tier;
+                }
             }
+
             return null;
         }
-    }
-
-    private static PotionBrewer brewer;
-
-    private static final int EXTENDED_BIT = 0x40;
-    private static final int POTION_BIT = 0xF;
-    private static final int SPLASH_BIT = 0x4000;
-    private static final int TIER_BIT = 0x20;
-    private static final int TIER_SHIFT = 5;
-    private static final int NAME_BIT = 0x3F;
 
-    /**
-     *
-     * @deprecated Magic value
-     */
-    @Deprecated
-    public static Potion fromDamage(int damage) {
-        PotionType type = PotionType.getByDamageValue(damage & POTION_BIT);
-        Potion potion;
-        if (type == null || (type == PotionType.WATER && damage != 0)) {
-            potion = new Potion(damage & NAME_BIT);
-        } else {
-            int level = (damage & TIER_BIT) >> TIER_SHIFT;
-            level++;
-            potion = new Potion(type, level);
-        }
-        if ((damage & SPLASH_BIT) > 0) {
-            potion = potion.splash();
-        }
-        if ((damage & EXTENDED_BIT) > 0) {
-            potion = potion.extend();
+        public int getDamageBit() {
+            return damageBit;
         }
-        return potion;
-    }
-
-    public static Potion fromItemStack(ItemStack item) {
-        Validate.notNull(item, "item cannot be null");
-        if (item.getType() != Material.POTION)
-            throw new IllegalArgumentException("item is not a potion");
-        return fromDamage(item.getDurability());
-    }
-
-    /**
-     * Returns an instance of {@link PotionBrewer}.
-     *
-     * @return An instance of PotionBrewer
-     */
-    public static PotionBrewer getBrewer() {
-        return brewer;
-    }
-
-    /**
-     * Sets the current instance of {@link PotionBrewer}. Generally not to be
-     * used from within a plugin.
-     *
-     * @param other The new PotionBrewer
-     */
-    public static void setPotionBrewer(PotionBrewer other) {
-        if (brewer != null)
-            throw new IllegalArgumentException("brewer can only be set internally");
-        brewer = other;
-    }
-
-    /**
-     *
-     * @deprecated Magic value
-     */
-    @Deprecated
-    public int getNameId() {
-        return name;
     }
 }
\ No newline at end of file
diff --git a/src/main/java/org/bukkit/potion/PotionBrewer.java b/src/main/java/org/bukkit/potion/PotionBrewer.java
index 5275517..d38a97a 100644
--- a/src/main/java/org/bukkit/potion/PotionBrewer.java
+++ b/src/main/java/org/bukkit/potion/PotionBrewer.java
@@ -11,12 +11,12 @@ public interface PotionBrewer {
      * Creates a {@link PotionEffect} from the given {@link PotionEffectType},
      * applying duration modifiers and checks.
      *
-     * @param potion The type of potion
-     * @param duration The duration in ticks
+     * @param potion    The type of potion
+     * @param duration  The duration in ticks
      * @param amplifier The amplifier of the effect
      * @return The resulting potion effect
      */
-    public PotionEffect createEffect(PotionEffectType potion, int duration, int amplifier);
+    PotionEffect createEffect(PotionEffectType potion, int duration, int amplifier);
 
     /**
      * Returns a collection of {@link PotionEffect} that would be applied from
@@ -27,5 +27,5 @@ public interface PotionBrewer {
      * @deprecated Magic value
      */
     @Deprecated
-    public Collection<PotionEffect> getEffectsFromDamage(int damage);
+    Collection<PotionEffect> getEffectsFromDamage(int damage);
 }
diff --git a/src/main/java/org/bukkit/potion/PotionEffect.java b/src/main/java/org/bukkit/potion/PotionEffect.java
index 24ee19d..18a543a 100644
--- a/src/main/java/org/bukkit/potion/PotionEffect.java
+++ b/src/main/java/org/bukkit/potion/PotionEffect.java
@@ -1,14 +1,13 @@
 package org.bukkit.potion;
 
-import java.util.Map;
-import java.util.NoSuchElementException;
-
+import com.google.common.collect.ImmutableMap;
 import org.apache.commons.lang.Validate;
 import org.bukkit.configuration.serialization.ConfigurationSerializable;
 import org.bukkit.configuration.serialization.SerializableAs;
 import org.bukkit.entity.LivingEntity;
 
-import com.google.common.collect.ImmutableMap;
+import java.util.Map;
+import java.util.NoSuchElementException;
 
 /**
  * Represents a potion effect, that can be added to a {@link LivingEntity}. A
@@ -18,10 +17,12 @@ import com.google.common.collect.ImmutableMap;
  */
 @SerializableAs("PotionEffect")
 public class PotionEffect implements ConfigurationSerializable {
+
     private static final String AMPLIFIER = "amplifier";
     private static final String DURATION = "duration";
     private static final String TYPE = "effect";
     private static final String AMBIENT = "ambient";
+
     private final int amplifier;
     private final int duration;
     private final PotionEffectType type;
@@ -30,11 +31,11 @@ public class PotionEffect implements ConfigurationSerializable {
     /**
      * Creates a potion effect.
      *
-     * @param type effect type
-     * @param duration measured in ticks, see {@link
-     *     PotionEffect#getDuration()}
+     * @param type      effect type
+     * @param duration  measured in ticks, see {@link
+     *                  PotionEffect#getDuration()}
      * @param amplifier the amplifier, see {@link PotionEffect#getAmplifier()}
-     * @param ambient the ambient status, see {@link PotionEffect#isAmbient()}
+     * @param ambient   the ambient status, see {@link PotionEffect#isAmbient()}
      */
     public PotionEffect(PotionEffectType type, int duration, int amplifier, boolean ambient) {
         Validate.notNull(type, "effect type cannot be null");
@@ -47,8 +48,8 @@ public class PotionEffect implements ConfigurationSerializable {
     /**
      * Creates a potion effect. Assumes ambient is true.
      *
-     * @param type Effect type
-     * @param duration measured in ticks
+     * @param type      Effect type
+     * @param duration  measured in ticks
      * @param amplifier the amplifier for the effect
      * @see PotionEffect#PotionEffect(PotionEffectType, int, int, boolean)
      */
@@ -65,64 +66,46 @@ public class PotionEffect implements ConfigurationSerializable {
         this(getEffectType(map), getInt(map, DURATION), getInt(map, AMPLIFIER), getBool(map, AMBIENT));
     }
 
-    private static PotionEffectType getEffectType(Map<?,?> map) {
+    private static PotionEffectType getEffectType(Map<?, ?> map) {
         int type = getInt(map, TYPE);
         PotionEffectType effect = PotionEffectType.getById(type);
         if (effect != null) {
             return effect;
         }
+
         throw new NoSuchElementException(map + " does not contain " + TYPE);
     }
 
-    private static int getInt(Map<?,?> map, Object key) {
+    private static int getInt(Map<?, ?> map, Object key) {
         Object num = map.get(key);
         if (num instanceof Integer) {
             return (Integer) num;
         }
+
         throw new NoSuchElementException(map + " does not contain " + key);
     }
 
-    private static boolean getBool(Map<?,?> map, Object key) {
+    private static boolean getBool(Map<?, ?> map, Object key) {
         Object bool = map.get(key);
         if (bool instanceof Boolean) {
             return (Boolean) bool;
         }
-        throw new NoSuchElementException(map + " does not contain " + key);
-    }
 
-    public Map<String, Object> serialize() {
-        return ImmutableMap.<String, Object>of(
-            TYPE, type.getId(),
-            DURATION, duration,
-            AMPLIFIER, amplifier,
-            AMBIENT, ambient
-        );
+        throw new NoSuchElementException(map + " does not contain " + key);
     }
 
     /**
      * Attempts to add the effect represented by this object to the given
      * {@link LivingEntity}.
      *
-     * @see LivingEntity#addPotionEffect(PotionEffect)
      * @param entity The entity to add this effect to
      * @return Whether the effect could be added
+     * @see LivingEntity#addPotionEffect(PotionEffect)
      */
     public boolean apply(LivingEntity entity) {
         return entity.addPotionEffect(this);
     }
 
-    @Override
-    public boolean equals(Object obj) {
-        if (this == obj) {
-            return true;
-        }
-        if (!(obj instanceof PotionEffect)) {
-            return false;
-        }
-        PotionEffect that = (PotionEffect) obj;
-        return this.type.equals(that.type) && this.ambient == that.ambient && this.amplifier == that.amplifier && this.duration == that.duration;
-    }
-
     /**
      * Returns the amplifier of this effect. A higher amplifier means the
      * potion effect happens more often over its duration and in some cases
@@ -163,6 +146,30 @@ public class PotionEffect implements ConfigurationSerializable {
     }
 
     @Override
+    public Map<String, Object> serialize() {
+        return ImmutableMap.<String, Object>of(
+                TYPE, type.getId(),
+                DURATION, duration,
+                AMPLIFIER, amplifier,
+                AMBIENT, ambient
+        );
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+        if (this == obj) {
+            return true;
+        }
+
+        if (!(obj instanceof PotionEffect)) {
+            return false;
+        }
+
+        PotionEffect that = (PotionEffect) obj;
+        return this.type.equals(that.type) && this.ambient == that.ambient && this.amplifier == that.amplifier && this.duration == that.duration;
+    }
+
+    @Override
     public int hashCode() {
         int hash = 1;
         hash = hash * 31 + type.hashCode();
diff --git a/src/main/java/org/bukkit/potion/PotionEffectType.java b/src/main/java/org/bukkit/potion/PotionEffectType.java
index 4919d59..72315b5 100644
--- a/src/main/java/org/bukkit/potion/PotionEffectType.java
+++ b/src/main/java/org/bukkit/potion/PotionEffectType.java
@@ -1,14 +1,15 @@
 package org.bukkit.potion;
 
+import org.apache.commons.lang.Validate;
+
 import java.util.HashMap;
 import java.util.Map;
 
-import org.apache.commons.lang.Validate;
-
 /**
  * Represents a type of potion and its effect on an entity.
  */
 public abstract class PotionEffectType {
+
     /**
      * Increases movement speed.
      */
@@ -125,7 +126,10 @@ public abstract class PotionEffectType {
      * Increases the food level of an entity each tick.
      */
     public static final PotionEffectType SATURATION = new PotionEffectTypeWrapper(23);
-
+    private static final PotionEffectType[] byId = new PotionEffectType[24];
+    private static final Map<String, PotionEffectType> byName = new HashMap<String, PotionEffectType>();
+    // will break on updates.
+    private static boolean acceptingNew = true;
     private final int id;
 
     protected PotionEffectType(int id) {
@@ -133,13 +137,74 @@ public abstract class PotionEffectType {
     }
 
     /**
+     * Gets the effect type specified by the unique id.
+     *
+     * @param id Unique ID to fetch
+     * @return Resulting type, or null if not found.
+     * @deprecated Magic value
+     */
+    @Deprecated
+    public static PotionEffectType getById(int id) {
+        if (id >= byId.length || id < 0) {
+            return null;
+        }
+
+        return byId[id];
+    }
+
+    /**
+     * Gets the effect type specified by the given name.
+     *
+     * @param name Name of PotionEffectType to fetch
+     * @return Resulting PotionEffectType, or null if not found.
+     */
+    public static PotionEffectType getByName(String name) {
+        Validate.notNull(name, "name cannot be null");
+        return byName.get(name.toLowerCase());
+    }
+
+    /**
+     * Registers an effect type with the given object.
+     * <p>
+     * Generally not to be used from within a plugin.
+     *
+     * @param type PotionType to register
+     */
+    public static void registerPotionEffectType(PotionEffectType type) {
+        if (byId[type.id] != null || byName.containsKey(type.getName().toLowerCase())) {
+            throw new IllegalArgumentException("Cannot set already-set type");
+        } else if (!acceptingNew) {
+            throw new IllegalStateException("No longer accepting new potion effect types (can only be done by the server implementation)");
+        }
+
+        byId[type.id] = type;
+        byName.put(type.getName().toLowerCase(), type);
+    }
+
+    /**
+     * Stops accepting any effect type registrations.
+     */
+    public static void stopAcceptingRegistrations() {
+        acceptingNew = false;
+    }
+
+    /**
+     * Returns an array of all the registered {@link PotionEffectType}s.
+     *
+     * @return Array of types.
+     */
+    public static PotionEffectType[] values() {
+        return byId.clone();
+    }
+
+    /**
      * Creates a PotionEffect from this PotionEffectType, applying duration
      * modifiers and checks.
      *
-     * @see PotionBrewer#createEffect(PotionEffectType, int, int)
-     * @param duration time in ticks
+     * @param duration  time in ticks
      * @param amplifier the effect's amplifier
      * @return a resulting potion effect
+     * @see PotionBrewer#createEffect(PotionEffectType, int, int)
      */
     public PotionEffect createEffect(int duration, int amplifier) {
         return Potion.getBrewer().createEffect(this, duration, amplifier);
@@ -182,13 +247,16 @@ public abstract class PotionEffectType {
         if (obj == null) {
             return false;
         }
+
         if (!(obj instanceof PotionEffectType)) {
             return false;
         }
+
         final PotionEffectType other = (PotionEffectType) obj;
         if (this.id != other.id) {
             return false;
         }
+
         return true;
     }
 
@@ -201,69 +269,4 @@ public abstract class PotionEffectType {
     public String toString() {
         return "PotionEffectType[" + id + ", " + getName() + "]";
     }
-
-    private static final PotionEffectType[] byId = new PotionEffectType[24];
-    private static final Map<String, PotionEffectType> byName = new HashMap<String, PotionEffectType>();
-    // will break on updates.
-    private static boolean acceptingNew = true;
-
-    /**
-     * Gets the effect type specified by the unique id.
-     *
-     * @param id Unique ID to fetch
-     * @return Resulting type, or null if not found.
-     * @deprecated Magic value
-     */
-    @Deprecated
-    public static PotionEffectType getById(int id) {
-        if (id >= byId.length || id < 0)
-            return null;
-        return byId[id];
-    }
-
-    /**
-     * Gets the effect type specified by the given name.
-     *
-     * @param name Name of PotionEffectType to fetch
-     * @return Resulting PotionEffectType, or null if not found.
-     */
-    public static PotionEffectType getByName(String name) {
-        Validate.notNull(name, "name cannot be null");
-        return byName.get(name.toLowerCase());
-    }
-
-    /**
-     * Registers an effect type with the given object.
-     * <p>
-     * Generally not to be used from within a plugin.
-     *
-     * @param type PotionType to register
-     */
-    public static void registerPotionEffectType(PotionEffectType type) {
-        if (byId[type.id] != null || byName.containsKey(type.getName().toLowerCase())) {
-            throw new IllegalArgumentException("Cannot set already-set type");
-        } else if (!acceptingNew) {
-            throw new IllegalStateException(
-                    "No longer accepting new potion effect types (can only be done by the server implementation)");
-        }
-
-        byId[type.id] = type;
-        byName.put(type.getName().toLowerCase(), type);
-    }
-
-    /**
-     * Stops accepting any effect type registrations.
-     */
-    public static void stopAcceptingRegistrations() {
-        acceptingNew = false;
-    }
-
-    /**
-     * Returns an array of all the registered {@link PotionEffectType}s.
-     *
-     * @return Array of types.
-     */
-    public static PotionEffectType[] values() {
-        return byId.clone();
-    }
 }
diff --git a/src/main/java/org/bukkit/potion/PotionEffectTypeWrapper.java b/src/main/java/org/bukkit/potion/PotionEffectTypeWrapper.java
index 5db1ce8..41b5acb 100644
--- a/src/main/java/org/bukkit/potion/PotionEffectTypeWrapper.java
+++ b/src/main/java/org/bukkit/potion/PotionEffectTypeWrapper.java
@@ -1,6 +1,7 @@
 package org.bukkit.potion;
 
 public class PotionEffectTypeWrapper extends PotionEffectType {
+
     protected PotionEffectTypeWrapper(int id) {
         super(id);
     }
diff --git a/src/main/java/org/bukkit/potion/PotionType.java b/src/main/java/org/bukkit/potion/PotionType.java
index a02b6a8..ce62724 100644
--- a/src/main/java/org/bukkit/potion/PotionType.java
+++ b/src/main/java/org/bukkit/potion/PotionType.java
@@ -1,6 +1,7 @@
 package org.bukkit.potion;
 
 public enum PotionType {
+
     WATER(0, null, 0),
     REGEN(1, PotionEffectType.REGENERATION, 2),
     SPEED(2, PotionEffectType.SPEED, 2),
@@ -13,8 +14,7 @@ public enum PotionType {
     SLOWNESS(10, PotionEffectType.SLOW, 1),
     INSTANT_DAMAGE(12, PotionEffectType.HARM, 2),
     WATER_BREATHING(13, PotionEffectType.WATER_BREATHING, 1),
-    INVISIBILITY(14, PotionEffectType.INVISIBILITY, 1),
-    ;
+    INVISIBILITY(14, PotionEffectType.INVISIBILITY, 1);
 
     private final int damageValue, maxLevel;
     private final PotionEffectType effect;
@@ -25,47 +25,51 @@ public enum PotionType {
         this.maxLevel = maxLevel;
     }
 
-    public PotionEffectType getEffectType() {
-        return effect;
-    }
-
-    /**
-     *
-     * @deprecated Magic value
-     */
-    @Deprecated
-    public int getDamageValue() {
-        return damageValue;
-    }
-
-    public int getMaxLevel() {
-        return maxLevel;
-    }
-
-    public boolean isInstant() {
-        return effect == null ? true : effect.isInstant();
-    }
-
     /**
-     *
      * @deprecated Magic value
      */
     @Deprecated
     public static PotionType getByDamageValue(int damage) {
         for (PotionType type : PotionType.values()) {
-            if (type.damageValue == damage)
+            if (type.damageValue == damage) {
                 return type;
+            }
         }
+
         return null;
     }
 
     public static PotionType getByEffect(PotionEffectType effectType) {
-        if (effectType == null)
+        if (effectType == null) {
             return WATER;
+        }
+
         for (PotionType type : PotionType.values()) {
-            if (effectType.equals(type.effect))
+            if (effectType.equals(type.effect)) {
                 return type;
+            }
         }
+
         return null;
     }
+
+    public PotionEffectType getEffectType() {
+        return effect;
+    }
+
+    /**
+     * @deprecated Magic value
+     */
+    @Deprecated
+    public int getDamageValue() {
+        return damageValue;
+    }
+
+    public int getMaxLevel() {
+        return maxLevel;
+    }
+
+    public boolean isInstant() {
+        return effect != null && effect.isInstant();
+    }
 }
diff --git a/src/main/java/org/bukkit/projectiles/BlockProjectileSource.java b/src/main/java/org/bukkit/projectiles/BlockProjectileSource.java
index e713c0d..8381336 100644
--- a/src/main/java/org/bukkit/projectiles/BlockProjectileSource.java
+++ b/src/main/java/org/bukkit/projectiles/BlockProjectileSource.java
@@ -9,5 +9,5 @@ public interface BlockProjectileSource extends ProjectileSource {
      *
      * @return Block for the projectile source
      */
-    public Block getBlock();
+    Block getBlock();
 }
diff --git a/src/main/java/org/bukkit/projectiles/ProjectileSource.java b/src/main/java/org/bukkit/projectiles/ProjectileSource.java
index afad8d7..e7ebccc 100644
--- a/src/main/java/org/bukkit/projectiles/ProjectileSource.java
+++ b/src/main/java/org/bukkit/projectiles/ProjectileSource.java
@@ -14,15 +14,15 @@ public interface ProjectileSource {
      * @param projectile class of the projectile to launch
      * @return the launched projectile
      */
-    public <T extends Projectile> T launchProjectile(Class<? extends T> projectile);
+    <T extends Projectile> T launchProjectile(Class<? extends T> projectile);
 
     /**
      * Launches a {@link Projectile} from the ProjectileSource with an
      * initial velocity.
      *
      * @param projectile class of the projectile to launch
-     * @param velocity the velocity with which to launch
+     * @param velocity   the velocity with which to launch
      * @return the launched projectile
      */
-    public <T extends Projectile> T launchProjectile(Class<? extends T> projectile, Vector velocity);
+    <T extends Projectile> T launchProjectile(Class<? extends T> projectile, Vector velocity);
 }
diff --git a/src/main/java/org/bukkit/scheduler/BukkitRunnable.java b/src/main/java/org/bukkit/scheduler/BukkitRunnable.java
index c146ec7..3c513cf 100644
--- a/src/main/java/org/bukkit/scheduler/BukkitRunnable.java
+++ b/src/main/java/org/bukkit/scheduler/BukkitRunnable.java
@@ -7,6 +7,7 @@ import org.bukkit.plugin.Plugin;
  * This class is provided as an easy way to handle scheduling tasks.
  */
 public abstract class BukkitRunnable implements Runnable {
+
     private int taskId = -1;
 
     /**
@@ -24,7 +25,7 @@ public abstract class BukkitRunnable implements Runnable {
      * @param plugin the reference to the plugin scheduling task
      * @return a BukkitTask that contains the id number
      * @throws IllegalArgumentException if plugin is null
-     * @throws IllegalStateException if this was already scheduled
+     * @throws IllegalStateException    if this was already scheduled
      * @see BukkitScheduler#runTask(Plugin, Runnable)
      */
     public synchronized BukkitTask runTask(Plugin plugin) throws IllegalArgumentException, IllegalStateException {
@@ -41,10 +42,10 @@ public abstract class BukkitRunnable implements Runnable {
      * @param plugin the reference to the plugin scheduling task
      * @return a BukkitTask that contains the id number
      * @throws IllegalArgumentException if plugin is null
-     * @throws IllegalStateException if this was already scheduled
+     * @throws IllegalStateException    if this was already scheduled
      * @see BukkitScheduler#runTaskAsynchronously(Plugin, Runnable)
      */
-    public synchronized BukkitTask runTaskAsynchronously(Plugin plugin) throws IllegalArgumentException, IllegalStateException  {
+    public synchronized BukkitTask runTaskAsynchronously(Plugin plugin) throws IllegalArgumentException, IllegalStateException {
         checkState();
         return setupId(Bukkit.getScheduler().runTaskAsynchronously(plugin, (Runnable) this));
     }
@@ -53,13 +54,13 @@ public abstract class BukkitRunnable implements Runnable {
      * Schedules this to run after the specified number of server ticks.
      *
      * @param plugin the reference to the plugin scheduling task
-     * @param delay the ticks to wait before running the task
+     * @param delay  the ticks to wait before running the task
      * @return a BukkitTask that contains the id number
      * @throws IllegalArgumentException if plugin is null
-     * @throws IllegalStateException if this was already scheduled
+     * @throws IllegalStateException    if this was already scheduled
      * @see BukkitScheduler#runTaskLater(Plugin, Runnable, long)
      */
-    public synchronized BukkitTask runTaskLater(Plugin plugin, long delay) throws IllegalArgumentException, IllegalStateException  {
+    public synchronized BukkitTask runTaskLater(Plugin plugin, long delay) throws IllegalArgumentException, IllegalStateException {
         checkState();
         return setupId(Bukkit.getScheduler().runTaskLater(plugin, (Runnable) this, delay));
     }
@@ -72,13 +73,13 @@ public abstract class BukkitRunnable implements Runnable {
      * server ticks.
      *
      * @param plugin the reference to the plugin scheduling task
-     * @param delay the ticks to wait before running the task
+     * @param delay  the ticks to wait before running the task
      * @return a BukkitTask that contains the id number
      * @throws IllegalArgumentException if plugin is null
-     * @throws IllegalStateException if this was already scheduled
+     * @throws IllegalStateException    if this was already scheduled
      * @see BukkitScheduler#runTaskLaterAsynchronously(Plugin, Runnable, long)
      */
-    public synchronized BukkitTask runTaskLaterAsynchronously(Plugin plugin, long delay) throws IllegalArgumentException, IllegalStateException  {
+    public synchronized BukkitTask runTaskLaterAsynchronously(Plugin plugin, long delay) throws IllegalArgumentException, IllegalStateException {
         checkState();
         return setupId(Bukkit.getScheduler().runTaskLaterAsynchronously(plugin, (Runnable) this, delay));
     }
@@ -88,14 +89,14 @@ public abstract class BukkitRunnable implements Runnable {
      * specified number of server ticks.
      *
      * @param plugin the reference to the plugin scheduling task
-     * @param delay the ticks to wait before running the task
+     * @param delay  the ticks to wait before running the task
      * @param period the ticks to wait between runs
      * @return a BukkitTask that contains the id number
      * @throws IllegalArgumentException if plugin is null
-     * @throws IllegalStateException if this was already scheduled
+     * @throws IllegalStateException    if this was already scheduled
      * @see BukkitScheduler#runTaskTimer(Plugin, Runnable, long, long)
      */
-    public synchronized BukkitTask runTaskTimer(Plugin plugin, long delay, long period) throws IllegalArgumentException, IllegalStateException  {
+    public synchronized BukkitTask runTaskTimer(Plugin plugin, long delay, long period) throws IllegalArgumentException, IllegalStateException {
         checkState();
         return setupId(Bukkit.getScheduler().runTaskTimer(plugin, (Runnable) this, delay, period));
     }
@@ -108,16 +109,16 @@ public abstract class BukkitRunnable implements Runnable {
      * starting after the specified number of server ticks.
      *
      * @param plugin the reference to the plugin scheduling task
-     * @param delay the ticks to wait before running the task for the first
-     *     time
+     * @param delay  the ticks to wait before running the task for the first
+     *               time
      * @param period the ticks to wait between runs
      * @return a BukkitTask that contains the id number
      * @throws IllegalArgumentException if plugin is null
-     * @throws IllegalStateException if this was already scheduled
+     * @throws IllegalStateException    if this was already scheduled
      * @see BukkitScheduler#runTaskTimerAsynchronously(Plugin, Runnable, long,
-     *     long)
+     * long)
      */
-    public synchronized BukkitTask runTaskTimerAsynchronously(Plugin plugin, long delay, long period) throws IllegalArgumentException, IllegalStateException  {
+    public synchronized BukkitTask runTaskTimerAsynchronously(Plugin plugin, long delay, long period) throws IllegalArgumentException, IllegalStateException {
         checkState();
         return setupId(Bukkit.getScheduler().runTaskTimerAsynchronously(plugin, (Runnable) this, delay, period));
     }
@@ -133,6 +134,7 @@ public abstract class BukkitRunnable implements Runnable {
         if (id == -1) {
             throw new IllegalStateException("Not scheduled yet");
         }
+
         return id;
     }
 
diff --git a/src/main/java/org/bukkit/scheduler/BukkitScheduler.java b/src/main/java/org/bukkit/scheduler/BukkitScheduler.java
index dfecafa..20cbadf 100644
--- a/src/main/java/org/bukkit/scheduler/BukkitScheduler.java
+++ b/src/main/java/org/bukkit/scheduler/BukkitScheduler.java
@@ -1,9 +1,10 @@
 package org.bukkit.scheduler;
 
 import org.bukkit.plugin.Plugin;
+
+import java.util.List;
 import java.util.concurrent.Callable;
 import java.util.concurrent.Future;
-import java.util.List;
 
 public interface BukkitScheduler {
 
@@ -13,17 +14,17 @@ public interface BukkitScheduler {
      * This task will be executed by the main server thread.
      *
      * @param plugin Plugin that owns the task
-     * @param task Task to be executed
-     * @param delay Delay in server ticks before executing task
+     * @param task   Task to be executed
+     * @param delay  Delay in server ticks before executing task
      * @return Task id number (-1 if scheduling failed)
      */
-    public int scheduleSyncDelayedTask(Plugin plugin, Runnable task, long delay);
+    int scheduleSyncDelayedTask(Plugin plugin, Runnable task, long delay);
 
     /**
      * @deprecated Use {@link BukkitRunnable#runTaskLater(Plugin, long)}
      */
     @Deprecated
-    public int scheduleSyncDelayedTask(Plugin plugin, BukkitRunnable task, long delay);
+    int scheduleSyncDelayedTask(Plugin plugin, BukkitRunnable task, long delay);
 
     /**
      * Schedules a once off task to occur as soon as possible.
@@ -31,16 +32,16 @@ public interface BukkitScheduler {
      * This task will be executed by the main server thread.
      *
      * @param plugin Plugin that owns the task
-     * @param task Task to be executed
+     * @param task   Task to be executed
      * @return Task id number (-1 if scheduling failed)
      */
-    public int scheduleSyncDelayedTask(Plugin plugin, Runnable task);
+    int scheduleSyncDelayedTask(Plugin plugin, Runnable task);
 
     /**
      * @deprecated Use {@link BukkitRunnable#runTask(Plugin)}
      */
     @Deprecated
-    public int scheduleSyncDelayedTask(Plugin plugin, BukkitRunnable task);
+    int scheduleSyncDelayedTask(Plugin plugin, BukkitRunnable task);
 
     /**
      * Schedules a repeating task.
@@ -48,18 +49,18 @@ public interface BukkitScheduler {
      * This task will be executed by the main server thread.
      *
      * @param plugin Plugin that owns the task
-     * @param task Task to be executed
-     * @param delay Delay in server ticks before executing first repeat
+     * @param task   Task to be executed
+     * @param delay  Delay in server ticks before executing first repeat
      * @param period Period in server ticks of the task
      * @return Task id number (-1 if scheduling failed)
      */
-    public int scheduleSyncRepeatingTask(Plugin plugin, Runnable task, long delay, long period);
+    int scheduleSyncRepeatingTask(Plugin plugin, Runnable task, long delay, long period);
 
     /**
      * @deprecated Use {@link BukkitRunnable#runTaskTimer(Plugin, long, long)}
      */
     @Deprecated
-    public int scheduleSyncRepeatingTask(Plugin plugin, BukkitRunnable task, long delay, long period);
+    int scheduleSyncRepeatingTask(Plugin plugin, BukkitRunnable task, long delay, long period);
 
     /**
      * <b>Asynchronous tasks should never access any API in Bukkit. Great care
@@ -69,14 +70,14 @@ public interface BukkitScheduler {
      * executed by a thread managed by the scheduler.
      *
      * @param plugin Plugin that owns the task
-     * @param task Task to be executed
-     * @param delay Delay in server ticks before executing task
+     * @param task   Task to be executed
+     * @param delay  Delay in server ticks before executing task
      * @return Task id number (-1 if scheduling failed)
      * @deprecated This name is misleading, as it does not schedule "a sync"
-     *     task, but rather, "an async" task
+     * task, but rather, "an async" task
      */
     @Deprecated
-    public int scheduleAsyncDelayedTask(Plugin plugin, Runnable task, long delay);
+    int scheduleAsyncDelayedTask(Plugin plugin, Runnable task, long delay);
 
     /**
      * <b>Asynchronous tasks should never access any API in Bukkit. Great care
@@ -86,13 +87,13 @@ public interface BukkitScheduler {
      * be executed by a thread managed by the scheduler.
      *
      * @param plugin Plugin that owns the task
-     * @param task Task to be executed
+     * @param task   Task to be executed
      * @return Task id number (-1 if scheduling failed)
      * @deprecated This name is misleading, as it does not schedule "a sync"
-     *     task, but rather, "an async" task
+     * task, but rather, "an async" task
      */
     @Deprecated
-    public int scheduleAsyncDelayedTask(Plugin plugin, Runnable task);
+    int scheduleAsyncDelayedTask(Plugin plugin, Runnable task);
 
     /**
      * <b>Asynchronous tasks should never access any API in Bukkit. Great care
@@ -102,38 +103,39 @@ public interface BukkitScheduler {
      * managed by the scheduler.
      *
      * @param plugin Plugin that owns the task
-     * @param task Task to be executed
-     * @param delay Delay in server ticks before executing first repeat
+     * @param task   Task to be executed
+     * @param delay  Delay in server ticks before executing first repeat
      * @param period Period in server ticks of the task
      * @return Task id number (-1 if scheduling failed)
      * @deprecated This name is misleading, as it does not schedule "a sync"
-     *     task, but rather, "an async" task
+     * task, but rather, "an async" task
      */
     @Deprecated
-    public int scheduleAsyncRepeatingTask(Plugin plugin, Runnable task, long delay, long period);
+    int scheduleAsyncRepeatingTask(Plugin plugin, Runnable task, long delay, long period);
 
     /**
      * Calls a method on the main thread and returns a Future object. This
      * task will be executed by the main server thread.
      * <ul>
      * <li>Note: The Future.get() methods must NOT be called from the main
-     *     thread.
+     * thread.
      * <li>Note2: There is at least an average of 10ms latency until the
-     *     isDone() method returns true.
+     * isDone() method returns true.
      * </ul>
-     * @param <T> The callable's return type
+     *
+     * @param <T>    The callable's return type
      * @param plugin Plugin that owns the task
-     * @param task Task to be executed
+     * @param task   Task to be executed
      * @return Future Future object related to the task
      */
-    public <T> Future<T> callSyncMethod(Plugin plugin, Callable<T> task);
+    <T> Future<T> callSyncMethod(Plugin plugin, Callable<T> task);
 
     /**
      * Removes task from scheduler.
      *
      * @param taskId Id number of task to be removed
      */
-    public void cancelTask(int taskId);
+    void cancelTask(int taskId);
 
     /**
      * Removes all tasks associated with a particular plugin from the
@@ -141,12 +143,12 @@ public interface BukkitScheduler {
      *
      * @param plugin Owner of tasks to be removed
      */
-    public void cancelTasks(Plugin plugin);
+    void cancelTasks(Plugin plugin);
 
     /**
      * Removes all tasks from the scheduler.
      */
-    public void cancelAllTasks();
+    void cancelAllTasks();
 
     /**
      * Check if the task currently running.
@@ -159,10 +161,10 @@ public interface BukkitScheduler {
      * thread is alive.
      *
      * @param taskId The task to check.
-     * <p>
+     *               <p>
      * @return If the task is currently running.
      */
-    public boolean isCurrentlyRunning(int taskId);
+    boolean isCurrentlyRunning(int taskId);
 
     /**
      * Check if the task queued to be run later.
@@ -172,10 +174,10 @@ public interface BukkitScheduler {
      * will not be queued again.
      *
      * @param taskId The task to check.
-     * <p>
+     *               <p>
      * @return If the task is queued to be run.
      */
-    public boolean isQueued(int taskId);
+    boolean isQueued(int taskId);
 
     /**
      * Returns a list of all active workers.
@@ -185,7 +187,7 @@ public interface BukkitScheduler {
      *
      * @return Active workers
      */
-    public List<BukkitWorker> getActiveWorkers();
+    List<BukkitWorker> getActiveWorkers();
 
     /**
      * Returns a list of all pending tasks. The ordering of the tasks is not
@@ -193,24 +195,24 @@ public interface BukkitScheduler {
      *
      * @return Active workers
      */
-    public List<BukkitTask> getPendingTasks();
+    List<BukkitTask> getPendingTasks();
 
     /**
      * Returns a task that will run on the next server tick.
      *
      * @param plugin the reference to the plugin scheduling task
-     * @param task the task to be run
+     * @param task   the task to be run
      * @return a BukkitTask that contains the id number
      * @throws IllegalArgumentException if plugin is null
      * @throws IllegalArgumentException if task is null
      */
-    public BukkitTask runTask(Plugin plugin, Runnable task) throws IllegalArgumentException;
+    BukkitTask runTask(Plugin plugin, Runnable task) throws IllegalArgumentException;
 
     /**
      * @deprecated Use {@link BukkitRunnable#runTask(Plugin)}
      */
     @Deprecated
-    public BukkitTask runTask(Plugin plugin, BukkitRunnable task) throws IllegalArgumentException;
+    BukkitTask runTask(Plugin plugin, BukkitRunnable task) throws IllegalArgumentException;
 
     /**
      * <b>Asynchronous tasks should never access any API in Bukkit. Great care
@@ -219,37 +221,37 @@ public interface BukkitScheduler {
      * Returns a task that will run asynchronously.
      *
      * @param plugin the reference to the plugin scheduling task
-     * @param task the task to be run
+     * @param task   the task to be run
      * @return a BukkitTask that contains the id number
      * @throws IllegalArgumentException if plugin is null
      * @throws IllegalArgumentException if task is null
      */
-    public BukkitTask runTaskAsynchronously(Plugin plugin, Runnable task) throws IllegalArgumentException;
+    BukkitTask runTaskAsynchronously(Plugin plugin, Runnable task) throws IllegalArgumentException;
 
     /**
      * @deprecated Use {@link BukkitRunnable#runTaskAsynchronously(Plugin)}
      */
     @Deprecated
-    public BukkitTask runTaskAsynchronously(Plugin plugin, BukkitRunnable task) throws IllegalArgumentException;
+    BukkitTask runTaskAsynchronously(Plugin plugin, BukkitRunnable task) throws IllegalArgumentException;
 
     /**
      * Returns a task that will run after the specified number of server
      * ticks.
      *
      * @param plugin the reference to the plugin scheduling task
-     * @param task the task to be run
-     * @param delay the ticks to wait before running the task
+     * @param task   the task to be run
+     * @param delay  the ticks to wait before running the task
      * @return a BukkitTask that contains the id number
      * @throws IllegalArgumentException if plugin is null
      * @throws IllegalArgumentException if task is null
      */
-    public BukkitTask runTaskLater(Plugin plugin, Runnable task, long delay) throws IllegalArgumentException;
+    BukkitTask runTaskLater(Plugin plugin, Runnable task, long delay) throws IllegalArgumentException;
 
     /**
      * @deprecated Use {@link BukkitRunnable#runTaskLater(Plugin, long)}
      */
     @Deprecated
-    public BukkitTask runTaskLater(Plugin plugin, BukkitRunnable task, long delay) throws IllegalArgumentException;
+    BukkitTask runTaskLater(Plugin plugin, BukkitRunnable task, long delay) throws IllegalArgumentException;
 
     /**
      * <b>Asynchronous tasks should never access any API in Bukkit. Great care
@@ -259,39 +261,39 @@ public interface BukkitScheduler {
      * of server ticks.
      *
      * @param plugin the reference to the plugin scheduling task
-     * @param task the task to be run
-     * @param delay the ticks to wait before running the task
+     * @param task   the task to be run
+     * @param delay  the ticks to wait before running the task
      * @return a BukkitTask that contains the id number
      * @throws IllegalArgumentException if plugin is null
      * @throws IllegalArgumentException if task is null
      */
-    public BukkitTask runTaskLaterAsynchronously(Plugin plugin, Runnable task, long delay) throws IllegalArgumentException;
+    BukkitTask runTaskLaterAsynchronously(Plugin plugin, Runnable task, long delay) throws IllegalArgumentException;
 
     /**
      * @deprecated Use {@link BukkitRunnable#runTaskLaterAsynchronously(Plugin, long)}
      */
     @Deprecated
-    public BukkitTask runTaskLaterAsynchronously(Plugin plugin, BukkitRunnable task, long delay) throws IllegalArgumentException;
+    BukkitTask runTaskLaterAsynchronously(Plugin plugin, BukkitRunnable task, long delay) throws IllegalArgumentException;
 
     /**
      * Returns a task that will repeatedly run until cancelled, starting after
      * the specified number of server ticks.
      *
      * @param plugin the reference to the plugin scheduling task
-     * @param task the task to be run
-     * @param delay the ticks to wait before running the task
+     * @param task   the task to be run
+     * @param delay  the ticks to wait before running the task
      * @param period the ticks to wait between runs
      * @return a BukkitTask that contains the id number
      * @throws IllegalArgumentException if plugin is null
      * @throws IllegalArgumentException if task is null
      */
-    public BukkitTask runTaskTimer(Plugin plugin, Runnable task, long delay, long period) throws IllegalArgumentException;
+    BukkitTask runTaskTimer(Plugin plugin, Runnable task, long delay, long period) throws IllegalArgumentException;
 
     /**
      * @deprecated Use {@link BukkitRunnable#runTaskTimer(Plugin, long, long)}
      */
     @Deprecated
-    public BukkitTask runTaskTimer(Plugin plugin, BukkitRunnable task, long delay, long period) throws IllegalArgumentException;
+    BukkitTask runTaskTimer(Plugin plugin, BukkitRunnable task, long delay, long period) throws IllegalArgumentException;
 
     /**
      * <b>Asynchronous tasks should never access any API in Bukkit. Great care
@@ -301,19 +303,19 @@ public interface BukkitScheduler {
      * starting after the specified number of server ticks.
      *
      * @param plugin the reference to the plugin scheduling task
-     * @param task the task to be run
-     * @param delay the ticks to wait before running the task for the first
-     *     time
+     * @param task   the task to be run
+     * @param delay  the ticks to wait before running the task for the first
+     *               time
      * @param period the ticks to wait between runs
      * @return a BukkitTask that contains the id number
      * @throws IllegalArgumentException if plugin is null
      * @throws IllegalArgumentException if task is null
      */
-    public BukkitTask runTaskTimerAsynchronously(Plugin plugin, Runnable task, long delay, long period) throws IllegalArgumentException;
+    BukkitTask runTaskTimerAsynchronously(Plugin plugin, Runnable task, long delay, long period) throws IllegalArgumentException;
 
     /**
      * @deprecated Use {@link BukkitRunnable#runTaskTimerAsynchronously(Plugin, long, long)}
      */
     @Deprecated
-    public BukkitTask runTaskTimerAsynchronously(Plugin plugin, BukkitRunnable task, long delay, long period) throws IllegalArgumentException;
+    BukkitTask runTaskTimerAsynchronously(Plugin plugin, BukkitRunnable task, long delay, long period) throws IllegalArgumentException;
 }
diff --git a/src/main/java/org/bukkit/scheduler/BukkitTask.java b/src/main/java/org/bukkit/scheduler/BukkitTask.java
index e447e64..dc9bf0e 100644
--- a/src/main/java/org/bukkit/scheduler/BukkitTask.java
+++ b/src/main/java/org/bukkit/scheduler/BukkitTask.java
@@ -12,24 +12,24 @@ public interface BukkitTask {
      *
      * @return Task id number
      */
-    public int getTaskId();
+    int getTaskId();
 
     /**
      * Returns the Plugin that owns this task.
      *
      * @return The Plugin that owns the task
      */
-    public Plugin getOwner();
+    Plugin getOwner();
 
     /**
      * Returns true if the Task is a sync task.
      *
      * @return true if the task is run by main thread
      */
-    public boolean isSync();
+    boolean isSync();
 
     /**
      * Will attempt to cancel this task.
      */
-    public void cancel();
+    void cancel();
 }
diff --git a/src/main/java/org/bukkit/scheduler/BukkitWorker.java b/src/main/java/org/bukkit/scheduler/BukkitWorker.java
index fe1afbd..1058d8d 100644
--- a/src/main/java/org/bukkit/scheduler/BukkitWorker.java
+++ b/src/main/java/org/bukkit/scheduler/BukkitWorker.java
@@ -15,20 +15,20 @@ public interface BukkitWorker {
      *
      * @return Task id number
      */
-    public int getTaskId();
+    int getTaskId();
 
     /**
      * Returns the Plugin that owns this task.
      *
      * @return The Plugin that owns the task
      */
-    public Plugin getOwner();
+    Plugin getOwner();
 
     /**
      * Returns the thread for the worker.
      *
      * @return The Thread object for the worker
      */
-    public Thread getThread();
+    Thread getThread();
 
 }
diff --git a/src/main/java/org/bukkit/scoreboard/Criterias.java b/src/main/java/org/bukkit/scoreboard/Criterias.java
index cd81c87..a6187dc 100644
--- a/src/main/java/org/bukkit/scoreboard/Criterias.java
+++ b/src/main/java/org/bukkit/scoreboard/Criterias.java
@@ -4,17 +4,20 @@ package org.bukkit.scoreboard;
  * Criteria names which trigger an objective to be modified by actions in-game
  */
 public class Criterias {
+
     public static final String HEALTH;
     public static final String PLAYER_KILLS;
     public static final String TOTAL_KILLS;
     public static final String DEATHS;
 
     static {
-        HEALTH="health";
-        PLAYER_KILLS="playerKillCount";
-        TOTAL_KILLS="totalKillCount";
-        DEATHS="deathCount";
+        HEALTH = "health";
+        PLAYER_KILLS = "playerKillCount";
+        TOTAL_KILLS = "totalKillCount";
+        DEATHS = "deathCount";
     }
 
-    private Criterias() {}
+    private Criterias() {
+
+    }
 }
diff --git a/src/main/java/org/bukkit/scoreboard/DisplaySlot.java b/src/main/java/org/bukkit/scoreboard/DisplaySlot.java
index 5d58a18..15e6095 100644
--- a/src/main/java/org/bukkit/scoreboard/DisplaySlot.java
+++ b/src/main/java/org/bukkit/scoreboard/DisplaySlot.java
@@ -4,7 +4,6 @@ package org.bukkit.scoreboard;
  * Locations for displaying objectives to the player
  */
 public enum DisplaySlot {
-    BELOW_NAME,
-    PLAYER_LIST,
-    SIDEBAR;
+
+    BELOW_NAME, PLAYER_LIST, SIDEBAR;
 }
diff --git a/src/main/java/org/bukkit/scoreboard/Objective.java b/src/main/java/org/bukkit/scoreboard/Objective.java
index 321aac7..345a15d 100644
--- a/src/main/java/org/bukkit/scoreboard/Objective.java
+++ b/src/main/java/org/bukkit/scoreboard/Objective.java
@@ -29,10 +29,10 @@ public interface Objective {
      * Sets the name displayed to players for this objective.
      *
      * @param displayName Display name to set
-     * @throws IllegalStateException if this objective has been unregistered
+     * @throws IllegalStateException    if this objective has been unregistered
      * @throws IllegalArgumentException if displayName is null
      * @throws IllegalArgumentException if displayName is longer than 32
-     *     characters.
+     *                                  characters.
      */
     void setDisplayName(String displayName) throws IllegalStateException, IllegalArgumentException;
 
@@ -57,7 +57,7 @@ public interface Objective {
      * Gets the scoreboard to which this objective is attached.
      *
      * @return Owning scoreboard, or null if it has been {@link #unregister()
-     *     unregistered}
+     * unregistered}
      */
     Scoreboard getScoreboard();
 
@@ -69,21 +69,21 @@ public interface Objective {
     void unregister() throws IllegalStateException;
 
     /**
-     * Sets this objective to display on the specified slot for the
-     * scoreboard, removing it from any other display slot.
+     * Gets the display slot this objective is displayed at.
      *
-     * @param slot display slot to change, or null to not display
+     * @return the display slot for this objective, or null if not displayed
      * @throws IllegalStateException if this objective has been unregistered
      */
-    void setDisplaySlot(DisplaySlot slot) throws IllegalStateException;
+    DisplaySlot getDisplaySlot() throws IllegalStateException;
 
     /**
-     * Gets the display slot this objective is displayed at.
+     * Sets this objective to display on the specified slot for the
+     * scoreboard, removing it from any other display slot.
      *
-     * @return the display slot for this objective, or null if not displayed
+     * @param slot display slot to change, or null to not display
      * @throws IllegalStateException if this objective has been unregistered
      */
-    DisplaySlot getDisplaySlot() throws IllegalStateException;
+    void setDisplaySlot(DisplaySlot slot) throws IllegalStateException;
 
     /**
      * Gets a player's Score for an Objective on this Scoreboard
@@ -91,9 +91,9 @@ public interface Objective {
      * @param player Player for the Score
      * @return Score tracking the Objective and player specified
      * @throws IllegalArgumentException if player is null
-     * @throws IllegalStateException if this objective has been unregistered
-     * @deprecated Scoreboards can contain entries that aren't players
+     * @throws IllegalStateException    if this objective has been unregistered
      * @see #getScore(String)
+     * @deprecated Scoreboards can contain entries that aren't players
      */
     @Deprecated
     Score getScore(OfflinePlayer player) throws IllegalArgumentException, IllegalStateException;
@@ -104,7 +104,7 @@ public interface Objective {
      * @param entry Entry for the Score
      * @return Score tracking the Objective and entry specified
      * @throws IllegalArgumentException if entry is null
-     * @throws IllegalStateException if this objective has been unregistered
+     * @throws IllegalStateException    if this objective has been unregistered
      */
     Score getScore(String entry) throws IllegalArgumentException, IllegalStateException;
 }
diff --git a/src/main/java/org/bukkit/scoreboard/Score.java b/src/main/java/org/bukkit/scoreboard/Score.java
index 2410cbd..fd4d203 100644
--- a/src/main/java/org/bukkit/scoreboard/Score.java
+++ b/src/main/java/org/bukkit/scoreboard/Score.java
@@ -13,8 +13,8 @@ public interface Score {
      * Gets the OfflinePlayer being tracked by this Score
      *
      * @return this Score's tracked player
-     * @deprecated Scoreboards can contain entries that aren't players
      * @see #getEntry()
+     * @deprecated Scoreboards can contain entries that aren't players
      */
     @Deprecated
     OfflinePlayer getPlayer();
@@ -38,7 +38,7 @@ public interface Score {
      *
      * @return the current score
      * @throws IllegalStateException if the associated objective has been
-     *     unregistered
+     *                               unregistered
      */
     int getScore() throws IllegalStateException;
 
@@ -47,17 +47,18 @@ public interface Score {
      *
      * @param score New score
      * @throws IllegalStateException if the associated objective has been
-     *     unregistered
+     *                               unregistered
      */
     void setScore(int score) throws IllegalStateException;
 
     // Spigot start
+
     /**
      * Shows if this score has been set at any point in time.
-     * 
+     *
      * @return if this score has been set before
      * @throws IllegalStateException if the associated objective has been
-     *     unregistered
+     *                               unregistered
      */
     boolean isScoreSet() throws IllegalStateException;
     // Spigot end
@@ -66,7 +67,7 @@ public interface Score {
      * Gets the scoreboard for the associated objective.
      *
      * @return the owning objective's scoreboard, or null if it has been
-     *     {@link Objective#unregister() unregistered}
+     * {@link Objective#unregister() unregistered}
      */
     Scoreboard getScoreboard();
 }
diff --git a/src/main/java/org/bukkit/scoreboard/Scoreboard.java b/src/main/java/org/bukkit/scoreboard/Scoreboard.java
index d244a7f..5fd21b6 100644
--- a/src/main/java/org/bukkit/scoreboard/Scoreboard.java
+++ b/src/main/java/org/bukkit/scoreboard/Scoreboard.java
@@ -1,9 +1,9 @@
 package org.bukkit.scoreboard;
 
-import java.util.Set;
-
 import org.bukkit.OfflinePlayer;
 
+import java.util.Set;
+
 /**
  * A scoreboard
  */
@@ -12,13 +12,13 @@ public interface Scoreboard {
     /**
      * Registers an Objective on this Scoreboard
      *
-     * @param name Name of the Objective
+     * @param name     Name of the Objective
      * @param criteria Criteria for the Objective
      * @return The registered Objective
      * @throws IllegalArgumentException if name is null
      * @throws IllegalArgumentException if criteria is null
      * @throws IllegalArgumentException if an objective by that name already
-     *     exists
+     *                                  exists
      */
     Objective registerNewObjective(String name, String criteria) throws IllegalArgumentException;
 
@@ -52,7 +52,7 @@ public interface Scoreboard {
      *
      * @param slot The DisplaySlot
      * @return the Objective currently displayed or null if nothing is
-     *     displayed in that DisplaySlot
+     * displayed in that DisplaySlot
      * @throws IllegalArgumentException if slot is null
      */
     Objective getObjective(DisplaySlot slot) throws IllegalArgumentException;
@@ -63,8 +63,8 @@ public interface Scoreboard {
      * @param player the player whose scores are being retrieved
      * @return immutable set of all scores tracked for the player
      * @throws IllegalArgumentException if player is null
-     * @deprecated Scoreboards can contain entries that aren't players
      * @see #getScores(String)
+     * @deprecated Scoreboards can contain entries that aren't players
      */
     @Deprecated
     Set<Score> getScores(OfflinePlayer player) throws IllegalArgumentException;
@@ -83,8 +83,8 @@ public interface Scoreboard {
      *
      * @param player the player to drop all current scores for
      * @throws IllegalArgumentException if player is null
-     * @deprecated Scoreboards can contain entries that aren't players
      * @see #resetScores(String)
+     * @deprecated Scoreboards can contain entries that aren't players
      */
     @Deprecated
     void resetScores(OfflinePlayer player) throws IllegalArgumentException;
@@ -136,8 +136,8 @@ public interface Scoreboard {
      * Gets all players tracked by this Scoreboard
      *
      * @return immutable set of all tracked players
-     * @deprecated Scoreboards can contain entries that aren't players
      * @see #getEntries()
+     * @deprecated Scoreboards can contain entries that aren't players
      */
     @Deprecated
     Set<OfflinePlayer> getPlayers();
diff --git a/src/main/java/org/bukkit/scoreboard/Team.java b/src/main/java/org/bukkit/scoreboard/Team.java
index b90b9c3..a4a2c80 100644
--- a/src/main/java/org/bukkit/scoreboard/Team.java
+++ b/src/main/java/org/bukkit/scoreboard/Team.java
@@ -1,10 +1,10 @@
 package org.bukkit.scoreboard;
 
-import java.util.Set;
-
 import org.bukkit.OfflinePlayer;
 import org.bukkit.potion.PotionEffectType;
 
+import java.util.Set;
+
 /**
  * A team on a scoreboard that has a common display theme and other
  * properties. This team is only relevant to the display of the associated
@@ -33,8 +33,8 @@ public interface Team {
      *
      * @param displayName New display name
      * @throws IllegalArgumentException if displayName is longer than 32
-     *     characters.
-     * @throws IllegalStateException if this team has been unregistered
+     *                                  characters.
+     * @throws IllegalStateException    if this team has been unregistered
      */
     void setDisplayName(String displayName) throws IllegalStateException, IllegalArgumentException;
 
@@ -52,8 +52,8 @@ public interface Team {
      * @param prefix New prefix
      * @throws IllegalArgumentException if prefix is null
      * @throws IllegalArgumentException if prefix is longer than 16
-     *     characters
-     * @throws IllegalStateException if this team has been unregistered
+     *                                  characters
+     * @throws IllegalStateException    if this team has been unregistered
      */
     void setPrefix(String prefix) throws IllegalStateException, IllegalArgumentException;
 
@@ -71,8 +71,8 @@ public interface Team {
      * @param suffix the new suffix for this team.
      * @throws IllegalArgumentException if suffix is null
      * @throws IllegalArgumentException if suffix is longer than 16
-     *     characters
-     * @throws IllegalStateException if this team has been unregistered
+     *                                  characters
+     * @throws IllegalStateException    if this team has been unregistered
      */
     void setSuffix(String suffix) throws IllegalStateException, IllegalArgumentException;
 
@@ -119,6 +119,7 @@ public interface Team {
     Set<OfflinePlayer> getPlayers() throws IllegalStateException;
 
     // Spigot start
+
     /**
      * Same as the player method, but with an arbitrary string.
      *
@@ -139,7 +140,7 @@ public interface Team {
      * Gets the Scoreboard to which this team is attached
      *
      * @return Owning scoreboard, or null if this team has been {@link
-     *     #unregister() unregistered}
+     * #unregister() unregistered}
      */
     Scoreboard getScoreboard();
 
@@ -150,11 +151,12 @@ public interface Team {
      *
      * @param player the player to add
      * @throws IllegalArgumentException if player is null
-     * @throws IllegalStateException if this team has been unregistered
+     * @throws IllegalStateException    if this team has been unregistered
      */
     void addPlayer(OfflinePlayer player) throws IllegalStateException, IllegalArgumentException;
 
     // Spigot start
+
     /**
      * Same as the player method, but with an arbitrary string.
      *
@@ -169,11 +171,12 @@ public interface Team {
      * @param player the player to remove
      * @return if the player was on this team
      * @throws IllegalArgumentException if player is null
-     * @throws IllegalStateException if this team has been unregistered
+     * @throws IllegalStateException    if this team has been unregistered
      */
     boolean removePlayer(OfflinePlayer player) throws IllegalStateException, IllegalArgumentException;
 
     // Spigot start
+
     /**
      * Same as the player method, but with an arbitrary string.
      *
@@ -195,16 +198,17 @@ public interface Team {
      * @param player the player to search for
      * @return true if the player is a member of this team
      * @throws IllegalArgumentException if player is null
-     * @throws IllegalStateException if this team has been unregistered
+     * @throws IllegalStateException    if this team has been unregistered
      */
     boolean hasPlayer(OfflinePlayer player) throws IllegalArgumentException, IllegalStateException;
 
     // Spigot start
+
     /**
      * Same as the player method, but with an arbitrary string.
      *
      * @see #hasPlayer(org.bukkit.OfflinePlayer)
      */
-    boolean hasEntry(String entry) throws IllegalArgumentException,IllegalStateException;
+    boolean hasEntry(String entry) throws IllegalArgumentException, IllegalStateException;
     // Spigot end
 }
diff --git a/src/main/java/org/bukkit/util/BlockIterator.java b/src/main/java/org/bukkit/util/BlockIterator.java
index 5c85778..b86c5a1 100644
--- a/src/main/java/org/bukkit/util/BlockIterator.java
+++ b/src/main/java/org/bukkit/util/BlockIterator.java
@@ -1,9 +1,7 @@
 package org.bukkit.util;
 
-import static org.bukkit.util.NumberConversions.*;
-
-import org.bukkit.World;
 import org.bukkit.Location;
+import org.bukkit.World;
 import org.bukkit.block.Block;
 import org.bukkit.block.BlockFace;
 import org.bukkit.entity.LivingEntity;
@@ -11,16 +9,17 @@ import org.bukkit.entity.LivingEntity;
 import java.util.Iterator;
 import java.util.NoSuchElementException;
 
+import static org.bukkit.util.NumberConversions.floor;
+import static org.bukkit.util.NumberConversions.round;
+
 /**
  * This class performs ray tracing and iterates along blocks on a line
  */
 public class BlockIterator implements Iterator<Block> {
 
+    private static final int gridSize = 1 << 24;
     private final World world;
     private final int maxDistance;
-
-    private static final int gridSize = 1 << 24;
-
     private boolean end = false;
 
     private Block[] blockQueue = new Block[3];
@@ -41,15 +40,14 @@ public class BlockIterator implements Iterator<Block> {
     /**
      * Constructs the BlockIterator
      *
-     * @param world The world to use for tracing
-     * @param start A Vector giving the initial location for the trace
-     * @param direction A Vector pointing in the direction for the trace
-     * @param yOffset The trace begins vertically offset from the start vector
-     *     by this value
+     * @param world       The world to use for tracing
+     * @param start       A Vector giving the initial location for the trace
+     * @param direction   A Vector pointing in the direction for the trace
+     * @param yOffset     The trace begins vertically offset from the start vector
+     *                    by this value
      * @param maxDistance This is the maximum distance in blocks for the
-     *     trace. Setting this value above 140 may lead to problems with
-     *     unloaded chunks. A value of 0 indicates no limit
-     *
+     *                    trace. Setting this value above 140 may lead to problems with
+     *                    unloaded chunks. A value of 0 indicates no limit
      */
     public BlockIterator(World world, Vector start, Vector direction, double yOffset, int maxDistance) {
         this.world = world;
@@ -84,6 +82,7 @@ public class BlockIterator implements Iterator<Block> {
             thirdDirection = getZLength(direction);
             thirdPosition = getZPosition(direction, startClone, startBlock);
         }
+
         if (getYLength(direction) > mainDirection) {
             mainFace = getYFace(direction);
             mainDirection = getYLength(direction);
@@ -97,6 +96,7 @@ public class BlockIterator implements Iterator<Block> {
             thirdDirection = getXLength(direction);
             thirdPosition = getXPosition(direction, startClone, startBlock);
         }
+
         if (getZLength(direction) > mainDirection) {
             mainFace = getZFace(direction);
             mainDirection = getZLength(direction);
@@ -172,62 +172,17 @@ public class BlockIterator implements Iterator<Block> {
 
         // Calculate the number of planes passed to give max distance
         maxDistanceInt = round(maxDistance / (Math.sqrt(mainDirection * mainDirection + secondDirection * secondDirection + thirdDirection * thirdDirection) / mainDirection));
-
-    }
-
-    private boolean blockEquals(Block a, Block b) {
-        return a.getX() == b.getX() && a.getY() == b.getY() && a.getZ() == b.getZ();
-    }
-
-    private BlockFace getXFace(Vector direction) {
-        return ((direction.getX() > 0) ? BlockFace.EAST : BlockFace.WEST);
-    }
-
-    private BlockFace getYFace(Vector direction) {
-        return ((direction.getY() > 0) ? BlockFace.UP : BlockFace.DOWN);
-    }
-
-    private BlockFace getZFace(Vector direction) {
-        return ((direction.getZ() > 0) ? BlockFace.SOUTH : BlockFace.NORTH);
-    }
-
-    private double getXLength(Vector direction) {
-        return Math.abs(direction.getX());
-    }
-
-    private double getYLength(Vector direction) {
-        return Math.abs(direction.getY());
-    }
-
-    private double getZLength(Vector direction) {
-        return Math.abs(direction.getZ());
-    }
-
-    private double getPosition(double direction, double position, int blockPosition) {
-        return direction > 0 ? (position - blockPosition) : (blockPosition + 1 - position);
-    }
-
-    private double getXPosition(Vector direction, Vector position, Block block) {
-        return getPosition(direction.getX(), position.getX(), block.getX());
-    }
-
-    private double getYPosition(Vector direction, Vector position, Block block) {
-        return getPosition(direction.getY(), position.getY(), block.getY());
-    }
-
-    private double getZPosition(Vector direction, Vector position, Block block) {
-        return getPosition(direction.getZ(), position.getZ(), block.getZ());
     }
 
     /**
      * Constructs the BlockIterator
      *
-     * @param loc The location for the start of the ray trace
-     * @param yOffset The trace begins vertically offset from the start vector
-     *     by this value
+     * @param loc         The location for the start of the ray trace
+     * @param yOffset     The trace begins vertically offset from the start vector
+     *                    by this value
      * @param maxDistance This is the maximum distance in blocks for the
-     *     trace. Setting this value above 140 may lead to problems with
-     *     unloaded chunks. A value of 0 indicates no limit
+     *                    trace. Setting this value above 140 may lead to problems with
+     *                    unloaded chunks. A value of 0 indicates no limit
      */
     public BlockIterator(Location loc, double yOffset, int maxDistance) {
         this(loc.getWorld(), loc.toVector(), loc.getDirection(), yOffset, maxDistance);
@@ -236,9 +191,9 @@ public class BlockIterator implements Iterator<Block> {
     /**
      * Constructs the BlockIterator.
      *
-     * @param loc The location for the start of the ray trace
+     * @param loc     The location for the start of the ray trace
      * @param yOffset The trace begins vertically offset from the start vector
-     *     by this value
+     *                by this value
      */
 
     public BlockIterator(Location loc, double yOffset) {
@@ -258,10 +213,10 @@ public class BlockIterator implements Iterator<Block> {
     /**
      * Constructs the BlockIterator.
      *
-     * @param entity Information from the entity is used to set up the trace
+     * @param entity      Information from the entity is used to set up the trace
      * @param maxDistance This is the maximum distance in blocks for the
-     *     trace. Setting this value above 140 may lead to problems with
-     *     unloaded chunks. A value of 0 indicates no limit
+     *                    trace. Setting this value above 140 may lead to problems with
+     *                    unloaded chunks. A value of 0 indicates no limit
      */
 
     public BlockIterator(LivingEntity entity, int maxDistance) {
@@ -278,6 +233,50 @@ public class BlockIterator implements Iterator<Block> {
         this(entity, 0);
     }
 
+    private boolean blockEquals(Block a, Block b) {
+        return a.getX() == b.getX() && a.getY() == b.getY() && a.getZ() == b.getZ();
+    }
+
+    private BlockFace getXFace(Vector direction) {
+        return ((direction.getX() > 0) ? BlockFace.EAST : BlockFace.WEST);
+    }
+
+    private BlockFace getYFace(Vector direction) {
+        return ((direction.getY() > 0) ? BlockFace.UP : BlockFace.DOWN);
+    }
+
+    private BlockFace getZFace(Vector direction) {
+        return ((direction.getZ() > 0) ? BlockFace.SOUTH : BlockFace.NORTH);
+    }
+
+    private double getXLength(Vector direction) {
+        return Math.abs(direction.getX());
+    }
+
+    private double getYLength(Vector direction) {
+        return Math.abs(direction.getY());
+    }
+
+    private double getZLength(Vector direction) {
+        return Math.abs(direction.getZ());
+    }
+
+    private double getPosition(double direction, double position, int blockPosition) {
+        return direction > 0 ? (position - blockPosition) : (blockPosition + 1 - position);
+    }
+
+    private double getXPosition(Vector direction, Vector position, Block block) {
+        return getPosition(direction.getX(), position.getX(), block.getX());
+    }
+
+    private double getYPosition(Vector direction, Vector position, Block block) {
+        return getPosition(direction.getY(), position.getY(), block.getY());
+    }
+
+    private double getZPosition(Vector direction, Vector position, Block block) {
+        return getPosition(direction.getZ(), position.getZ(), block.getZ());
+    }
+
     /**
      * Returns true if the iteration has more elements
      */
@@ -335,23 +334,19 @@ public class BlockIterator implements Iterator<Block> {
             thirdError -= gridSize;
             secondError -= gridSize;
             currentBlock = 2;
-            return;
         } else if (secondError > 0) {
             blockQueue[1] = blockQueue[0].getRelative(mainFace);
             blockQueue[0] = blockQueue[1].getRelative(secondFace);
             secondError -= gridSize;
             currentBlock = 1;
-            return;
         } else if (thirdError > 0) {
             blockQueue[1] = blockQueue[0].getRelative(mainFace);
             blockQueue[0] = blockQueue[1].getRelative(thirdFace);
             thirdError -= gridSize;
             currentBlock = 1;
-            return;
         } else {
             blockQueue[0] = blockQueue[0].getRelative(mainFace);
             currentBlock = 0;
-            return;
         }
     }
 }
diff --git a/src/main/java/org/bukkit/util/BlockVector.java b/src/main/java/org/bukkit/util/BlockVector.java
index bdf8f6d..2d4e10e 100644
--- a/src/main/java/org/bukkit/util/BlockVector.java
+++ b/src/main/java/org/bukkit/util/BlockVector.java
@@ -1,8 +1,9 @@
 package org.bukkit.util;
 
-import java.util.Map;
 import org.bukkit.configuration.serialization.SerializableAs;
 
+import java.util.Map;
+
 /**
  * A vector with a hash function that floors the X, Y, Z components, a la
  * BlockVector in WorldEdit. BlockVectors can be used in hash sets and
@@ -71,6 +72,24 @@ public class BlockVector extends Vector {
         this.z = z;
     }
 
+    public static BlockVector deserialize(Map<String, Object> args) {
+        double x = 0;
+        double y = 0;
+        double z = 0;
+
+        if (args.containsKey("x")) {
+            x = (Double) args.get("x");
+        }
+        if (args.containsKey("y")) {
+            y = (Double) args.get("y");
+        }
+        if (args.containsKey("z")) {
+            z = (Double) args.get("z");
+        }
+
+        return new BlockVector(x, y, z);
+    }
+
     /**
      * Checks if another object is equivalent.
      *
@@ -82,10 +101,9 @@ public class BlockVector extends Vector {
         if (!(obj instanceof BlockVector)) {
             return false;
         }
-        BlockVector other = (BlockVector) obj;
 
+        BlockVector other = (BlockVector) obj;
         return (int) other.getX() == (int) this.x && (int) other.getY() == (int) this.y && (int) other.getZ() == (int) this.z;
-
     }
 
     /**
@@ -107,22 +125,4 @@ public class BlockVector extends Vector {
     public BlockVector clone() {
         return (BlockVector) super.clone();
     }
-
-    public static BlockVector deserialize(Map<String, Object> args) {
-        double x = 0;
-        double y = 0;
-        double z = 0;
-
-        if (args.containsKey("x")) {
-            x = (Double) args.get("x");
-        }
-        if (args.containsKey("y")) {
-            y = (Double) args.get("y");
-        }
-        if (args.containsKey("z")) {
-            z = (Double) args.get("z");
-        }
-
-        return new BlockVector(x, y, z);
-    }
 }
diff --git a/src/main/java/org/bukkit/util/CachedServerIcon.java b/src/main/java/org/bukkit/util/CachedServerIcon.java
index 5ca863b..5b053bd 100644
--- a/src/main/java/org/bukkit/util/CachedServerIcon.java
+++ b/src/main/java/org/bukkit/util/CachedServerIcon.java
@@ -12,4 +12,6 @@ import org.bukkit.event.server.ServerListPingEvent;
  * @see Server#loadServerIcon(java.io.File)
  * @see ServerListPingEvent#setServerIcon(CachedServerIcon)
  */
-public interface CachedServerIcon {}
+public interface CachedServerIcon {
+
+}
diff --git a/src/main/java/org/bukkit/util/ChatPaginator.java b/src/main/java/org/bukkit/util/ChatPaginator.java
index 24802d1..510000d 100644
--- a/src/main/java/org/bukkit/util/ChatPaginator.java
+++ b/src/main/java/org/bukkit/util/ChatPaginator.java
@@ -2,6 +2,7 @@ package org.bukkit.util;
 
 import org.bukkit.ChatColor;
 
+import java.util.Collections;
 import java.util.LinkedList;
 import java.util.List;
 
@@ -11,6 +12,7 @@ import java.util.List;
  * console.
  */
 public class ChatPaginator {
+
     public static final int GUARANTEED_NO_WRAP_CHAT_PAGE_WIDTH = 55; // Will never wrap, even with the largest characters
     public static final int AVERAGE_CHAT_PAGE_WIDTH = 65; // Will typically not wrap using an average character distribution
     public static final int UNBOUNDED_PAGE_WIDTH = Integer.MAX_VALUE;
@@ -22,20 +24,20 @@ public class ChatPaginator {
      * Breaks a raw string up into pages using the default width and height.
      *
      * @param unpaginatedString The raw string to break.
-     * @param pageNumber The page number to fetch.
+     * @param pageNumber        The page number to fetch.
      * @return A single chat page.
      */
     public static ChatPage paginate(String unpaginatedString, int pageNumber) {
-        return  paginate(unpaginatedString, pageNumber, GUARANTEED_NO_WRAP_CHAT_PAGE_WIDTH, CLOSED_CHAT_PAGE_HEIGHT);
+        return paginate(unpaginatedString, pageNumber, GUARANTEED_NO_WRAP_CHAT_PAGE_WIDTH, CLOSED_CHAT_PAGE_HEIGHT);
     }
 
     /**
      * Breaks a raw string up into pages using a provided width and height.
      *
      * @param unpaginatedString The raw string to break.
-     * @param pageNumber The page number to fetch.
-     * @param lineLength The desired width of a chat line.
-     * @param pageHeight The desired number of lines in a page.
+     * @param pageNumber        The page number to fetch.
+     * @param lineLength        The desired width of a chat line.
+     * @param pageHeight        The desired number of lines in a page.
      * @return A single chat page.
      */
     public static ChatPage paginate(String unpaginatedString, int pageNumber, int lineLength, int pageHeight) {
@@ -45,7 +47,7 @@ public class ChatPaginator {
         int actualPageNumber = pageNumber <= totalPages ? pageNumber : totalPages;
 
         int from = (actualPageNumber - 1) * pageHeight;
-        int to = from + pageHeight <= lines.length  ? from + pageHeight : lines.length;
+        int to = from + pageHeight <= lines.length ? from + pageHeight : lines.length;
         String[] selectedLines = Java15Compat.Arrays_copyOfRange(lines, from, to);
 
         return new ChatPage(selectedLines, actualPageNumber, totalPages);
@@ -55,19 +57,19 @@ public class ChatPaginator {
      * Breaks a raw string up into a series of lines. Words are wrapped using
      * spaces as decimeters and the newline character is respected.
      *
-     * @param rawString The raw string to break.
+     * @param rawString  The raw string to break.
      * @param lineLength The length of a line of text.
      * @return An array of word-wrapped lines.
      */
     public static String[] wordWrap(String rawString, int lineLength) {
         // A null string is a single line
         if (rawString == null) {
-            return new String[] {""};
+            return new String[]{""};
         }
 
         // A string shorter than the lineWidth is a single line
         if (rawString.length() <= lineLength && !rawString.contains("\n")) {
-            return new String[] {rawString};
+            return new String[]{rawString};
         }
 
         char[] rawChars = (rawString + ' ').toCharArray(); // add a trailing space to trigger pagination
@@ -89,9 +91,7 @@ public class ChatPaginator {
 
             if (c == ' ' || c == '\n') {
                 if (line.length() == 0 && word.length() > lineLength) { // special case: extremely long word begins a line
-                    for (String partialWord : word.toString().split("(?<=\\G.{" + lineLength + "})")) {
-                        lines.add(partialWord);
-                    }
+                    Collections.addAll(lines, word.toString().split("(?<=\\G.{" + lineLength + "})"));
                 } else if (line.length() + word.length() - lineColorChars == lineLength) { // Line exactly the correct length...newline
                     line.append(word);
                     lines.add(line.toString());
@@ -109,8 +109,8 @@ public class ChatPaginator {
                     }
                     line.append(word);
                 }
-                word = new StringBuilder();
 
+                word = new StringBuilder();
                 if (c == '\n') { // Newline forces the line to flush
                     lines.add(line.toString());
                     line = new StringBuilder();
@@ -120,7 +120,7 @@ public class ChatPaginator {
             }
         }
 
-        if(line.length() > 0) { // Only add the last line if there is anything to add
+        if (line.length() > 0) { // Only add the last line if there is anything to add
             lines.add(line.toString());
         }
 
@@ -128,8 +128,9 @@ public class ChatPaginator {
         if (lines.get(0).length() == 0 || lines.get(0).charAt(0) != ChatColor.COLOR_CHAR) {
             lines.set(0, ChatColor.WHITE + lines.get(0));
         }
+
         for (int i = 1; i < lines.size(); i++) {
-            final String pLine = lines.get(i-1);
+            final String pLine = lines.get(i - 1);
             final String subLine = lines.get(i);
 
             char color = pLine.charAt(pLine.lastIndexOf(ChatColor.COLOR_CHAR) + 1);
@@ -162,7 +163,6 @@ public class ChatPaginator {
         }
 
         public String[] getLines() {
-
             return lines;
         }
     }
diff --git a/src/main/java/org/bukkit/util/FileUtil.java b/src/main/java/org/bukkit/util/FileUtil.java
index 7cabf4c..a7e248e 100644
--- a/src/main/java/org/bukkit/util/FileUtil.java
+++ b/src/main/java/org/bukkit/util/FileUtil.java
@@ -1,10 +1,10 @@
 package org.bukkit.util;
 
-import java.nio.channels.FileChannel;
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileOutputStream;
 import java.io.IOException;
+import java.nio.channels.FileChannel;
 
 /**
  * Class containing file utilities
@@ -14,7 +14,7 @@ public class FileUtil {
     /**
      * This method copies one file to another location
      *
-     * @param inFile the source filename
+     * @param inFile  the source filename
      * @param outFile the target filename
      * @return true on success
      */
diff --git a/src/main/java/org/bukkit/util/Java15Compat.java b/src/main/java/org/bukkit/util/Java15Compat.java
index c119742..5c1f96b 100644
--- a/src/main/java/org/bukkit/util/Java15Compat.java
+++ b/src/main/java/org/bukkit/util/Java15Compat.java
@@ -3,6 +3,7 @@ package org.bukkit.util;
 import java.lang.reflect.Array;
 
 public class Java15Compat {
+
     @SuppressWarnings("unchecked")
     public static <T> T[] Arrays_copyOfRange(T[] original, int start, int end) {
         if (original.length >= start && 0 <= start) {
@@ -16,6 +17,7 @@ public class Java15Compat {
             }
             throw new IllegalArgumentException();
         }
+
         throw new ArrayIndexOutOfBoundsException();
     }
 }
diff --git a/src/main/java/org/bukkit/util/NumberConversions.java b/src/main/java/org/bukkit/util/NumberConversions.java
index 29f81d0..b57fc01 100644
--- a/src/main/java/org/bukkit/util/NumberConversions.java
+++ b/src/main/java/org/bukkit/util/NumberConversions.java
@@ -4,7 +4,10 @@ package org.bukkit.util;
  * Utils for casting number types to other number types
  */
 public final class NumberConversions {
-    private NumberConversions() {}
+
+    private NumberConversions() {
+
+    }
 
     public static int floor(double num) {
         final int floor = (int) num;
@@ -31,9 +34,10 @@ public final class NumberConversions {
 
         try {
             return Integer.valueOf(object.toString());
-        } catch (NumberFormatException e) {
-        } catch (NullPointerException e) {
+        } catch (NumberFormatException ignored) {
+        } catch (NullPointerException ignored) {
         }
+
         return 0;
     }
 
@@ -44,9 +48,10 @@ public final class NumberConversions {
 
         try {
             return Float.valueOf(object.toString());
-        } catch (NumberFormatException e) {
-        } catch (NullPointerException e) {
+        } catch (NumberFormatException ignored) {
+        } catch (NullPointerException ignored) {
         }
+
         return 0;
     }
 
@@ -57,9 +62,10 @@ public final class NumberConversions {
 
         try {
             return Double.valueOf(object.toString());
-        } catch (NumberFormatException e) {
-        } catch (NullPointerException e) {
+        } catch (NumberFormatException ignored) {
+        } catch (NullPointerException ignored) {
         }
+
         return 0;
     }
 
@@ -70,9 +76,10 @@ public final class NumberConversions {
 
         try {
             return Long.valueOf(object.toString());
-        } catch (NumberFormatException e) {
-        } catch (NullPointerException e) {
+        } catch (NumberFormatException ignored) {
+        } catch (NullPointerException ignored) {
         }
+
         return 0;
     }
 
@@ -83,9 +90,10 @@ public final class NumberConversions {
 
         try {
             return Short.valueOf(object.toString());
-        } catch (NumberFormatException e) {
-        } catch (NullPointerException e) {
+        } catch (NumberFormatException ignored) {
+        } catch (NullPointerException ignored) {
         }
+
         return 0;
     }
 
@@ -96,9 +104,10 @@ public final class NumberConversions {
 
         try {
             return Byte.valueOf(object.toString());
-        } catch (NumberFormatException e) {
-        } catch (NullPointerException e) {
+        } catch (NumberFormatException ignored) {
+        } catch (NullPointerException ignored) {
         }
+
         return 0;
     }
 }
diff --git a/src/main/java/org/bukkit/util/StringUtil.java b/src/main/java/org/bukkit/util/StringUtil.java
index 4a8753f..ea1352a 100644
--- a/src/main/java/org/bukkit/util/StringUtil.java
+++ b/src/main/java/org/bukkit/util/StringUtil.java
@@ -1,25 +1,26 @@
 package org.bukkit.util;
 
-import java.util.Collection;
 import org.apache.commons.lang.Validate;
 
+import java.util.Collection;
+
 public class StringUtil {
 
     /**
      * Copies all elements from the iterable collection of originals to the
      * collection provided.
      *
-     * @param token String to search for
-     * @param originals An iterable collection of strings to filter.
+     * @param token      String to search for
+     * @param originals  An iterable collection of strings to filter.
      * @param collection The collection to add matches to
      * @return the collection provided that would have the elements copied
-     *     into
+     * into
      * @throws UnsupportedOperationException if the collection is immutable
-     *     and originals contains a string which starts with the specified
-     *     search string.
-     * @throws IllegalArgumentException if any parameter is is null
-     * @throws IllegalArgumentException if originals contains a null element.
-     *     <b>Note: the collection may be modified before this is thrown</b>
+     *                                       and originals contains a string which starts with the specified
+     *                                       search string.
+     * @throws IllegalArgumentException      if any parameter is is null
+     * @throws IllegalArgumentException      if originals contains a null element.
+     *                                       <b>Note: the collection may be modified before this is thrown</b>
      */
     public static <T extends Collection<? super String>> T copyPartialMatches(final String token, final Iterable<String> originals, final T collection) throws UnsupportedOperationException, IllegalArgumentException {
         Validate.notNull(token, "Search token cannot be null");
@@ -43,15 +44,12 @@ public class StringUtil {
      * @param string String to check
      * @param prefix Prefix of string to compare
      * @return true if provided string starts with, ignoring case, the prefix
-     *     provided
-     * @throws NullPointerException if prefix is null
+     * provided
+     * @throws NullPointerException     if prefix is null
      * @throws IllegalArgumentException if string is null
      */
     public static boolean startsWithIgnoreCase(final String string, final String prefix) throws IllegalArgumentException, NullPointerException {
         Validate.notNull(string, "Cannot check a null string for a match");
-        if (string.length() < prefix.length()) {
-            return false;
-        }
-        return string.regionMatches(true, 0, prefix, 0, prefix.length());
+        return string.length() >= prefix.length() && string.regionMatches(true, 0, prefix, 0, prefix.length());
     }
 }
diff --git a/src/main/java/org/bukkit/util/Vector.java b/src/main/java/org/bukkit/util/Vector.java
index 61116ea..1f9e2f1 100644
--- a/src/main/java/org/bukkit/util/Vector.java
+++ b/src/main/java/org/bukkit/util/Vector.java
@@ -1,13 +1,14 @@
 package org.bukkit.util;
 
-import java.util.LinkedHashMap;
-import java.util.Map;
-import java.util.Random;
 import org.bukkit.Location;
 import org.bukkit.World;
 import org.bukkit.configuration.serialization.ConfigurationSerializable;
 import org.bukkit.configuration.serialization.SerializableAs;
 
+import java.util.LinkedHashMap;
+import java.util.Map;
+import java.util.Random;
+
 /**
  * Represents a mutable vector. Because the components of Vectors are mutable,
  * storing Vectors long term may be dangerous if passing code modifies the
@@ -16,15 +17,13 @@ import org.bukkit.configuration.serialization.SerializableAs;
  */
 @SerializableAs("Vector")
 public class Vector implements Cloneable, ConfigurationSerializable {
-    private static final long serialVersionUID = -2657651106777219169L;
-
-    private static Random random = new Random();
 
+    private static final long serialVersionUID = -2657651106777219169L;
     /**
      * Threshold for fuzzy equals().
      */
     private static final double epsilon = 0.000001;
-
+    private static Random random = new Random();
     protected double x;
     protected double y;
     protected double z;
@@ -78,6 +77,67 @@ public class Vector implements Cloneable, ConfigurationSerializable {
     }
 
     /**
+     * Get the threshold used for equals().
+     *
+     * @return The epsilon.
+     */
+    public static double getEpsilon() {
+        return epsilon;
+    }
+
+    /**
+     * Gets the minimum components of two vectors.
+     *
+     * @param v1 The first vector.
+     * @param v2 The second vector.
+     * @return minimum
+     */
+    public static Vector getMinimum(Vector v1, Vector v2) {
+        return new Vector(Math.min(v1.x, v2.x), Math.min(v1.y, v2.y), Math.min(v1.z, v2.z));
+    }
+
+    /**
+     * Gets the maximum components of two vectors.
+     *
+     * @param v1 The first vector.
+     * @param v2 The second vector.
+     * @return maximum
+     */
+    public static Vector getMaximum(Vector v1, Vector v2) {
+        return new Vector(Math.max(v1.x, v2.x), Math.max(v1.y, v2.y), Math.max(v1.z, v2.z));
+    }
+
+    /**
+     * Gets a random vector with components having a random value between 0
+     * and 1.
+     *
+     * @return A random vector.
+     */
+    public static Vector getRandom() {
+        return new Vector(random.nextDouble(), random.nextDouble(), random.nextDouble());
+    }
+
+    public static Vector deserialize(Map<String, Object> args) {
+        double x = 0;
+        double y = 0;
+        double z = 0;
+
+        if (args.containsKey("x")) {
+            x = (Double) args.get("x");
+        }
+
+        if (args.containsKey("y")) {
+            y = (Double) args.get("y");
+        }
+
+        if (args.containsKey("z")) {
+            z = (Double) args.get("z");
+        }
+
+        return new Vector(x, y, z);
+    }
+
+    /**
      * Adds a vector to this one
      *
      * @param vec The other vector
@@ -364,6 +424,17 @@ public class Vector implements Cloneable, ConfigurationSerializable {
     }
 
     /**
+     * Set the X component.
+     *
+     * @param x The new X component.
+     * @return This vector.
+     */
+    public Vector setX(float x) {
+        this.x = x;
+        return this;
+    }
+
+    /**
      * Gets the floored value of the X component, indicating the block that
      * this vector is contained with.
      *
@@ -383,6 +454,17 @@ public class Vector implements Cloneable, ConfigurationSerializable {
     }
 
     /**
+     * Set the Y component.
+     *
+     * @param y The new Y component.
+     * @return This vector.
+     */
+    public Vector setY(float y) {
+        this.y = y;
+        return this;
+    }
+
+    /**
      * Gets the floored value of the Y component, indicating the block that
      * this vector is contained with.
      *
@@ -402,6 +484,17 @@ public class Vector implements Cloneable, ConfigurationSerializable {
     }
 
     /**
+     * Set the Z component.
+     *
+     * @param z The new Z component.
+     * @return This vector.
+     */
+    public Vector setZ(float z) {
+        this.z = z;
+        return this;
+    }
+
+    /**
      * Gets the floored value of the Z component, indicating the block that
      * this vector is contained with.
      *
@@ -434,17 +527,6 @@ public class Vector implements Cloneable, ConfigurationSerializable {
     }
 
     /**
-     * Set the X component.
-     *
-     * @param x The new X component.
-     * @return This vector.
-     */
-    public Vector setX(float x) {
-        this.x = x;
-        return this;
-    }
-
-    /**
      * Set the Y component.
      *
      * @param y The new Y component.
@@ -467,17 +549,6 @@ public class Vector implements Cloneable, ConfigurationSerializable {
     }
 
     /**
-     * Set the Y component.
-     *
-     * @param y The new Y component.
-     * @return This vector.
-     */
-    public Vector setY(float y) {
-        this.y = y;
-        return this;
-    }
-
-    /**
      * Set the Z component.
      *
      * @param z The new Z component.
@@ -500,14 +571,45 @@ public class Vector implements Cloneable, ConfigurationSerializable {
     }
 
     /**
-     * Set the Z component.
+     * Gets a Location version of this vector with yaw and pitch being 0.
      *
-     * @param z The new Z component.
-     * @return This vector.
+     * @param world The world to link the location to.
+     * @return the location
      */
-    public Vector setZ(float z) {
-        this.z = z;
-        return this;
+    public Location toLocation(World world) {
+        return new Location(world, x, y, z);
+    }
+
+    /**
+     * Gets a Location version of this vector.
+     *
+     * @param world The world to link the location to.
+     * @param yaw   The desired yaw.
+     * @param pitch The desired pitch.
+     * @return the location
+     */
+    public Location toLocation(World world, float yaw, float pitch) {
+        return new Location(world, x, y, z, yaw, pitch);
+    }
+
+    /**
+     * Get the block vector of this vector.
+     *
+     * @return A block vector.
+     */
+    public BlockVector toBlockVector() {
+        return new BlockVector(x, y, z);
+    }
+
+    @Override
+    public Map<String, Object> serialize() {
+        Map<String, Object> result = new LinkedHashMap<String, Object>();
+
+        result.put("x", getX());
+        result.put("y", getY());
+        result.put("z", getZ());
+
+        return result;
     }
 
     /**
@@ -524,7 +626,6 @@ public class Vector implements Cloneable, ConfigurationSerializable {
         }
 
         Vector other = (Vector) obj;
-
         return Math.abs(x - other.x) < epsilon && Math.abs(y - other.y) < epsilon && Math.abs(z - other.z) < epsilon && (this.getClass().equals(obj.getClass()));
     }
 
@@ -564,104 +665,4 @@ public class Vector implements Cloneable, ConfigurationSerializable {
     public String toString() {
         return x + "," + y + "," + z;
     }
-
-    /**
-     * Gets a Location version of this vector with yaw and pitch being 0.
-     *
-     * @param world The world to link the location to.
-     * @return the location
-     */
-    public Location toLocation(World world) {
-        return new Location(world, x, y, z);
-    }
-
-    /**
-     * Gets a Location version of this vector.
-     *
-     * @param world The world to link the location to.
-     * @param yaw The desired yaw.
-     * @param pitch The desired pitch.
-     * @return the location
-     */
-    public Location toLocation(World world, float yaw, float pitch) {
-        return new Location(world, x, y, z, yaw, pitch);
-    }
-
-    /**
-     * Get the block vector of this vector.
-     *
-     * @return A block vector.
-     */
-    public BlockVector toBlockVector() {
-        return new BlockVector(x, y, z);
-    }
-
-    /**
-     * Get the threshold used for equals().
-     *
-     * @return The epsilon.
-     */
-    public static double getEpsilon() {
-        return epsilon;
-    }
-
-    /**
-     * Gets the minimum components of two vectors.
-     *
-     * @param v1 The first vector.
-     * @param v2 The second vector.
-     * @return minimum
-     */
-    public static Vector getMinimum(Vector v1, Vector v2) {
-        return new Vector(Math.min(v1.x, v2.x), Math.min(v1.y, v2.y), Math.min(v1.z, v2.z));
-    }
-
-    /**
-     * Gets the maximum components of two vectors.
-     *
-     * @param v1 The first vector.
-     * @param v2 The second vector.
-     * @return maximum
-     */
-    public static Vector getMaximum(Vector v1, Vector v2) {
-        return new Vector(Math.max(v1.x, v2.x), Math.max(v1.y, v2.y), Math.max(v1.z, v2.z));
-    }
-
-    /**
-     * Gets a random vector with components having a random value between 0
-     * and 1.
-     *
-     * @return A random vector.
-     */
-    public static Vector getRandom() {
-        return new Vector(random.nextDouble(), random.nextDouble(), random.nextDouble());
-    }
-
-    public Map<String, Object> serialize() {
-        Map<String, Object> result = new LinkedHashMap<String, Object>();
-
-        result.put("x", getX());
-        result.put("y", getY());
-        result.put("z", getZ());
-
-        return result;
-    }
-
-    public static Vector deserialize(Map<String, Object> args) {
-        double x = 0;
-        double y = 0;
-        double z = 0;
-
-        if (args.containsKey("x")) {
-            x = (Double) args.get("x");
-        }
-        if (args.containsKey("y")) {
-            y = (Double) args.get("y");
-        }
-        if (args.containsKey("z")) {
-            z = (Double) args.get("z");
-        }
-
-        return new Vector(x, y, z);
-    }
 }
diff --git a/src/main/java/org/bukkit/util/io/BukkitObjectInputStream.java b/src/main/java/org/bukkit/util/io/BukkitObjectInputStream.java
index d4b2825..80dbff8 100644
--- a/src/main/java/org/bukkit/util/io/BukkitObjectInputStream.java
+++ b/src/main/java/org/bukkit/util/io/BukkitObjectInputStream.java
@@ -1,12 +1,12 @@
 package org.bukkit.util.io;
 
+import org.bukkit.configuration.serialization.ConfigurationSerializable;
+import org.bukkit.configuration.serialization.ConfigurationSerialization;
+
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.ObjectInputStream;
 
-import org.bukkit.configuration.serialization.ConfigurationSerializable;
-import org.bukkit.configuration.serialization.ConfigurationSerialization;
-
 /**
  * This class is designed to be used in conjunction with the {@link
  * ConfigurationSerializable} API. It translates objects back to their
@@ -42,6 +42,12 @@ public class BukkitObjectInputStream extends ObjectInputStream {
         super.enableResolveObject(true);
     }
 
+    private static IOException newIOException(String string, Throwable cause) {
+        IOException exception = new IOException(string);
+        exception.initCause(cause);
+        return exception;
+    }
+
     @Override
     protected Object resolveObject(Object obj) throws IOException {
         if (obj instanceof Wrapper) {
@@ -54,10 +60,4 @@ public class BukkitObjectInputStream extends ObjectInputStream {
 
         return super.resolveObject(obj);
     }
-
-    private static IOException newIOException(String string, Throwable cause) {
-        IOException exception = new IOException(string);
-        exception.initCause(cause);
-        return exception;
-    }
 }
diff --git a/src/main/java/org/bukkit/util/io/BukkitObjectOutputStream.java b/src/main/java/org/bukkit/util/io/BukkitObjectOutputStream.java
index c11e202..01db1e8 100644
--- a/src/main/java/org/bukkit/util/io/BukkitObjectOutputStream.java
+++ b/src/main/java/org/bukkit/util/io/BukkitObjectOutputStream.java
@@ -1,12 +1,12 @@
 package org.bukkit.util.io;
 
+import org.bukkit.configuration.serialization.ConfigurationSerializable;
+
 import java.io.IOException;
 import java.io.ObjectOutputStream;
 import java.io.OutputStream;
 import java.io.Serializable;
 
-import org.bukkit.configuration.serialization.ConfigurationSerializable;
-
 /**
  * This class is designed to be used in conjunction with the {@link
  * ConfigurationSerializable} API. It translates objects to an internal
diff --git a/src/main/java/org/bukkit/util/io/Wrapper.java b/src/main/java/org/bukkit/util/io/Wrapper.java
index e45605b..363b9cf 100644
--- a/src/main/java/org/bukkit/util/io/Wrapper.java
+++ b/src/main/java/org/bukkit/util/io/Wrapper.java
@@ -1,23 +1,23 @@
 package org.bukkit.util.io;
 
-import java.io.Serializable;
-import java.util.Map;
-
+import com.google.common.collect.ImmutableMap;
 import org.bukkit.configuration.serialization.ConfigurationSerializable;
 import org.bukkit.configuration.serialization.ConfigurationSerialization;
 
-import com.google.common.collect.ImmutableMap;
+import java.io.Serializable;
+import java.util.Map;
 
 class Wrapper<T extends Map<String, ?> & Serializable> implements Serializable {
+
     private static final long serialVersionUID = -986209235411767547L;
 
     final T map;
 
-    static Wrapper<ImmutableMap<String, ?>> newWrapper(ConfigurationSerializable obj) {
-        return new Wrapper<ImmutableMap<String, ?>>(ImmutableMap.<String, Object>builder().put(ConfigurationSerialization.SERIALIZED_TYPE_KEY, ConfigurationSerialization.getAlias(obj.getClass())).putAll(obj.serialize()).build());
-    }
-
     private Wrapper(T map) {
         this.map = map;
     }
+
+    static Wrapper<ImmutableMap<String, ?>> newWrapper(ConfigurationSerializable obj) {
+        return new Wrapper<ImmutableMap<String, ?>>(ImmutableMap.<String, Object>builder().put(ConfigurationSerialization.SERIALIZED_TYPE_KEY, ConfigurationSerialization.getAlias(obj.getClass())).putAll(obj.serialize()).build());
+    }
 }
diff --git a/src/main/java/org/bukkit/util/noise/NoiseGenerator.java b/src/main/java/org/bukkit/util/noise/NoiseGenerator.java
index 72c92f3..e37edcf 100644
--- a/src/main/java/org/bukkit/util/noise/NoiseGenerator.java
+++ b/src/main/java/org/bukkit/util/noise/NoiseGenerator.java
@@ -4,6 +4,7 @@ package org.bukkit.util.noise;
  * Base class for all noise generators
  */
 public abstract class NoiseGenerator {
+
     protected final int perm[] = new int[512];
     protected double offsetX;
     protected double offsetY;
@@ -69,8 +70,8 @@ public abstract class NoiseGenerator {
      * Generates noise for the 1D coordinates using the specified number of
      * octaves and parameters
      *
-     * @param x X-coordinate
-     * @param octaves Number of octaves to use
+     * @param x         X-coordinate
+     * @param octaves   Number of octaves to use
      * @param frequency How much to alter the frequency by each octave
      * @param amplitude How much to alter the amplitude by each octave
      * @return Resulting noise
@@ -83,10 +84,10 @@ public abstract class NoiseGenerator {
      * Generates noise for the 1D coordinates using the specified number of
      * octaves and parameters
      *
-     * @param x X-coordinate
-     * @param octaves Number of octaves to use
-     * @param frequency How much to alter the frequency by each octave
-     * @param amplitude How much to alter the amplitude by each octave
+     * @param x          X-coordinate
+     * @param octaves    Number of octaves to use
+     * @param frequency  How much to alter the frequency by each octave
+     * @param amplitude  How much to alter the amplitude by each octave
      * @param normalized If true, normalize the value to [-1, 1]
      * @return Resulting noise
      */
@@ -98,9 +99,9 @@ public abstract class NoiseGenerator {
      * Generates noise for the 2D coordinates using the specified number of
      * octaves and parameters
      *
-     * @param x X-coordinate
-     * @param y Y-coordinate
-     * @param octaves Number of octaves to use
+     * @param x         X-coordinate
+     * @param y         Y-coordinate
+     * @param octaves   Number of octaves to use
      * @param frequency How much to alter the frequency by each octave
      * @param amplitude How much to alter the amplitude by each octave
      * @return Resulting noise
@@ -113,11 +114,11 @@ public abstract class NoiseGenerator {
      * Generates noise for the 2D coordinates using the specified number of
      * octaves and parameters
      *
-     * @param x X-coordinate
-     * @param y Y-coordinate
-     * @param octaves Number of octaves to use
-     * @param frequency How much to alter the frequency by each octave
-     * @param amplitude How much to alter the amplitude by each octave
+     * @param x          X-coordinate
+     * @param y          Y-coordinate
+     * @param octaves    Number of octaves to use
+     * @param frequency  How much to alter the frequency by each octave
+     * @param amplitude  How much to alter the amplitude by each octave
      * @param normalized If true, normalize the value to [-1, 1]
      * @return Resulting noise
      */
@@ -129,10 +130,10 @@ public abstract class NoiseGenerator {
      * Generates noise for the 3D coordinates using the specified number of
      * octaves and parameters
      *
-     * @param x X-coordinate
-     * @param y Y-coordinate
-     * @param z Z-coordinate
-     * @param octaves Number of octaves to use
+     * @param x         X-coordinate
+     * @param y         Y-coordinate
+     * @param z         Z-coordinate
+     * @param octaves   Number of octaves to use
      * @param frequency How much to alter the frequency by each octave
      * @param amplitude How much to alter the amplitude by each octave
      * @return Resulting noise
@@ -145,12 +146,12 @@ public abstract class NoiseGenerator {
      * Generates noise for the 3D coordinates using the specified number of
      * octaves and parameters
      *
-     * @param x X-coordinate
-     * @param y Y-coordinate
-     * @param z Z-coordinate
-     * @param octaves Number of octaves to use
-     * @param frequency How much to alter the frequency by each octave
-     * @param amplitude How much to alter the amplitude by each octave
+     * @param x          X-coordinate
+     * @param y          Y-coordinate
+     * @param z          Z-coordinate
+     * @param octaves    Number of octaves to use
+     * @param frequency  How much to alter the frequency by each octave
+     * @param amplitude  How much to alter the amplitude by each octave
      * @param normalized If true, normalize the value to [-1, 1]
      * @return Resulting noise
      */
diff --git a/src/main/java/org/bukkit/util/noise/OctaveGenerator.java b/src/main/java/org/bukkit/util/noise/OctaveGenerator.java
index a87304b..9577ecf 100644
--- a/src/main/java/org/bukkit/util/noise/OctaveGenerator.java
+++ b/src/main/java/org/bukkit/util/noise/OctaveGenerator.java
@@ -4,7 +4,9 @@ package org.bukkit.util.noise;
  * Creates noise using unbiased octaves
  */
 public abstract class OctaveGenerator {
+
     protected final NoiseGenerator[] octaves;
+
     protected double xScale = 1;
     protected double yScale = 1;
     protected double zScale = 1;
@@ -94,7 +96,7 @@ public abstract class OctaveGenerator {
      * Generates noise for the 1D coordinates using the specified number of
      * octaves and parameters
      *
-     * @param x X-coordinate
+     * @param x         X-coordinate
      * @param frequency How much to alter the frequency by each octave
      * @param amplitude How much to alter the amplitude by each octave
      * @return Resulting noise
@@ -107,9 +109,9 @@ public abstract class OctaveGenerator {
      * Generates noise for the 1D coordinates using the specified number of
      * octaves and parameters
      *
-     * @param x X-coordinate
-     * @param frequency How much to alter the frequency by each octave
-     * @param amplitude How much to alter the amplitude by each octave
+     * @param x          X-coordinate
+     * @param frequency  How much to alter the frequency by each octave
+     * @param amplitude  How much to alter the amplitude by each octave
      * @param normalized If true, normalize the value to [-1, 1]
      * @return Resulting noise
      */
@@ -121,8 +123,8 @@ public abstract class OctaveGenerator {
      * Generates noise for the 2D coordinates using the specified number of
      * octaves and parameters
      *
-     * @param x X-coordinate
-     * @param y Y-coordinate
+     * @param x         X-coordinate
+     * @param y         Y-coordinate
      * @param frequency How much to alter the frequency by each octave
      * @param amplitude How much to alter the amplitude by each octave
      * @return Resulting noise
@@ -135,10 +137,10 @@ public abstract class OctaveGenerator {
      * Generates noise for the 2D coordinates using the specified number of
      * octaves and parameters
      *
-     * @param x X-coordinate
-     * @param y Y-coordinate
-     * @param frequency How much to alter the frequency by each octave
-     * @param amplitude How much to alter the amplitude by each octave
+     * @param x          X-coordinate
+     * @param y          Y-coordinate
+     * @param frequency  How much to alter the frequency by each octave
+     * @param amplitude  How much to alter the amplitude by each octave
      * @param normalized If true, normalize the value to [-1, 1]
      * @return Resulting noise
      */
@@ -150,9 +152,9 @@ public abstract class OctaveGenerator {
      * Generates noise for the 3D coordinates using the specified number of
      * octaves and parameters
      *
-     * @param x X-coordinate
-     * @param y Y-coordinate
-     * @param z Z-coordinate
+     * @param x         X-coordinate
+     * @param y         Y-coordinate
+     * @param z         Z-coordinate
      * @param frequency How much to alter the frequency by each octave
      * @param amplitude How much to alter the amplitude by each octave
      * @return Resulting noise
@@ -165,11 +167,11 @@ public abstract class OctaveGenerator {
      * Generates noise for the 3D coordinates using the specified number of
      * octaves and parameters
      *
-     * @param x X-coordinate
-     * @param y Y-coordinate
-     * @param z Z-coordinate
-     * @param frequency How much to alter the frequency by each octave
-     * @param amplitude How much to alter the amplitude by each octave
+     * @param x          X-coordinate
+     * @param y          Y-coordinate
+     * @param z          Z-coordinate
+     * @param frequency  How much to alter the frequency by each octave
+     * @param amplitude  How much to alter the amplitude by each octave
      * @param normalized If true, normalize the value to [-1, 1]
      * @return Resulting noise
      */
diff --git a/src/main/java/org/bukkit/util/noise/PerlinNoiseGenerator.java b/src/main/java/org/bukkit/util/noise/PerlinNoiseGenerator.java
index 5e034c1..07de3bf 100644
--- a/src/main/java/org/bukkit/util/noise/PerlinNoiseGenerator.java
+++ b/src/main/java/org/bukkit/util/noise/PerlinNoiseGenerator.java
@@ -1,39 +1,42 @@
 package org.bukkit.util.noise;
 
-import java.util.Random;
 import org.bukkit.World;
 
+import java.util.Random;
+
 /**
  * Generates noise using the "classic" perlin generator
  *
  * @see SimplexNoiseGenerator "Improved" and faster version with slighly
- *     different results
+ * different results
  */
 public class PerlinNoiseGenerator extends NoiseGenerator {
+
     protected static final int grad3[][] = {{1, 1, 0}, {-1, 1, 0}, {1, -1, 0}, {-1, -1, 0},
-        {1, 0, 1}, {-1, 0, 1}, {1, 0, -1}, {-1, 0, -1},
-        {0, 1, 1}, {0, -1, 1}, {0, 1, -1}, {0, -1, -1}};
+            {1, 0, 1}, {-1, 0, 1}, {1, 0, -1}, {-1, 0, -1},
+            {0, 1, 1}, {0, -1, 1}, {0, 1, -1}, {0, -1, -1}};
+
     private static final PerlinNoiseGenerator instance = new PerlinNoiseGenerator();
 
     protected PerlinNoiseGenerator() {
         int p[] = {151, 160, 137, 91, 90, 15, 131, 13, 201,
-            95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37,
-            240, 21, 10, 23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62,
-            94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237, 149, 56,
-            87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139,
-            48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133,
-            230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25,
-            63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200,
-            196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3,
-            64, 52, 217, 226, 250, 124, 123, 5, 202, 38, 147, 118, 126, 255,
-            82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42,
-            223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153,
-            101, 155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79,
-            113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242,
-            193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249,
-            14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204,
-            176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236, 205, 93, 222,
-            114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180};
+                95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37,
+                240, 21, 10, 23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62,
+                94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237, 149, 56,
+                87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139,
+                48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133,
+                230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25,
+                63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200,
+                196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3,
+                64, 52, 217, 226, 250, 124, 123, 5, 202, 38, 147, 118, 126, 255,
+                82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42,
+                223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153,
+                101, 155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79,
+                113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242,
+                193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249,
+                14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204,
+                176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236, 205, 93, 222,
+                114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180};
 
         for (int i = 0; i < 512; i++) {
             perm[i] = p[i & 255];
@@ -127,6 +130,51 @@ public class PerlinNoiseGenerator extends NoiseGenerator {
         return instance;
     }
 
+    /**
+     * Generates noise for the 1D coordinates using the specified number of
+     * octaves and parameters
+     *
+     * @param x         X-coordinate
+     * @param octaves   Number of octaves to use
+     * @param frequency How much to alter the frequency by each octave
+     * @param amplitude How much to alter the amplitude by each octave
+     * @return Resulting noise
+     */
+    public static double getNoise(double x, int octaves, double frequency, double amplitude) {
+        return instance.noise(x, octaves, frequency, amplitude);
+    }
+
+    /**
+     * Generates noise for the 2D coordinates using the specified number of
+     * octaves and parameters
+     *
+     * @param x         X-coordinate
+     * @param y         Y-coordinate
+     * @param octaves   Number of octaves to use
+     * @param frequency How much to alter the frequency by each octave
+     * @param amplitude How much to alter the amplitude by each octave
+     * @return Resulting noise
+     */
+    public static double getNoise(double x, double y, int octaves, double frequency, double amplitude) {
+        return instance.noise(x, y, octaves, frequency, amplitude);
+    }
+
+    /**
+     * Generates noise for the 3D coordinates using the specified number of
+     * octaves and parameters
+     *
+     * @param x         X-coordinate
+     * @param y         Y-coordinate
+     * @param z         Z-coordinate
+     * @param octaves   Number of octaves to use
+     * @param frequency How much to alter the frequency by each octave
+     * @param amplitude How much to alter the amplitude by each octave
+     * @return Resulting noise
+     */
+    public static double getNoise(double x, double y, double z, int octaves, double frequency, double amplitude) {
+        return instance.noise(x, y, z, octaves, frequency, amplitude);
+    }
+
     @Override
     public double noise(double x, double y, double z) {
         x += offsetX;
@@ -161,57 +209,12 @@ public class PerlinNoiseGenerator extends NoiseGenerator {
         int BB = perm[B + 1] + Z;
 
         return lerp(fZ, lerp(fY, lerp(fX, grad(perm[AA], x, y, z),
-                        grad(perm[BA], x - 1, y, z)),
-                    lerp(fX, grad(perm[AB], x, y - 1, z),
-                        grad(perm[BB], x - 1, y - 1, z))),
+                                grad(perm[BA], x - 1, y, z)),
+                        lerp(fX, grad(perm[AB], x, y - 1, z),
+                                grad(perm[BB], x - 1, y - 1, z))),
                 lerp(fY, lerp(fX, grad(perm[AA + 1], x, y, z - 1),
-                        grad(perm[BA + 1], x - 1, y, z - 1)),
-                    lerp(fX, grad(perm[AB + 1], x, y - 1, z - 1),
-                        grad(perm[BB + 1], x - 1, y - 1, z - 1))));
-    }
-
-    /**
-     * Generates noise for the 1D coordinates using the specified number of
-     * octaves and parameters
-     *
-     * @param x X-coordinate
-     * @param octaves Number of octaves to use
-     * @param frequency How much to alter the frequency by each octave
-     * @param amplitude How much to alter the amplitude by each octave
-     * @return Resulting noise
-     */
-    public static double getNoise(double x, int octaves, double frequency, double amplitude) {
-        return instance.noise(x, octaves, frequency, amplitude);
-    }
-
-    /**
-     * Generates noise for the 2D coordinates using the specified number of
-     * octaves and parameters
-     *
-     * @param x X-coordinate
-     * @param y Y-coordinate
-     * @param octaves Number of octaves to use
-     * @param frequency How much to alter the frequency by each octave
-     * @param amplitude How much to alter the amplitude by each octave
-     * @return Resulting noise
-     */
-    public static double getNoise(double x, double y, int octaves, double frequency, double amplitude) {
-        return instance.noise(x, y, octaves, frequency, amplitude);
-    }
-
-    /**
-     * Generates noise for the 3D coordinates using the specified number of
-     * octaves and parameters
-     *
-     * @param x X-coordinate
-     * @param y Y-coordinate
-     * @param z Z-coordinate
-     * @param octaves Number of octaves to use
-     * @param frequency How much to alter the frequency by each octave
-     * @param amplitude How much to alter the amplitude by each octave
-     * @return Resulting noise
-     */
-    public static double getNoise(double x, double y, double z, int octaves, double frequency, double amplitude) {
-        return instance.noise(x, y, z, octaves, frequency, amplitude);
+                                grad(perm[BA + 1], x - 1, y, z - 1)),
+                        lerp(fX, grad(perm[AB + 1], x, y - 1, z - 1),
+                                grad(perm[BB + 1], x - 1, y - 1, z - 1))));
     }
 }
diff --git a/src/main/java/org/bukkit/util/noise/PerlinOctaveGenerator.java b/src/main/java/org/bukkit/util/noise/PerlinOctaveGenerator.java
index 55b7ad7..23d2b76 100644
--- a/src/main/java/org/bukkit/util/noise/PerlinOctaveGenerator.java
+++ b/src/main/java/org/bukkit/util/noise/PerlinOctaveGenerator.java
@@ -1,8 +1,9 @@
 package org.bukkit.util.noise;
 
-import java.util.Random;
 import org.bukkit.World;
 
+import java.util.Random;
+
 /**
  * Creates perlin noise through unbiased octaves
  */
@@ -11,7 +12,7 @@ public class PerlinOctaveGenerator extends OctaveGenerator {
     /**
      * Creates a perlin octave generator for the given world
      *
-     * @param world World to construct this generator for
+     * @param world   World to construct this generator for
      * @param octaves Amount of octaves to create
      */
     public PerlinOctaveGenerator(World world, int octaves) {
@@ -21,7 +22,7 @@ public class PerlinOctaveGenerator extends OctaveGenerator {
     /**
      * Creates a perlin octave generator for the given world
      *
-     * @param seed Seed to construct this generator for
+     * @param seed    Seed to construct this generator for
      * @param octaves Amount of octaves to create
      */
     public PerlinOctaveGenerator(long seed, int octaves) {
@@ -31,7 +32,7 @@ public class PerlinOctaveGenerator extends OctaveGenerator {
     /**
      * Creates a perlin octave generator for the given {@link Random}
      *
-     * @param rand Random object to construct this generator for
+     * @param rand    Random object to construct this generator for
      * @param octaves Amount of octaves to create
      */
     public PerlinOctaveGenerator(Random rand, int octaves) {
@@ -40,7 +41,6 @@ public class PerlinOctaveGenerator extends OctaveGenerator {
 
     private static NoiseGenerator[] createOctaves(Random rand, int octaves) {
         NoiseGenerator[] result = new NoiseGenerator[octaves];
-
         for (int i = 0; i < octaves; i++) {
             result[i] = new PerlinNoiseGenerator(rand);
         }
diff --git a/src/main/java/org/bukkit/util/noise/SimplexNoiseGenerator.java b/src/main/java/org/bukkit/util/noise/SimplexNoiseGenerator.java
index b052f3c..a83af9e 100644
--- a/src/main/java/org/bukkit/util/noise/SimplexNoiseGenerator.java
+++ b/src/main/java/org/bukkit/util/noise/SimplexNoiseGenerator.java
@@ -1,8 +1,9 @@
 package org.bukkit.util.noise;
 
-import java.util.Random;
 import org.bukkit.World;
 
+import java.util.Random;
+
 /**
  * Generates simplex-based noise.
  * <p>
@@ -25,24 +26,24 @@ public class SimplexNoiseGenerator extends PerlinNoiseGenerator {
     protected static final double G43 = G4 * 3.0;
     protected static final double G44 = G4 * 4.0 - 1.0;
     protected static final int grad4[][] = {{0, 1, 1, 1}, {0, 1, 1, -1}, {0, 1, -1, 1}, {0, 1, -1, -1},
-        {0, -1, 1, 1}, {0, -1, 1, -1}, {0, -1, -1, 1}, {0, -1, -1, -1},
-        {1, 0, 1, 1}, {1, 0, 1, -1}, {1, 0, -1, 1}, {1, 0, -1, -1},
-        {-1, 0, 1, 1}, {-1, 0, 1, -1}, {-1, 0, -1, 1}, {-1, 0, -1, -1},
-        {1, 1, 0, 1}, {1, 1, 0, -1}, {1, -1, 0, 1}, {1, -1, 0, -1},
-        {-1, 1, 0, 1}, {-1, 1, 0, -1}, {-1, -1, 0, 1}, {-1, -1, 0, -1},
-        {1, 1, 1, 0}, {1, 1, -1, 0}, {1, -1, 1, 0}, {1, -1, -1, 0},
-        {-1, 1, 1, 0}, {-1, 1, -1, 0}, {-1, -1, 1, 0}, {-1, -1, -1, 0}};
+            {0, -1, 1, 1}, {0, -1, 1, -1}, {0, -1, -1, 1}, {0, -1, -1, -1},
+            {1, 0, 1, 1}, {1, 0, 1, -1}, {1, 0, -1, 1}, {1, 0, -1, -1},
+            {-1, 0, 1, 1}, {-1, 0, 1, -1}, {-1, 0, -1, 1}, {-1, 0, -1, -1},
+            {1, 1, 0, 1}, {1, 1, 0, -1}, {1, -1, 0, 1}, {1, -1, 0, -1},
+            {-1, 1, 0, 1}, {-1, 1, 0, -1}, {-1, -1, 0, 1}, {-1, -1, 0, -1},
+            {1, 1, 1, 0}, {1, 1, -1, 0}, {1, -1, 1, 0}, {1, -1, -1, 0},
+            {-1, 1, 1, 0}, {-1, 1, -1, 0}, {-1, -1, 1, 0}, {-1, -1, -1, 0}};
     protected static final int simplex[][] = {
-        {0, 1, 2, 3}, {0, 1, 3, 2}, {0, 0, 0, 0}, {0, 2, 3, 1}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {1, 2, 3, 0},
-        {0, 2, 1, 3}, {0, 0, 0, 0}, {0, 3, 1, 2}, {0, 3, 2, 1}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {1, 3, 2, 0},
-        {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0},
-        {1, 2, 0, 3}, {0, 0, 0, 0}, {1, 3, 0, 2}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {2, 3, 0, 1}, {2, 3, 1, 0},
-        {1, 0, 2, 3}, {1, 0, 3, 2}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {2, 0, 3, 1}, {0, 0, 0, 0}, {2, 1, 3, 0},
-        {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0},
-        {2, 0, 1, 3}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {3, 0, 1, 2}, {3, 0, 2, 1}, {0, 0, 0, 0}, {3, 1, 2, 0},
-        {2, 1, 0, 3}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {3, 1, 0, 2}, {0, 0, 0, 0}, {3, 2, 0, 1}, {3, 2, 1, 0}};
-    protected static double offsetW;
+            {0, 1, 2, 3}, {0, 1, 3, 2}, {0, 0, 0, 0}, {0, 2, 3, 1}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {1, 2, 3, 0},
+            {0, 2, 1, 3}, {0, 0, 0, 0}, {0, 3, 1, 2}, {0, 3, 2, 1}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {1, 3, 2, 0},
+            {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0},
+            {1, 2, 0, 3}, {0, 0, 0, 0}, {1, 3, 0, 2}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {2, 3, 0, 1}, {2, 3, 1, 0},
+            {1, 0, 2, 3}, {1, 0, 3, 2}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {2, 0, 3, 1}, {0, 0, 0, 0}, {2, 1, 3, 0},
+            {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0},
+            {2, 0, 1, 3}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {3, 0, 1, 2}, {3, 0, 2, 1}, {0, 0, 0, 0}, {3, 1, 2, 0},
+            {2, 1, 0, 3}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {3, 1, 0, 2}, {0, 0, 0, 0}, {3, 2, 0, 1}, {3, 2, 1, 0}};
     private static final SimplexNoiseGenerator instance = new SimplexNoiseGenerator();
+    protected static double offsetW;
 
     protected SimplexNoiseGenerator() {
         super();
@@ -138,6 +139,15 @@ public class SimplexNoiseGenerator extends PerlinNoiseGenerator {
         return instance.noise(x, y, z, w);
     }
 
+    /**
+     * Gets the singleton unseeded instance of this generator
+     *
+     * @return Singleton
+     */
+    public static SimplexNoiseGenerator getInstance() {
+        return instance;
+    }
+
     @Override
     public double noise(double xin, double yin, double zin) {
         xin += offsetX;
@@ -508,13 +518,4 @@ public class SimplexNoiseGenerator extends PerlinNoiseGenerator {
         // Sum up and scale the result to cover the range [-1,1]
         return 27.0 * (n0 + n1 + n2 + n3 + n4);
     }
-
-    /**
-     * Gets the singleton unseeded instance of this generator
-     *
-     * @return Singleton
-     */
-    public static SimplexNoiseGenerator getInstance() {
-        return instance;
-    }
 }
diff --git a/src/main/java/org/bukkit/util/noise/SimplexOctaveGenerator.java b/src/main/java/org/bukkit/util/noise/SimplexOctaveGenerator.java
index 61e66aa..c230e26 100644
--- a/src/main/java/org/bukkit/util/noise/SimplexOctaveGenerator.java
+++ b/src/main/java/org/bukkit/util/noise/SimplexOctaveGenerator.java
@@ -1,18 +1,20 @@
 package org.bukkit.util.noise;
 
-import java.util.Random;
 import org.bukkit.World;
 
+import java.util.Random;
+
 /**
  * Creates simplex noise through unbiased octaves
  */
 public class SimplexOctaveGenerator extends OctaveGenerator {
+
     private double wScale = 1;
 
     /**
      * Creates a simplex octave generator for the given world
      *
-     * @param world World to construct this generator for
+     * @param world   World to construct this generator for
      * @param octaves Amount of octaves to create
      */
     public SimplexOctaveGenerator(World world, int octaves) {
@@ -22,7 +24,7 @@ public class SimplexOctaveGenerator extends OctaveGenerator {
     /**
      * Creates a simplex octave generator for the given world
      *
-     * @param seed Seed to construct this generator for
+     * @param seed    Seed to construct this generator for
      * @param octaves Amount of octaves to create
      */
     public SimplexOctaveGenerator(long seed, int octaves) {
@@ -32,13 +34,22 @@ public class SimplexOctaveGenerator extends OctaveGenerator {
     /**
      * Creates a simplex octave generator for the given {@link Random}
      *
-     * @param rand Random object to construct this generator for
+     * @param rand    Random object to construct this generator for
      * @param octaves Amount of octaves to create
      */
     public SimplexOctaveGenerator(Random rand, int octaves) {
         super(createOctaves(rand, octaves));
     }
 
+    private static NoiseGenerator[] createOctaves(Random rand, int octaves) {
+        NoiseGenerator[] result = new NoiseGenerator[octaves];
+        for (int i = 0; i < octaves; i++) {
+            result[i] = new SimplexNoiseGenerator(rand);
+        }
+
+        return result;
+    }
+
     @Override
     public void setScale(double scale) {
         super.setScale(scale);
@@ -67,10 +78,10 @@ public class SimplexOctaveGenerator extends OctaveGenerator {
      * Generates noise for the 3D coordinates using the specified number of
      * octaves and parameters
      *
-     * @param x X-coordinate
-     * @param y Y-coordinate
-     * @param z Z-coordinate
-     * @param w W-coordinate
+     * @param x         X-coordinate
+     * @param y         Y-coordinate
+     * @param z         Z-coordinate
+     * @param w         W-coordinate
      * @param frequency How much to alter the frequency by each octave
      * @param amplitude How much to alter the amplitude by each octave
      * @return Resulting noise
@@ -83,12 +94,12 @@ public class SimplexOctaveGenerator extends OctaveGenerator {
      * Generates noise for the 3D coordinates using the specified number of
      * octaves and parameters
      *
-     * @param x X-coordinate
-     * @param y Y-coordinate
-     * @param z Z-coordinate
-     * @param w W-coordinate
-     * @param frequency How much to alter the frequency by each octave
-     * @param amplitude How much to alter the amplitude by each octave
+     * @param x          X-coordinate
+     * @param y          Y-coordinate
+     * @param z          Z-coordinate
+     * @param w          W-coordinate
+     * @param frequency  How much to alter the frequency by each octave
+     * @param amplitude  How much to alter the amplitude by each octave
      * @param normalized If true, normalize the value to [-1, 1]
      * @return Resulting noise
      */
@@ -116,14 +127,4 @@ public class SimplexOctaveGenerator extends OctaveGenerator {
 
         return result;
     }
-
-    private static NoiseGenerator[] createOctaves(Random rand, int octaves) {
-        NoiseGenerator[] result = new NoiseGenerator[octaves];
-
-        for (int i = 0; i < octaves; i++) {
-            result[i] = new SimplexNoiseGenerator(rand);
-        }
-
-        return result;
-    }
 }
diff --git a/src/main/java/org/bukkit/util/permissions/BroadcastPermissions.java b/src/main/java/org/bukkit/util/permissions/BroadcastPermissions.java
index 092370e..a6c3892 100644
--- a/src/main/java/org/bukkit/util/permissions/BroadcastPermissions.java
+++ b/src/main/java/org/bukkit/util/permissions/BroadcastPermissions.java
@@ -4,19 +4,18 @@ import org.bukkit.permissions.Permission;
 import org.bukkit.permissions.PermissionDefault;
 
 public final class BroadcastPermissions {
+
     private static final String ROOT = "bukkit.broadcast";
     private static final String PREFIX = ROOT + ".";
 
-    private BroadcastPermissions() {}
+    private BroadcastPermissions() {
+    }
 
     public static Permission registerPermissions(Permission parent) {
         Permission broadcasts = DefaultPermissions.registerPermission(ROOT, "Allows the user to receive all broadcast messages", parent);
-
         DefaultPermissions.registerPermission(PREFIX + "admin", "Allows the user to receive administrative broadcasts", PermissionDefault.OP, broadcasts);
         DefaultPermissions.registerPermission(PREFIX + "user", "Allows the user to receive user broadcasts", PermissionDefault.TRUE, broadcasts);
-
         broadcasts.recalculatePermissibles();
-
         return broadcasts;
     }
 }
diff --git a/src/main/java/org/bukkit/util/permissions/CommandPermissions.java b/src/main/java/org/bukkit/util/permissions/CommandPermissions.java
index 4638c91..4b83c93 100644
--- a/src/main/java/org/bukkit/util/permissions/CommandPermissions.java
+++ b/src/main/java/org/bukkit/util/permissions/CommandPermissions.java
@@ -4,10 +4,13 @@ import org.bukkit.permissions.Permission;
 import org.bukkit.permissions.PermissionDefault;
 
 public final class CommandPermissions {
+
     private static final String ROOT = "bukkit.command";
     private static final String PREFIX = ROOT + ".";
 
-    private CommandPermissions() {}
+    private CommandPermissions() {
+
+    }
 
     private static Permission registerWhitelist(Permission parent) {
         Permission whitelist = DefaultPermissions.registerPermission(PREFIX + "whitelist", "Allows the user to modify the server whitelist", PermissionDefault.OP, parent);
@@ -26,57 +29,42 @@ public final class CommandPermissions {
 
     private static Permission registerBan(Permission parent) {
         Permission ban = DefaultPermissions.registerPermission(PREFIX + "ban", "Allows the user to ban people", PermissionDefault.OP, parent);
-
         DefaultPermissions.registerPermission(PREFIX + "ban.player", "Allows the user to ban players", ban);
         DefaultPermissions.registerPermission(PREFIX + "ban.ip", "Allows the user to ban IP addresses", ban);
-
         ban.recalculatePermissibles();
-
         return ban;
     }
 
     private static Permission registerUnban(Permission parent) {
         Permission unban = DefaultPermissions.registerPermission(PREFIX + "unban", "Allows the user to unban people", PermissionDefault.OP, parent);
-
         DefaultPermissions.registerPermission(PREFIX + "unban.player", "Allows the user to unban players", unban);
         DefaultPermissions.registerPermission(PREFIX + "unban.ip", "Allows the user to unban IP addresses", unban);
-
         unban.recalculatePermissibles();
-
         return unban;
     }
 
     private static Permission registerOp(Permission parent) {
         Permission op = DefaultPermissions.registerPermission(PREFIX + "op", "Allows the user to change operators", PermissionDefault.OP, parent);
-
         DefaultPermissions.registerPermission(PREFIX + "op.give", "Allows the user to give a player operator status", op);
         DefaultPermissions.registerPermission(PREFIX + "op.take", "Allows the user to take a players operator status", op);
-
         op.recalculatePermissibles();
-
         return op;
     }
 
     private static Permission registerSave(Permission parent) {
         Permission save = DefaultPermissions.registerPermission(PREFIX + "save", "Allows the user to save the worlds", PermissionDefault.OP, parent);
-
         DefaultPermissions.registerPermission(PREFIX + "save.enable", "Allows the user to enable automatic saving", save);
         DefaultPermissions.registerPermission(PREFIX + "save.disable", "Allows the user to disable automatic saving", save);
         DefaultPermissions.registerPermission(PREFIX + "save.perform", "Allows the user to perform a manual save", save);
-
         save.recalculatePermissibles();
-
         return save;
     }
 
     private static Permission registerTime(Permission parent) {
         Permission time = DefaultPermissions.registerPermission(PREFIX + "time", "Allows the user to alter the time", PermissionDefault.OP, parent);
-
         DefaultPermissions.registerPermission(PREFIX + "time.add", "Allows the user to fast-forward time", time);
         DefaultPermissions.registerPermission(PREFIX + "time.set", "Allows the user to change the time", time);
-
         time.recalculatePermissibles();
-
         return time;
     }
 
@@ -111,7 +99,6 @@ public final class CommandPermissions {
         DefaultPermissions.registerPermission(PREFIX + "effect", "Allows the user to add/remove effects on players", PermissionDefault.OP, commands);
 
         commands.recalculatePermissibles();
-
         return commands;
     }
 }
diff --git a/src/main/java/org/bukkit/util/permissions/DefaultPermissions.java b/src/main/java/org/bukkit/util/permissions/DefaultPermissions.java
index 8c0df8e..3579d42 100644
--- a/src/main/java/org/bukkit/util/permissions/DefaultPermissions.java
+++ b/src/main/java/org/bukkit/util/permissions/DefaultPermissions.java
@@ -1,15 +1,19 @@
 package org.bukkit.util.permissions;
 
-import java.util.Map;
 import org.bukkit.Bukkit;
 import org.bukkit.permissions.Permission;
 import org.bukkit.permissions.PermissionDefault;
 
+import java.util.Map;
+
 public final class DefaultPermissions {
+
     private static final String ROOT = "craftbukkit";
     private static final String LEGACY_PREFIX = "craft";
 
-    private DefaultPermissions() {}
+    private DefaultPermissions() {
+
+    }
 
     public static Permission registerPermission(Permission perm) {
         return registerPermission(perm, true);
@@ -39,8 +43,7 @@ public final class DefaultPermissions {
     }
 
     public static Permission registerPermission(String name, String desc) {
-        Permission perm = registerPermission(new Permission(name, desc));
-        return perm;
+        return registerPermission(new Permission(name, desc));
     }
 
     public static Permission registerPermission(String name, String desc, Permission parent) {
@@ -50,8 +53,7 @@ public final class DefaultPermissions {
     }
 
     public static Permission registerPermission(String name, String desc, PermissionDefault def) {
-        Permission perm = registerPermission(new Permission(name, desc, def));
-        return perm;
+        return registerPermission(new Permission(name, desc, def));
     }
 
     public static Permission registerPermission(String name, String desc, PermissionDefault def, Permission parent) {
@@ -61,8 +63,7 @@ public final class DefaultPermissions {
     }
 
     public static Permission registerPermission(String name, String desc, PermissionDefault def, Map<String, Boolean> children) {
-        Permission perm = registerPermission(new Permission(name, desc, def, children));
-        return perm;
+        return registerPermission(new Permission(name, desc, def, children));
     }
 
     public static Permission registerPermission(String name, String desc, PermissionDefault def, Map<String, Boolean> children, Permission parent) {
@@ -76,7 +77,6 @@ public final class DefaultPermissions {
 
         CommandPermissions.registerPermissions(parent);
         BroadcastPermissions.registerPermissions(parent);
-
         parent.recalculatePermissibles();
     }
 }
diff --git a/src/main/java/org/spigotmc/CustomTimingsHandler.java b/src/main/java/org/spigotmc/CustomTimingsHandler.java
index 8d98297..6e592d8 100644
--- a/src/main/java/org/spigotmc/CustomTimingsHandler.java
+++ b/src/main/java/org/spigotmc/CustomTimingsHandler.java
@@ -1,28 +1,20 @@
 package org.spigotmc;
 
+import org.bukkit.Bukkit;
+import org.bukkit.World;
 import org.bukkit.command.defaults.TimingsCommand;
-import org.bukkit.event.HandlerList;
-import org.bukkit.plugin.Plugin;
-import org.bukkit.plugin.RegisteredListener;
-import org.bukkit.plugin.TimedRegisteredListener;
+
 import java.io.PrintStream;
-import java.util.Collection;
-import java.util.HashSet;
-import java.util.List;
 import java.util.Queue;
 import java.util.concurrent.ConcurrentLinkedQueue;
 
-import org.bukkit.Bukkit;
-import org.bukkit.World;
-
 /**
  * Provides custom timing sections for /timings merged.
  */
-public class CustomTimingsHandler
-{
+public class CustomTimingsHandler {
 
     private static Queue<CustomTimingsHandler> HANDLERS = new ConcurrentLinkedQueue<CustomTimingsHandler>();
-    /*========================================================================*/
+
     private final String name;
     private final CustomTimingsHandler parent;
     private long count = 0;
@@ -32,16 +24,14 @@ public class CustomTimingsHandler
     private long curTickTotal = 0;
     private long violations = 0;
 
-    public CustomTimingsHandler(String name)
-    {
-        this( name, null );
+    public CustomTimingsHandler(String name) {
+        this(name, null);
     }
 
-    public CustomTimingsHandler(String name, CustomTimingsHandler parent)
-    {
+    public CustomTimingsHandler(String name, CustomTimingsHandler parent) {
         this.name = name;
         this.parent = parent;
-        HANDLERS.add( this );
+        HANDLERS.add(this);
     }
 
     /**
@@ -49,45 +39,42 @@ public class CustomTimingsHandler
      *
      * @param printStream
      */
-    public static void printTimings(PrintStream printStream)
-    {
-        printStream.println( "Minecraft" );
-        for ( CustomTimingsHandler timings : HANDLERS )
-        {
+    public static void printTimings(PrintStream printStream) {
+        printStream.println("Minecraft");
+        for (CustomTimingsHandler timings : HANDLERS) {
             long time = timings.totalTime;
             long count = timings.count;
-            if ( count == 0 )
-            {
+            if (count == 0) {
                 continue;
             }
-            long avg = time / count;
 
-            printStream.println( "    " + timings.name + " Time: " + time + " Count: " + count + " Avg: " + avg + " Violations: " + timings.violations );
+            long avg = time / count;
+            printStream.println("    " + timings.name + " Time: " + time + " Count: " + count + " Avg: " + avg + " Violations: " + timings.violations);
         }
-        printStream.println( "# Version " + Bukkit.getVersion() );
+
+        printStream.println("# Version " + Bukkit.getVersion());
         int entities = 0;
         int livingEntities = 0;
-        for ( World world : Bukkit.getWorlds() )
-        {
+
+        for (World world : Bukkit.getWorlds()) {
             entities += world.getEntities().size();
             livingEntities += world.getLivingEntities().size();
         }
-        printStream.println( "# Entities " + entities );
-        printStream.println( "# LivingEntities " + livingEntities );
+
+        printStream.println("# Entities " + entities);
+        printStream.println("# LivingEntities " + livingEntities);
     }
 
     /**
      * Resets all timings.
      */
-    public static void reload()
-    {
-        if ( Bukkit.getPluginManager().useTimings() )
-        {
-            for ( CustomTimingsHandler timings : HANDLERS )
-            {
+    public static void reload() {
+        if (Bukkit.getPluginManager().useTimings()) {
+            for (CustomTimingsHandler timings : HANDLERS) {
                 timings.reset();
             }
         }
+
         TimingsCommand.timingStart = System.nanoTime();
     }
 
@@ -95,16 +82,13 @@ public class CustomTimingsHandler
      * Ticked every tick by CraftBukkit to count the number of times a timer
      * caused TPS loss.
      */
-    public static void tick()
-    {
-        if ( Bukkit.getPluginManager().useTimings() )
-        {
-            for ( CustomTimingsHandler timings : HANDLERS )
-            {
-                if ( timings.curTickTotal > 50000000 )
-                {
-                    timings.violations += Math.ceil( timings.curTickTotal / 50000000 );
+    public static void tick() {
+        if (Bukkit.getPluginManager().useTimings()) {
+            for (CustomTimingsHandler timings : HANDLERS) {
+                if (timings.curTickTotal > 50000000) {
+                    timings.violations += Math.ceil(timings.curTickTotal / 50000000);
                 }
+
                 timings.curTickTotal = 0;
                 timings.timingDepth = 0; // incase reset messes this up
             }
@@ -114,14 +98,11 @@ public class CustomTimingsHandler
     /**
      * Starts timing to track a section of code.
      */
-    public void startTiming()
-    {
-        // If second condtion fails we are already timing
-        if ( Bukkit.getPluginManager().useTimings() && ++timingDepth == 1 )
-        {
+    public void startTiming() {
+        // If second condition fails we are already timing
+        if (Bukkit.getPluginManager().useTimings() && ++timingDepth == 1) {
             start = System.nanoTime();
-            if ( parent != null && ++parent.timingDepth == 1 )
-            {
+            if (parent != null && ++parent.timingDepth == 1) {
                 parent.start = start;
             }
         }
@@ -130,21 +111,19 @@ public class CustomTimingsHandler
     /**
      * Stops timing a section of code.
      */
-    public void stopTiming()
-    {
-        if ( Bukkit.getPluginManager().useTimings() )
-        {
-            if ( --timingDepth != 0 || start == 0 )
-            {
+    public void stopTiming() {
+        if (Bukkit.getPluginManager().useTimings()) {
+            if (--timingDepth != 0 || start == 0) {
                 return;
             }
+
             long diff = System.nanoTime() - start;
             totalTime += diff;
             curTickTotal += diff;
             count++;
             start = 0;
-            if ( parent != null )
-            {
+
+            if (parent != null) {
                 parent.stopTiming();
             }
         }
@@ -153,8 +132,7 @@ public class CustomTimingsHandler
     /**
      * Reset this timer, setting all values to zero.
      */
-    public void reset()
-    {
+    public void reset() {
         count = 0;
         violations = 0;
         curTickTotal = 0;
diff --git a/src/main/java/org/spigotmc/event/entity/EntityDismountEvent.java b/src/main/java/org/spigotmc/event/entity/EntityDismountEvent.java
index 24d4942..eb43abd 100644
--- a/src/main/java/org/spigotmc/event/entity/EntityDismountEvent.java
+++ b/src/main/java/org/spigotmc/event/entity/EntityDismountEvent.java
@@ -6,34 +6,28 @@ import org.bukkit.event.entity.EntityEvent;
 
 /**
  * Called when an entity stops riding another entity.
- *
  */
-public class EntityDismountEvent extends EntityEvent
-{
+public class EntityDismountEvent extends EntityEvent {
 
     private static final HandlerList handlers = new HandlerList();
-    private boolean cancelled;
+
     private final Entity dismounted;
 
-    public EntityDismountEvent(Entity what, Entity dismounted)
-    {
-        super( what );
+    public EntityDismountEvent(Entity what, Entity dismounted) {
+        super(what);
         this.dismounted = dismounted;
     }
 
-    public Entity getDismounted()
-    {
-        return dismounted;
+    public static HandlerList getHandlerList() {
+        return handlers;
     }
 
-    @Override
-    public HandlerList getHandlers()
-    {
-        return handlers;
+    public Entity getDismounted() {
+        return dismounted;
     }
 
-    public static HandlerList getHandlerList()
-    {
+    @Override
+    public HandlerList getHandlers() {
         return handlers;
     }
 }
diff --git a/src/main/java/org/spigotmc/event/entity/EntityMountEvent.java b/src/main/java/org/spigotmc/event/entity/EntityMountEvent.java
index 16aa2a7..d889bf0 100644
--- a/src/main/java/org/spigotmc/event/entity/EntityMountEvent.java
+++ b/src/main/java/org/spigotmc/event/entity/EntityMountEvent.java
@@ -7,46 +7,38 @@ import org.bukkit.event.entity.EntityEvent;
 
 /**
  * Called when an entity attempts to ride another entity.
- *
  */
-public class EntityMountEvent extends EntityEvent implements Cancellable
-{
+public class EntityMountEvent extends EntityEvent implements Cancellable {
 
     private static final HandlerList handlers = new HandlerList();
-    private boolean cancelled;
     private final Entity mount;
+    private boolean cancelled;
 
-    public EntityMountEvent(Entity what, Entity mount)
-    {
-        super( what );
+    public EntityMountEvent(Entity what, Entity mount) {
+        super(what);
         this.mount = mount;
     }
 
-    public Entity getMount()
-    {
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
+
+    public Entity getMount() {
         return mount;
     }
 
     @Override
-    public boolean isCancelled()
-    {
+    public boolean isCancelled() {
         return cancelled;
     }
 
     @Override
-    public void setCancelled(boolean cancel)
-    {
-        this.cancelled = cancel;
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
     }
 
     @Override
-    public HandlerList getHandlers()
-    {
-        return handlers;
-    }
-
-    public static HandlerList getHandlerList()
-    {
+    public HandlerList getHandlers() {
         return handlers;
     }
 }
diff --git a/src/main/java/org/spigotmc/event/player/PlayerSpawnLocationEvent.java b/src/main/java/org/spigotmc/event/player/PlayerSpawnLocationEvent.java
index dd3f58c..a1bfb38 100644
--- a/src/main/java/org/spigotmc/event/player/PlayerSpawnLocationEvent.java
+++ b/src/main/java/org/spigotmc/event/player/PlayerSpawnLocationEvent.java
@@ -1,7 +1,6 @@
 package org.spigotmc.event.player;
 
 import org.bukkit.Location;
-import org.bukkit.entity.Entity;
 import org.bukkit.entity.Player;
 import org.bukkit.event.HandlerList;
 import org.bukkit.event.player.PlayerEvent;
@@ -10,7 +9,9 @@ import org.bukkit.event.player.PlayerEvent;
  * Called when player is about to spawn in a world after joining the server.
  */
 public class PlayerSpawnLocationEvent extends PlayerEvent {
+
     private static final HandlerList handlers = new HandlerList();
+
     private Location spawnLocation;
 
     public PlayerSpawnLocationEvent(final Player who, Location spawnLocation) {
@@ -18,6 +19,9 @@ public class PlayerSpawnLocationEvent extends PlayerEvent {
         this.spawnLocation = spawnLocation;
     }
 
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
 
     /**
      * Gets player's spawn location.
@@ -43,8 +47,4 @@ public class PlayerSpawnLocationEvent extends PlayerEvent {
     public HandlerList getHandlers() {
         return handlers;
     }
-
-    public static HandlerList getHandlerList() {
-        return handlers;
-    }
 }
-- 
1.9.5.msysgit.1

