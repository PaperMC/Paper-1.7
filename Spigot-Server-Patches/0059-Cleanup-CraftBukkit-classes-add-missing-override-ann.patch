From 765e71f5910fc69f7aa3a74380fe54aa924680ba Mon Sep 17 00:00:00 2001
From: Christian Jones <elmoooo@gmail.com>
Date: Thu, 30 Apr 2015 02:06:33 +0100
Subject: [PATCH] Cleanup CraftBukkit classes, add missing override annotations


diff --git a/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java b/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java
index 341eaa3..f3121d7 100644
--- a/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java
+++ b/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java
@@ -16,14 +16,6 @@
  */
 package org.apache.logging.log4j.core.appender;
 
-import java.io.IOException;
-import java.io.OutputStream;
-import java.io.PrintStream;
-import java.io.Serializable;
-import java.io.UnsupportedEncodingException;
-import java.lang.reflect.Constructor;
-import java.nio.charset.Charset;
-
 import org.apache.logging.log4j.core.Filter;
 import org.apache.logging.log4j.core.Layout;
 import org.apache.logging.log4j.core.config.plugins.Plugin;
@@ -35,6 +27,15 @@ import org.apache.logging.log4j.core.helpers.Loader;
 import org.apache.logging.log4j.core.layout.PatternLayout;
 import org.apache.logging.log4j.util.PropertiesUtil;
 
+import javax.annotation.Nonnull;
+import java.io.IOException;
+import java.io.OutputStream;
+import java.io.PrintStream;
+import java.io.Serializable;
+import java.io.UnsupportedEncodingException;
+import java.lang.reflect.Constructor;
+import java.nio.charset.Charset;
+
 /**
  * ConsoleAppender appends log events to <code>System.out</code> or
  * <code>System.err</code> using a layout specified by the user. The
@@ -55,8 +56,10 @@ public final class ConsoleAppender extends AbstractOutputStreamAppender {
      * Enumeration of console destinations.
      */
     public enum Target {
+
         /** Standard output. */
         SYSTEM_OUT,
+
         /** Standard error output. */
         SYSTEM_ERR
     }
@@ -90,9 +93,11 @@ public final class ConsoleAppender extends AbstractOutputStreamAppender {
             LOGGER.error("No name provided for ConsoleAppender");
             return null;
         }
+
         if (layout == null) {
             layout = PatternLayout.createLayout(null, null, null, null, null);
         }
+
         final boolean isFollow = Boolean.parseBoolean(follow);
         final boolean ignoreExceptions = Booleans.parseBoolean(ignore, true);
         final Target target = t == null ? Target.SYSTEM_OUT : Target.valueOf(t);
@@ -107,7 +112,7 @@ public final class ConsoleAppender extends AbstractOutputStreamAppender {
 
     private static OutputStream getOutputStream(final boolean follow, final Target target) {
         final String enc = Charset.defaultCharset().name();
-        PrintStream printStream = null;
+        PrintStream printStream;
         try {
             printStream = target == Target.SYSTEM_OUT ?
                     follow ? new PrintStream(new SystemOutStream(), true, enc) : System.out :
@@ -115,11 +120,13 @@ public final class ConsoleAppender extends AbstractOutputStreamAppender {
         } catch (final UnsupportedEncodingException ex) { // should never happen
             throw new IllegalStateException("Unsupported default encoding " + enc, ex);
         }
+
         final PropertiesUtil propsUtil = PropertiesUtil.getProperties();
         if (!propsUtil.getStringProperty("os.name").startsWith("Windows") ||
                 propsUtil.getBooleanProperty("log4j.skipJansi")) {
             return printStream;
         }
+
         try {
             final ClassLoader loader = Loader.getClassLoader();
             // We type the parameter as a wildcard to avoid a hard reference to Jansi.
@@ -133,6 +140,7 @@ public final class ConsoleAppender extends AbstractOutputStreamAppender {
         } catch (final Throwable ex) { // CraftBukkit - Exception -> Throwable
             LOGGER.warn("Unable to instantiate {}", JANSI_CLASS);
         }
+
         return printStream;
     }
 
@@ -140,6 +148,7 @@ public final class ConsoleAppender extends AbstractOutputStreamAppender {
      * An implementation of OutputStream that redirects to the current System.err.
      */
     private static class SystemErrStream extends OutputStream {
+
         public SystemErrStream() {
         }
 
@@ -154,12 +163,12 @@ public final class ConsoleAppender extends AbstractOutputStreamAppender {
         }
 
         @Override
-        public void write(final byte[] b) throws IOException {
+        public void write(@Nonnull final byte[] b) throws IOException {
             System.err.write(b);
         }
 
         @Override
-        public void write(final byte[] b, final int off, final int len)
+        public void write(@Nonnull final byte[] b, final int off, final int len)
                 throws IOException {
             System.err.write(b, off, len);
         }
@@ -174,7 +183,9 @@ public final class ConsoleAppender extends AbstractOutputStreamAppender {
      * An implementation of OutputStream that redirects to the current System.out.
      */
     private static class SystemOutStream extends OutputStream {
+
         public SystemOutStream() {
+
         }
 
         @Override
@@ -188,12 +199,12 @@ public final class ConsoleAppender extends AbstractOutputStreamAppender {
         }
 
         @Override
-        public void write(final byte[] b) throws IOException {
+        public void write(@Nonnull  final byte[] b) throws IOException {
             System.out.write(b);
         }
 
         @Override
-        public void write(final byte[] b, final int off, final int len)
+        public void write(@Nonnull  final byte[] b, final int off, final int len)
                 throws IOException {
             System.out.write(b, off, len);
         }
@@ -208,6 +219,7 @@ public final class ConsoleAppender extends AbstractOutputStreamAppender {
      * Data to pass to factory method.
      */
     private static class FactoryData {
+
         private final OutputStream os;
         private final String type;
         private final Layout<? extends Serializable> layout;
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftArt.java b/src/main/java/org/bukkit/craftbukkit/CraftArt.java
index f617e9e..0f42346 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftArt.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftArt.java
@@ -8,32 +8,58 @@ public class CraftArt {
 
     public static Art NotchToBukkit(EnumArt art) {
         switch (art) {
-            case KEBAB: return Art.KEBAB;
-            case AZTEC: return Art.AZTEC;
-            case ALBAN: return Art.ALBAN;
-            case AZTEC2: return Art.AZTEC2;
-            case BOMB: return Art.BOMB;
-            case PLANT: return Art.PLANT;
-            case WASTELAND: return Art.WASTELAND;
-            case POOL: return Art.POOL;
-            case COURBET: return Art.COURBET;
-            case SEA: return Art.SEA;
-            case SUNSET: return Art.SUNSET;
-            case CREEBET: return Art.CREEBET;
-            case WANDERER: return Art.WANDERER;
-            case GRAHAM: return Art.GRAHAM;
-            case MATCH: return Art.MATCH;
-            case BUST: return Art.BUST;
-            case STAGE: return Art.STAGE;
-            case VOID: return Art.VOID;
-            case SKULL_AND_ROSES: return Art.SKULL_AND_ROSES;
-            case FIGHTERS: return Art.FIGHTERS;
-            case POINTER: return Art.POINTER;
-            case PIGSCENE: return Art.PIGSCENE;
-            case BURNINGSKULL: return Art.BURNINGSKULL;
-            case SKELETON: return Art.SKELETON;
-            case DONKEYKONG: return Art.DONKEYKONG;
-            case WITHER: return Art.WITHER;
+            case KEBAB:
+                return Art.KEBAB;
+            case AZTEC:
+                return Art.AZTEC;
+            case ALBAN:
+                return Art.ALBAN;
+            case AZTEC2:
+                return Art.AZTEC2;
+            case BOMB:
+                return Art.BOMB;
+            case PLANT:
+                return Art.PLANT;
+            case WASTELAND:
+                return Art.WASTELAND;
+            case POOL:
+                return Art.POOL;
+            case COURBET:
+                return Art.COURBET;
+            case SEA:
+                return Art.SEA;
+            case SUNSET:
+                return Art.SUNSET;
+            case CREEBET:
+                return Art.CREEBET;
+            case WANDERER:
+                return Art.WANDERER;
+            case GRAHAM:
+                return Art.GRAHAM;
+            case MATCH:
+                return Art.MATCH;
+            case BUST:
+                return Art.BUST;
+            case STAGE:
+                return Art.STAGE;
+            case VOID:
+                return Art.VOID;
+            case SKULL_AND_ROSES:
+                return Art.SKULL_AND_ROSES;
+            case FIGHTERS:
+                return Art.FIGHTERS;
+            case POINTER:
+                return Art.POINTER;
+            case PIGSCENE:
+                return Art.PIGSCENE;
+            case BURNINGSKULL:
+                return Art.BURNINGSKULL;
+            case SKELETON:
+                return Art.SKELETON;
+            case DONKEYKONG:
+                return Art.DONKEYKONG;
+            case WITHER:
+                return Art.WITHER;
             default:
                 throw new AssertionError(art);
         }
@@ -41,32 +67,58 @@ public class CraftArt {
 
     public static EnumArt BukkitToNotch(Art art) {
         switch (art) {
-            case KEBAB: return EnumArt.KEBAB;
-            case AZTEC: return EnumArt.AZTEC;
-            case ALBAN: return EnumArt.ALBAN;
-            case AZTEC2: return EnumArt.AZTEC2;
-            case BOMB: return EnumArt.BOMB;
-            case PLANT: return EnumArt.PLANT;
-            case WASTELAND: return EnumArt.WASTELAND;
-            case POOL: return EnumArt.POOL;
-            case COURBET: return EnumArt.COURBET;
-            case SEA: return EnumArt.SEA;
-            case SUNSET: return EnumArt.SUNSET;
-            case CREEBET: return EnumArt.CREEBET;
-            case WANDERER: return EnumArt.WANDERER;
-            case GRAHAM: return EnumArt.GRAHAM;
-            case MATCH: return EnumArt.MATCH;
-            case BUST: return EnumArt.BUST;
-            case STAGE: return EnumArt.STAGE;
-            case VOID: return EnumArt.VOID;
-            case SKULL_AND_ROSES: return EnumArt.SKULL_AND_ROSES;
-            case FIGHTERS: return EnumArt.FIGHTERS;
-            case POINTER: return EnumArt.POINTER;
-            case PIGSCENE: return EnumArt.PIGSCENE;
-            case BURNINGSKULL: return EnumArt.BURNINGSKULL;
-            case SKELETON: return EnumArt.SKELETON;
-            case DONKEYKONG: return EnumArt.DONKEYKONG;
-            case WITHER: return EnumArt.WITHER;
+            case KEBAB:
+                return EnumArt.KEBAB;
+            case AZTEC:
+                return EnumArt.AZTEC;
+            case ALBAN:
+                return EnumArt.ALBAN;
+            case AZTEC2:
+                return EnumArt.AZTEC2;
+            case BOMB:
+                return EnumArt.BOMB;
+            case PLANT:
+                return EnumArt.PLANT;
+            case WASTELAND:
+                return EnumArt.WASTELAND;
+            case POOL:
+                return EnumArt.POOL;
+            case COURBET:
+                return EnumArt.COURBET;
+            case SEA:
+                return EnumArt.SEA;
+            case SUNSET:
+                return EnumArt.SUNSET;
+            case CREEBET:
+                return EnumArt.CREEBET;
+            case WANDERER:
+                return EnumArt.WANDERER;
+            case GRAHAM:
+                return EnumArt.GRAHAM;
+            case MATCH:
+                return EnumArt.MATCH;
+            case BUST:
+                return EnumArt.BUST;
+            case STAGE:
+                return EnumArt.STAGE;
+            case VOID:
+                return EnumArt.VOID;
+            case SKULL_AND_ROSES:
+                return EnumArt.SKULL_AND_ROSES;
+            case FIGHTERS:
+                return EnumArt.FIGHTERS;
+            case POINTER:
+                return EnumArt.POINTER;
+            case PIGSCENE:
+                return EnumArt.PIGSCENE;
+            case BURNINGSKULL:
+                return EnumArt.BURNINGSKULL;
+            case SKELETON:
+                return EnumArt.SKELETON;
+            case DONKEYKONG:
+                return EnumArt.DONKEYKONG;
+            case WITHER:
+                return EnumArt.WITHER;
             default:
                 throw new AssertionError(art);
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftChunk.java b/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
index 99d3d40..6546ff1 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
@@ -1,32 +1,37 @@
 package org.bukkit.craftbukkit;
 
-import java.lang.ref.WeakReference;
-import java.util.Arrays;
-
 import net.minecraft.server.BiomeBase;
 import net.minecraft.server.ChunkPosition;
 import net.minecraft.server.ChunkSection;
 import net.minecraft.server.EmptyChunk;
 import net.minecraft.server.WorldChunkManager;
 import net.minecraft.server.WorldServer;
-
 import org.bukkit.Chunk;
+import org.bukkit.ChunkSnapshot;
 import org.bukkit.World;
 import org.bukkit.block.Block;
 import org.bukkit.block.BlockState;
 import org.bukkit.craftbukkit.block.CraftBlock;
 import org.bukkit.entity.Entity;
-import org.bukkit.ChunkSnapshot;
+
+import java.lang.ref.WeakReference;
+import java.util.Arrays;
 
 public class CraftChunk implements Chunk {
-    private WeakReference<net.minecraft.server.Chunk> weakChunk;
-    private final WorldServer worldServer;
-    private final int x;
-    private final int z;
+
     private static final byte[] emptyData = new byte[2048];
     private static final short[] emptyBlockIDs = new short[4096];
     private static final byte[] emptySkyLight = new byte[2048];
 
+    static {
+        Arrays.fill(emptySkyLight, (byte) 0xFF);
+    }
+
+    private final WorldServer worldServer;
+    private final int x;
+    private final int z;
+    private WeakReference<net.minecraft.server.Chunk> weakChunk;
+
     public CraftChunk(net.minecraft.server.Chunk chunk) {
         if (!(chunk instanceof EmptyChunk)) {
             this.weakChunk = new WeakReference<net.minecraft.server.Chunk>(chunk);
@@ -37,6 +42,75 @@ public class CraftChunk implements Chunk {
         z = getHandle().locZ;
     }
 
+    public static ChunkSnapshot getEmptyChunkSnapshot(int x, int z, CraftWorld world, boolean includeBiome, boolean includeBiomeTempRain) {
+        BiomeBase[] biome = null;
+        double[] biomeTemp = null;
+        double[] biomeRain = null;
+
+        if (includeBiome || includeBiomeTempRain) {
+            WorldChunkManager wcm = world.getHandle().getWorldChunkManager();
+
+            if (includeBiome) {
+                biome = new BiomeBase[256];
+                for (int i = 0; i < 256; i++) {
+                    biome[i] = world.getHandle().getBiome((x << 4) + (i & 0xF), (z << 4) + (i >> 4));
+                }
+            }
+
+            if (includeBiomeTempRain) {
+                biomeTemp = new double[256];
+                biomeRain = new double[256];
+                float[] dat = getTemperatures(wcm, x << 4, z << 4);
+
+                for (int i = 0; i < 256; i++) {
+                    biomeTemp[i] = dat[i];
+                }
+
+                dat = wcm.getWetness(null, x << 4, z << 4, 16, 16);
+
+                for (int i = 0; i < 256; i++) {
+                    biomeRain[i] = dat[i];
+                }
+            }
+        }
+
+        /* Fill with empty data */
+        int hSection = world.getMaxHeight() >> 4;
+        short[][] blockIDs = new short[hSection][];
+        byte[][] skyLight = new byte[hSection][];
+        byte[][] emitLight = new byte[hSection][];
+        byte[][] blockData = new byte[hSection][];
+        boolean[] empty = new boolean[hSection];
+
+        for (int i = 0; i < hSection; i++) {
+            blockIDs[i] = emptyBlockIDs;
+            skyLight[i] = emptySkyLight;
+            emitLight[i] = emptyData;
+            blockData[i] = emptyData;
+            empty[i] = true;
+        }
+
+        return new CraftChunkSnapshot(x, z, world.getName(), world.getFullTime(), blockIDs, blockData, skyLight, emitLight, empty, new int[256], biome, biomeTemp, biomeRain);
+    }
+
+    private static float[] getTemperatures(WorldChunkManager chunkmanager, int chunkX, int chunkZ) {
+        BiomeBase[] biomes = chunkmanager.getBiomes(null, chunkX, chunkZ, 16, 16);
+        float[] temps = new float[biomes.length];
+
+        for (int i = 0; i < biomes.length; i++) {
+            float temp = biomes[i].temperature; // Vanilla of olde: ((int) biomes[i].temperature * 65536.0F) / 65536.0F
+
+            if (temp > 1F) {
+                temp = 1F;
+            }
+
+            temps[i] = temp;
+        }
+
+        return temps;
+    }
+
+    @Override
     public World getWorld() {
         return worldServer.getWorld();
     }
@@ -47,10 +121,8 @@ public class CraftChunk implements Chunk {
 
     public net.minecraft.server.Chunk getHandle() {
         net.minecraft.server.Chunk c = weakChunk.get();
-
         if (c == null) {
             c = worldServer.getChunkAt(x, z);
-
             if (!(c instanceof EmptyChunk)) {
                 weakChunk = new WeakReference<net.minecraft.server.Chunk>(c);
             }
@@ -63,10 +135,12 @@ public class CraftChunk implements Chunk {
         weakChunk.clear();
     }
 
+    @Override
     public int getX() {
         return x;
     }
 
+    @Override
     public int getZ() {
         return z;
     }
@@ -76,10 +150,12 @@ public class CraftChunk implements Chunk {
         return "CraftChunk{" + "x=" + getX() + "z=" + getZ() + '}';
     }
 
+    @Override
     public Block getBlock(int x, int y, int z) {
         return new CraftBlock(this, (getX() << 4) | (x & 0xF), y & 0xFF, (getZ() << 4) | (z & 0xF));
     }
 
+    @Override
     public Entity[] getEntities() {
         int count = 0, index = 0;
         net.minecraft.server.Chunk chunk = getHandle();
@@ -103,6 +179,7 @@ public class CraftChunk implements Chunk {
         return entities;
     }
 
+    @Override
     public BlockState[] getTileEntities() {
         int index = 0;
         net.minecraft.server.Chunk chunk = getHandle();
@@ -116,37 +193,46 @@ public class CraftChunk implements Chunk {
             ChunkPosition position = (ChunkPosition) obj;
             entities[index++] = worldServer.getWorld().getBlockAt(position.x + (chunk.locX << 4), position.y, position.z + (chunk.locZ << 4)).getState();
         }
+
         return entities;
     }
 
+    @Override
     public boolean isLoaded() {
         return getWorld().isChunkLoaded(this);
     }
 
+    @Override
     public boolean load() {
         return getWorld().loadChunk(getX(), getZ(), true);
     }
 
+    @Override
     public boolean load(boolean generate) {
         return getWorld().loadChunk(getX(), getZ(), generate);
     }
 
+    @Override
     public boolean unload() {
         return getWorld().unloadChunk(getX(), getZ());
     }
 
+    @Override
     public boolean unload(boolean save) {
         return getWorld().unloadChunk(getX(), getZ(), save);
     }
 
+    @Override
     public boolean unload(boolean save, boolean safe) {
         return getWorld().unloadChunk(getX(), getZ(), save, safe);
     }
 
+    @Override
     public ChunkSnapshot getChunkSnapshot() {
         return getChunkSnapshot(true, false, false);
     }
 
+    @Override
     public ChunkSnapshot getChunkSnapshot(boolean includeMaxBlockY, boolean includeBiome, boolean includeBiomeTempRain) {
         net.minecraft.server.Chunk chunk = getHandle();
 
@@ -183,8 +269,8 @@ public class CraftChunk implements Chunk {
                             continue;
                         }
 
-                        blockids[j<<1] |= (b & 0x0F) << 8;
-                        blockids[(j<<1)+1] |= (b & 0xF0) << 4;
+                        blockids[j << 1] |= (b & 0x0F) << 8;
+                        blockids[(j << 1) + 1] |= (b & 0xF0) << 4;
                     }
                 }
 
@@ -245,76 +331,4 @@ public class CraftChunk implements Chunk {
         World world = getWorld();
         return new CraftChunkSnapshot(getX(), getZ(), world.getName(), world.getFullTime(), sectionBlockIDs, sectionBlockData, sectionSkyLights, sectionEmitLights, sectionEmpty, hmap, biome, biomeTemp, biomeRain);
     }
-
-    public static ChunkSnapshot getEmptyChunkSnapshot(int x, int z, CraftWorld world, boolean includeBiome, boolean includeBiomeTempRain) {
-        BiomeBase[] biome = null;
-        double[] biomeTemp = null;
-        double[] biomeRain = null;
-
-        if (includeBiome || includeBiomeTempRain) {
-            WorldChunkManager wcm = world.getHandle().getWorldChunkManager();
-
-            if (includeBiome) {
-                biome = new BiomeBase[256];
-                for (int i = 0; i < 256; i++) {
-                    biome[i] = world.getHandle().getBiome((x << 4) + (i & 0xF), (z << 4) + (i >> 4));
-                }
-            }
-
-            if (includeBiomeTempRain) {
-                biomeTemp = new double[256];
-                biomeRain = new double[256];
-                float[] dat = getTemperatures(wcm, x << 4, z << 4);
-
-                for (int i = 0; i < 256; i++) {
-                    biomeTemp[i] = dat[i];
-                }
-
-                dat = wcm.getWetness(null, x << 4, z << 4, 16, 16);
-
-                for (int i = 0; i < 256; i++) {
-                    biomeRain[i] = dat[i];
-                }
-            }
-        }
-
-        /* Fill with empty data */
-        int hSection = world.getMaxHeight() >> 4;
-        short[][] blockIDs = new short[hSection][];
-        byte[][] skyLight = new byte[hSection][];
-        byte[][] emitLight = new byte[hSection][];
-        byte[][] blockData = new byte[hSection][];
-        boolean[] empty = new boolean[hSection];
-
-        for (int i = 0; i < hSection; i++) {
-            blockIDs[i] = emptyBlockIDs;
-            skyLight[i] = emptySkyLight;
-            emitLight[i] = emptyData;
-            blockData[i] = emptyData;
-            empty[i] = true;
-        }
-
-        return new CraftChunkSnapshot(x, z, world.getName(), world.getFullTime(), blockIDs, blockData, skyLight, emitLight, empty, new int[256], biome, biomeTemp, biomeRain);
-    }
-
-    private static float[] getTemperatures(WorldChunkManager chunkmanager, int chunkX, int chunkZ) {
-        BiomeBase[] biomes = chunkmanager.getBiomes(null, chunkX, chunkZ, 16, 16);
-        float[] temps = new float[biomes.length];
-
-        for (int i = 0; i < biomes.length; i++) {
-            float temp = biomes[i].temperature; // Vanilla of olde: ((int) biomes[i].temperature * 65536.0F) / 65536.0F
-
-            if (temp > 1F) {
-                temp = 1F;
-            }
-
-            temps[i] = temp;
-        }
-
-        return temps;
-    }
-
-    static {
-        Arrays.fill(emptySkyLight, (byte) 0xFF);
-    }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftChunkSnapshot.java b/src/main/java/org/bukkit/craftbukkit/CraftChunkSnapshot.java
index edf701b..8d4071f 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftChunkSnapshot.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftChunkSnapshot.java
@@ -1,16 +1,16 @@
 package org.bukkit.craftbukkit;
 
+import net.minecraft.server.BiomeBase;
 import org.bukkit.ChunkSnapshot;
 import org.bukkit.block.Biome;
 import org.bukkit.craftbukkit.block.CraftBlock;
 
-import net.minecraft.server.BiomeBase;
-
 /**
  * Represents a static, thread-safe snapshot of chunk of blocks
  * Purpose is to allow clean, efficient copy of a chunk data to be made, and then handed off for processing in another thread (e.g. map rendering)
  */
 public class CraftChunkSnapshot implements ChunkSnapshot {
+
     private final int x, z;
     private final String worldname;
     private final short[][] blockids; /* Block IDs, by section */
@@ -40,57 +40,70 @@ public class CraftChunkSnapshot implements ChunkSnapshot {
         this.biomeRain = biomeRain;
     }
 
+    @Override
     public int getX() {
         return x;
     }
 
+    @Override
     public int getZ() {
         return z;
     }
 
+    @Override
     public String getWorldName() {
         return worldname;
     }
 
+    @Override
     public final int getBlockTypeId(int x, int y, int z) {
         return blockids[y >> 4][((y & 0xF) << 8) | (z << 4) | x];
     }
 
+    @Override
     public final int getBlockData(int x, int y, int z) {
         int off = ((y & 0xF) << 7) | (z << 3) | (x >> 1);
         return (blockdata[y >> 4][off] >> ((x & 1) << 2)) & 0xF;
     }
 
+    @Override
     public final int getBlockSkyLight(int x, int y, int z) {
         int off = ((y & 0xF) << 7) | (z << 3) | (x >> 1);
         return (skylight[y >> 4][off] >> ((x & 1) << 2)) & 0xF;
     }
 
+    @Override
     public final int getBlockEmittedLight(int x, int y, int z) {
         int off = ((y & 0xF) << 7) | (z << 3) | (x >> 1);
         return (emitlight[y >> 4][off] >> ((x & 1) << 2)) & 0xF;
     }
 
+    @Override
     public final int getHighestBlockYAt(int x, int z) {
         return hmap[z << 4 | x];
     }
 
+    @Override
     public final Biome getBiome(int x, int z) {
         return CraftBlock.biomeBaseToBiome(biome[z << 4 | x]);
     }
 
+    @Override
     public final double getRawBiomeTemperature(int x, int z) {
         return biomeTemp[z << 4 | x];
     }
 
+    @Override
     public final double getRawBiomeRainfall(int x, int z) {
         return biomeRain[z << 4 | x];
     }
 
+    @Override
     public final long getCaptureFullTime() {
         return captureFulltime;
     }
 
+    @Override
     public final boolean isSectionEmpty(int sy) {
         return empty[sy];
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftCrashReport.java b/src/main/java/org/bukkit/craftbukkit/CraftCrashReport.java
index e08afce..c8b6cd8 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftCrashReport.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftCrashReport.java
@@ -1,17 +1,16 @@
 package org.bukkit.craftbukkit;
 
+import net.minecraft.server.MinecraftServer;
+import org.bukkit.Bukkit;
+import org.bukkit.plugin.Plugin;
+import org.bukkit.plugin.PluginDescriptionFile;
+
 import java.io.PrintWriter;
 import java.io.StringWriter;
 import java.util.Arrays;
 import java.util.Map;
 import java.util.concurrent.Callable;
 
-import org.bukkit.Bukkit;
-import org.bukkit.plugin.Plugin;
-import org.bukkit.plugin.PluginDescriptionFile;
-
-import net.minecraft.server.MinecraftServer;
-
 public class CraftCrashReport implements Callable<Object> {
 
     public Object call() throws Exception {
@@ -37,5 +36,4 @@ public class CraftCrashReport implements Callable<Object> {
         }
         return value.toString();
     }
-
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftEffect.java b/src/main/java/org/bukkit/craftbukkit/CraftEffect.java
index 7eca388..ea93335 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftEffect.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftEffect.java
@@ -7,59 +7,61 @@ import org.bukkit.block.BlockFace;
 import org.bukkit.potion.Potion;
 
 public class CraftEffect {
+
     public static <T> int getDataValue(Effect effect, T data) {
         int datavalue;
-        switch(effect) {
-        case POTION_BREAK:
-            datavalue = ((Potion) data).toDamageValue() & 0x3F;
-            break;
-        case RECORD_PLAY:
-            Validate.isTrue(((Material) data).isRecord(), "Invalid record type!");
-            datavalue = ((Material) data).getId();
-            break;
-        case SMOKE:
-            switch((BlockFace) data) { // TODO: Verify (Where did these values come from...?)
-            case SOUTH_EAST:
-                datavalue = 0;
-                break;
-            case SOUTH:
-                datavalue = 1;
-                break;
-            case SOUTH_WEST:
-                datavalue = 2;
-                break;
-            case EAST:
-                datavalue = 3;
+        switch (effect) {
+            case POTION_BREAK:
+                datavalue = ((Potion) data).toDamageValue() & 0x3F;
                 break;
-            case UP:
-            case SELF:
-                datavalue = 4;
+            case RECORD_PLAY:
+                Validate.isTrue(((Material) data).isRecord(), "Invalid record type!");
+                datavalue = ((Material) data).getId();
                 break;
-            case WEST:
-                datavalue = 5;
+            case SMOKE:
+                switch ((BlockFace) data) { // TODO: Verify (Where did these values come from...?)
+                    case SOUTH_EAST:
+                        datavalue = 0;
+                        break;
+                    case SOUTH:
+                        datavalue = 1;
+                        break;
+                    case SOUTH_WEST:
+                        datavalue = 2;
+                        break;
+                    case EAST:
+                        datavalue = 3;
+                        break;
+                    case UP:
+                    case SELF:
+                        datavalue = 4;
+                        break;
+                    case WEST:
+                        datavalue = 5;
+                        break;
+                    case NORTH_EAST:
+                        datavalue = 6;
+                        break;
+                    case NORTH:
+                        datavalue = 7;
+                        break;
+                    case NORTH_WEST:
+                        datavalue = 8;
+                        break;
+                    default:
+                        throw new IllegalArgumentException("Bad smoke direction!");
+                }
                 break;
-            case NORTH_EAST:
-                datavalue = 6;
-                break;
-            case NORTH:
-                datavalue = 7;
-                break;
-            case NORTH_WEST:
-                datavalue = 8;
+            case STEP_SOUND:
+                Validate.isTrue(((Material) data).isBlock(), "Material is not a block!");
+                datavalue = ((Material) data).getId();
                 break;
+            case ITEM_BREAK:
+                datavalue = ((Material) data).getId();
             default:
-                throw new IllegalArgumentException("Bad smoke direction!");
-            }
-            break;
-        case STEP_SOUND:
-            Validate.isTrue(((Material) data).isBlock(), "Material is not a block!");
-            datavalue = ((Material) data).getId();
-            break;
-        case ITEM_BREAK:
-            datavalue = ((Material) data).getId();
-        default:
-            datavalue = 0;
+                datavalue = 0;
         }
+
         return datavalue;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftIpBanEntry.java b/src/main/java/org/bukkit/craftbukkit/CraftIpBanEntry.java
index 42085f8..387d0cf 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftIpBanEntry.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftIpBanEntry.java
@@ -8,6 +8,7 @@ import java.io.IOException;
 import java.util.Date;
 
 public final class CraftIpBanEntry implements org.bukkit.BanEntry {
+
     private final IpBanList list;
     private final String target;
     private Date created;
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftIpBanList.java b/src/main/java/org/bukkit/craftbukkit/CraftIpBanList.java
index feb679c..37845e4 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftIpBanList.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftIpBanList.java
@@ -1,19 +1,19 @@
 package org.bukkit.craftbukkit;
 
-import java.io.IOException;
-import java.net.InetSocketAddress;
-import java.util.Date;
-import java.util.Set;
-
+import com.google.common.collect.ImmutableSet;
 import net.minecraft.server.IpBanEntry;
 import net.minecraft.server.IpBanList;
 import net.minecraft.server.MinecraftServer;
 import org.apache.commons.lang.StringUtils;
 import org.apache.commons.lang.Validate;
 
-import com.google.common.collect.ImmutableSet;
+import java.io.IOException;
+import java.net.InetSocketAddress;
+import java.util.Date;
+import java.util.Set;
 
 public class CraftIpBanList implements org.bukkit.BanList {
+
     private final IpBanList list;
 
     public CraftIpBanList(IpBanList list) {
@@ -64,14 +64,12 @@ public class CraftIpBanList implements org.bukkit.BanList {
     @Override
     public boolean isBanned(String target) {
         Validate.notNull(target, "Target cannot be null");
-
         return list.isBanned(InetSocketAddress.createUnresolved(target, 0));
     }
 
     @Override
     public void pardon(String target) {
         Validate.notNull(target, "Target cannot be null");
-
         list.remove(target);
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java b/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java
index f1fa713..63fafa1 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java
@@ -1,15 +1,8 @@
 package org.bukkit.craftbukkit;
 
-import java.io.File;
-import java.util.LinkedHashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.UUID;
-
 import net.minecraft.server.EntityPlayer;
 import net.minecraft.server.NBTTagCompound;
 import net.minecraft.server.WorldNBTStorage;
-
 import net.minecraft.util.com.mojang.authlib.GameProfile;
 import org.bukkit.BanList;
 import org.bukkit.Bukkit;
@@ -22,8 +15,15 @@ import org.bukkit.entity.Player;
 import org.bukkit.metadata.MetadataValue;
 import org.bukkit.plugin.Plugin;
 
+import java.io.File;
+import java.util.LinkedHashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.UUID;
+
 @SerializableAs("Player")
 public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializable {
+
     private final GameProfile profile;
     private final CraftServer server;
     private final WorldNBTStorage storage;
@@ -32,17 +32,27 @@ public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializa
         this.server = server;
         this.profile = profile;
         this.storage = (WorldNBTStorage) (server.console.worlds.get(0).getDataManager());
+    }
 
+    public static OfflinePlayer deserialize(Map<String, Object> args) {
+        // Backwards comparability
+        if (args.get("name") != null) {
+            return Bukkit.getServer().getOfflinePlayer((String) args.get("name"));
+        }
+
+        return Bukkit.getServer().getOfflinePlayer(UUID.fromString((String) args.get("UUID")));
     }
 
     public GameProfile getProfile() {
         return profile;
     }
 
+    @Override
     public boolean isOnline() {
         return getPlayer() != null;
     }
 
+    @Override
     public String getName() {
         Player player = getPlayer();
         if (player != null) {
@@ -55,7 +65,6 @@ public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializa
         }
 
         NBTTagCompound data = getBukkitData();
-
         if (data != null) {
             if (data.hasKey("lastKnownName")) {
                 return data.getString("lastKnownName");
@@ -65,6 +74,7 @@ public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializa
         return null;
     }
 
+    @Override
     public UUID getUniqueId() {
         return profile.getId();
     }
@@ -73,10 +83,12 @@ public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializa
         return server;
     }
 
+    @Override
     public boolean isOp() {
         return server.getHandle().isOp(profile);
     }
 
+    @Override
     public void setOp(boolean value) {
         if (value == isOp()) {
             return;
@@ -89,14 +101,12 @@ public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializa
         }
     }
 
+    @Override
     public boolean isBanned() {
-        if (getName() == null) {
-            return false;
-        }
-
-        return server.getBanList(BanList.Type.NAME).isBanned(getName());
+        return getName() != null && server.getBanList(BanList.Type.NAME).isBanned(getName());
     }
 
+    @Override
     public void setBanned(boolean value) {
         if (getName() == null) {
             return;
@@ -109,10 +119,12 @@ public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializa
         }
     }
 
+    @Override
     public boolean isWhitelisted() {
         return server.getHandle().getWhitelist().isWhitelisted(profile);
     }
 
+    @Override
     public void setWhitelisted(boolean value) {
         if (value) {
             server.getHandle().addWhitelist(profile);
@@ -121,28 +133,19 @@ public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializa
         }
     }
 
+    @Override
     public Map<String, Object> serialize() {
         Map<String, Object> result = new LinkedHashMap<String, Object>();
-
         result.put("UUID", profile.getId().toString());
-
         return result;
     }
 
-    public static OfflinePlayer deserialize(Map<String, Object> args) {
-        // Backwards comparability
-        if (args.get("name") != null) {
-            return Bukkit.getServer().getOfflinePlayer((String) args.get("name"));
-        }
-
-        return Bukkit.getServer().getOfflinePlayer(UUID.fromString((String) args.get("UUID")));
-    }
-
     @Override
     public String toString() {
         return getClass().getSimpleName() + "[UUID=" + profile.getId() + "]";
     }
 
+    @Override
     public Player getPlayer() {
         // PaperSpigot - Improved player lookup, replace entire method
         final EntityPlayer playerEntity = server.getHandle().uuidMap.get(getUniqueId());
@@ -157,11 +160,8 @@ public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializa
         }
 
         OfflinePlayer other = (OfflinePlayer) obj;
-        if ((this.getUniqueId() == null) || (other.getUniqueId() == null)) {
-            return false;
-        }
+        return !((this.getUniqueId() == null) || (other.getUniqueId() == null)) && this.getUniqueId().equals(other.getUniqueId());
 
-        return this.getUniqueId().equals(other.getUniqueId());
     }
 
     @Override
@@ -177,11 +177,11 @@ public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializa
 
     private NBTTagCompound getBukkitData() {
         NBTTagCompound result = getData();
-
         if (result != null) {
             if (!result.hasKey("bukkit")) {
                 result.set("bukkit", new NBTTagCompound());
             }
+
             result = result.getCompound("bukkit");
         }
 
@@ -192,6 +192,7 @@ public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializa
         return new File(storage.getPlayerDir(), getUniqueId() + ".dat");
     }
 
+    @Override
     public long getFirstPlayed() {
         Player player = getPlayer();
         if (player != null) return player.getFirstPlayed();
@@ -210,6 +211,7 @@ public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializa
         }
     }
 
+    @Override
     public long getLastPlayed() {
         Player player = getPlayer();
         if (player != null) return player.getLastPlayed();
@@ -228,21 +230,24 @@ public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializa
         }
     }
 
+    @Override
     public boolean hasPlayedBefore() {
         return getData() != null;
     }
 
+    @Override
     public Location getBedSpawnLocation() {
         NBTTagCompound data = getData();
         if (data == null) return null;
-
         if (data.hasKey("SpawnX") && data.hasKey("SpawnY") && data.hasKey("SpawnZ")) {
             String spawnWorld = data.getString("SpawnWorld");
             if (spawnWorld.equals("")) {
                 spawnWorld = server.getWorlds().get(0).getName();
             }
+
             return new Location(server.getWorld(spawnWorld), data.getInt("SpawnX"), data.getInt("SpawnY"), data.getInt("SpawnZ"));
         }
+
         return null;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftProfileBanEntry.java b/src/main/java/org/bukkit/craftbukkit/CraftProfileBanEntry.java
index 7ec0006..22a799c 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftProfileBanEntry.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftProfileBanEntry.java
@@ -9,8 +9,10 @@ import java.io.IOException;
 import java.util.Date;
 
 public final class CraftProfileBanEntry implements org.bukkit.BanEntry {
+
     private final GameProfileBanList list;
     private final GameProfile profile;
+
     private Date created;
     private String source;
     private Date expiration;
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftProfileBanList.java b/src/main/java/org/bukkit/craftbukkit/CraftProfileBanList.java
index fad6a96..f40ad9b 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftProfileBanList.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftProfileBanList.java
@@ -1,24 +1,23 @@
 package org.bukkit.craftbukkit;
 
-import java.io.IOException;
-import java.util.Date;
-import java.util.Set;
-
+import com.google.common.collect.ImmutableSet;
 import net.minecraft.server.GameProfileBanEntry;
 import net.minecraft.server.GameProfileBanList;
 import net.minecraft.server.JsonListEntry;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.util.com.mojang.authlib.GameProfile;
-
 import org.apache.commons.lang.StringUtils;
 import org.apache.commons.lang.Validate;
 
-import com.google.common.collect.ImmutableSet;
+import java.io.IOException;
+import java.util.Date;
+import java.util.Set;
 
 public class CraftProfileBanList implements org.bukkit.BanList {
+
     private final GameProfileBanList list;
 
-    public CraftProfileBanList(GameProfileBanList list){
+    public CraftProfileBanList(GameProfileBanList list) {
         this.list = list;
     }
 
@@ -79,11 +78,7 @@ public class CraftProfileBanList implements org.bukkit.BanList {
         Validate.notNull(target, "Target cannot be null");
 
         GameProfile profile = MinecraftServer.getServer().getUserCache().getProfile(target);
-        if (profile == null) {
-            return false;
-        }
-
-        return list.isBanned(profile);
+        return profile != null && list.isBanned(profile);
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 87eab98..2222eea 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -1,109 +1,21 @@
 package org.bukkit.craftbukkit;
 
-import java.awt.image.BufferedImage;
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileNotFoundException;
-import java.io.IOException;
-import java.io.InputStreamReader;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.LinkedHashMap;
-import java.util.LinkedHashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.UUID;
-import java.util.logging.Level;
-import java.util.logging.Logger;
-import java.util.regex.Pattern;
-
-import javax.imageio.ImageIO;
-
+import com.avaje.ebean.config.DataSourceConfig;
+import com.avaje.ebean.config.ServerConfig;
+import com.avaje.ebean.config.dbplatform.SQLitePlatform;
+import com.avaje.ebeaninternal.server.lib.sql.TransactionIsolation;
+import com.google.common.collect.ImmutableList;
+import com.google.common.collect.MapMaker;
+import jline.console.ConsoleReader;
 import net.md_5.bungee.api.chat.BaseComponent;
-import net.minecraft.server.ChunkCoordinates;
-import net.minecraft.server.CommandAchievement;
-import net.minecraft.server.CommandBan;
-import net.minecraft.server.CommandBanIp;
-import net.minecraft.server.CommandBanList;
-import net.minecraft.server.CommandClear;
-import net.minecraft.server.CommandDeop;
-import net.minecraft.server.CommandDifficulty;
-import net.minecraft.server.CommandEffect;
-import net.minecraft.server.CommandEnchant;
-import net.minecraft.server.CommandGamemode;
-import net.minecraft.server.CommandGamemodeDefault;
-import net.minecraft.server.CommandGamerule;
-import net.minecraft.server.CommandGive;
-import net.minecraft.server.CommandHelp;
-import net.minecraft.server.CommandIdleTimeout;
-import net.minecraft.server.CommandKick;
-import net.minecraft.server.CommandKill;
-import net.minecraft.server.CommandList;
-import net.minecraft.server.CommandMe;
-import net.minecraft.server.CommandNetstat;
-import net.minecraft.server.CommandOp;
-import net.minecraft.server.CommandPardon;
-import net.minecraft.server.CommandPardonIP;
-import net.minecraft.server.CommandPlaySound;
-import net.minecraft.server.CommandSay;
-import net.minecraft.server.CommandScoreboard;
-import net.minecraft.server.CommandSeed;
-import net.minecraft.server.CommandSetBlock;
-import net.minecraft.server.CommandSetWorldSpawn;
-import net.minecraft.server.CommandSpawnpoint;
-import net.minecraft.server.CommandSpreadPlayers;
-import net.minecraft.server.CommandSummon;
-import net.minecraft.server.CommandTell;
-import net.minecraft.server.CommandTellRaw;
-import net.minecraft.server.CommandTestFor;
-import net.minecraft.server.CommandTestForBlock;
-import net.minecraft.server.CommandTime;
-import net.minecraft.server.CommandToggleDownfall;
-import net.minecraft.server.CommandTp;
-import net.minecraft.server.CommandWeather;
-import net.minecraft.server.CommandWhitelist;
-import net.minecraft.server.CommandXp;
-import net.minecraft.server.Convertable;
-import net.minecraft.server.ConvertProgressUpdater;
-import net.minecraft.server.CraftingManager;
-import net.minecraft.server.DedicatedPlayerList;
-import net.minecraft.server.DedicatedServer;
-import net.minecraft.server.Enchantment;
-import net.minecraft.server.EntityPlayer;
-import net.minecraft.server.EntityTracker;
-import net.minecraft.server.EnumDifficulty;
-import net.minecraft.server.EnumGamemode;
-import net.minecraft.server.ExceptionWorldConflict;
-import net.minecraft.server.Items;
-import net.minecraft.server.JsonListEntry;
-import net.minecraft.server.PlayerList;
-import net.minecraft.server.RecipesFurnace;
-import net.minecraft.server.MinecraftServer;
-import net.minecraft.server.MobEffectList;
-import net.minecraft.server.PropertyManager;
-import net.minecraft.server.ServerCommand;
-import net.minecraft.server.RegionFile;
-import net.minecraft.server.RegionFileCache;
-import net.minecraft.server.ServerNBTManager;
-import net.minecraft.server.WorldLoaderServer;
-import net.minecraft.server.WorldManager;
-import net.minecraft.server.WorldMap;
-import net.minecraft.server.PersistentCollection;
-import net.minecraft.server.WorldNBTStorage;
-import net.minecraft.server.WorldServer;
-import net.minecraft.server.WorldSettings;
-import net.minecraft.server.WorldType;
+import net.minecraft.server.*;
 import net.minecraft.util.com.google.common.base.Charsets;
 import net.minecraft.util.com.mojang.authlib.GameProfile;
 import net.minecraft.util.io.netty.buffer.ByteBuf;
 import net.minecraft.util.io.netty.buffer.ByteBufOutputStream;
 import net.minecraft.util.io.netty.buffer.Unpooled;
 import net.minecraft.util.io.netty.handler.codec.base64.Base64;
-
+import org.apache.commons.lang.Validate;
 import org.bukkit.BanList;
 import org.bukkit.Bukkit;
 import org.bukkit.ChatColor;
@@ -121,7 +33,6 @@ import org.bukkit.command.CommandSender;
 import org.bukkit.command.ConsoleCommandSender;
 import org.bukkit.command.PluginCommand;
 import org.bukkit.command.SimpleCommandMap;
-import org.bukkit.command.defaults.VanillaCommand;
 import org.bukkit.configuration.ConfigurationSection;
 import org.bukkit.configuration.file.YamlConfiguration;
 import org.bukkit.configuration.serialization.ConfigurationSerialization;
@@ -159,9 +70,9 @@ import org.bukkit.event.world.WorldUnloadEvent;
 import org.bukkit.generator.ChunkGenerator;
 import org.bukkit.help.HelpMap;
 import org.bukkit.inventory.FurnaceRecipe;
-import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.Inventory;
 import org.bukkit.inventory.InventoryHolder;
+import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.Recipe;
 import org.bukkit.inventory.ShapedRecipe;
 import org.bukkit.inventory.ShapelessRecipe;
@@ -175,28 +86,48 @@ import org.bukkit.plugin.SimplePluginManager;
 import org.bukkit.plugin.SimpleServicesManager;
 import org.bukkit.plugin.java.JavaPluginLoader;
 import org.bukkit.plugin.messaging.Messenger;
+import org.bukkit.plugin.messaging.StandardMessenger;
 import org.bukkit.potion.Potion;
 import org.bukkit.potion.PotionEffectType;
-import org.bukkit.plugin.messaging.StandardMessenger;
 import org.bukkit.scheduler.BukkitWorker;
 import org.bukkit.util.StringUtil;
 import org.bukkit.util.permissions.DefaultPermissions;
 import org.yaml.snakeyaml.Yaml;
 import org.yaml.snakeyaml.constructor.SafeConstructor;
 import org.yaml.snakeyaml.error.MarkedYAMLException;
-import org.apache.commons.lang.Validate;
 
-import com.avaje.ebean.config.DataSourceConfig;
-import com.avaje.ebean.config.ServerConfig;
-import com.avaje.ebean.config.dbplatform.SQLitePlatform;
-import com.avaje.ebeaninternal.server.lib.sql.TransactionIsolation;
-import com.google.common.collect.ImmutableList;
-import com.google.common.collect.MapMaker;
-
-import jline.console.ConsoleReader;
+import javax.imageio.ImageIO;
+import java.awt.image.BufferedImage;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.LinkedHashMap;
+import java.util.LinkedHashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.UUID;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+import java.util.regex.Pattern;
 
 public final class CraftServer implements Server {
     private static final Player[] EMPTY_PLAYER_ARRAY = new Player[0];
+
+    static {
+        ConfigurationSerialization.registerClass(CraftOfflinePlayer.class);
+        CraftItemFactory.instance();
+    }
+
+    protected final MinecraftServer console;
+    protected final DedicatedPlayerList playerList;
     private final String serverName = "CraftBukkit";
     private final String serverVersion;
     private final String bukkitVersion = Versioning.getBukkitVersion();
@@ -207,43 +138,64 @@ public final class CraftServer implements Server {
     private final SimpleHelpMap helpMap = new SimpleHelpMap(this);
     private final StandardMessenger messenger = new StandardMessenger();
     private final PluginManager pluginManager = new SimplePluginManager(this, commandMap);
-    protected final MinecraftServer console;
-    protected final DedicatedPlayerList playerList;
     private final Map<String, World> worlds = new LinkedHashMap<String, World>();
-    private YamlConfiguration configuration;
-    private YamlConfiguration commandsConfiguration;
     private final Yaml yaml = new Yaml(new SafeConstructor());
     private final Map<UUID, OfflinePlayer> offlinePlayers = new MapMaker().softValues().makeMap();
     private final AutoUpdater updater;
     private final EntityMetadataStore entityMetadata = new EntityMetadataStore();
     private final PlayerMetadataStore playerMetadata = new PlayerMetadataStore();
     private final WorldMetadataStore worldMetadata = new WorldMetadataStore();
+    private final BooleanWrapper online = new BooleanWrapper();
+    private final Pattern validUserPattern = Pattern.compile("^[a-zA-Z0-9_]{2,16}$");
+    private final UUID invalidUserUUID = UUID.nameUUIDFromBytes("InvalidUsername".getBytes(Charsets.UTF_8));
+    private final List<CraftPlayer> playerView;
+    private final Spigot spigot = new Spigot() {
+
+        @Override
+        public YamlConfiguration getConfig() {
+            return org.spigotmc.SpigotConfig.config;
+        }
+
+        // PaperSpigot start - Add getTPS (Further improve tick loop)
+        @Override
+        public double[] getTPS() {
+            return new double[]{
+                    MinecraftServer.getServer().tps1.getAverage(),
+                    MinecraftServer.getServer().tps5.getAverage(),
+                    MinecraftServer.getServer().tps15.getAverage()
+            };
+        }
+        // PaperSpigot end
+
+        @Override
+        public void broadcast(BaseComponent component) {
+            for (Player player : getOnlinePlayers()) {
+                player.spigot().sendMessage(component);
+            }
+        }
+
+        @Override
+        public void broadcast(BaseComponent... components) {
+            for (Player player : getOnlinePlayers()) {
+                player.spigot().sendMessage(components);
+            }
+        }
+    };
+    public int chunkGCPeriod = -1;
+    public int chunkGCLoadThresh = 0;
+    public CraftScoreboardManager scoreboardManager;
+    public boolean playerCommandState;
+    private YamlConfiguration configuration;
+    private YamlConfiguration commandsConfiguration;
     private int monsterSpawn = -1;
     private int animalSpawn = -1;
     private int waterAnimalSpawn = -1;
     private int ambientSpawn = -1;
-    public int chunkGCPeriod = -1;
-    public int chunkGCLoadThresh = 0;
     private File container;
     private WarningState warningState = WarningState.DEFAULT;
-    private final BooleanWrapper online = new BooleanWrapper();
-    public CraftScoreboardManager scoreboardManager;
-    public boolean playerCommandState;
     private boolean printSaveWarning;
     private CraftIconCache icon;
     private boolean overrideAllCommandBlockCommands = false;
-    private final Pattern validUserPattern = Pattern.compile("^[a-zA-Z0-9_]{2,16}$");
-    private final UUID invalidUserUUID = UUID.nameUUIDFromBytes("InvalidUsername".getBytes(Charsets.UTF_8));
-    private final List<CraftPlayer> playerView;
-
-    private final class BooleanWrapper {
-        private boolean value = true;
-    }
-
-    static {
-        ConfigurationSerialization.registerClass(CraftOfflinePlayer.class);
-        CraftItemFactory.instance();
-    }
 
     public CraftServer(MinecraftServer console, PlayerList playerList) {
         this.console = console;
@@ -333,6 +285,21 @@ public final class CraftServer implements Server {
         // Spigot End
     }
 
+    static CraftIconCache loadServerIcon0(File file) throws Exception {
+        return loadServerIcon0(ImageIO.read(file));
+    }
+
+    static CraftIconCache loadServerIcon0(BufferedImage image) throws Exception {
+        ByteBuf bytebuf = Unpooled.buffer();
+
+        Validate.isTrue(image.getWidth() == 64, "Must be 64 pixels wide");
+        Validate.isTrue(image.getHeight() == 64, "Must be 64 pixels high");
+        ImageIO.write(image, "PNG", new ByteBufOutputStream(bytebuf));
+        ByteBuf bytebuf1 = Base64.encode(bytebuf);
+
+        return new CraftIconCache("data:image/png;base64," + bytebuf1.toString(Charsets.UTF_8));
+    }
+
     public boolean getCommandBlockOverride(String command) {
         return overrideAllCommandBlockCommands || commandsConfiguration.getStringList("command-block-overrides").contains(command);
     }
@@ -412,65 +379,64 @@ public final class CraftServer implements Server {
     public void disablePlugins() {
         pluginManager.disablePlugins();
     }
+    // Spigot end
 
     // Spigot start
     private void tryRegister(VanillaCommandWrapper commandWrapper, boolean first) {
-        if (org.spigotmc.SpigotConfig.replaceCommands.contains( commandWrapper.getName() ) ) {
+        if (org.spigotmc.SpigotConfig.replaceCommands.contains(commandWrapper.getName())) {
             if (first) {
-                commandMap.register( "minecraft", commandWrapper );
+                commandMap.register("minecraft", commandWrapper);
             }
         } else if (!first) {
-            commandMap.register( "minecraft", commandWrapper );
-        }
-    }
-
-    private void setVanillaCommands(boolean first)
-    {
-        tryRegister( new VanillaCommandWrapper( new CommandAchievement(), "/achievement give <stat_name> [player]" ), first );
-        tryRegister( new VanillaCommandWrapper( new CommandBan(), "/ban <playername> [reason]" ), first );
-        tryRegister( new VanillaCommandWrapper( new CommandBanIp(), "/ban-ip <ip-address|playername>" ), first );
-        tryRegister( new VanillaCommandWrapper( new CommandBanList(), "/banlist [ips]" ), first );
-        tryRegister( new VanillaCommandWrapper( new CommandClear(), "/clear <playername> [item] [metadata]" ), first );
-        tryRegister( new VanillaCommandWrapper( new CommandGamemodeDefault(), "/defaultgamemode <mode>" ), first );
-        tryRegister( new VanillaCommandWrapper( new CommandDeop(), "/deop <playername>" ), first );
-        tryRegister( new VanillaCommandWrapper( new CommandDifficulty(), "/difficulty <new difficulty>" ), first );
-        tryRegister( new VanillaCommandWrapper( new CommandEffect(), "/effect <player> <effect|clear> [seconds] [amplifier]" ), first );
-        tryRegister( new VanillaCommandWrapper( new CommandEnchant(), "/enchant <playername> <enchantment ID> [enchantment level]" ), first );
-        tryRegister( new VanillaCommandWrapper( new CommandGamemode(), "/gamemode <mode> [player]" ), first );
-        tryRegister( new VanillaCommandWrapper( new CommandGamerule(), "/gamerule <rulename> [true|false]" ), first );
-        tryRegister( new VanillaCommandWrapper( new CommandGive(), "/give <playername> <item> [amount] [metadata] [dataTag]" ), first );
-        tryRegister( new VanillaCommandWrapper( new CommandHelp(), "/help [page|commandname]" ), first );
-        tryRegister( new VanillaCommandWrapper( new CommandIdleTimeout(), "/setidletimeout <Minutes until kick>" ), first );
-        tryRegister( new VanillaCommandWrapper( new CommandKick(), "/kick <playername> [reason]" ), first );
-        tryRegister( new VanillaCommandWrapper( new CommandKill(), "/kill [playername]" ), first );
-        tryRegister( new VanillaCommandWrapper( new CommandList(), "/list" ), first );
-        tryRegister( new VanillaCommandWrapper( new CommandMe(), "/me <actiontext>" ), first );
-        tryRegister( new VanillaCommandWrapper( new CommandOp(), "/op <playername>" ), first );
-        tryRegister( new VanillaCommandWrapper( new CommandPardon(), "/pardon <playername>" ), first );
-        tryRegister( new VanillaCommandWrapper( new CommandPardonIP(), "/pardon-ip <ip-address>" ), first );
-        tryRegister( new VanillaCommandWrapper( new CommandPlaySound(), "/playsound <sound> <playername> [x] [y] [z] [volume] [pitch] [minimumVolume]" ), first );
-        tryRegister( new VanillaCommandWrapper( new CommandSay(), "/say <message>" ), first );
-        tryRegister( new VanillaCommandWrapper( new CommandScoreboard(), "/scoreboard" ), first );
-        tryRegister( new VanillaCommandWrapper( new CommandSeed(), "/seed" ), first );
-        tryRegister( new VanillaCommandWrapper( new CommandSetBlock(), "/setblock <x> <y> <z> <tilename> [datavalue] [oldblockHandling] [dataTag]" ), first );
-        tryRegister( new VanillaCommandWrapper( new CommandSetWorldSpawn(), "/setworldspawn [x] [y] [z]" ), first );
-        tryRegister( new VanillaCommandWrapper( new CommandSpawnpoint(), "/spawnpoint <playername> [x] [y] [z]" ), first );
-        tryRegister( new VanillaCommandWrapper( new CommandSpreadPlayers(), "/spreadplayers <x> <z> [spreadDistance] [maxRange] [respectTeams] <playernames>" ), first );
-        tryRegister( new VanillaCommandWrapper( new CommandSummon(), "/summon <EntityName> [x] [y] [z] [dataTag]" ), first );
-        tryRegister( new VanillaCommandWrapper( new CommandTp(), "/tp [player] <target>\n/tp [player] <x> <y> <z>" ), first );
-        tryRegister( new VanillaCommandWrapper( new CommandTell(), "/tell <playername> <message>" ), first );
-        tryRegister( new VanillaCommandWrapper( new CommandTellRaw(), "/tellraw <playername> <raw message>" ), first );
-        tryRegister( new VanillaCommandWrapper( new CommandTestFor(), "/testfor <playername | selector> [dataTag]" ), first );
-        tryRegister( new VanillaCommandWrapper( new CommandTestForBlock(), "/testforblock <x> <y> <z> <tilename> [datavalue] [dataTag]" ), first );
-        tryRegister( new VanillaCommandWrapper( new CommandTime(), "/time set <value>\n/time add <value>" ), first );
-        tryRegister( new VanillaCommandWrapper( new CommandToggleDownfall(), "/toggledownfall" ), first );
-        tryRegister( new VanillaCommandWrapper( new CommandWeather(), "/weather <clear/rain/thunder> [duration in seconds]" ), first );
-        tryRegister( new VanillaCommandWrapper( new CommandWhitelist(), "/whitelist (add|remove) <player>\n/whitelist (on|off|list|reload)" ), first );
-        tryRegister( new VanillaCommandWrapper( new CommandXp(), "/xp <amount> [player]\n/xp <amount>L [player]" ), first );
+            commandMap.register("minecraft", commandWrapper);
+        }
+    }
+
+    private void setVanillaCommands(boolean first) {
+        tryRegister(new VanillaCommandWrapper(new CommandAchievement(), "/achievement give <stat_name> [player]"), first);
+        tryRegister(new VanillaCommandWrapper(new CommandBan(), "/ban <playername> [reason]"), first);
+        tryRegister(new VanillaCommandWrapper(new CommandBanIp(), "/ban-ip <ip-address|playername>"), first);
+        tryRegister(new VanillaCommandWrapper(new CommandBanList(), "/banlist [ips]"), first);
+        tryRegister(new VanillaCommandWrapper(new CommandClear(), "/clear <playername> [item] [metadata]"), first);
+        tryRegister(new VanillaCommandWrapper(new CommandGamemodeDefault(), "/defaultgamemode <mode>"), first);
+        tryRegister(new VanillaCommandWrapper(new CommandDeop(), "/deop <playername>"), first);
+        tryRegister(new VanillaCommandWrapper(new CommandDifficulty(), "/difficulty <new difficulty>"), first);
+        tryRegister(new VanillaCommandWrapper(new CommandEffect(), "/effect <player> <effect|clear> [seconds] [amplifier]"), first);
+        tryRegister(new VanillaCommandWrapper(new CommandEnchant(), "/enchant <playername> <enchantment ID> [enchantment level]"), first);
+        tryRegister(new VanillaCommandWrapper(new CommandGamemode(), "/gamemode <mode> [player]"), first);
+        tryRegister(new VanillaCommandWrapper(new CommandGamerule(), "/gamerule <rulename> [true|false]"), first);
+        tryRegister(new VanillaCommandWrapper(new CommandGive(), "/give <playername> <item> [amount] [metadata] [dataTag]"), first);
+        tryRegister(new VanillaCommandWrapper(new CommandHelp(), "/help [page|commandname]"), first);
+        tryRegister(new VanillaCommandWrapper(new CommandIdleTimeout(), "/setidletimeout <Minutes until kick>"), first);
+        tryRegister(new VanillaCommandWrapper(new CommandKick(), "/kick <playername> [reason]"), first);
+        tryRegister(new VanillaCommandWrapper(new CommandKill(), "/kill [playername]"), first);
+        tryRegister(new VanillaCommandWrapper(new CommandList(), "/list"), first);
+        tryRegister(new VanillaCommandWrapper(new CommandMe(), "/me <actiontext>"), first);
+        tryRegister(new VanillaCommandWrapper(new CommandOp(), "/op <playername>"), first);
+        tryRegister(new VanillaCommandWrapper(new CommandPardon(), "/pardon <playername>"), first);
+        tryRegister(new VanillaCommandWrapper(new CommandPardonIP(), "/pardon-ip <ip-address>"), first);
+        tryRegister(new VanillaCommandWrapper(new CommandPlaySound(), "/playsound <sound> <playername> [x] [y] [z] [volume] [pitch] [minimumVolume]"), first);
+        tryRegister(new VanillaCommandWrapper(new CommandSay(), "/say <message>"), first);
+        tryRegister(new VanillaCommandWrapper(new CommandScoreboard(), "/scoreboard"), first);
+        tryRegister(new VanillaCommandWrapper(new CommandSeed(), "/seed"), first);
+        tryRegister(new VanillaCommandWrapper(new CommandSetBlock(), "/setblock <x> <y> <z> <tilename> [datavalue] [oldblockHandling] [dataTag]"), first);
+        tryRegister(new VanillaCommandWrapper(new CommandSetWorldSpawn(), "/setworldspawn [x] [y] [z]"), first);
+        tryRegister(new VanillaCommandWrapper(new CommandSpawnpoint(), "/spawnpoint <playername> [x] [y] [z]"), first);
+        tryRegister(new VanillaCommandWrapper(new CommandSpreadPlayers(), "/spreadplayers <x> <z> [spreadDistance] [maxRange] [respectTeams] <playernames>"), first);
+        tryRegister(new VanillaCommandWrapper(new CommandSummon(), "/summon <EntityName> [x] [y] [z] [dataTag]"), first);
+        tryRegister(new VanillaCommandWrapper(new CommandTp(), "/tp [player] <target>\n/tp [player] <x> <y> <z>"), first);
+        tryRegister(new VanillaCommandWrapper(new CommandTell(), "/tell <playername> <message>"), first);
+        tryRegister(new VanillaCommandWrapper(new CommandTellRaw(), "/tellraw <playername> <raw message>"), first);
+        tryRegister(new VanillaCommandWrapper(new CommandTestFor(), "/testfor <playername | selector> [dataTag]"), first);
+        tryRegister(new VanillaCommandWrapper(new CommandTestForBlock(), "/testforblock <x> <y> <z> <tilename> [datavalue] [dataTag]"), first);
+        tryRegister(new VanillaCommandWrapper(new CommandTime(), "/time set <value>\n/time add <value>"), first);
+        tryRegister(new VanillaCommandWrapper(new CommandToggleDownfall(), "/toggledownfall"), first);
+        tryRegister(new VanillaCommandWrapper(new CommandWeather(), "/weather <clear/rain/thunder> [duration in seconds]"), first);
+        tryRegister(new VanillaCommandWrapper(new CommandWhitelist(), "/whitelist (add|remove) <player>\n/whitelist (on|off|list|reload)"), first);
+        tryRegister(new VanillaCommandWrapper(new CommandXp(), "/xp <amount> [player]\n/xp <amount>L [player]"), first);
         // This is what is in the lang file, I swear.
-        tryRegister( new VanillaCommandWrapper(new CommandNetstat(), "/list"), first );
+        tryRegister(new VanillaCommandWrapper(new CommandNetstat(), "/list"), first);
     }
-    // Spigot end
 
     private void loadPlugin(Plugin plugin) {
         try {
@@ -668,6 +634,8 @@ public final class CraftServer implements Server {
         return this.console.getPropertyManager().getString(variable, defaultValue);
     }
 
+    // End Temporary calls
+
     private int getConfigInt(String variable, int defaultValue) {
         return this.console.getPropertyManager().getInt(variable, defaultValue);
     }
@@ -676,8 +644,6 @@ public final class CraftServer implements Server {
         return this.console.getPropertyManager().getBoolean(variable, defaultValue);
     }
 
-    // End Temporary calls
-
     @Override
     public String getUpdateFolder() {
         return this.configuration.getString("settings.update-folder", "update");
@@ -740,7 +706,7 @@ public final class CraftServer implements Server {
     // NOTE: Should only be called from DedicatedServer.ah()
     public boolean dispatchServerCommand(CommandSender sender, ServerCommand serverCommand) {
         if (sender instanceof Conversable) {
-            Conversable conversable = (Conversable)sender;
+            Conversable conversable = (Conversable) sender;
 
             if (conversable.isConversing()) {
                 conversable.acceptConversationInput(serverCommand.command);
@@ -845,7 +811,8 @@ public final class CraftServer implements Server {
         while (pollCount < 50 && getScheduler().getActiveWorkers().size() > 0) {
             try {
                 Thread.sleep(50);
-            } catch (InterruptedException e) {}
+            } catch (InterruptedException e) {
+            }
             pollCount++;
         }
 
@@ -857,10 +824,10 @@ public final class CraftServer implements Server {
                 author = plugin.getDescription().getAuthors().get(0);
             }
             getLogger().log(Level.SEVERE, String.format(
-                "Nag author: '%s' of '%s' about the following: %s",
-                author,
-                plugin.getDescription().getName(),
-                "This plugin is not properly shutting down its async tasks when it is being reloaded.  This may cause conflicts with the newly loaded version of the plugin"
+                    "Nag author: '%s' of '%s' about the following: %s",
+                    author,
+                    plugin.getDescription().getName(),
+                    "This plugin is not properly shutting down its async tasks when it is being reloaded.  This may cause conflicts with the newly loaded version of the plugin"
             ));
         }
         loadPlugins();
@@ -880,7 +847,7 @@ public final class CraftServer implements Server {
         }
     }
 
-    @SuppressWarnings({ "unchecked", "finally" })
+    @SuppressWarnings({"unchecked", "finally"})
     private void loadCustomPermissions() {
         File file = new File(configuration.getString("settings.permissions-file"));
         FileInputStream stream;
@@ -908,7 +875,8 @@ public final class CraftServer implements Server {
         } finally {
             try {
                 stream.close();
-            } catch (IOException ex) {}
+            } catch (IOException ex) {
+            }
         }
 
         if (perms == null) {
@@ -987,7 +955,7 @@ public final class CraftServer implements Server {
                     break;
                 }
             }
-        } while(used);
+        } while (used);
         boolean hardcore = false;
 
         WorldServer internal = new WorldServer(console, new ServerNBTManager(getWorldContainer(), name, true), name, dimension, new WorldSettings(creator.seed(), EnumGamemode.getById(getDefaultGameMode().getValue()), generateStructures, hardcore, type), console.methodProfiler, creator.environment(), generator);
@@ -1091,7 +1059,7 @@ public final class CraftServer implements Server {
         synchronized (RegionFileCache.class) {
             // RegionFileCache.a should be RegionFileCache.cache
             Iterator<Map.Entry<File, RegionFile>> i = RegionFileCache.a.entrySet().iterator();
-            while(i.hasNext()) {
+            while (i.hasNext()) {
                 Map.Entry<File, RegionFile> entry = i.next();
                 File child = entry.getKey().getAbsoluteFile();
                 while (child != null) {
@@ -1394,16 +1362,15 @@ public final class CraftServer implements Server {
     @Deprecated
     public OfflinePlayer getOfflinePlayer(String name) {
         Validate.notNull(name, "Name cannot be null");
-        com.google.common.base.Preconditions.checkArgument( !org.apache.commons.lang.StringUtils.isBlank( name ), "Name cannot be blank" ); // Spigot
+        com.google.common.base.Preconditions.checkArgument(!org.apache.commons.lang.StringUtils.isBlank(name), "Name cannot be blank"); // Spigot
 
         OfflinePlayer result = getPlayerExact(name);
         if (result == null) {
             // Spigot Start
             GameProfile profile = null;
             // Only fetch an online UUID in online mode
-            if ( MinecraftServer.getServer().getOnlineMode() || org.spigotmc.SpigotConfig.bungee )
-            {
-                profile = MinecraftServer.getServer().getUserCache().getProfile( name );
+            if (MinecraftServer.getServer().getOnlineMode() || org.spigotmc.SpigotConfig.bungee) {
+                profile = MinecraftServer.getServer().getUserCache().getProfile(name);
             }
             // Spigot end
             if (profile == null) {
@@ -1479,12 +1446,12 @@ public final class CraftServer implements Server {
     public BanList getBanList(BanList.Type type) {
         Validate.notNull(type, "Type cannot be null");
 
-        switch(type){
-        case IP:
-            return new CraftIpBanList(playerList.getIPBans());
-        case NAME:
-        default:
-            return new CraftProfileBanList(playerList.getProfileBans());
+        switch (type) {
+            case IP:
+                return new CraftIpBanList(playerList.getIPBans());
+            case NAME:
+            default:
+                return new CraftProfileBanList(playerList.getProfileBans());
         }
     }
 
@@ -1722,8 +1689,7 @@ public final class CraftServer implements Server {
 
     public List<String> tabCompleteCommand(Player player, String message) {
         // Spigot Start
-		if ( (org.spigotmc.SpigotConfig.tabComplete < 0 || message.length() <= org.spigotmc.SpigotConfig.tabComplete) && !message.contains( " " ) )
-        {
+        if ((org.spigotmc.SpigotConfig.tabComplete < 0 || message.length() <= org.spigotmc.SpigotConfig.tabComplete) && !message.contains(" ")) {
             return ImmutableList.of();
         }
         // Spigot End
@@ -1794,25 +1760,15 @@ public final class CraftServer implements Server {
         return loadServerIcon0(file);
     }
 
-    static CraftIconCache loadServerIcon0(File file) throws Exception {
-        return loadServerIcon0(ImageIO.read(file));
-    }
-
     @Override
     public CraftIconCache loadServerIcon(BufferedImage image) throws Exception {
         Validate.notNull(image, "Image cannot be null");
         return loadServerIcon0(image);
     }
 
-    static CraftIconCache loadServerIcon0(BufferedImage image) throws Exception {
-        ByteBuf bytebuf = Unpooled.buffer();
-
-        Validate.isTrue(image.getWidth() == 64, "Must be 64 pixels wide");
-        Validate.isTrue(image.getHeight() == 64, "Must be 64 pixels high");
-        ImageIO.write(image, "PNG", new ByteBufOutputStream(bytebuf));
-        ByteBuf bytebuf1 = Base64.encode(bytebuf);
-
-        return new CraftIconCache("data:image/png;base64," + bytebuf1.toString(Charsets.UTF_8));
+    @Override
+    public int getIdleTimeout() {
+        return console.getIdleTimeout();
     }
 
     @Override
@@ -1820,58 +1776,17 @@ public final class CraftServer implements Server {
         console.setIdleTimeout(threshold);
     }
 
-    @Override
-    public int getIdleTimeout() {
-        return console.getIdleTimeout();
-    }
-
     @Deprecated
     @Override
     public UnsafeValues getUnsafe() {
         return CraftMagicNumbers.INSTANCE;
     }
 
-    private final Spigot spigot = new Spigot()
-    {
-
-        @Override
-        public YamlConfiguration getConfig()
-        {
-            return org.spigotmc.SpigotConfig.config;
-        }
-
-        // PaperSpigot start - Add getTPS (Further improve tick loop)
-        @Override
-        public double[] getTPS() {
-            return new double[] {
-                    MinecraftServer.getServer().tps1.getAverage(),
-                    MinecraftServer.getServer().tps5.getAverage(),
-                    MinecraftServer.getServer().tps15.getAverage()
-            };
-        }
-        // PaperSpigot end
-
-        @Override
-        public void broadcast( BaseComponent component )
-        {
-            for ( Player player : getOnlinePlayers() )
-            {
-                player.spigot().sendMessage( component );
-            }
-        }
-
-        @Override
-        public void broadcast( BaseComponent... components )
-        {
-            for ( Player player : getOnlinePlayers() )
-            {
-                player.spigot().sendMessage( components );
-            }
-        }
-    };
-
-    public Spigot spigot()
-    {
+    public Spigot spigot() {
         return spigot;
     }
+
+    private final class BooleanWrapper {
+        private boolean value = true;
+    }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftSound.java b/src/main/java/org/bukkit/craftbukkit/CraftSound.java
index 0cc8f9b..f6de3b5 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftSound.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftSound.java
@@ -1,11 +1,12 @@
 package org.bukkit.craftbukkit;
 
-import static org.bukkit.Sound.*;
-
 import org.apache.commons.lang.Validate;
 import org.bukkit.Sound;
 
+import static org.bukkit.Sound.*;
+
 public class CraftSound {
+
     private static final String[] sounds = new String[Sound.values().length];
 
     static {
@@ -218,6 +219,9 @@ public class CraftSound {
         set(PISTON_RETRACT, "tile.piston.in");
     }
 
+    private CraftSound() {
+    }
+
     private static void set(Sound sound, String key) {
         sounds[sound.ordinal()] = key;
     }
@@ -226,6 +230,4 @@ public class CraftSound {
         Validate.notNull(sound, "Sound cannot be null");
         return sounds[sound.ordinal()];
     }
-
-    private CraftSound() {}
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftStatistic.java b/src/main/java/org/bukkit/craftbukkit/CraftStatistic.java
index 24c8bf2..006b741 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftStatistic.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftStatistic.java
@@ -1,25 +1,24 @@
 package org.bukkit.craftbukkit;
 
+import com.google.common.base.CaseFormat;
+import com.google.common.collect.BiMap;
+import com.google.common.collect.ImmutableBiMap;
+import com.google.common.collect.ImmutableMap;
 import net.minecraft.server.EntityTypes;
 import net.minecraft.server.MonsterEggInfo;
 import net.minecraft.server.StatisticList;
-
 import org.bukkit.Achievement;
-import org.bukkit.Statistic;
 import org.bukkit.Material;
+import org.bukkit.Statistic;
 import org.bukkit.entity.EntityType;
 
-import com.google.common.base.CaseFormat;
-import com.google.common.collect.BiMap;
-import com.google.common.collect.ImmutableBiMap;
-import com.google.common.collect.ImmutableMap;
-
 public class CraftStatistic {
+
     private static final BiMap<String, org.bukkit.Statistic> statistics;
     private static final BiMap<String, org.bukkit.Achievement> achievements;
 
     static {
-        ImmutableMap<String, org.bukkit.Achievement> specialCases = ImmutableMap.<String, org.bukkit.Achievement> builder()
+        ImmutableMap<String, org.bukkit.Achievement> specialCases = ImmutableMap.<String, org.bukkit.Achievement>builder()
                 .put("achievement.buildWorkBench", Achievement.BUILD_WORKBENCH)
                 .put("achievement.diamonds", Achievement.GET_DIAMONDS)
                 .put("achievement.portal", Achievement.NETHER_PORTAL)
@@ -29,8 +28,10 @@ public class CraftStatistic {
                 .put("achievement.blazeRod", Achievement.GET_BLAZE_ROD)
                 .put("achievement.potion", Achievement.BREW_POTION)
                 .build();
-        ImmutableBiMap.Builder<String, org.bukkit.Statistic> statisticBuilder = ImmutableBiMap.<String, org.bukkit.Statistic>builder();
-        ImmutableBiMap.Builder<String, org.bukkit.Achievement> achievementBuilder = ImmutableBiMap.<String, org.bukkit.Achievement>builder();
+
+        ImmutableBiMap.Builder<String, org.bukkit.Statistic> statisticBuilder = ImmutableBiMap.builder();
+        ImmutableBiMap.Builder<String, org.bukkit.Achievement> achievementBuilder = ImmutableBiMap.builder();
+
         for (Statistic statistic : Statistic.values()) {
             if (statistic == Statistic.PLAY_ONE_TICK) {
                 statisticBuilder.put("stat.playOneMinute", statistic);
@@ -38,10 +39,12 @@ public class CraftStatistic {
                 statisticBuilder.put("stat." + CaseFormat.UPPER_UNDERSCORE.to(CaseFormat.LOWER_CAMEL, statistic.name()), statistic);
             }
         }
+
         for (Achievement achievement : Achievement.values()) {
             if (specialCases.values().contains(achievement)) {
                 continue;
             }
+
             achievementBuilder.put("achievement." + CaseFormat.UPPER_UNDERSCORE.to(CaseFormat.LOWER_CAMEL, achievement.name()), achievement);
         }
 
@@ -51,7 +54,8 @@ public class CraftStatistic {
         achievements = achievementBuilder.build();
     }
 
-    private CraftStatistic() {}
+    private CraftStatistic() {
+    }
 
     public static org.bukkit.Achievement getBukkitAchievement(net.minecraft.server.Achievement achievement) {
         return getBukkitAchievementByName(achievement.name);
@@ -69,21 +73,27 @@ public class CraftStatistic {
         if (name.startsWith("stat.killEntity")) {
             name = "stat.killEntity";
         }
+
         if (name.startsWith("stat.entityKilledBy")) {
             name = "stat.entityKilledBy";
         }
+
         if (name.startsWith("stat.breakItem")) {
             name = "stat.breakItem";
         }
+
         if (name.startsWith("stat.useItem")) {
             name = "stat.useItem";
         }
+
         if (name.startsWith("stat.mineBlock")) {
             name = "stat.mineBlock";
         }
+
         if (name.startsWith("stat.craftItem")) {
             name = "stat.craftItem";
         }
+
         return statistics.get(name);
     }
 
@@ -100,27 +110,31 @@ public class CraftStatistic {
             if (stat == Statistic.MINE_BLOCK) {
                 return StatisticList.MINE_BLOCK_COUNT[material.getId()];
             }
+
             if (stat == Statistic.CRAFT_ITEM) {
                 return StatisticList.CRAFT_BLOCK_COUNT[material.getId()];
             }
+
             if (stat == Statistic.USE_ITEM) {
                 return StatisticList.USE_ITEM_COUNT[material.getId()];
             }
+
             if (stat == Statistic.BREAK_ITEM) {
                 return StatisticList.BREAK_ITEM_COUNT[material.getId()];
             }
-        } catch (ArrayIndexOutOfBoundsException e) {
+        } catch (ArrayIndexOutOfBoundsException ex) {
             return null;
         }
+
         return null;
     }
 
     public static net.minecraft.server.Statistic getEntityStatistic(org.bukkit.Statistic stat, EntityType entity) {
         MonsterEggInfo monsteregginfo = (MonsterEggInfo) EntityTypes.eggInfo.get(Integer.valueOf(entity.getTypeId()));
-
         if (monsteregginfo != null) {
             return monsteregginfo.killEntityStatistic;
         }
+
         return null;
     }
 
@@ -131,12 +145,14 @@ public class CraftStatistic {
 
     public static Material getMaterialFromStatistic(net.minecraft.server.Statistic statistic) {
         String statisticString = statistic.name;
+
         int id;
         try {
             id = Integer.valueOf(statisticString.substring(statisticString.lastIndexOf(".") + 1));
-        } catch (NumberFormatException e) {
+        } catch (NumberFormatException ex) {
             return null;
         }
+
         return Material.getMaterial(id);
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftTravelAgent.java b/src/main/java/org/bukkit/craftbukkit/CraftTravelAgent.java
index f7ca6a3..34bc860 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftTravelAgent.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftTravelAgent.java
@@ -3,7 +3,6 @@ package org.bukkit.craftbukkit;
 import net.minecraft.server.ChunkCoordinates;
 import net.minecraft.server.PortalTravelAgent;
 import net.minecraft.server.WorldServer;
-
 import org.bukkit.Location;
 import org.bukkit.TravelAgent;
 
@@ -22,6 +21,7 @@ public class CraftTravelAgent extends PortalTravelAgent implements TravelAgent {
         }
     }
 
+    @Override
     public Location findOrCreate(Location target) {
         WorldServer worldServer = ((CraftWorld) target.getWorld()).getHandle();
         boolean before = worldServer.chunkProviderServer.forceChunkLoad;
@@ -40,39 +40,47 @@ public class CraftTravelAgent extends PortalTravelAgent implements TravelAgent {
         return found;
     }
 
+    @Override
     public Location findPortal(Location location) {
         PortalTravelAgent pta = ((CraftWorld) location.getWorld()).getHandle().getTravelAgent();
         ChunkCoordinates found = pta.findPortal(location.getX(), location.getY(), location.getZ(), this.getSearchRadius());
         return found != null ? new Location(location.getWorld(), found.x, found.y, found.z, location.getYaw(), location.getPitch()) : null;
     }
 
+    @Override
     public boolean createPortal(Location location) {
         PortalTravelAgent pta = ((CraftWorld) location.getWorld()).getHandle().getTravelAgent();
         return pta.createPortal(location.getX(), location.getY(), location.getZ(), this.getCreationRadius());
     }
 
+    @Override
     public TravelAgent setSearchRadius(int radius) {
         this.searchRadius = radius;
         return this;
     }
 
+    @Override
     public int getSearchRadius() {
         return this.searchRadius;
     }
 
+    @Override
     public TravelAgent setCreationRadius(int radius) {
         this.creationRadius = radius < 2 ? 0 : radius;
         return this;
     }
 
+    @Override
     public int getCreationRadius() {
         return this.creationRadius;
     }
 
+    @Override
     public boolean getCanCreatePortal() {
         return this.canCreatePortal;
     }
 
+    @Override
     public void setCanCreatePortal(boolean create) {
         this.canCreatePortal = create;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index 1babd79..8147228 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -1,16 +1,6 @@
 package org.bukkit.craftbukkit;
 
-import java.io.File;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Random;
-import java.util.Set;
-import java.util.UUID;
-
 import net.minecraft.server.*;
-
 import org.apache.commons.lang.Validate;
 import org.bukkit.BlockChangeDelegate;
 import org.bukkit.Bukkit;
@@ -28,10 +18,11 @@ import org.bukkit.block.BlockFace;
 import org.bukkit.block.BlockState;
 import org.bukkit.craftbukkit.block.CraftBlock;
 import org.bukkit.craftbukkit.block.CraftBlockState;
-import org.bukkit.craftbukkit.entity.*;
+import org.bukkit.craftbukkit.entity.CraftItem;
+import org.bukkit.craftbukkit.entity.CraftLightningStrike;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.craftbukkit.metadata.BlockMetadataStore;
-import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.craftbukkit.util.LongHash;
 import org.bukkit.entity.*;
 import org.bukkit.entity.Entity;
@@ -52,15 +43,87 @@ import org.bukkit.plugin.Plugin;
 import org.bukkit.plugin.messaging.StandardMessenger;
 import org.bukkit.util.Vector;
 
+import java.io.File;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Random;
+import java.util.Set;
+import java.util.UUID;
+
 public class CraftWorld implements World {
-    public static final int CUSTOM_DIMENSION_OFFSET = 10;
 
+    public static final int CUSTOM_DIMENSION_OFFSET = 10;
+    private static final Random rand = new Random();
     private final WorldServer world;
-    private Environment environment;
     private final CraftServer server = (CraftServer) Bukkit.getServer();
     private final ChunkGenerator generator;
     private final List<BlockPopulator> populators = new ArrayList<BlockPopulator>();
     private final BlockMetadataStore blockMetadata = new BlockMetadataStore(this);
+    // Spigot start
+    private final Spigot spigot = new Spigot() {
+        @Override
+        public void playEffect(Location location, Effect effect, int id, int data, float offsetX, float offsetY, float offsetZ, float speed, int particleCount, int radius) {
+            Validate.notNull(location, "Location cannot be null");
+            Validate.notNull(effect, "Effect cannot be null");
+            Validate.notNull(location.getWorld(), "World cannot be null");
+            Packet packet;
+            if (effect.getType() != Effect.Type.PARTICLE) {
+                int packetData = effect.getId();
+                packet = new PacketPlayOutWorldEvent(packetData, location.getBlockX(), location.getBlockY(), location.getBlockZ(), id, false);
+            } else {
+                StringBuilder particleFullName = new StringBuilder();
+                particleFullName.append(effect.getName());
+                if (effect.getData() != null && (effect.getData().equals(org.bukkit.Material.class) || effect.getData().equals(org.bukkit.material.MaterialData.class))) {
+                    particleFullName.append('_').append(id);
+                }
+
+                if (effect.getData() != null && effect.getData().equals(org.bukkit.material.MaterialData.class)) {
+                    particleFullName.append('_').append(data);
+                }
+
+                packet = new PacketPlayOutWorldParticles(particleFullName.toString(), (float) location.getX(), (float) location.getY(), (float) location.getZ(), offsetX, offsetY, offsetZ, speed, particleCount);
+            }
+
+            int distance;
+            radius *= radius;
+            for (Player player : getPlayers()) {
+                if (((CraftPlayer) player).getHandle().playerConnection == null) {
+                    continue;
+                }
+
+                if (!location.getWorld().equals(player.getWorld())) {
+                    continue;
+                }
+
+                distance = (int) player.getLocation().distanceSquared(location);
+                if (distance <= radius) {
+                    ((CraftPlayer) player).getHandle().playerConnection.sendPacket(packet);
+                }
+            }
+        }
+
+        @Override
+        public void playEffect(Location location, Effect effect) {
+            CraftWorld.this.playEffect(location, effect, 0);
+        }
+
+        @Override
+        public LightningStrike strikeLightning(Location loc, boolean isSilent) {
+            EntityLightning lightning = new EntityLightning(world, loc.getX(), loc.getY(), loc.getZ(), false, isSilent);
+            world.strikeLightning(lightning);
+            return new CraftLightningStrike(server, lightning);
+        }
+
+        @Override
+        public LightningStrike strikeLightningEffect(Location loc, boolean isSilent) {
+            EntityLightning lightning = new EntityLightning(world, loc.getX(), loc.getY(), loc.getZ(), true, isSilent);
+            world.strikeLightning(lightning);
+            return new CraftLightningStrike(server, lightning);
+        }
+    };
+    private Environment environment;
     private int monsterSpawn = -1;
     private int animalSpawn = -1;
     private int waterAnimalSpawn = -1;
@@ -68,8 +131,6 @@ public class CraftWorld implements World {
     private int chunkLoadCount = 0;
     private int chunkGCTickCount;
 
-    private static final Random rand = new Random();
-
     public CraftWorld(WorldServer world, ChunkGenerator gen, Environment env) {
         this.world = world;
         this.generator = gen;
@@ -81,14 +142,17 @@ public class CraftWorld implements World {
         }
     }
 
+    @Override
     public Block getBlockAt(int x, int y, int z) {
         return getChunkAt(x >> 4, z >> 4).getBlock(x & 0xF, y & 0xFF, z & 0xF);
     }
 
+    @Override
     public int getBlockTypeIdAt(int x, int y, int z) {
         return world.getTypeId(x, y, z);
     }
 
+    @Override
     public int getHighestBlockYAt(int x, int z) {
         if (!isChunkLoaded(x >> 4, z >> 4)) {
             loadChunk(x >> 4, z >> 4);
@@ -97,11 +161,13 @@ public class CraftWorld implements World {
         return world.getHighestBlockYAt(x, z);
     }
 
+    @Override
     public Location getSpawnLocation() {
         ChunkCoordinates spawn = world.getSpawn();
         return new Location(this, spawn.x, spawn.y, spawn.z);
     }
 
+    @Override
     public boolean setSpawnLocation(int x, int y, int z) {
         try {
             Location previousLocation = getSpawnLocation();
@@ -112,12 +178,13 @@ public class CraftWorld implements World {
             server.getPluginManager().callEvent(event);
 
             return true;
-        } catch (Exception e) {
+        } catch (Exception ex) {
             return false;
         }
     }
 
     // PaperSpigot start - Async chunk load API
+    @Override
     public void getChunkAtAsync(final int x, final int z, final ChunkLoadCallback callback) {
         final ChunkProviderServer cps = this.world.chunkProviderServer;
         cps.getChunkAt(x, z, new Runnable() {
@@ -127,30 +194,37 @@ public class CraftWorld implements World {
             }
         });
     }
+
+    @Override
     public void getChunkAtAsync(Block block, ChunkLoadCallback callback) {
         getChunkAtAsync(block.getX() >> 4, block.getZ() >> 4, callback);
     }
+    // PaperSpigot end
+
+    @Override
     public void getChunkAtAsync(Location location, ChunkLoadCallback callback) {
         getChunkAtAsync(location.getBlockX() >> 4, location.getBlockZ() >> 4, callback);
     }
-    // PaperSpigot end
 
+    @Override
     public Chunk getChunkAt(int x, int z) {
         return this.world.chunkProviderServer.getChunkAt(x, z).bukkitChunk;
     }
 
+    @Override
     public Chunk getChunkAt(Block block) {
         return getChunkAt(block.getX() >> 4, block.getZ() >> 4);
     }
 
+    @Override
     public boolean isChunkLoaded(int x, int z) {
         return world.chunkProviderServer.isChunkLoaded(x, z);
     }
 
+    @Override
     public Chunk[] getLoadedChunks() {
         Object[] chunks = world.chunkProviderServer.chunks.values().toArray();
         org.bukkit.Chunk[] craftChunks = new CraftChunk[chunks.length];
-
         for (int i = 0; i < chunks.length; i++) {
             net.minecraft.server.Chunk chunk = (net.minecraft.server.Chunk) chunks[i];
             craftChunks[i] = chunk.bukkitChunk;
@@ -159,39 +233,45 @@ public class CraftWorld implements World {
         return craftChunks;
     }
 
+    @Override
     public void loadChunk(int x, int z) {
         loadChunk(x, z, true);
     }
 
+    @Override
     public boolean unloadChunk(Chunk chunk) {
         return unloadChunk(chunk.getX(), chunk.getZ());
     }
 
+    @Override
     public boolean unloadChunk(int x, int z) {
         return unloadChunk(x, z, true);
     }
 
+    @Override
     public boolean unloadChunk(int x, int z, boolean save) {
         return unloadChunk(x, z, save, false);
     }
 
+    @Override
     public boolean unloadChunkRequest(int x, int z) {
         return unloadChunkRequest(x, z, true);
     }
 
+    @Override
     public boolean unloadChunkRequest(int x, int z, boolean safe) {
-        org.spigotmc.AsyncCatcher.catchOp( "chunk unload"); // Spigot
+        org.spigotmc.AsyncCatcher.catchOp("chunk unload"); // Spigot
         if (safe && isChunkInUse(x, z)) {
             return false;
         }
 
         world.chunkProviderServer.queueUnload(x, z);
-
         return true;
     }
 
+    @Override
     public boolean unloadChunk(int x, int z, boolean save, boolean safe) {
-        org.spigotmc.AsyncCatcher.catchOp( "chunk unload"); // Spigot
+        org.spigotmc.AsyncCatcher.catchOp("chunk unload"); // Spigot
         if (safe && isChunkInUse(x, z)) {
             return false;
         }
@@ -210,15 +290,13 @@ public class CraftWorld implements World {
 
         world.chunkProviderServer.unloadQueue.remove(x, z);
         world.chunkProviderServer.chunks.remove(LongHash.toLong(x, z));
-
         return true;
     }
 
+    @Override
     public boolean regenerateChunk(int x, int z) {
         unloadChunk(x, z, false, false);
-
         world.chunkProviderServer.unloadQueue.remove(x, z);
-
         net.minecraft.server.Chunk chunk = null;
 
         if (world.chunkProviderServer.chunkProvider == null) {
@@ -228,12 +306,11 @@ public class CraftWorld implements World {
         }
 
         chunkLoadPostProcess(chunk, x, z);
-
         refreshChunk(x, z);
-
         return chunk != null;
     }
 
+    @Override
     public boolean refreshChunk(int x, int z) {
         if (!isChunkLoaded(x, z)) {
             return false;
@@ -249,17 +326,19 @@ public class CraftWorld implements World {
         for (int idx = 0; idx < 64; idx++) {
             world.notify(px + (idx / height), ((idx % height) * 16), pz);
         }
-        world.notify(px + 15, (height * 16) - 1, pz + 15);
 
+        world.notify(px + 15, (height * 16) - 1, pz + 15);
         return true;
     }
 
+    @Override
     public boolean isChunkInUse(int x, int z) {
         return world.getPlayerChunkMap().isChunkInUse(x, z);
     }
 
+    @Override
     public boolean loadChunk(int x, int z, boolean generate) {
-        org.spigotmc.AsyncCatcher.catchOp( "chunk load"); // Spigot
+        org.spigotmc.AsyncCatcher.catchOp("chunk load"); // Spigot
         chunkLoadCount++;
         if (generate) {
             // Use the default variant of loadChunk when generate == true.
@@ -276,6 +355,7 @@ public class CraftWorld implements World {
             chunkLoadPostProcess(chunk, x, z);
             world.timings.syncChunkLoadTimer.stopTiming(); // Spigot
         }
+
         return chunk != null;
     }
 
@@ -303,10 +383,12 @@ public class CraftWorld implements World {
         }
     }
 
+    @Override
     public boolean isChunkLoaded(Chunk chunk) {
         return isChunkLoaded(chunk.getX(), chunk.getZ());
     }
 
+    @Override
     public void loadChunk(Chunk chunk) {
         loadChunk(chunk.getX(), chunk.getZ());
         ((CraftChunk) getChunkAt(chunk.getX(), chunk.getZ())).getHandle().bukkitChunk = chunk;
@@ -316,6 +398,7 @@ public class CraftWorld implements World {
         return world;
     }
 
+    @Override
     public org.bukkit.entity.Item dropItem(Location loc, ItemStack item) {
         Validate.notNull(item, "Cannot drop a Null item.");
         Validate.isTrue(item.getTypeId() != 0, "Cannot drop AIR.");
@@ -327,6 +410,7 @@ public class CraftWorld implements World {
         return new CraftItem(world.getServer(), entity);
     }
 
+    @Override
     public org.bukkit.entity.Item dropItemNaturally(Location loc, ItemStack item) {
         double xs = world.random.nextFloat() * 0.7F + (1.0F - 0.7F) * 0.5D;
         double ys = world.random.nextFloat() * 0.7F + (1.0F - 0.7F) * 0.5D;
@@ -338,6 +422,7 @@ public class CraftWorld implements World {
         return dropItem(loc, item);
     }
 
+    @Override
     public Arrow spawnArrow(Location loc, Vector velocity, float speed, float spread) {
         Validate.notNull(loc, "Can not spawn arrow with a null location");
         Validate.notNull(velocity, "Can not spawn arrow with a null velocity");
@@ -349,90 +434,97 @@ public class CraftWorld implements World {
         return (Arrow) arrow.getBukkitEntity();
     }
 
+    @Override
     @Deprecated
     public LivingEntity spawnCreature(Location loc, CreatureType creatureType) {
         return spawnCreature(loc, creatureType.toEntityType());
     }
 
+    @Override
     @Deprecated
     public LivingEntity spawnCreature(Location loc, EntityType creatureType) {
         Validate.isTrue(creatureType.isAlive(), "EntityType not instance of LivingEntity");
         return (LivingEntity) spawnEntity(loc, creatureType);
     }
 
+    @Override
     public Entity spawnEntity(Location loc, EntityType entityType) {
         return spawn(loc, entityType.getEntityClass());
     }
 
+    @Override
     public LightningStrike strikeLightning(Location loc) {
         EntityLightning lightning = new EntityLightning(world, loc.getX(), loc.getY(), loc.getZ());
         world.strikeLightning(lightning);
         return new CraftLightningStrike(server, lightning);
     }
 
+    @Override
     public LightningStrike strikeLightningEffect(Location loc) {
         EntityLightning lightning = new EntityLightning(world, loc.getX(), loc.getY(), loc.getZ(), true);
         world.strikeLightning(lightning);
         return new CraftLightningStrike(server, lightning);
     }
 
+    @Override
     public boolean generateTree(Location loc, TreeType type) {
         net.minecraft.server.WorldGenerator gen;
         switch (type) {
-        case BIG_TREE:
-            gen = new WorldGenBigTree(true);
-            break;
-        case BIRCH:
-            gen = new WorldGenForest(true, false);
-            break;
-        case REDWOOD:
-            gen = new WorldGenTaiga2(true);
-            break;
-        case TALL_REDWOOD:
-            gen = new WorldGenTaiga1();
-            break;
-        case JUNGLE:
-            gen = new WorldGenJungleTree(true, 10, 20, 3, 3); // Magic values as in BlockSapling
-            break;
-        case SMALL_JUNGLE:
-            gen = new WorldGenTrees(true, 4 + rand.nextInt(7), 3, 3, false);
-            break;
-        case COCOA_TREE:
-            gen = new WorldGenTrees(true, 4 + rand.nextInt(7), 3, 3, true);
-            break;
-        case JUNGLE_BUSH:
-            gen = new WorldGenGroundBush(3, 0);
-            break;
-        case RED_MUSHROOM:
-            gen = new WorldGenHugeMushroom(1);
-            break;
-        case BROWN_MUSHROOM:
-            gen = new WorldGenHugeMushroom(0);
-            break;
-        case SWAMP:
-            gen = new WorldGenSwampTree();
-            break;
-        case ACACIA:
-            gen = new WorldGenAcaciaTree(true);
-            break;
-        case DARK_OAK:
-            gen = new WorldGenForestTree(true);
-            break;
-        case MEGA_REDWOOD:
-            gen = new WorldGenMegaTree(false, rand.nextBoolean());
-            break;
-        case TALL_BIRCH:
-            gen = new WorldGenForest(true, true);
-            break;
-        case TREE:
-        default:
-            gen = new WorldGenTrees(true);
-            break;
+            case BIG_TREE:
+                gen = new WorldGenBigTree(true);
+                break;
+            case BIRCH:
+                gen = new WorldGenForest(true, false);
+                break;
+            case REDWOOD:
+                gen = new WorldGenTaiga2(true);
+                break;
+            case TALL_REDWOOD:
+                gen = new WorldGenTaiga1();
+                break;
+            case JUNGLE:
+                gen = new WorldGenJungleTree(true, 10, 20, 3, 3); // Magic values as in BlockSapling
+                break;
+            case SMALL_JUNGLE:
+                gen = new WorldGenTrees(true, 4 + rand.nextInt(7), 3, 3, false);
+                break;
+            case COCOA_TREE:
+                gen = new WorldGenTrees(true, 4 + rand.nextInt(7), 3, 3, true);
+                break;
+            case JUNGLE_BUSH:
+                gen = new WorldGenGroundBush(3, 0);
+                break;
+            case RED_MUSHROOM:
+                gen = new WorldGenHugeMushroom(1);
+                break;
+            case BROWN_MUSHROOM:
+                gen = new WorldGenHugeMushroom(0);
+                break;
+            case SWAMP:
+                gen = new WorldGenSwampTree();
+                break;
+            case ACACIA:
+                gen = new WorldGenAcaciaTree(true);
+                break;
+            case DARK_OAK:
+                gen = new WorldGenForestTree(true);
+                break;
+            case MEGA_REDWOOD:
+                gen = new WorldGenMegaTree(false, rand.nextBoolean());
+                break;
+            case TALL_BIRCH:
+                gen = new WorldGenForest(true, true);
+                break;
+            case TREE:
+            default:
+                gen = new WorldGenTrees(true);
+                break;
         }
 
         return gen.generate(world, rand, loc.getBlockX(), loc.getBlockY(), loc.getBlockZ());
     }
 
+    @Override
     public boolean generateTree(Location loc, TreeType type, BlockChangeDelegate delegate) {
         world.captureTreeGeneration = true;
         world.captureBlockStates = true;
@@ -447,7 +539,7 @@ public class CraftWorld implements World {
                 net.minecraft.server.Block oldBlock = world.getType(x, y, z);
                 int typeId = blockstate.getTypeId();
                 int data = blockstate.getRawData();
-                int flag = ((CraftBlockState)blockstate).getFlag();
+                int flag = ((CraftBlockState) blockstate).getFlag();
                 delegate.setTypeIdAndData(x, y, z, typeId, data);
                 net.minecraft.server.Block newBlock = world.getType(x, y, z);
                 world.notifyAndUpdatePhysics(x, y, z, null, oldBlock, newBlock, flag);
@@ -464,6 +556,7 @@ public class CraftWorld implements World {
         return world.getTileEntity(x, y, z);
     }
 
+    @Override
     public String getName() {
         return world.worldData.getName();
     }
@@ -473,6 +566,7 @@ public class CraftWorld implements World {
         return world.worldData.getSeed();
     }
 
+    @Override
     public UUID getUID() {
         return world.getDataManager().getUUID();
     }
@@ -482,22 +576,26 @@ public class CraftWorld implements World {
         return "CraftWorld{name=" + getName() + '}';
     }
 
+    @Override
     public long getTime() {
         long time = getFullTime() % 24000;
         if (time < 0) time += 24000;
         return time;
     }
 
+    @Override
     public void setTime(long time) {
         long margin = (time - getFullTime()) % 24000;
         if (margin < 0) margin += 24000;
         setFullTime(getFullTime() + margin);
     }
 
+    @Override
     public long getFullTime() {
         return world.getDayTime();
     }
 
+    @Override
     public void setFullTime(long time) {
         world.setDayTime(time);
 
@@ -510,73 +608,89 @@ public class CraftWorld implements World {
         }
     }
 
+    @Override
     public boolean createExplosion(double x, double y, double z, float power) {
         return createExplosion(x, y, z, power, false, true);
     }
 
+    @Override
     public boolean createExplosion(double x, double y, double z, float power, boolean setFire) {
         return createExplosion(x, y, z, power, setFire, true);
     }
 
+    @Override
     public boolean createExplosion(double x, double y, double z, float power, boolean setFire, boolean breakBlocks) {
         return !world.createExplosion(null, x, y, z, power, setFire, breakBlocks).wasCanceled;
     }
 
+    @Override
     public boolean createExplosion(Location loc, float power) {
         return createExplosion(loc, power, false);
     }
 
+    @Override
     public boolean createExplosion(Location loc, float power, boolean setFire) {
         return createExplosion(loc.getX(), loc.getY(), loc.getZ(), power, setFire);
     }
 
+    @Override
     public Environment getEnvironment() {
         return environment;
     }
 
-    public void setEnvironment(Environment env) {
-        if (environment != env) {
-            environment = env;
-            world.worldProvider = WorldProvider.byDimension(environment.getId());
+    public void setEnvironment(Environment environment) {
+        if (this.environment != environment) {
+            this.environment = environment;
+            world.worldProvider = WorldProvider.byDimension(this.environment.getId());
         }
     }
 
+    @Override
     public Block getBlockAt(Location location) {
         return getBlockAt(location.getBlockX(), location.getBlockY(), location.getBlockZ());
     }
 
+    @Override
     public int getBlockTypeIdAt(Location location) {
         return getBlockTypeIdAt(location.getBlockX(), location.getBlockY(), location.getBlockZ());
     }
 
+    @Override
     public int getHighestBlockYAt(Location location) {
         return getHighestBlockYAt(location.getBlockX(), location.getBlockZ());
     }
 
+    @Override
     public Chunk getChunkAt(Location location) {
         return getChunkAt(location.getBlockX() >> 4, location.getBlockZ() >> 4);
     }
 
+    @Override
     public ChunkGenerator getGenerator() {
         return generator;
     }
 
+    @Override
     public List<BlockPopulator> getPopulators() {
         return populators;
     }
 
+    @Override
     public Block getHighestBlockAt(int x, int z) {
         return getBlockAt(x, getHighestBlockYAt(x, z), z);
     }
 
+    @Override
     public Block getHighestBlockAt(Location location) {
         return getHighestBlockAt(location.getBlockX(), location.getBlockZ());
     }
 
+    @Override
     public Biome getBiome(int x, int z) {
         return CraftBlock.biomeBaseToBiome(this.world.getBiome(x, z));
     }
 
+    @Override
     public void setBiome(int x, int z, Biome bio) {
         BiomeBase bb = CraftBlock.biomeToBiomeBase(bio);
         if (this.world.isLoaded(x, 0, z)) {
@@ -584,22 +698,24 @@ public class CraftWorld implements World {
 
             if (chunk != null) {
                 byte[] biomevals = chunk.m();
-                biomevals[((z & 0xF) << 4) | (x & 0xF)] = (byte)bb.id;
+                biomevals[((z & 0xF) << 4) | (x & 0xF)] = (byte) bb.id;
             }
         }
     }
 
+    @Override
     public double getTemperature(int x, int z) {
         return this.world.getBiome(x, z).temperature;
     }
 
+    @Override
     public double getHumidity(int x, int z) {
         return this.world.getBiome(x, z).humidity;
     }
 
+    @Override
     public List<Entity> getEntities() {
         List<Entity> list = new ArrayList<Entity>();
-
         for (Object o : world.entityList) {
             if (o instanceof net.minecraft.server.Entity) {
                 net.minecraft.server.Entity mcEnt = (net.minecraft.server.Entity) o;
@@ -615,9 +731,9 @@ public class CraftWorld implements World {
         return list;
     }
 
+    @Override
     public List<LivingEntity> getLivingEntities() {
         List<LivingEntity> list = new ArrayList<LivingEntity>();
-
         for (Object o : world.entityList) {
             if (o instanceof net.minecraft.server.Entity) {
                 net.minecraft.server.Entity mcEnt = (net.minecraft.server.Entity) o;
@@ -633,20 +749,21 @@ public class CraftWorld implements World {
         return list;
     }
 
+    @Override
     @SuppressWarnings("unchecked")
     @Deprecated
     public <T extends Entity> Collection<T> getEntitiesByClass(Class<T>... classes) {
-        return (Collection<T>)getEntitiesByClasses(classes);
+        return (Collection<T>) getEntitiesByClasses(classes);
     }
 
+    @Override
     @SuppressWarnings("unchecked")
     public <T extends Entity> Collection<T> getEntitiesByClass(Class<T> clazz) {
         Collection<T> list = new ArrayList<T>();
 
-        for (Object entity: world.entityList) {
+        for (Object entity : world.entityList) {
             if (entity instanceof net.minecraft.server.Entity) {
                 Entity bukkitEntity = ((net.minecraft.server.Entity) entity).getBukkitEntity();
-
                 if (bukkitEntity == null) {
                     continue;
                 }
@@ -662,10 +779,11 @@ public class CraftWorld implements World {
         return list;
     }
 
+    @Override
     public Collection<Entity> getEntitiesByClasses(Class<?>... classes) {
         Collection<Entity> list = new ArrayList<Entity>();
 
-        for (Object entity: world.entityList) {
+        for (Object entity : world.entityList) {
             if (entity instanceof net.minecraft.server.Entity) {
                 Entity bukkitEntity = ((net.minecraft.server.Entity) entity).getBukkitEntity();
 
@@ -687,9 +805,9 @@ public class CraftWorld implements World {
         return list;
     }
 
+    @Override
     public List<Player> getPlayers() {
         List<Player> list = new ArrayList<Player>();
-
         for (Object o : world.entityList) {
             if (o instanceof net.minecraft.server.Entity) {
                 net.minecraft.server.Entity mcEnt = (net.minecraft.server.Entity) o;
@@ -704,6 +822,7 @@ public class CraftWorld implements World {
         return list;
     }
 
+    @Override
     public void save() {
         // PaperSpigot start - Improved autosave
         save(true);
@@ -724,30 +843,36 @@ public class CraftWorld implements World {
         }
     }
 
+    @Override
     public boolean isAutoSave() {
         return !world.savingDisabled;
     }
 
+    @Override
     public void setAutoSave(boolean value) {
         world.savingDisabled = !value;
     }
 
-    public void setDifficulty(Difficulty difficulty) {
-        this.getHandle().difficulty = EnumDifficulty.getById(difficulty.getValue());
-    }
-
+    @Override
     public Difficulty getDifficulty() {
         return Difficulty.getByValue(this.getHandle().difficulty.ordinal());
     }
 
+    @Override
+    public void setDifficulty(Difficulty difficulty) {
+        this.getHandle().difficulty = EnumDifficulty.getById(difficulty.getValue());
+    }
+
     public BlockMetadataStore getBlockMetadata() {
         return blockMetadata;
     }
 
+    @Override
     public boolean hasStorm() {
         return world.worldData.hasStorm();
     }
 
+    @Override
     public void setStorm(boolean hasStorm) {
         CraftServer server = world.getServer();
 
@@ -765,18 +890,22 @@ public class CraftWorld implements World {
         }
     }
 
+    @Override
     public int getWeatherDuration() {
         return world.worldData.getWeatherDuration();
     }
 
+    @Override
     public void setWeatherDuration(int duration) {
         world.worldData.setWeatherDuration(duration);
     }
 
+    @Override
     public boolean isThundering() {
         return hasStorm() && world.worldData.isThundering();
     }
 
+    @Override
     public void setThundering(boolean thundering) {
         if (thundering && !hasStorm()) setStorm(true);
         CraftServer server = world.getServer();
@@ -795,22 +924,27 @@ public class CraftWorld implements World {
         }
     }
 
+    @Override
     public int getThunderDuration() {
         return world.worldData.getThunderDuration();
     }
 
+    @Override
     public void setThunderDuration(int duration) {
         world.worldData.setThunderDuration(duration);
     }
 
+    @Override
     public long getSeed() {
         return world.worldData.getSeed();
     }
 
+    @Override
     public boolean getPVP() {
         return world.pvpMode;
     }
 
+    @Override
     public void setPVP(boolean pvp) {
         world.pvpMode = pvp;
     }
@@ -819,14 +953,17 @@ public class CraftWorld implements World {
         playEffect(player.getLocation(), effect, data, 0);
     }
 
+    @Override
     public void playEffect(Location location, Effect effect, int data) {
         playEffect(location, effect, data, 64);
     }
 
+    @Override
     public <T> void playEffect(Location loc, Effect effect, T data) {
         playEffect(loc, effect, data, 64);
     }
 
+    @Override
     public <T> void playEffect(Location loc, Effect effect, T data, int radius) {
         if (data != null) {
             Validate.isTrue(data.getClass().equals(effect.getData()), "Wrong kind of data for this effect!");
@@ -834,24 +971,22 @@ public class CraftWorld implements World {
             Validate.isTrue(effect.getData() == null, "Wrong kind of data for this effect!");
         }
 
-        if (data != null && data.getClass().equals( org.bukkit.material.MaterialData.class )) {
+        if (data != null && data.getClass().equals(org.bukkit.material.MaterialData.class)) {
             org.bukkit.material.MaterialData materialData = (org.bukkit.material.MaterialData) data;
-            Validate.isTrue( materialData.getItemType().isBlock(), "Material must be block" );
-            spigot().playEffect( loc, effect, materialData.getItemType().getId(), materialData.getData(), 0, 0, 0, 1, 1, radius );
+            Validate.isTrue(materialData.getItemType().isBlock(), "Material must be block");
+            spigot().playEffect(loc, effect, materialData.getItemType().getId(), materialData.getData(), 0, 0, 0, 1, 1, radius);
         } else {
-            int dataValue = data == null ? 0 : CraftEffect.getDataValue( effect, data );
-            playEffect( loc, effect, dataValue, radius );
+            int dataValue = data == null ? 0 : CraftEffect.getDataValue(effect, data);
+            playEffect(loc, effect, dataValue, radius);
         }
     }
 
+    @Override
     public void playEffect(Location location, Effect effect, int data, int radius) {
-        spigot().playEffect( location, effect, data, 0, 0, 0, 0, 1, 1, radius );
-    }
-
-    public <T extends Entity> T spawn(Location location, Class<T> clazz) throws IllegalArgumentException {
-        return spawn(location, clazz, SpawnReason.CUSTOM);
+        spigot().playEffect(location, effect, data, 0, 0, 0, 0, 1, 1, radius);
     }
 
+    @Override
     public FallingBlock spawnFallingBlock(Location location, org.bukkit.Material material, byte data) throws IllegalArgumentException {
         Validate.notNull(location, "Location cannot be null");
         Validate.notNull(material, "Material cannot be null");
@@ -871,10 +1006,16 @@ public class CraftWorld implements World {
         return (FallingBlock) entity.getBukkitEntity();
     }
 
+    @Override
     public FallingBlock spawnFallingBlock(Location location, int blockId, byte blockData) throws IllegalArgumentException {
         return spawnFallingBlock(location, org.bukkit.Material.getMaterial(blockId), blockData);
     }
 
+    @Override
+    public <T extends Entity> T spawn(Location location, Class<T> clazz) throws IllegalArgumentException {
+        return spawn(location, clazz, SpawnReason.CUSTOM);
+    }
+
     @SuppressWarnings("unchecked")
     public <T extends Entity> T spawn(Location location, Class<T> clazz, SpawnReason reason) throws IllegalArgumentException {
         if (location == null || clazz == null) {
@@ -1044,19 +1185,19 @@ public class CraftWorld implements World {
             }
             int dir;
             switch (face) {
-            case SOUTH:
-            default:
-                dir = 0;
-                break;
-            case WEST:
-                dir = 1;
-                break;
-            case NORTH:
-                dir = 2;
-                break;
-            case EAST:
-                dir = 3;
-                break;
+                case SOUTH:
+                default:
+                    dir = 0;
+                    break;
+                case WEST:
+                    dir = 1;
+                    break;
+                case NORTH:
+                    dir = 2;
+                    break;
+                case EAST:
+                    dir = 3;
+                    break;
             }
 
             if (Painting.class.isAssignableFrom(clazz)) {
@@ -1090,13 +1231,12 @@ public class CraftWorld implements World {
 
         if (entity != null) {
             // Spigot start
-            if (entity instanceof EntityOcelot)
-            {
-                ( (EntityOcelot) entity ).spawnBonus = false;
+            if (entity instanceof EntityOcelot) {
+                ((EntityOcelot) entity).spawnBonus = false;
             }
             // Spigot end
             if (entity instanceof EntityInsentient) {
-                ((EntityInsentient) entity).prepare((GroupDataEntity) null);
+                ((EntityInsentient) entity).prepare(null);
             }
 
             world.addEntity(entity, reason);
@@ -1106,34 +1246,42 @@ public class CraftWorld implements World {
         throw new IllegalArgumentException("Cannot spawn an entity for " + clazz.getName());
     }
 
+    @Override
     public ChunkSnapshot getEmptyChunkSnapshot(int x, int z, boolean includeBiome, boolean includeBiomeTempRain) {
         return CraftChunk.getEmptyChunkSnapshot(x, z, this, includeBiome, includeBiomeTempRain);
     }
 
+    @Override
     public void setSpawnFlags(boolean allowMonsters, boolean allowAnimals) {
         world.setSpawnFlags(allowMonsters, allowAnimals);
     }
 
+    @Override
     public boolean getAllowAnimals() {
         return world.allowAnimals;
     }
 
+    @Override
     public boolean getAllowMonsters() {
         return world.allowMonsters;
     }
 
+    @Override
     public int getMaxHeight() {
         return world.getHeight();
     }
 
+    @Override
     public int getSeaLevel() {
         return 64;
     }
 
+    @Override
     public boolean getKeepSpawnInMemory() {
         return world.keepSpawnInMemory;
     }
 
+    @Override
     public void setKeepSpawnInMemory(boolean keepLoaded) {
         world.keepSpawnInMemory = keepLoaded;
         // Grab the worlds spawn chunk
@@ -1159,11 +1307,6 @@ public class CraftWorld implements World {
     }
 
     @Override
-    public int hashCode() {
-        return getUID().hashCode();
-    }
-
-    @Override
     public boolean equals(Object obj) {
         if (obj == null) {
             return false;
@@ -1173,14 +1316,20 @@ public class CraftWorld implements World {
         }
 
         final CraftWorld other = (CraftWorld) obj;
-
         return this.getUID() == other.getUID();
     }
 
+    @Override
+    public int hashCode() {
+        return getUID().hashCode();
+    }
+
+    @Override
     public File getWorldFolder() {
-        return ((WorldNBTStorage) world.getDataManager()).getDirectory();
+        return world.getDataManager().getDirectory();
     }
 
+    @Override
     public void sendPluginMessage(Plugin source, String channel, byte[] message) {
         StandardMessenger.validatePluginMessage(server.getMessenger(), source, channel, message);
 
@@ -1189,9 +1338,9 @@ public class CraftWorld implements World {
         }
     }
 
+    @Override
     public Set<String> getListeningPluginChannels() {
         Set<String> result = new HashSet<String>();
-
         for (Player player : getPlayers()) {
             result.addAll(player.getListeningPluginChannels());
         }
@@ -1199,46 +1348,57 @@ public class CraftWorld implements World {
         return result;
     }
 
+    @Override
     public org.bukkit.WorldType getWorldType() {
         return org.bukkit.WorldType.getByName(world.getWorldData().getType().name());
     }
 
+    @Override
     public boolean canGenerateStructures() {
         return world.getWorldData().shouldGenerateMapFeatures();
     }
 
+    @Override
     public long getTicksPerAnimalSpawns() {
         return world.ticksPerAnimalSpawns;
     }
 
+    @Override
     public void setTicksPerAnimalSpawns(int ticksPerAnimalSpawns) {
         world.ticksPerAnimalSpawns = ticksPerAnimalSpawns;
     }
 
+    @Override
     public long getTicksPerMonsterSpawns() {
         return world.ticksPerMonsterSpawns;
     }
 
+    @Override
     public void setTicksPerMonsterSpawns(int ticksPerMonsterSpawns) {
         world.ticksPerMonsterSpawns = ticksPerMonsterSpawns;
     }
 
+    @Override
     public void setMetadata(String metadataKey, MetadataValue newMetadataValue) {
         server.getWorldMetadata().setMetadata(this, metadataKey, newMetadataValue);
     }
 
+    @Override
     public List<MetadataValue> getMetadata(String metadataKey) {
         return server.getWorldMetadata().getMetadata(this, metadataKey);
     }
 
+    @Override
     public boolean hasMetadata(String metadataKey) {
         return server.getWorldMetadata().hasMetadata(this, metadataKey);
     }
 
+    @Override
     public void removeMetadata(String metadataKey, Plugin owningPlugin) {
         server.getWorldMetadata().removeMetadata(this, metadataKey, owningPlugin);
     }
 
+    @Override
     public int getMonsterSpawnLimit() {
         if (monsterSpawn < 0) {
             return server.getMonsterSpawnLimit();
@@ -1247,10 +1407,12 @@ public class CraftWorld implements World {
         return monsterSpawn;
     }
 
+    @Override
     public void setMonsterSpawnLimit(int limit) {
         monsterSpawn = limit;
     }
 
+    @Override
     public int getAnimalSpawnLimit() {
         if (animalSpawn < 0) {
             return server.getAnimalSpawnLimit();
@@ -1259,10 +1421,12 @@ public class CraftWorld implements World {
         return animalSpawn;
     }
 
+    @Override
     public void setAnimalSpawnLimit(int limit) {
         animalSpawn = limit;
     }
 
+    @Override
     public int getWaterAnimalSpawnLimit() {
         if (waterAnimalSpawn < 0) {
             return server.getWaterAnimalSpawnLimit();
@@ -1271,10 +1435,12 @@ public class CraftWorld implements World {
         return waterAnimalSpawn;
     }
 
+    @Override
     public void setWaterAnimalSpawnLimit(int limit) {
         waterAnimalSpawn = limit;
     }
 
+    @Override
     public int getAmbientSpawnLimit() {
         if (ambientSpawn < 0) {
             return server.getAmbientSpawnLimit();
@@ -1283,11 +1449,12 @@ public class CraftWorld implements World {
         return ambientSpawn;
     }
 
+    @Override
     public void setAmbientSpawnLimit(int limit) {
         ambientSpawn = limit;
     }
 
-
+    @Override
     public void playSound(Location loc, Sound sound, float volume, float pitch) {
         if (loc == null || sound == null) return;
 
@@ -1298,10 +1465,12 @@ public class CraftWorld implements World {
         getHandle().makeSound(x, y, z, CraftSound.getSound(sound), volume, pitch);
     }
 
+    @Override
     public String getGameRuleValue(String rule) {
         return getHandle().getGameRules().get(rule);
     }
 
+    @Override
     public boolean setGameRuleValue(String rule, String value) {
         // No null values allowed
         if (rule == null || value == null) return false;
@@ -1312,10 +1481,12 @@ public class CraftWorld implements World {
         return true;
     }
 
+    @Override
     public String[] getGameRules() {
         return getHandle().getGameRules().getGameRules();
     }
 
+    @Override
     public boolean isGameRule(String rule) {
         return getHandle().getGameRules().contains(rule);
     }
@@ -1347,79 +1518,9 @@ public class CraftWorld implements World {
             cps.queueUnload(chunk.locX, chunk.locZ);
         }
     }
-    // Spigot start
-    private final Spigot spigot = new Spigot()
-    {
-        @Override
-        public void playEffect( Location location, Effect effect, int id, int data, float offsetX, float offsetY, float offsetZ, float speed, int particleCount, int radius )
-        {
-            Validate.notNull( location, "Location cannot be null" );
-            Validate.notNull( effect, "Effect cannot be null" );
-            Validate.notNull( location.getWorld(), "World cannot be null" );
-            Packet packet;
-            if ( effect.getType() != Effect.Type.PARTICLE )
-            {
-                int packetData = effect.getId();
-                packet = new PacketPlayOutWorldEvent( packetData, location.getBlockX(), location.getBlockY(), location.getBlockZ(), id, false );
-            } else
-            {
-                StringBuilder particleFullName = new StringBuilder();
-                particleFullName.append( effect.getName() );
-                if ( effect.getData() != null && ( effect.getData().equals( org.bukkit.Material.class ) || effect.getData().equals( org.bukkit.material.MaterialData.class ) ) )
-                {
-                    particleFullName.append( '_' ).append( id );
-                }
-                if ( effect.getData() != null && effect.getData().equals( org.bukkit.material.MaterialData.class ) )
-                {
-                    particleFullName.append( '_' ).append( data );
-                }
-                packet = new PacketPlayOutWorldParticles( particleFullName.toString(), (float) location.getX(), (float) location.getY(), (float) location.getZ(), offsetX, offsetY, offsetZ, speed, particleCount );
-            }
-            int distance;
-            radius *= radius;
-            for ( Player player : getPlayers() )
-            {
-                if ( ( (CraftPlayer) player ).getHandle().playerConnection == null )
-                {
-                    continue;
-                }
-                if ( !location.getWorld().equals( player.getWorld() ) )
-                {
-                    continue;
-                }
-                distance = (int) player.getLocation().distanceSquared( location );
-                if ( distance <= radius )
-                {
-                    ( (CraftPlayer) player ).getHandle().playerConnection.sendPacket( packet );
-                }
-            }
-        }
-
-        @Override
-        public void playEffect( Location location, Effect effect )
-        {
-            CraftWorld.this.playEffect( location, effect, 0 );
-        }
 
-        @Override
-        public LightningStrike strikeLightning(Location loc, boolean isSilent)
-        {
-            EntityLightning lightning = new EntityLightning( world, loc.getX(), loc.getY(), loc.getZ(), false, isSilent );
-            world.strikeLightning( lightning );
-            return new CraftLightningStrike( server, lightning );
-        }
-
-        @Override
-        public LightningStrike strikeLightningEffect(Location loc, boolean isSilent)
-        {
-            EntityLightning lightning = new EntityLightning( world, loc.getX(), loc.getY(), loc.getZ(), true, isSilent );
-            world.strikeLightning( lightning );
-            return new CraftLightningStrike( server, lightning );
-        }
-    };
-
-    public Spigot spigot()
-    {
+    @Override
+    public Spigot spigot() {
         return spigot;
     }
     // Spigot end
diff --git a/src/main/java/org/bukkit/craftbukkit/LoggerOutputStream.java b/src/main/java/org/bukkit/craftbukkit/LoggerOutputStream.java
index 93526ab..29895ba 100644
--- a/src/main/java/org/bukkit/craftbukkit/LoggerOutputStream.java
+++ b/src/main/java/org/bukkit/craftbukkit/LoggerOutputStream.java
@@ -1,11 +1,13 @@
 package org.bukkit.craftbukkit;
 
-import java.io.ByteArrayOutputStream;
-import java.io.IOException;
 import org.apache.logging.log4j.Level;
 import org.apache.logging.log4j.Logger;
 
+import java.io.ByteArrayOutputStream;
+import java.io.IOException;
+
 public class LoggerOutputStream extends ByteArrayOutputStream {
+
     private final String separator = System.getProperty("line.separator");
     private final Logger logger;
     private final Level level;
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index 0d7a9d6..513e564 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -1,30 +1,26 @@
 package org.bukkit.craftbukkit;
 
+import joptsimple.OptionParser;
+import joptsimple.OptionSet;
+import net.minecraft.server.MinecraftServer;
+
 import java.io.File;
 import java.io.IOException;
-import java.net.URL;
 import java.text.SimpleDateFormat;
 import java.util.Arrays;
-import java.util.Calendar;
-import java.util.Date;
-import java.util.Enumeration;
 import java.util.List;
 import java.util.concurrent.TimeUnit;
-import java.util.jar.Manifest;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-import joptsimple.OptionParser;
-import joptsimple.OptionSet;
-import net.minecraft.server.MinecraftServer;
 
 public class Main {
+
     public static boolean useJline = true;
     public static boolean useConsole = true;
 
     public static void main(String[] args) throws Exception {
         // Todo: Installation script
-        OptionParser parser = new OptionParser() {
-            {
+        OptionParser parser = new OptionParser() { {
                 acceptsAll(asList("?", "help"), "Show the help");
 
                 acceptsAll(asList("c", "config"), "Properties file to use")
@@ -140,37 +136,34 @@ public class Main {
             System.out.println(CraftServer.class.getPackage().getImplementationVersion());
         } else {
             // Spigot start - Update 20140909b
-            File lock = new File( ".update-lock" );
-            if ( !new File( "update-lock" ).exists() && !lock.exists()  && System.getProperty( "IReallyKnowWhatIAmDoingThisUpdate" ) == null )
-            {
-                System.err.println( "WARNING: This Minecraft update alters the way in which saved data is stored." );
-                System.err.println( "Please ensure your server is in the correct online/offline mode state, as the changes made are PERMANENT" );
-                System.err.println( "If you are running in offline mode, but your BungeeCord is in online mode, it is imperative that BungeeCord support is enabled in spigot.yml and BungeeCord's config.yml" );
-                System.err.println( "By typing `yes` you acknowledge that you have taken the necessary backups and are aware of this conversion" );
-                System.err.println( "Please type yes to continue starting the server. You have been warned :)" );
-                System.err.println( "See http://www.spigotmc.org/wiki/uuid-conversion/ if you have any questions and remember BACKUP BACKUP BACKUP" );
-                System.err.println( "=================================================================================" );
-                System.err.println( "Starting server in 10 seconds" );
+            File lock = new File(".update-lock");
+            if (!new File("update-lock").exists() && !lock.exists() && System.getProperty("IReallyKnowWhatIAmDoingThisUpdate") == null) {
+                System.err.println("WARNING: This Minecraft update alters the way in which saved data is stored.");
+                System.err.println("Please ensure your server is in the correct online/offline mode state, as the changes made are PERMANENT");
+                System.err.println("If you are running in offline mode, but your BungeeCord is in online mode, it is imperative that BungeeCord support is enabled in spigot.yml and BungeeCord's config.yml");
+                System.err.println("By typing `yes` you acknowledge that you have taken the necessary backups and are aware of this conversion");
+                System.err.println("Please type yes to continue starting the server. You have been warned :)");
+                System.err.println("See http://www.spigotmc.org/wiki/uuid-conversion/ if you have any questions and remember BACKUP BACKUP BACKUP");
+                System.err.println("=================================================================================");
+                System.err.println("Starting server in 10 seconds");
                 lock.createNewFile();
-                try
-                {
-                    Thread.sleep( TimeUnit.SECONDS.toMillis( 10 ) );
-                } catch ( InterruptedException ex )
-                {
+                try {
+                    Thread.sleep(TimeUnit.SECONDS.toMillis(10));
+                } catch (InterruptedException ignored) {
                 }
             }
 
-            System.err.println( "This PaperSpigot build only supports Minecraft 1.7.x and 1.8.x clients!\n"
+            System.err.println("This PaperSpigot build only supports Minecraft 1.7.x and 1.8.x clients!\n"
                     + "*** It is imperative that backups be taken before running this build on your server! ***\n"
                     + "Please report issues directly to Paper, and always ensure you're up-to-date!\n"
-                    + "*** Any bug reports not running the very latest version of the software will be ignored ***\n\n" );
+                    + "*** Any bug reports not running the very latest version of the software will be ignored ***\n\n");
 
             // Spigot end
 
             try {
                 // This trick bypasses Maven Shade's clever rewriting of our getProperty call when using String literals
-                String jline_UnsupportedTerminal = new String(new char[] {'j','l','i','n','e','.','U','n','s','u','p','p','o','r','t','e','d','T','e','r','m','i','n','a','l'});
-                String jline_terminal = new String(new char[] {'j','l','i','n','e','.','t','e','r','m','i','n','a','l'});
+                String jline_UnsupportedTerminal = new String(new char[]{'j', 'l', 'i', 'n', 'e', '.', 'U', 'n', 's', 'u', 'p', 'p', 'o', 'r', 't', 'e', 'd', 'T', 'e', 'r', 'm', 'i', 'n', 'a', 'l'});
+                String jline_terminal = new String(new char[]{'j', 'l', 'i', 'n', 'e', '.', 't', 'e', 'r', 'm', 'i', 'n', 'a', 'l'});
 
                 useJline = !(jline_UnsupportedTerminal).equals(System.getProperty(jline_terminal));
 
@@ -184,30 +177,27 @@ public class Main {
                     System.setProperty(jline.TerminalFactory.JLINE_TERMINAL, jline.UnsupportedTerminal.class.getName());
                 }
 
-
                 if (options.has("noconsole")) {
                     useConsole = false;
                 }
 
                 // Spigot Start
                 int maxPermGen = 0; // In kb
-                for ( String s : java.lang.management.ManagementFactory.getRuntimeMXBean().getInputArguments() )
-                {
-                    if ( s.startsWith( "-XX:MaxPermSize" ) )
-                    {
-                        maxPermGen = Integer.parseInt( s.replaceAll( "[^\\d]", "" ) );
-                        maxPermGen <<= 10 * ("kmg".indexOf( Character.toLowerCase( s.charAt( s.length() - 1 ) ) ) );
+                for (String s : java.lang.management.ManagementFactory.getRuntimeMXBean().getInputArguments()) {
+                    if (s.startsWith("-XX:MaxPermSize")) {
+                        maxPermGen = Integer.parseInt(s.replaceAll("[^\\d]", ""));
+                        maxPermGen <<= 10 * ("kmg".indexOf(Character.toLowerCase(s.charAt(s.length() - 1))));
                     }
                 }
-                if ( Float.parseFloat( System.getProperty( "java.class.version" ) ) < 52 && maxPermGen < ( 128 << 10 ) ) // 128mb
-                {
-                    System.out.println( "Warning, your max perm gen size is not set or less than 128mb. It is recommended you restart Java with the following argument: -XX:MaxPermSize=128M" );
-                    System.out.println( "Please see http://www.spigotmc.org/wiki/changing-permgen-size/ for more details and more in-depth instructions." );
+                if (Float.parseFloat(System.getProperty("java.class.version")) < 52 && maxPermGen < (128 << 10)) { // 128mb
+                    System.out.println("Warning, your max perm gen size is not set or less than 128mb. It is recommended you restart Java with the following argument: -XX:MaxPermSize=128M");
+                    System.out.println("Please see http://www.spigotmc.org/wiki/changing-permgen-size/ for more details and more in-depth instructions.");
                 }
+
                 // Spigot End
                 MinecraftServer.main(options);
-            } catch (Throwable t) {
-                t.printStackTrace();
+            } catch (Throwable throwable) {
+                throwable.printStackTrace();
             }
         }
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/Overridden.java b/src/main/java/org/bukkit/craftbukkit/Overridden.java
index 1c19c69..b360180 100644
--- a/src/main/java/org/bukkit/craftbukkit/Overridden.java
+++ b/src/main/java/org/bukkit/craftbukkit/Overridden.java
@@ -11,4 +11,5 @@ import java.lang.annotation.Target;
 @Target({ElementType.CONSTRUCTOR, ElementType.METHOD})
 @Retention(RetentionPolicy.RUNTIME)
 public @interface Overridden {
+
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/SpigotTimings.java b/src/main/java/org/bukkit/craftbukkit/SpigotTimings.java
index 41d2d87..ac3b754 100644
--- a/src/main/java/org/bukkit/craftbukkit/SpigotTimings.java
+++ b/src/main/java/org/bukkit/craftbukkit/SpigotTimings.java
@@ -1,15 +1,14 @@
 package org.bukkit.craftbukkit;
 
-import com.google.common.collect.Maps;
-import net.minecraft.server.*;
+import net.minecraft.server.Entity;
+import net.minecraft.server.TileEntity;
+import net.minecraft.server.World;
+import org.bukkit.craftbukkit.scheduler.CraftTask;
 import org.bukkit.plugin.java.JavaPluginLoader;
-import org.spigotmc.CustomTimingsHandler;
 import org.bukkit.scheduler.BukkitTask;
+import org.spigotmc.CustomTimingsHandler;
 
 import java.util.HashMap;
-import java.util.Map;
-
-import org.bukkit.craftbukkit.scheduler.CraftTask;
 
 public class SpigotTimings {
 
@@ -48,6 +47,7 @@ public class SpigotTimings {
 
     /**
      * Gets a timer associated with a plugins tasks.
+     *
      * @param task
      * @param period
      * @return
@@ -56,6 +56,7 @@ public class SpigotTimings {
         if (!task.isSync()) {
             return null;
         }
+
         String plugin;
         final CraftTask ctask = (CraftTask) task;
 
@@ -66,24 +67,28 @@ public class SpigotTimings {
         } else {
             plugin = "Unknown";
         }
+
         String taskname = ctask.getTaskName();
 
         String name = "Task: " + plugin + " Runnable: " + taskname;
         if (period > 0) {
-            name += "(interval:" + period +")";
+            name += "(interval:" + period + ")";
         } else {
             name += "(Single)";
         }
+
         CustomTimingsHandler result = pluginTaskTimingMap.get(name);
         if (result == null) {
             result = new CustomTimingsHandler(name, SpigotTimings.schedulerSyncTimer);
             pluginTaskTimingMap.put(name, result);
         }
+
         return result;
     }
 
     /**
      * Get a named timer for the specified entity type to track type specific timings.
+     *
      * @param entity
      * @return
      */
@@ -94,11 +99,13 @@ public class SpigotTimings {
             result = new CustomTimingsHandler("** tickEntity - " + entityType, activatedEntityTimer);
             entityTypeTimingMap.put(entityType, result);
         }
+
         return result;
     }
 
     /**
      * Get a named timer for the specified tile entity type to track type specific timings.
+     *
      * @param entity
      * @return
      */
@@ -109,6 +116,7 @@ public class SpigotTimings {
             result = new CustomTimingsHandler("** tickTileEntity - " + entityType, tickTileEntityTimer);
             tileEntityTypeTimingMap.put(entityType, result);
         }
+
         return result;
     }
 
@@ -141,7 +149,7 @@ public class SpigotTimings {
         public final CustomTimingsHandler syncChunkLoadPostTimer;
 
         public WorldTimingsHandler(World server) {
-            String name = server.worldData.getName() +" - ";
+            String name = server.worldData.getName() + " - ";
 
             mobSpawn = new CustomTimingsHandler("** " + name + "mobSpawn");
             doChunkUnload = new CustomTimingsHandler("** " + name + "doChunkUnload");
diff --git a/src/main/java/org/bukkit/craftbukkit/TrigMath.java b/src/main/java/org/bukkit/craftbukkit/TrigMath.java
index 6d613c5..cb4b0c3 100644
--- a/src/main/java/org/bukkit/craftbukkit/TrigMath.java
+++ b/src/main/java/org/bukkit/craftbukkit/TrigMath.java
@@ -30,8 +30,8 @@ public class TrigMath {
 
     private static double msatan(double arg) {
         return arg < sq2m1 ? mxatan(arg)
-             : arg > sq2p1 ? PIO2 - mxatan(1 / arg)
-             : PIO2 / 2 + mxatan((arg - 1) / (arg + 1));
+                : arg > sq2p1 ? PIO2 - mxatan(1 / arg)
+                : PIO2 / 2 + mxatan((arg - 1) / (arg + 1));
     }
 
     public static double atan(double arg) {
@@ -39,8 +39,10 @@ public class TrigMath {
     }
 
     public static double atan2(double arg1, double arg2) {
-        if (arg1 + arg2 == arg1)
+        if (arg1 + arg2 == arg1) {
             return arg1 >= 0 ? PIO2 : -PIO2;
+        }
+
         arg1 = atan(arg1 / arg2);
         return arg2 < 0 ? arg1 <= 0 ? arg1 + Math.PI : arg1 - Math.PI : arg1;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftBeacon.java b/src/main/java/org/bukkit/craftbukkit/block/CraftBeacon.java
index fc98463..e700d2e 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftBeacon.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftBeacon.java
@@ -1,15 +1,16 @@
 package org.bukkit.craftbukkit.block;
 
 import net.minecraft.server.TileEntityBeacon;
-
-import org.bukkit.block.Block;
 import org.bukkit.block.Beacon;
+import org.bukkit.block.Block;
 import org.bukkit.craftbukkit.CraftWorld;
 import org.bukkit.craftbukkit.inventory.CraftInventoryBeacon;
 import org.bukkit.inventory.Inventory;
 
 public class CraftBeacon extends CraftBlockState implements Beacon {
-    private final CraftWorld world;
+
+    CraftWorld world;
+
     private final TileEntityBeacon beacon;
 
     public CraftBeacon(final Block block) {
@@ -19,6 +20,7 @@ public class CraftBeacon extends CraftBlockState implements Beacon {
         beacon = (TileEntityBeacon) world.getTileEntityAt(getX(), getY(), getZ());
     }
 
+    @Override
     public Inventory getInventory() {
         return new CraftInventoryBeacon(beacon);
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java b/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
index 87d79ae..8bf6a49 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
@@ -1,10 +1,5 @@
 package org.bukkit.craftbukkit.block;
 
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.List;
-
 import net.minecraft.server.BiomeBase;
 import net.minecraft.server.BlockCocoa;
 import net.minecraft.server.BlockRedstoneWire;
@@ -14,7 +9,6 @@ import net.minecraft.server.GameProfileSerializer;
 import net.minecraft.server.Item;
 import net.minecraft.server.NBTTagCompound;
 import net.minecraft.server.TileEntitySkull;
-
 import org.bukkit.Chunk;
 import org.bukkit.Location;
 import org.bukkit.Material;
@@ -32,13 +26,100 @@ import org.bukkit.metadata.MetadataValue;
 import org.bukkit.plugin.Plugin;
 import org.bukkit.util.BlockVector;
 
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.List;
+
 public class CraftBlock implements Block {
+
+    private static final Biome BIOME_MAPPING[];
+    private static final BiomeBase BIOMEBASE_MAPPING[];
+
+    /* Build biome index based lookup table for BiomeBase to Biome mapping */
+    static {
+        BIOME_MAPPING = new Biome[BiomeBase.getBiomes().length];
+        BIOMEBASE_MAPPING = new BiomeBase[Biome.values().length];
+        BIOME_MAPPING[BiomeBase.OCEAN.id] = Biome.OCEAN;
+        BIOME_MAPPING[BiomeBase.PLAINS.id] = Biome.PLAINS;
+        BIOME_MAPPING[BiomeBase.DESERT.id] = Biome.DESERT;
+        BIOME_MAPPING[BiomeBase.EXTREME_HILLS.id] = Biome.EXTREME_HILLS;
+        BIOME_MAPPING[BiomeBase.FOREST.id] = Biome.FOREST;
+        BIOME_MAPPING[BiomeBase.TAIGA.id] = Biome.TAIGA;
+        BIOME_MAPPING[BiomeBase.SWAMPLAND.id] = Biome.SWAMPLAND;
+        BIOME_MAPPING[BiomeBase.RIVER.id] = Biome.RIVER;
+        BIOME_MAPPING[BiomeBase.HELL.id] = Biome.HELL;
+        BIOME_MAPPING[BiomeBase.SKY.id] = Biome.SKY;
+        BIOME_MAPPING[BiomeBase.FROZEN_OCEAN.id] = Biome.FROZEN_OCEAN;
+        BIOME_MAPPING[BiomeBase.FROZEN_RIVER.id] = Biome.FROZEN_RIVER;
+        BIOME_MAPPING[BiomeBase.ICE_PLAINS.id] = Biome.ICE_PLAINS;
+        BIOME_MAPPING[BiomeBase.ICE_MOUNTAINS.id] = Biome.ICE_MOUNTAINS;
+        BIOME_MAPPING[BiomeBase.MUSHROOM_ISLAND.id] = Biome.MUSHROOM_ISLAND;
+        BIOME_MAPPING[BiomeBase.MUSHROOM_SHORE.id] = Biome.MUSHROOM_SHORE;
+        BIOME_MAPPING[BiomeBase.BEACH.id] = Biome.BEACH;
+        BIOME_MAPPING[BiomeBase.DESERT_HILLS.id] = Biome.DESERT_HILLS;
+        BIOME_MAPPING[BiomeBase.FOREST_HILLS.id] = Biome.FOREST_HILLS;
+        BIOME_MAPPING[BiomeBase.TAIGA_HILLS.id] = Biome.TAIGA_HILLS;
+        BIOME_MAPPING[BiomeBase.SMALL_MOUNTAINS.id] = Biome.SMALL_MOUNTAINS;
+        BIOME_MAPPING[BiomeBase.JUNGLE.id] = Biome.JUNGLE;
+        BIOME_MAPPING[BiomeBase.JUNGLE_HILLS.id] = Biome.JUNGLE_HILLS;
+        BIOME_MAPPING[BiomeBase.JUNGLE_EDGE.id] = Biome.JUNGLE_EDGE;
+        BIOME_MAPPING[BiomeBase.DEEP_OCEAN.id] = Biome.DEEP_OCEAN;
+        BIOME_MAPPING[BiomeBase.STONE_BEACH.id] = Biome.STONE_BEACH;
+        BIOME_MAPPING[BiomeBase.COLD_BEACH.id] = Biome.COLD_BEACH;
+        BIOME_MAPPING[BiomeBase.BIRCH_FOREST.id] = Biome.BIRCH_FOREST;
+        BIOME_MAPPING[BiomeBase.BIRCH_FOREST_HILLS.id] = Biome.BIRCH_FOREST_HILLS;
+        BIOME_MAPPING[BiomeBase.ROOFED_FOREST.id] = Biome.ROOFED_FOREST;
+        BIOME_MAPPING[BiomeBase.COLD_TAIGA.id] = Biome.COLD_TAIGA;
+        BIOME_MAPPING[BiomeBase.COLD_TAIGA_HILLS.id] = Biome.COLD_TAIGA_HILLS;
+        BIOME_MAPPING[BiomeBase.MEGA_TAIGA.id] = Biome.MEGA_TAIGA;
+        BIOME_MAPPING[BiomeBase.MEGA_TAIGA_HILLS.id] = Biome.MEGA_TAIGA_HILLS;
+        BIOME_MAPPING[BiomeBase.EXTREME_HILLS_PLUS.id] = Biome.EXTREME_HILLS_PLUS;
+        BIOME_MAPPING[BiomeBase.SAVANNA.id] = Biome.SAVANNA;
+        BIOME_MAPPING[BiomeBase.SAVANNA_PLATEAU.id] = Biome.SAVANNA_PLATEAU;
+        BIOME_MAPPING[BiomeBase.MESA.id] = Biome.MESA;
+        BIOME_MAPPING[BiomeBase.MESA_PLATEAU_F.id] = Biome.MESA_PLATEAU_FOREST;
+        BIOME_MAPPING[BiomeBase.MESA_PLATEAU.id] = Biome.MESA_PLATEAU;
+
+        // Extended Biomes
+        BIOME_MAPPING[BiomeBase.PLAINS.id + 128] = Biome.SUNFLOWER_PLAINS;
+        BIOME_MAPPING[BiomeBase.DESERT.id + 128] = Biome.DESERT_MOUNTAINS;
+        BIOME_MAPPING[BiomeBase.FOREST.id + 128] = Biome.FLOWER_FOREST;
+        BIOME_MAPPING[BiomeBase.TAIGA.id + 128] = Biome.TAIGA_MOUNTAINS;
+        BIOME_MAPPING[BiomeBase.SWAMPLAND.id + 128] = Biome.SWAMPLAND_MOUNTAINS;
+        BIOME_MAPPING[BiomeBase.ICE_PLAINS.id + 128] = Biome.ICE_PLAINS_SPIKES;
+        BIOME_MAPPING[BiomeBase.JUNGLE.id + 128] = Biome.JUNGLE_MOUNTAINS;
+        BIOME_MAPPING[BiomeBase.JUNGLE_EDGE.id + 128] = Biome.JUNGLE_EDGE_MOUNTAINS;
+        BIOME_MAPPING[BiomeBase.COLD_TAIGA.id + 128] = Biome.COLD_TAIGA_MOUNTAINS;
+        BIOME_MAPPING[BiomeBase.SAVANNA.id + 128] = Biome.SAVANNA_MOUNTAINS;
+        BIOME_MAPPING[BiomeBase.SAVANNA_PLATEAU.id + 128] = Biome.SAVANNA_PLATEAU_MOUNTAINS;
+        BIOME_MAPPING[BiomeBase.MESA.id + 128] = Biome.MESA_BRYCE;
+        BIOME_MAPPING[BiomeBase.MESA_PLATEAU_F.id + 128] = Biome.MESA_PLATEAU_FOREST_MOUNTAINS;
+        BIOME_MAPPING[BiomeBase.MESA_PLATEAU.id + 128] = Biome.MESA_PLATEAU_MOUNTAINS;
+        BIOME_MAPPING[BiomeBase.BIRCH_FOREST.id + 128] = Biome.BIRCH_FOREST_MOUNTAINS;
+        BIOME_MAPPING[BiomeBase.BIRCH_FOREST_HILLS.id + 128] = Biome.BIRCH_FOREST_HILLS_MOUNTAINS;
+        BIOME_MAPPING[BiomeBase.ROOFED_FOREST.id + 128] = Biome.ROOFED_FOREST_MOUNTAINS;
+        BIOME_MAPPING[BiomeBase.MEGA_TAIGA.id + 128] = Biome.MEGA_SPRUCE_TAIGA;
+        BIOME_MAPPING[BiomeBase.EXTREME_HILLS.id + 128] = Biome.EXTREME_HILLS_MOUNTAINS;
+        BIOME_MAPPING[BiomeBase.EXTREME_HILLS_PLUS.id + 128] = Biome.EXTREME_HILLS_PLUS_MOUNTAINS;
+        BIOME_MAPPING[BiomeBase.MEGA_TAIGA_HILLS.id + 128] = Biome.MEGA_SPRUCE_TAIGA_HILLS;
+
+        /* Sanity check - we should have a record for each record in the BiomeBase.a table */
+        /* Helps avoid missed biomes when we upgrade bukkit to new code with new biomes */
+        for (int i = 0; i < BIOME_MAPPING.length; i++) {
+            if ((BiomeBase.getBiome(i) != null) && (BIOME_MAPPING[i] == null)) {
+                throw new IllegalArgumentException("Missing Biome mapping for BiomeBase[" + i + ", " + BiomeBase.getBiome(i) + "]");
+            }
+            if (BIOME_MAPPING[i] != null) {  /* Build reverse mapping for setBiome */
+                BIOMEBASE_MAPPING[BIOME_MAPPING[i].ordinal()] = BiomeBase.getBiome(i);
+            }
+        }
+    }
+
     private final CraftChunk chunk;
     private final int x;
     private final int y;
     private final int z;
-    private static final Biome BIOME_MAPPING[];
-    private static final BiomeBase BIOMEBASE_MAPPING[];
 
     public CraftBlock(CraftChunk chunk, int x, int y, int z) {
         this.x = x;
@@ -47,22 +128,85 @@ public class CraftBlock implements Block {
         this.chunk = chunk;
     }
 
-    private net.minecraft.server.Block getNMSBlock() {
-        return CraftMagicNumbers.getBlock(this); // TODO: UPDATE THIS
-    }
-
     private static net.minecraft.server.Block getNMSBlock(int type) {
         return CraftMagicNumbers.getBlock(type);
     }
 
+    /**
+     * Notch uses a 0-5 to mean DOWN, UP, NORTH, SOUTH, WEST, EAST
+     * in that order all over. This method is convenience to convert for us.
+     *
+     * @return BlockFace the BlockFace represented by this number
+     */
+    public static BlockFace notchToBlockFace(int notch) {
+        switch (notch) {
+            case 0:
+                return BlockFace.DOWN;
+            case 1:
+                return BlockFace.UP;
+            case 2:
+                return BlockFace.NORTH;
+            case 3:
+                return BlockFace.SOUTH;
+            case 4:
+                return BlockFace.WEST;
+            case 5:
+                return BlockFace.EAST;
+            default:
+                return BlockFace.SELF;
+        }
+    }
+
+    public static int blockFaceToNotch(BlockFace face) {
+        switch (face) {
+            case DOWN:
+                return 0;
+            case UP:
+                return 1;
+            case NORTH:
+                return 2;
+            case SOUTH:
+                return 3;
+            case WEST:
+                return 4;
+            case EAST:
+                return 5;
+            default:
+                return 7; // Good as anything here, but technically invalid
+        }
+    }
+
+    public static Biome biomeBaseToBiome(BiomeBase base) {
+        if (base == null) {
+            return null;
+        }
+
+        return BIOME_MAPPING[base.id];
+    }
+
+    public static BiomeBase biomeToBiomeBase(Biome bio) {
+        if (bio == null) {
+            return null;
+        }
+
+        return BIOMEBASE_MAPPING[bio.ordinal()];
+    }
+
+    private net.minecraft.server.Block getNMSBlock() {
+        return CraftMagicNumbers.getBlock(this); // TODO: UPDATE THIS
+    }
+
+    @Override
     public World getWorld() {
         return chunk.getWorld();
     }
 
+    @Override
     public Location getLocation() {
         return new Location(getWorld(), x, y, z);
     }
 
+    @Override
     public Location getLocation(Location loc) {
         if (loc != null) {
             loc.setWorld(getWorld());
@@ -80,26 +224,27 @@ public class CraftBlock implements Block {
         return new BlockVector(x, y, z);
     }
 
+    @Override
     public int getX() {
         return x;
     }
 
+    @Override
     public int getY() {
         return y;
     }
 
+    @Override
     public int getZ() {
         return z;
     }
 
+    @Override
     public Chunk getChunk() {
         return chunk;
     }
 
-    public void setData(final byte data) {
-        chunk.getHandle().world.setData(x, y, z, data, 3);
-    }
-
+    @Override
     public void setData(final byte data, boolean applyPhysics) {
         if (applyPhysics) {
             chunk.getHandle().world.setData(x, y, z, data, 3);
@@ -108,22 +253,27 @@ public class CraftBlock implements Block {
         }
     }
 
+    @Override
     public byte getData() {
         return (byte) chunk.getHandle().getData(this.x & 0xF, this.y & 0xFF, this.z & 0xF);
     }
 
-    public void setType(final Material type) {
-        setTypeId(type.getId());
+    @Override
+    public void setData(final byte data) {
+        chunk.getHandle().world.setData(x, y, z, data, 3);
     }
 
+    @Override
     public boolean setTypeId(final int type) {
         return setTypeId(type, true);
     }
 
+    @Override
     public boolean setTypeId(final int type, final boolean applyPhysics) {
         return setTypeIdAndData(type, getData(), applyPhysics);
     }
 
+    @Override
     public boolean setTypeIdAndData(final int type, final byte data, final boolean applyPhysics) {
         if (applyPhysics) {
             return chunk.getHandle().world.setTypeAndData(x, y, z, getNMSBlock(type), data, 3);
@@ -132,33 +282,42 @@ public class CraftBlock implements Block {
             if (success) {
                 chunk.getHandle().world.notify(x, y, z);
             }
+
             return success;
         }
     }
 
+    @Override
     public Material getType() {
         return Material.getMaterial(getTypeId());
     }
 
+    @Override
+    public void setType(final Material type) {
+        setTypeId(type.getId());
+    }
+
     @Deprecated
     @Override
     public int getTypeId() {
         return CraftMagicNumbers.getId(chunk.getHandle().getType(this.x & 0xF, this.y & 0xFF, this.z & 0xF));
     }
 
+    @Override
     public byte getLightLevel() {
         return (byte) chunk.getHandle().world.getLightLevel(this.x, this.y, this.z);
     }
 
+    @Override
     public byte getLightFromSky() {
         return (byte) chunk.getHandle().getBrightness(EnumSkyBlock.SKY, this.x & 0xF, this.y & 0xFF, this.z & 0xF);
     }
 
+    @Override
     public byte getLightFromBlocks() {
         return (byte) chunk.getHandle().getBrightness(EnumSkyBlock.BLOCK, this.x & 0xF, this.y & 0xFF, this.z & 0xF);
     }
 
-
     public Block getFace(final BlockFace face) {
         return getRelative(face, 1);
     }
@@ -167,26 +326,29 @@ public class CraftBlock implements Block {
         return getRelative(face, distance);
     }
 
+    @Override
     public Block getRelative(final int modX, final int modY, final int modZ) {
         return getWorld().getBlockAt(getX() + modX, getY() + modY, getZ() + modZ);
     }
 
+    @Override
     public Block getRelative(BlockFace face) {
         return getRelative(face, 1);
     }
 
+    @Override
     public Block getRelative(BlockFace face, int distance) {
         return getRelative(face.getModX() * distance, face.getModY() * distance, face.getModZ() * distance);
     }
 
+    @Override
     public BlockFace getFace(final Block block) {
         BlockFace[] values = BlockFace.values();
-
         for (BlockFace face : values) {
             if ((this.getX() + face.getModX() == block.getX()) &&
-                (this.getY() + face.getModY() == block.getY()) &&
-                (this.getZ() + face.getModZ() == block.getZ())
-            ) {
+                    (this.getY() + face.getModY() == block.getY()) &&
+                    (this.getZ() + face.getModZ() == block.getZ())
+                    ) {
                 return face;
             }
         }
@@ -199,124 +361,71 @@ public class CraftBlock implements Block {
         return "CraftBlock{" + "chunk=" + chunk + ",x=" + x + ",y=" + y + ",z=" + z + ",type=" + getType() + ",data=" + getData() + '}';
     }
 
-    /**
-     * Notch uses a 0-5 to mean DOWN, UP, NORTH, SOUTH, WEST, EAST
-     * in that order all over. This method is convenience to convert for us.
-     *
-     * @return BlockFace the BlockFace represented by this number
-     */
-    public static BlockFace notchToBlockFace(int notch) {
-        switch (notch) {
-        case 0:
-            return BlockFace.DOWN;
-        case 1:
-            return BlockFace.UP;
-        case 2:
-            return BlockFace.NORTH;
-        case 3:
-            return BlockFace.SOUTH;
-        case 4:
-            return BlockFace.WEST;
-        case 5:
-            return BlockFace.EAST;
-        default:
-            return BlockFace.SELF;
-        }
-    }
-
-    public static int blockFaceToNotch(BlockFace face) {
-        switch (face) {
-        case DOWN:
-            return 0;
-        case UP:
-            return 1;
-        case NORTH:
-            return 2;
-        case SOUTH:
-            return 3;
-        case WEST:
-            return 4;
-        case EAST:
-            return 5;
-        default:
-            return 7; // Good as anything here, but technically invalid
-        }
-    }
-
     public BlockState getState() {
         Material material = getType();
 
         switch (material) {
-        case SIGN:
-        case SIGN_POST:
-        case WALL_SIGN:
-            return new CraftSign(this);
-        case CHEST:
-        case TRAPPED_CHEST:
-            return new CraftChest(this);
-        case BURNING_FURNACE:
-        case FURNACE:
-            return new CraftFurnace(this);
-        case DISPENSER:
-            return new CraftDispenser(this);
-        case DROPPER:
-            return new CraftDropper(this);
-        case HOPPER:
-            return new CraftHopper(this);
-        case MOB_SPAWNER:
-            return new CraftCreatureSpawner(this);
-        case NOTE_BLOCK:
-            return new CraftNoteBlock(this);
-        case JUKEBOX:
-            return new CraftJukebox(this);
-        case BREWING_STAND:
-            return new CraftBrewingStand(this);
-        case SKULL:
-            return new CraftSkull(this);
-        case COMMAND:
-            return new CraftCommandBlock(this);
-        case BEACON:
-            return new CraftBeacon(this);
-        default:
-            return new CraftBlockState(this);
+            case SIGN:
+            case SIGN_POST:
+            case WALL_SIGN:
+                return new CraftSign(this);
+            case CHEST:
+            case TRAPPED_CHEST:
+                return new CraftChest(this);
+            case BURNING_FURNACE:
+            case FURNACE:
+                return new CraftFurnace(this);
+            case DISPENSER:
+                return new CraftDispenser(this);
+            case DROPPER:
+                return new CraftDropper(this);
+            case HOPPER:
+                return new CraftHopper(this);
+            case MOB_SPAWNER:
+                return new CraftCreatureSpawner(this);
+            case NOTE_BLOCK:
+                return new CraftNoteBlock(this);
+            case JUKEBOX:
+                return new CraftJukebox(this);
+            case BREWING_STAND:
+                return new CraftBrewingStand(this);
+            case SKULL:
+                return new CraftSkull(this);
+            case COMMAND:
+                return new CraftCommandBlock(this);
+            case BEACON:
+                return new CraftBeacon(this);
+            default:
+                return new CraftBlockState(this);
         }
     }
 
+    @Override
     public Biome getBiome() {
         return getWorld().getBiome(x, z);
     }
 
+    @Override
     public void setBiome(Biome bio) {
         getWorld().setBiome(x, z, bio);
     }
 
-    public static Biome biomeBaseToBiome(BiomeBase base) {
-        if (base == null) {
-            return null;
-        }
-
-        return BIOME_MAPPING[base.id];
-    }
-
-    public static BiomeBase biomeToBiomeBase(Biome bio) {
-        if (bio == null) {
-            return null;
-        }
-        return BIOMEBASE_MAPPING[bio.ordinal()];
-    }
-
+    @Override
     public double getTemperature() {
         return getWorld().getTemperature(x, z);
     }
 
+    @Override
     public double getHumidity() {
         return getWorld().getHumidity(x, z);
     }
 
+    @Override
     public boolean isBlockPowered() {
         return chunk.getHandle().world.getBlockPower(x, y, z) > 0;
     }
 
+    @Override
     public boolean isBlockIndirectlyPowered() {
         return chunk.getHandle().world.isBlockIndirectlyPowered(x, y, z);
     }
@@ -335,10 +444,12 @@ public class CraftBlock implements Block {
         return this.y << 24 ^ this.x ^ this.z ^ this.getWorld().hashCode();
     }
 
+    @Override
     public boolean isBlockFacePowered(BlockFace face) {
         return chunk.getHandle().world.isBlockFacePowered(x, y, z, blockFaceToNotch(face));
     }
 
+    @Override
     public boolean isBlockFaceIndirectlyPowered(BlockFace face) {
         int power = chunk.getHandle().world.getBlockFacePower(x, y, z, blockFaceToNotch(face));
 
@@ -350,31 +461,42 @@ public class CraftBlock implements Block {
         return power > 0;
     }
 
+    @Override
     public int getBlockPower(BlockFace face) {
         int power = 0;
         BlockRedstoneWire wire = Blocks.REDSTONE_WIRE;
         net.minecraft.server.World world = chunk.getHandle().world;
-        if ((face == BlockFace.DOWN || face == BlockFace.SELF) && world.isBlockFacePowered(x, y - 1, z, 0)) power = wire.getPower(world, x, y - 1, z, power);
-        if ((face == BlockFace.UP || face == BlockFace.SELF) && world.isBlockFacePowered(x, y + 1, z, 1)) power = wire.getPower(world, x, y + 1, z, power);
-        if ((face == BlockFace.EAST || face == BlockFace.SELF) && world.isBlockFacePowered(x + 1, y, z, 2)) power = wire.getPower(world, x + 1, y, z, power);
-        if ((face == BlockFace.WEST || face == BlockFace.SELF) && world.isBlockFacePowered(x - 1, y, z, 3)) power = wire.getPower(world, x - 1, y, z, power);
-        if ((face == BlockFace.NORTH || face == BlockFace.SELF) && world.isBlockFacePowered(x, y, z - 1, 4)) power = wire.getPower(world, x, y, z - 1, power);
-        if ((face == BlockFace.SOUTH || face == BlockFace.SELF) && world.isBlockFacePowered(x, y, z + 1, 5)) power = wire.getPower(world, x, y, z - 1, power);
+        if ((face == BlockFace.DOWN || face == BlockFace.SELF) && world.isBlockFacePowered(x, y - 1, z, 0))
+            power = wire.getPower(world, x, y - 1, z, power);
+        if ((face == BlockFace.UP || face == BlockFace.SELF) && world.isBlockFacePowered(x, y + 1, z, 1))
+            power = wire.getPower(world, x, y + 1, z, power);
+        if ((face == BlockFace.EAST || face == BlockFace.SELF) && world.isBlockFacePowered(x + 1, y, z, 2))
+            power = wire.getPower(world, x + 1, y, z, power);
+        if ((face == BlockFace.WEST || face == BlockFace.SELF) && world.isBlockFacePowered(x - 1, y, z, 3))
+            power = wire.getPower(world, x - 1, y, z, power);
+        if ((face == BlockFace.NORTH || face == BlockFace.SELF) && world.isBlockFacePowered(x, y, z - 1, 4))
+            power = wire.getPower(world, x, y, z - 1, power);
+        if ((face == BlockFace.SOUTH || face == BlockFace.SELF) && world.isBlockFacePowered(x, y, z + 1, 5))
+            power = wire.getPower(world, x, y, z - 1, power);
         return power > 0 ? power : (face == BlockFace.SELF ? isBlockIndirectlyPowered() : isBlockFaceIndirectlyPowered(face)) ? 15 : 0;
     }
 
+    @Override
     public int getBlockPower() {
         return getBlockPower(BlockFace.SELF);
     }
 
+    @Override
     public boolean isEmpty() {
         return getType() == Material.AIR;
     }
 
+    @Override
     public boolean isLiquid() {
         return (getType() == Material.WATER) || (getType() == Material.STATIONARY_WATER) || (getType() == Material.LAVA) || (getType() == Material.STATIONARY_LAVA);
     }
 
+    @Override
     public PistonMoveReaction getPistonMoveReaction() {
         return PistonMoveReaction.getById(getNMSBlock().getMaterial().getPushReaction());
     }
@@ -385,6 +507,7 @@ public class CraftBlock implements Block {
         return block != null && (block.getMaterial().isAlwaysDestroyable() || (itemType != null && itemType.canDestroySpecialBlock(block)));
     }
 
+    @Override
     public boolean breakNaturally() {
         // Order matters here, need to drop before setting to air so skulls can get their data
         net.minecraft.server.Block block = this.getNMSBlock();
@@ -400,6 +523,7 @@ public class CraftBlock implements Block {
         return result;
     }
 
+    @Override
     public boolean breakNaturally(ItemStack item) {
         if (itemCausesDrops(item)) {
             return breakNaturally();
@@ -408,6 +532,7 @@ public class CraftBlock implements Block {
         }
     }
 
+    @Override
     public Collection<ItemStack> getDrops() {
         List<ItemStack> drops = new ArrayList<ItemStack>();
 
@@ -448,6 +573,7 @@ public class CraftBlock implements Block {
         return drops;
     }
 
+    @Override
     public Collection<ItemStack> getDrops(ItemStack item) {
         if (itemCausesDrops(item)) {
             return getDrops();
@@ -456,98 +582,22 @@ public class CraftBlock implements Block {
         }
     }
 
-    /* Build biome index based lookup table for BiomeBase to Biome mapping */
-    static {
-        BIOME_MAPPING = new Biome[BiomeBase.getBiomes().length];
-        BIOMEBASE_MAPPING = new BiomeBase[Biome.values().length];
-        BIOME_MAPPING[BiomeBase.OCEAN.id] = Biome.OCEAN;
-        BIOME_MAPPING[BiomeBase.PLAINS.id] = Biome.PLAINS;
-        BIOME_MAPPING[BiomeBase.DESERT.id] = Biome.DESERT;
-        BIOME_MAPPING[BiomeBase.EXTREME_HILLS.id] = Biome.EXTREME_HILLS;
-        BIOME_MAPPING[BiomeBase.FOREST.id] = Biome.FOREST;
-        BIOME_MAPPING[BiomeBase.TAIGA.id] = Biome.TAIGA;
-        BIOME_MAPPING[BiomeBase.SWAMPLAND.id] = Biome.SWAMPLAND;
-        BIOME_MAPPING[BiomeBase.RIVER.id] = Biome.RIVER;
-        BIOME_MAPPING[BiomeBase.HELL.id] = Biome.HELL;
-        BIOME_MAPPING[BiomeBase.SKY.id] = Biome.SKY;
-        BIOME_MAPPING[BiomeBase.FROZEN_OCEAN.id] = Biome.FROZEN_OCEAN;
-        BIOME_MAPPING[BiomeBase.FROZEN_RIVER.id] = Biome.FROZEN_RIVER;
-        BIOME_MAPPING[BiomeBase.ICE_PLAINS.id] = Biome.ICE_PLAINS;
-        BIOME_MAPPING[BiomeBase.ICE_MOUNTAINS.id] = Biome.ICE_MOUNTAINS;
-        BIOME_MAPPING[BiomeBase.MUSHROOM_ISLAND.id] = Biome.MUSHROOM_ISLAND;
-        BIOME_MAPPING[BiomeBase.MUSHROOM_SHORE.id] = Biome.MUSHROOM_SHORE;
-        BIOME_MAPPING[BiomeBase.BEACH.id] = Biome.BEACH;
-        BIOME_MAPPING[BiomeBase.DESERT_HILLS.id] = Biome.DESERT_HILLS;
-        BIOME_MAPPING[BiomeBase.FOREST_HILLS.id] = Biome.FOREST_HILLS;
-        BIOME_MAPPING[BiomeBase.TAIGA_HILLS.id] = Biome.TAIGA_HILLS;
-        BIOME_MAPPING[BiomeBase.SMALL_MOUNTAINS.id] = Biome.SMALL_MOUNTAINS;
-        BIOME_MAPPING[BiomeBase.JUNGLE.id] = Biome.JUNGLE;
-        BIOME_MAPPING[BiomeBase.JUNGLE_HILLS.id] = Biome.JUNGLE_HILLS;
-        BIOME_MAPPING[BiomeBase.JUNGLE_EDGE.id] = Biome.JUNGLE_EDGE;
-        BIOME_MAPPING[BiomeBase.DEEP_OCEAN.id] = Biome.DEEP_OCEAN;
-        BIOME_MAPPING[BiomeBase.STONE_BEACH.id] = Biome.STONE_BEACH;
-        BIOME_MAPPING[BiomeBase.COLD_BEACH.id] = Biome.COLD_BEACH;
-        BIOME_MAPPING[BiomeBase.BIRCH_FOREST.id] = Biome.BIRCH_FOREST;
-        BIOME_MAPPING[BiomeBase.BIRCH_FOREST_HILLS.id] = Biome.BIRCH_FOREST_HILLS;
-        BIOME_MAPPING[BiomeBase.ROOFED_FOREST.id] = Biome.ROOFED_FOREST;
-        BIOME_MAPPING[BiomeBase.COLD_TAIGA.id] = Biome.COLD_TAIGA;
-        BIOME_MAPPING[BiomeBase.COLD_TAIGA_HILLS.id] = Biome.COLD_TAIGA_HILLS;
-        BIOME_MAPPING[BiomeBase.MEGA_TAIGA.id] = Biome.MEGA_TAIGA;
-        BIOME_MAPPING[BiomeBase.MEGA_TAIGA_HILLS.id] = Biome.MEGA_TAIGA_HILLS;
-        BIOME_MAPPING[BiomeBase.EXTREME_HILLS_PLUS.id] = Biome.EXTREME_HILLS_PLUS;
-        BIOME_MAPPING[BiomeBase.SAVANNA.id] = Biome.SAVANNA;
-        BIOME_MAPPING[BiomeBase.SAVANNA_PLATEAU.id] = Biome.SAVANNA_PLATEAU;
-        BIOME_MAPPING[BiomeBase.MESA.id] = Biome.MESA;
-        BIOME_MAPPING[BiomeBase.MESA_PLATEAU_F.id] = Biome.MESA_PLATEAU_FOREST;
-        BIOME_MAPPING[BiomeBase.MESA_PLATEAU.id] = Biome.MESA_PLATEAU;
-
-        // Extended Biomes
-        BIOME_MAPPING[BiomeBase.PLAINS.id + 128] = Biome.SUNFLOWER_PLAINS;
-        BIOME_MAPPING[BiomeBase.DESERT.id + 128] = Biome.DESERT_MOUNTAINS;
-        BIOME_MAPPING[BiomeBase.FOREST.id + 128] = Biome.FLOWER_FOREST;
-        BIOME_MAPPING[BiomeBase.TAIGA.id + 128] = Biome.TAIGA_MOUNTAINS;
-        BIOME_MAPPING[BiomeBase.SWAMPLAND.id + 128] = Biome.SWAMPLAND_MOUNTAINS;
-        BIOME_MAPPING[BiomeBase.ICE_PLAINS.id + 128] = Biome.ICE_PLAINS_SPIKES;
-        BIOME_MAPPING[BiomeBase.JUNGLE.id + 128] = Biome.JUNGLE_MOUNTAINS;
-        BIOME_MAPPING[BiomeBase.JUNGLE_EDGE.id + 128] = Biome.JUNGLE_EDGE_MOUNTAINS;
-        BIOME_MAPPING[BiomeBase.COLD_TAIGA.id + 128] = Biome.COLD_TAIGA_MOUNTAINS;
-        BIOME_MAPPING[BiomeBase.SAVANNA.id + 128] = Biome.SAVANNA_MOUNTAINS;
-        BIOME_MAPPING[BiomeBase.SAVANNA_PLATEAU.id + 128] = Biome.SAVANNA_PLATEAU_MOUNTAINS;
-        BIOME_MAPPING[BiomeBase.MESA.id + 128] = Biome.MESA_BRYCE;
-        BIOME_MAPPING[BiomeBase.MESA_PLATEAU_F.id + 128] = Biome.MESA_PLATEAU_FOREST_MOUNTAINS;
-        BIOME_MAPPING[BiomeBase.MESA_PLATEAU.id + 128] = Biome.MESA_PLATEAU_MOUNTAINS;
-        BIOME_MAPPING[BiomeBase.BIRCH_FOREST.id + 128] = Biome.BIRCH_FOREST_MOUNTAINS;
-        BIOME_MAPPING[BiomeBase.BIRCH_FOREST_HILLS.id + 128] = Biome.BIRCH_FOREST_HILLS_MOUNTAINS;
-        BIOME_MAPPING[BiomeBase.ROOFED_FOREST.id + 128] = Biome.ROOFED_FOREST_MOUNTAINS;
-        BIOME_MAPPING[BiomeBase.MEGA_TAIGA.id + 128] = Biome.MEGA_SPRUCE_TAIGA;
-        BIOME_MAPPING[BiomeBase.EXTREME_HILLS.id + 128] = Biome.EXTREME_HILLS_MOUNTAINS;
-        BIOME_MAPPING[BiomeBase.EXTREME_HILLS_PLUS.id + 128] = Biome.EXTREME_HILLS_PLUS_MOUNTAINS;
-        BIOME_MAPPING[BiomeBase.MEGA_TAIGA_HILLS.id + 128] = Biome.MEGA_SPRUCE_TAIGA_HILLS;
-
-        /* Sanity check - we should have a record for each record in the BiomeBase.a table */
-        /* Helps avoid missed biomes when we upgrade bukkit to new code with new biomes */
-        for (int i = 0; i < BIOME_MAPPING.length; i++) {
-            if ((BiomeBase.getBiome(i) != null) && (BIOME_MAPPING[i] == null)) {
-                throw new IllegalArgumentException("Missing Biome mapping for BiomeBase[" + i + ", " + BiomeBase.getBiome(i) + "]");
-            }
-            if (BIOME_MAPPING[i] != null) {  /* Build reverse mapping for setBiome */
-                BIOMEBASE_MAPPING[BIOME_MAPPING[i].ordinal()] = BiomeBase.getBiome(i);
-            }
-        }
-    }
-
+    @Override
     public void setMetadata(String metadataKey, MetadataValue newMetadataValue) {
         chunk.getCraftWorld().getBlockMetadata().setMetadata(this, metadataKey, newMetadataValue);
     }
 
+    @Override
     public List<MetadataValue> getMetadata(String metadataKey) {
         return chunk.getCraftWorld().getBlockMetadata().getMetadata(this, metadataKey);
     }
 
+    @Override
     public boolean hasMetadata(String metadataKey) {
         return chunk.getCraftWorld().getBlockMetadata().hasMetadata(this, metadataKey);
     }
 
+    @Override
     public void removeMetadata(String metadataKey, Plugin owningPlugin) {
         chunk.getCraftWorld().getBlockMetadata().removeMetadata(this, metadataKey, owningPlugin);
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftBlockState.java b/src/main/java/org/bukkit/craftbukkit/block/CraftBlockState.java
index 2297cc7..bc93052 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftBlockState.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftBlockState.java
@@ -1,10 +1,10 @@
 package org.bukkit.craftbukkit.block;
 
-import org.bukkit.Location;
-import org.bukkit.block.Block;
 import org.bukkit.Chunk;
+import org.bukkit.Location;
 import org.bukkit.Material;
 import org.bukkit.World;
+import org.bukkit.block.Block;
 import org.bukkit.block.BlockState;
 import org.bukkit.craftbukkit.CraftChunk;
 import org.bukkit.craftbukkit.CraftWorld;
@@ -15,15 +15,17 @@ import org.bukkit.plugin.Plugin;
 import java.util.List;
 
 public class CraftBlockState implements BlockState {
+
     private final CraftWorld world;
     private final CraftChunk chunk;
     private final int x;
     private final int y;
     private final int z;
+
+    protected final byte light;
     protected int type;
     protected MaterialData data;
     protected int flag;
-    protected final byte light;
 
     public CraftBlockState(final Block block) {
         this.world = (CraftWorld) block.getWorld();
@@ -34,8 +36,7 @@ public class CraftBlockState implements BlockState {
         this.light = block.getLightLevel();
         this.chunk = (CraftChunk) block.getChunk();
         this.flag = 3;
-
-        createData(block.getData());
+        this.createData(block.getData());
     }
 
     public CraftBlockState(final Block block, int flag) {
@@ -51,26 +52,37 @@ public class CraftBlockState implements BlockState {
         return new CraftBlockState(world.getWorld().getBlockAt(x, y, z), flag);
     }
 
+    @Override
     public World getWorld() {
         return world;
     }
 
+    @Override
     public int getX() {
         return x;
     }
 
+    @Override
     public int getY() {
         return y;
     }
 
+    @Override
     public int getZ() {
         return z;
     }
 
+    @Override
     public Chunk getChunk() {
         return chunk;
     }
 
+    @Override
+    public MaterialData getData() {
+        return data;
+    }
+
+    @Override
     public void setData(final MaterialData data) {
         Material mat = getType();
 
@@ -80,61 +92,65 @@ public class CraftBlockState implements BlockState {
             if ((data.getClass() == mat.getData()) || (data.getClass() == MaterialData.class)) {
                 this.data = data;
             } else {
-                throw new IllegalArgumentException("Provided data is not of type "
-                        + mat.getData().getName() + ", found " + data.getClass().getName());
+                throw new IllegalArgumentException("Provided data is not of type " + mat.getData().getName() + ", found " + data.getClass().getName());
             }
         }
     }
 
-    public MaterialData getData() {
-        return data;
-    }
-
-    public void setType(final Material type) {
-        setTypeId(type.getId());
-    }
-
+    @Override
     public boolean setTypeId(final int type) {
         if (this.type != type) {
             this.type = type;
-
             createData((byte) 0);
         }
+
         return true;
     }
 
+    @Override
     public Material getType() {
         return Material.getMaterial(getTypeId());
     }
 
-    public void setFlag(int flag) {
-        this.flag = flag;
+    @Override
+    public void setType(final Material type) {
+        setTypeId(type.getId());
     }
 
     public int getFlag() {
         return flag;
     }
 
+    public void setFlag(int flag) {
+        this.flag = flag;
+    }
+
+    @Override
     public int getTypeId() {
         return type;
     }
 
+    @Override
     public byte getLightLevel() {
         return light;
     }
 
+    @Override
     public Block getBlock() {
         return world.getBlockAt(x, y, z);
     }
 
+    @Override
     public boolean update() {
         return update(false);
     }
 
+    @Override
     public boolean update(boolean force) {
         return update(force, true);
     }
 
+    @Override
     public boolean update(boolean force, boolean applyPhysics) {
         Block block = getBlock();
 
@@ -148,7 +164,6 @@ public class CraftBlockState implements BlockState {
 
         block.setData(getRawData(), applyPhysics);
         world.getHandle().notify(x, y, z);
-
         return true;
     }
 
@@ -161,14 +176,22 @@ public class CraftBlockState implements BlockState {
         }
     }
 
+    @Override
     public byte getRawData() {
         return data.getData();
     }
 
+    @Override
+    public void setRawData(byte data) {
+        this.data.setData(data);
+    }
+
+    @Override
     public Location getLocation() {
         return new Location(world, x, y, z);
     }
 
+    @Override
     public Location getLocation(Location loc) {
         if (loc != null) {
             loc.setWorld(world);
@@ -182,8 +205,24 @@ public class CraftBlockState implements BlockState {
         return loc;
     }
 
-    public void setRawData(byte data) {
-        this.data.setData(data);
+    @Override
+    public void setMetadata(String metadataKey, MetadataValue newMetadataValue) {
+        chunk.getCraftWorld().getBlockMetadata().setMetadata(getBlock(), metadataKey, newMetadataValue);
+    }
+
+    @Override
+    public List<MetadataValue> getMetadata(String metadataKey) {
+        return chunk.getCraftWorld().getBlockMetadata().getMetadata(getBlock(), metadataKey);
+    }
+
+    @Override
+    public boolean hasMetadata(String metadataKey) {
+        return chunk.getCraftWorld().getBlockMetadata().hasMetadata(getBlock(), metadataKey);
+    }
+
+    @Override
+    public void removeMetadata(String metadataKey, Plugin owningPlugin) {
+        chunk.getCraftWorld().getBlockMetadata().removeMetadata(getBlock(), metadataKey, owningPlugin);
     }
 
     @Override
@@ -191,29 +230,33 @@ public class CraftBlockState implements BlockState {
         if (obj == null) {
             return false;
         }
+
         if (getClass() != obj.getClass()) {
             return false;
         }
+
         final CraftBlockState other = (CraftBlockState) obj;
         if (this.world != other.world && (this.world == null || !this.world.equals(other.world))) {
             return false;
         }
+
         if (this.x != other.x) {
             return false;
         }
+
         if (this.y != other.y) {
             return false;
         }
+
         if (this.z != other.z) {
             return false;
         }
+
         if (this.type != other.type) {
             return false;
         }
-        if (this.data != other.data && (this.data == null || !this.data.equals(other.data))) {
-            return false;
-        }
-        return true;
+
+        return !(this.data != other.data && (this.data == null || !this.data.equals(other.data)));
     }
 
     @Override
@@ -227,20 +270,4 @@ public class CraftBlockState implements BlockState {
         hash = 73 * hash + (this.data != null ? this.data.hashCode() : 0);
         return hash;
     }
-
-    public void setMetadata(String metadataKey, MetadataValue newMetadataValue) {
-        chunk.getCraftWorld().getBlockMetadata().setMetadata(getBlock(), metadataKey, newMetadataValue);
-    }
-
-    public List<MetadataValue> getMetadata(String metadataKey) {
-        return chunk.getCraftWorld().getBlockMetadata().getMetadata(getBlock(), metadataKey);
-    }
-
-    public boolean hasMetadata(String metadataKey) {
-        return chunk.getCraftWorld().getBlockMetadata().hasMetadata(getBlock(), metadataKey);
-    }
-
-    public void removeMetadata(String metadataKey, Plugin owningPlugin) {
-        chunk.getCraftWorld().getBlockMetadata().removeMetadata(getBlock(), metadataKey, owningPlugin);
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftBrewingStand.java b/src/main/java/org/bukkit/craftbukkit/block/CraftBrewingStand.java
index d306c3a..59c8d60 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftBrewingStand.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftBrewingStand.java
@@ -8,14 +8,15 @@ import org.bukkit.craftbukkit.inventory.CraftInventoryBrewer;
 import org.bukkit.inventory.BrewerInventory;
 
 public class CraftBrewingStand extends CraftBlockState implements BrewingStand {
+
     private final TileEntityBrewingStand brewingStand;
 
     public CraftBrewingStand(Block block) {
         super(block);
-
         brewingStand = (TileEntityBrewingStand) ((CraftWorld) block.getWorld()).getTileEntityAt(getX(), getY(), getZ());
     }
 
+    @Override
     public BrewerInventory getInventory() {
         return new CraftInventoryBrewer(brewingStand);
     }
@@ -23,7 +24,6 @@ public class CraftBrewingStand extends CraftBlockState implements BrewingStand {
     @Override
     public boolean update(boolean force, boolean applyPhysics) {
         boolean result = super.update(force, applyPhysics);
-
         if (result) {
             brewingStand.update();
         }
@@ -31,10 +31,12 @@ public class CraftBrewingStand extends CraftBlockState implements BrewingStand {
         return result;
     }
 
+    @Override
     public int getBrewingTime() {
         return brewingStand.brewTime;
     }
 
+    @Override
     public void setBrewingTime(int brewTime) {
         brewingStand.brewTime = brewTime;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftChest.java b/src/main/java/org/bukkit/craftbukkit/block/CraftChest.java
index 21f7b73..71c5b63 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftChest.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftChest.java
@@ -1,7 +1,6 @@
 package org.bukkit.craftbukkit.block;
 
 import net.minecraft.server.TileEntityChest;
-
 import org.bukkit.Material;
 import org.bukkit.block.Block;
 import org.bukkit.block.Chest;
@@ -11,24 +10,27 @@ import org.bukkit.craftbukkit.inventory.CraftInventoryDoubleChest;
 import org.bukkit.inventory.Inventory;
 
 public class CraftChest extends CraftBlockState implements Chest {
+
     private final CraftWorld world;
     private final TileEntityChest chest;
 
     public CraftChest(final Block block) {
         super(block);
-
         world = (CraftWorld) block.getWorld();
         chest = (TileEntityChest) world.getTileEntityAt(getX(), getY(), getZ());
     }
 
+    @Override
     public Inventory getBlockInventory() {
         return new CraftInventory(chest);
     }
 
+    @Override
     public Inventory getInventory() {
         int x = getX();
         int y = getY();
         int z = getZ();
+
         // The logic here is basically identical to the logic in BlockChest.interact
         CraftInventory inventory = new CraftInventory(chest);
         int id;
@@ -41,21 +43,25 @@ public class CraftChest extends CraftBlockState implements Chest {
         }
 
         if (world.getBlockTypeIdAt(x - 1, y, z) == id) {
-            CraftInventory left = new CraftInventory((TileEntityChest)world.getHandle().getTileEntity(x - 1, y, z));
+            CraftInventory left = new CraftInventory((TileEntityChest) world.getHandle().getTileEntity(x - 1, y, z));
             inventory = new CraftInventoryDoubleChest(left, inventory);
         }
+
         if (world.getBlockTypeIdAt(x + 1, y, z) == id) {
             CraftInventory right = new CraftInventory((TileEntityChest) world.getHandle().getTileEntity(x + 1, y, z));
             inventory = new CraftInventoryDoubleChest(inventory, right);
         }
+
         if (world.getBlockTypeIdAt(x, y, z - 1) == id) {
             CraftInventory left = new CraftInventory((TileEntityChest) world.getHandle().getTileEntity(x, y, z - 1));
             inventory = new CraftInventoryDoubleChest(left, inventory);
         }
+
         if (world.getBlockTypeIdAt(x, y, z + 1) == id) {
             CraftInventory right = new CraftInventory((TileEntityChest) world.getHandle().getTileEntity(x, y, z + 1));
             inventory = new CraftInventoryDoubleChest(inventory, right);
         }
+
         return inventory;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftCommandBlock.java b/src/main/java/org/bukkit/craftbukkit/block/CraftCommandBlock.java
index 57af2bc..b5b6a35 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftCommandBlock.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftCommandBlock.java
@@ -6,7 +6,9 @@ import org.bukkit.block.CommandBlock;
 import org.bukkit.craftbukkit.CraftWorld;
 
 public class CraftCommandBlock extends CraftBlockState implements CommandBlock {
+
     private final TileEntityCommand commandBlock;
+
     private String command;
     private String name;
 
@@ -19,22 +21,27 @@ public class CraftCommandBlock extends CraftBlockState implements CommandBlock {
         name = commandBlock.getCommandBlock().getName();
     }
 
+    @Override
     public String getCommand() {
         return command;
     }
 
+    @Override
     public void setCommand(String command) {
         this.command = command != null ? command : "";
     }
 
+    @Override
     public String getName() {
         return name;
     }
 
+    @Override
     public void setName(String name) {
         this.name = name != null ? name : "@";
     }
 
+    @Override
     public boolean update(boolean force, boolean applyPhysics) {
         boolean result = super.update(force, applyPhysics);
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftCreatureSpawner.java b/src/main/java/org/bukkit/craftbukkit/block/CraftCreatureSpawner.java
index fa4c0a9..2a98e80 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftCreatureSpawner.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftCreatureSpawner.java
@@ -1,7 +1,6 @@
 package org.bukkit.craftbukkit.block;
 
 import net.minecraft.server.TileEntityMobSpawner;
-
 import org.bukkit.block.Block;
 import org.bukkit.block.CreatureSpawner;
 import org.bukkit.craftbukkit.CraftWorld;
@@ -9,6 +8,7 @@ import org.bukkit.entity.CreatureType;
 import org.bukkit.entity.EntityType;
 
 public class CraftCreatureSpawner extends CraftBlockState implements CreatureSpawner {
+
     private final TileEntityMobSpawner spawner;
 
     public CraftCreatureSpawner(final Block block) {
@@ -22,15 +22,17 @@ public class CraftCreatureSpawner extends CraftBlockState implements CreatureSpa
         return CreatureType.fromName(spawner.getSpawner().getMobName());
     }
 
-    public EntityType getSpawnedType() {
-        return EntityType.fromName(spawner.getSpawner().getMobName());
-    }
-
     @Deprecated
     public void setCreatureType(CreatureType creatureType) {
         spawner.getSpawner().setMobName(creatureType.getName());
     }
 
+    @Override
+    public EntityType getSpawnedType() {
+        return EntityType.fromName(spawner.getSpawner().getMobName());
+    }
+
+    @Override
     public void setSpawnedType(EntityType entityType) {
         if (entityType == null || entityType.getName() == null) {
             throw new IllegalArgumentException("Can't spawn EntityType " + entityType + " from mobspawners!");
@@ -49,25 +51,29 @@ public class CraftCreatureSpawner extends CraftBlockState implements CreatureSpa
         setCreatureTypeByName(creatureName);
     }
 
+    @Override
     public String getCreatureTypeName() {
         return spawner.getSpawner().getMobName();
     }
 
+    @Override
     public void setCreatureTypeByName(String creatureType) {
         // Verify input
         EntityType type = EntityType.fromName(creatureType);
         if (type == null) {
             return;
         }
+
         setSpawnedType(type);
     }
 
+    @Override
     public int getDelay() {
         return spawner.getSpawner().spawnDelay;
     }
 
+    @Override
     public void setDelay(int delay) {
         spawner.getSpawner().spawnDelay = delay;
     }
-
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftDispenser.java b/src/main/java/org/bukkit/craftbukkit/block/CraftDispenser.java
index 762a8e6..8c21f00 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftDispenser.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftDispenser.java
@@ -3,7 +3,6 @@ package org.bukkit.craftbukkit.block;
 import net.minecraft.server.BlockDispenser;
 import net.minecraft.server.Blocks;
 import net.minecraft.server.TileEntityDispenser;
-
 import org.bukkit.Material;
 import org.bukkit.block.Block;
 import org.bukkit.block.Dispenser;
@@ -14,6 +13,7 @@ import org.bukkit.inventory.Inventory;
 import org.bukkit.projectiles.BlockProjectileSource;
 
 public class CraftDispenser extends CraftBlockState implements Dispenser {
+
     private final CraftWorld world;
     private final TileEntityDispenser dispenser;
 
@@ -24,10 +24,12 @@ public class CraftDispenser extends CraftBlockState implements Dispenser {
         dispenser = (TileEntityDispenser) world.getTileEntityAt(getX(), getY(), getZ());
     }
 
+    @Override
     public Inventory getInventory() {
         return new CraftInventory(dispenser);
     }
 
+    @Override
     public BlockProjectileSource getBlockProjectileSource() {
         Block block = getBlock();
 
@@ -38,6 +40,7 @@ public class CraftDispenser extends CraftBlockState implements Dispenser {
         return new CraftBlockProjectileSource(dispenser);
     }
 
+    @Override
     public boolean dispense() {
         Block block = getBlock();
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftDropper.java b/src/main/java/org/bukkit/craftbukkit/block/CraftDropper.java
index 6b4ef8a..25f8090 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftDropper.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftDropper.java
@@ -3,7 +3,6 @@ package org.bukkit.craftbukkit.block;
 import net.minecraft.server.BlockDropper;
 import net.minecraft.server.Blocks;
 import net.minecraft.server.TileEntityDropper;
-
 import org.bukkit.Material;
 import org.bukkit.block.Block;
 import org.bukkit.block.Dropper;
@@ -12,6 +11,7 @@ import org.bukkit.craftbukkit.inventory.CraftInventory;
 import org.bukkit.inventory.Inventory;
 
 public class CraftDropper extends CraftBlockState implements Dropper {
+
     private final CraftWorld world;
     private final TileEntityDropper dropper;
 
@@ -22,10 +22,12 @@ public class CraftDropper extends CraftBlockState implements Dropper {
         dropper = (TileEntityDropper) world.getTileEntityAt(getX(), getY(), getZ());
     }
 
+    @Override
     public Inventory getInventory() {
         return new CraftInventory(dropper);
     }
 
+    @Override
     public void drop() {
         Block block = getBlock();
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftFurnace.java b/src/main/java/org/bukkit/craftbukkit/block/CraftFurnace.java
index 8c548f1..181e016 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftFurnace.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftFurnace.java
@@ -8,6 +8,7 @@ import org.bukkit.craftbukkit.inventory.CraftInventoryFurnace;
 import org.bukkit.inventory.FurnaceInventory;
 
 public class CraftFurnace extends CraftBlockState implements Furnace {
+
     private final TileEntityFurnace furnace;
 
     public CraftFurnace(final Block block) {
@@ -16,6 +17,7 @@ public class CraftFurnace extends CraftBlockState implements Furnace {
         furnace = (TileEntityFurnace) ((CraftWorld) block.getWorld()).getTileEntityAt(getX(), getY(), getZ());
     }
 
+    @Override
     public FurnaceInventory getInventory() {
         return new CraftInventoryFurnace(furnace);
     }
@@ -31,18 +33,22 @@ public class CraftFurnace extends CraftBlockState implements Furnace {
         return result;
     }
 
+    @Override
     public short getBurnTime() {
         return (short) furnace.burnTime;
     }
 
+    @Override
     public void setBurnTime(short burnTime) {
         furnace.burnTime = burnTime;
     }
 
+    @Override
     public short getCookTime() {
         return (short) furnace.cookTime;
     }
 
+    @Override
     public void setCookTime(short cookTime) {
         furnace.cookTime = cookTime;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftHopper.java b/src/main/java/org/bukkit/craftbukkit/block/CraftHopper.java
index a46c472..b0bcc22 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftHopper.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftHopper.java
@@ -8,6 +8,7 @@ import org.bukkit.craftbukkit.inventory.CraftInventory;
 import org.bukkit.inventory.Inventory;
 
 public class CraftHopper extends CraftBlockState implements Hopper {
+
     private final TileEntityHopper hopper;
 
     public CraftHopper(final Block block) {
@@ -16,6 +17,7 @@ public class CraftHopper extends CraftBlockState implements Hopper {
         hopper = (TileEntityHopper) ((CraftWorld) block.getWorld()).getTileEntityAt(getX(), getY(), getZ());
     }
 
+    @Override
     public Inventory getInventory() {
         return new CraftInventory(hopper);
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftJukebox.java b/src/main/java/org/bukkit/craftbukkit/block/CraftJukebox.java
index 761b76a..2c64b57 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftJukebox.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftJukebox.java
@@ -12,6 +12,7 @@ import org.bukkit.craftbukkit.CraftWorld;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 
 public class CraftJukebox extends CraftBlockState implements Jukebox {
+
     private final CraftWorld world;
     private final TileEntityRecordPlayer jukebox;
 
@@ -28,10 +29,16 @@ public class CraftJukebox extends CraftBlockState implements Jukebox {
         if (record == null) {
             return Material.AIR;
         }
+
         return CraftMagicNumbers.getMaterial(record.getItem());
     }
 
     @Override
+    public boolean isPlaying() {
+        return getRawData() == 1;
+    }
+
+    @Override
     public void setPlaying(Material record) {
         if (record == null || CraftMagicNumbers.getItem(record) == null) {
             record = Material.AIR;
@@ -39,19 +46,19 @@ public class CraftJukebox extends CraftBlockState implements Jukebox {
         } else {
             jukebox.setRecord(new ItemStack(CraftMagicNumbers.getItem(record), 1));
         }
+
         jukebox.update();
+
         if (record == Material.AIR) {
             world.getHandle().setData(getX(), getY(), getZ(), 0, 3);
         } else {
             world.getHandle().setData(getX(), getY(), getZ(), 1, 3);
         }
-        world.playEffect(getLocation(), Effect.RECORD_PLAY, record.getId());
-    }
 
-    public boolean isPlaying() {
-        return getRawData() == 1;
+        world.playEffect(getLocation(), Effect.RECORD_PLAY, record.getId());
     }
 
+    @Override
     public boolean eject() {
         boolean result = isPlaying();
         ((BlockJukeBox) Blocks.JUKEBOX).dropRecord(world.getHandle(), getX(), getY(), getZ());
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftNoteBlock.java b/src/main/java/org/bukkit/craftbukkit/block/CraftNoteBlock.java
index b83e335..d32cc06 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftNoteBlock.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftNoteBlock.java
@@ -1,7 +1,6 @@
 package org.bukkit.craftbukkit.block;
 
 import net.minecraft.server.TileEntityNote;
-
 import org.bukkit.Instrument;
 import org.bukkit.Material;
 import org.bukkit.Note;
@@ -11,6 +10,7 @@ import org.bukkit.craftbukkit.CraftWorld;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 
 public class CraftNoteBlock extends CraftBlockState implements NoteBlock {
+
     private final CraftWorld world;
     private final TileEntityNote note;
 
@@ -21,18 +21,22 @@ public class CraftNoteBlock extends CraftBlockState implements NoteBlock {
         note = (TileEntityNote) world.getTileEntityAt(getX(), getY(), getZ());
     }
 
+    @Override
     public Note getNote() {
         return new Note(note.note);
     }
 
-    public byte getRawNote() {
-        return note.note;
+    @Override
+    public void setNote(Note note) {
+        this.note.note = note.getId();
     }
 
-    public void setNote(Note n) {
-        note.note = n.getId();
+    @Override
+    public byte getRawNote() {
+        return note.note;
     }
 
+    @Override
     public void setRawNote(byte n) {
         note.note = n;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftSign.java b/src/main/java/org/bukkit/craftbukkit/block/CraftSign.java
index 1533dd4..c7b5c60 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftSign.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftSign.java
@@ -6,6 +6,7 @@ import org.bukkit.block.Sign;
 import org.bukkit.craftbukkit.CraftWorld;
 
 public class CraftSign extends CraftBlockState implements Sign {
+
     private final TileEntitySign sign;
     private final String[] lines;
 
@@ -19,19 +20,36 @@ public class CraftSign extends CraftBlockState implements Sign {
             lines = new String[]{"", "", "", ""};
             return;
         }
+
         // Spigot end
         lines = new String[sign.lines.length];
         System.arraycopy(sign.lines, 0, lines, 0, lines.length);
     }
 
+    public static String[] sanitizeLines(String[] lines) {
+        String[] astring = new String[4];
+        for (int i = 0; i < 4; i++) {
+            if (i < lines.length && lines[i] != null) {
+                astring[i] = lines[i];
+            } else {
+                astring[i] = "";
+            }
+        }
+
+        return TileEntitySign.sanitizeLines(astring);
+    }
+
+    @Override
     public String[] getLines() {
         return lines;
     }
 
+    @Override
     public String getLine(int index) throws IndexOutOfBoundsException {
         return lines[index];
     }
 
+    @Override
     public void setLine(int index, String line) throws IndexOutOfBoundsException {
         lines[index] = line;
     }
@@ -47,18 +65,4 @@ public class CraftSign extends CraftBlockState implements Sign {
 
         return result;
     }
-
-    public static String[] sanitizeLines(String[] lines) {
-        String[] astring = new String[4];
-
-        for (int i = 0; i < 4; i++) {
-            if (i < lines.length && lines[i] != null) {
-                astring[i] = lines[i];
-            } else {
-                astring[i] = "";
-            }
-        }
-
-        return TileEntitySign.sanitizeLines(astring);
-    }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftSkull.java b/src/main/java/org/bukkit/craftbukkit/block/CraftSkull.java
index dc9a587..e4a4b08 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftSkull.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftSkull.java
@@ -3,7 +3,6 @@ package org.bukkit.craftbukkit.block;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.TileEntitySkull;
 import net.minecraft.util.com.mojang.authlib.GameProfile;
-
 import org.bukkit.SkullType;
 import org.bukkit.block.Block;
 import org.bukkit.block.BlockFace;
@@ -11,8 +10,10 @@ import org.bukkit.block.Skull;
 import org.bukkit.craftbukkit.CraftWorld;
 
 public class CraftSkull extends CraftBlockState implements Skull {
+
     private static final int MAX_OWNER_LENGTH = 16;
     private final TileEntitySkull skull;
+
     private GameProfile profile;
     private SkullType skullType;
     private byte rotation;
@@ -45,7 +46,7 @@ public class CraftSkull extends CraftBlockState implements Skull {
     }
 
     static int getSkullType(SkullType type) {
-        switch(type) {
+        switch (type) {
             case SKELETON:
                 return 0;
             case WITHER:
@@ -139,14 +140,17 @@ public class CraftSkull extends CraftBlockState implements Skull {
         }
     }
 
+    @Override
     public boolean hasOwner() {
         return profile != null;
     }
 
+    @Override
     public String getOwner() {
         return hasOwner() ? profile.getName() : null;
     }
 
+    @Override
     public boolean setOwner(String name) {
         if (name == null || name.length() > MAX_OWNER_LENGTH) {
             return false;
@@ -165,18 +169,22 @@ public class CraftSkull extends CraftBlockState implements Skull {
         return true;
     }
 
+    @Override
     public BlockFace getRotation() {
-    	return getBlockFace(rotation);
+        return getBlockFace(rotation);
     }
 
+    @Override
     public void setRotation(BlockFace rotation) {
         this.rotation = getBlockFace(rotation);
     }
 
+    @Override
     public SkullType getSkullType() {
         return skullType;
     }
 
+    @Override
     public void setSkullType(SkullType skullType) {
         this.skullType = skullType;
 
diff --git a/src/main/java/org/bukkit/craftbukkit/chunkio/ChunkIOExecutor.java b/src/main/java/org/bukkit/craftbukkit/chunkio/ChunkIOExecutor.java
index e4fd9bc..e8130b9 100644
--- a/src/main/java/org/bukkit/craftbukkit/chunkio/ChunkIOExecutor.java
+++ b/src/main/java/org/bukkit/craftbukkit/chunkio/ChunkIOExecutor.java
@@ -7,6 +7,7 @@ import net.minecraft.server.World;
 import org.bukkit.craftbukkit.util.AsynchronousExecutor;
 
 public class ChunkIOExecutor {
+
     static final int BASE_THREADS = 1;
     static final int PLAYERS_PER_THREAD = 50;
 
diff --git a/src/main/java/org/bukkit/craftbukkit/chunkio/ChunkIOProvider.java b/src/main/java/org/bukkit/craftbukkit/chunkio/ChunkIOProvider.java
index c249e77..3bcddeb 100644
--- a/src/main/java/org/bukkit/craftbukkit/chunkio/ChunkIOProvider.java
+++ b/src/main/java/org/bukkit/craftbukkit/chunkio/ChunkIOProvider.java
@@ -3,14 +3,15 @@ package org.bukkit.craftbukkit.chunkio;
 import net.minecraft.server.Chunk;
 import net.minecraft.server.ChunkRegionLoader;
 import net.minecraft.server.NBTTagCompound;
-
 import org.bukkit.Server;
 import org.bukkit.craftbukkit.util.AsynchronousExecutor;
 import org.bukkit.craftbukkit.util.LongHash;
 
+import javax.annotation.Nonnull;
 import java.util.concurrent.atomic.AtomicInteger;
 
 class ChunkIOProvider implements AsynchronousExecutor.CallBackProvider<QueuedChunk, Chunk, Runnable, RuntimeException> {
+
     private final AtomicInteger threadNumber = new AtomicInteger(1);
 
     // async stuff
@@ -72,7 +73,7 @@ class ChunkIOProvider implements AsynchronousExecutor.CallBackProvider<QueuedChu
         runnable.run();
     }
 
-    public Thread newThread(Runnable runnable) {
+    public Thread newThread(@Nonnull Runnable runnable) {
         Thread thread = new Thread(runnable, "Chunk I/O Executor Thread-" + threadNumber.getAndIncrement());
         thread.setDaemon(true);
         return thread;
diff --git a/src/main/java/org/bukkit/craftbukkit/chunkio/QueuedChunk.java b/src/main/java/org/bukkit/craftbukkit/chunkio/QueuedChunk.java
index 842d424..1e2de83 100644
--- a/src/main/java/org/bukkit/craftbukkit/chunkio/QueuedChunk.java
+++ b/src/main/java/org/bukkit/craftbukkit/chunkio/QueuedChunk.java
@@ -6,11 +6,13 @@ import net.minecraft.server.NBTTagCompound;
 import net.minecraft.server.World;
 
 class QueuedChunk {
+
     final int x;
     final int z;
     final ChunkRegionLoader loader;
     final World world;
     final ChunkProviderServer provider;
+
     NBTTagCompound compound;
 
     public QueuedChunk(int x, int z, ChunkRegionLoader loader, World world, ChunkProviderServer provider) {
@@ -22,11 +24,6 @@ class QueuedChunk {
     }
 
     @Override
-    public int hashCode() {
-        return (x * 31 + z * 29) ^ world.hashCode();
-    }
-
-    @Override
     public boolean equals(Object object) {
         if (object instanceof QueuedChunk) {
             QueuedChunk other = (QueuedChunk) object;
@@ -35,4 +32,9 @@ class QueuedChunk {
 
         return false;
     }
+
+    @Override
+    public int hashCode() {
+        return (x * 31 + z * 29) ^ world.hashCode();
+    }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/command/ColouredConsoleSender.java b/src/main/java/org/bukkit/craftbukkit/command/ColouredConsoleSender.java
index 26a2fb8..a0f646a 100644
--- a/src/main/java/org/bukkit/craftbukkit/command/ColouredConsoleSender.java
+++ b/src/main/java/org/bukkit/craftbukkit/command/ColouredConsoleSender.java
@@ -1,18 +1,18 @@
 package org.bukkit.craftbukkit.command;
 
-import java.util.EnumMap;
-import java.util.Map;
-
-import org.fusesource.jansi.Ansi;
-import org.fusesource.jansi.Ansi.Attribute;
 import jline.Terminal;
-
 import org.bukkit.Bukkit;
 import org.bukkit.ChatColor;
 import org.bukkit.command.ConsoleCommandSender;
 import org.bukkit.craftbukkit.CraftServer;
+import org.fusesource.jansi.Ansi;
+import org.fusesource.jansi.Ansi.Attribute;
+
+import java.util.EnumMap;
+import java.util.Map;
 
 public class ColouredConsoleSender extends CraftConsoleCommandSender {
+
     private final Terminal terminal;
     private final Map<ChatColor, String> replacements = new EnumMap<ChatColor, String>(ChatColor.class);
     private final ChatColor[] colors = ChatColor.values();
@@ -45,6 +45,14 @@ public class ColouredConsoleSender extends CraftConsoleCommandSender {
         replacements.put(ChatColor.RESET, Ansi.ansi().a(Attribute.RESET).toString());
     }
 
+    public static ConsoleCommandSender getInstance() {
+        if (Bukkit.getConsoleSender() != null) {
+            return Bukkit.getConsoleSender();
+        } else {
+            return new ColouredConsoleSender();
+        }
+    }
+
     @Override
     public void sendMessage(String message) {
         if (terminal.isAnsiSupported()) {
@@ -63,12 +71,4 @@ public class ColouredConsoleSender extends CraftConsoleCommandSender {
             super.sendMessage(message);
         }
     }
-
-    public static ConsoleCommandSender getInstance() {
-        if (Bukkit.getConsoleSender() != null) {
-            return Bukkit.getConsoleSender();
-        } else {
-            return new ColouredConsoleSender();
-        }
-    }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/command/ConsoleCommandCompleter.java b/src/main/java/org/bukkit/craftbukkit/command/ConsoleCommandCompleter.java
index 7ef5772..71f2e90 100644
--- a/src/main/java/org/bukkit/craftbukkit/command/ConsoleCommandCompleter.java
+++ b/src/main/java/org/bukkit/craftbukkit/command/ConsoleCommandCompleter.java
@@ -1,21 +1,22 @@
 package org.bukkit.craftbukkit.command;
 
-import java.util.List;
-import java.util.concurrent.ExecutionException;
-import java.util.logging.Level;
-
+import jline.console.completer.Completer;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.util.Waitable;
 
-import jline.console.completer.Completer;
+import java.util.List;
+import java.util.concurrent.ExecutionException;
+import java.util.logging.Level;
 
 public class ConsoleCommandCompleter implements Completer {
+
     private final CraftServer server;
 
     public ConsoleCommandCompleter(CraftServer server) {
         this.server = server;
     }
 
+    @Override
     public int complete(final String buffer, final int cursor, final List<CharSequence> candidates) {
         Waitable<List<String>> waitable = new Waitable<List<String>>() {
             @Override
@@ -23,7 +24,9 @@ public class ConsoleCommandCompleter implements Completer {
                 return server.getCommandMap().tabComplete(server.getConsoleSender(), buffer);
             }
         };
+
         this.server.getServer().processQueue.add(waitable);
+
         try {
             List<String> offers = waitable.get();
             if (offers == null) {
@@ -37,11 +40,12 @@ public class ConsoleCommandCompleter implements Completer {
             } else {
                 return cursor - (buffer.length() - lastSpace - 1);
             }
-        } catch (ExecutionException e) {
-            this.server.getLogger().log(Level.WARNING, "Unhandled exception when tab completing", e);
-        } catch (InterruptedException e) {
+        } catch (ExecutionException ex) {
+            this.server.getLogger().log(Level.WARNING, "Unhandled exception when tab completing", ex);
+        } catch (InterruptedException ex) {
             Thread.currentThread().interrupt();
         }
+
         return cursor;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/command/CraftBlockCommandSender.java b/src/main/java/org/bukkit/craftbukkit/command/CraftBlockCommandSender.java
index bdee7d7..62b4e6c 100644
--- a/src/main/java/org/bukkit/craftbukkit/command/CraftBlockCommandSender.java
+++ b/src/main/java/org/bukkit/craftbukkit/command/CraftBlockCommandSender.java
@@ -2,7 +2,6 @@ package org.bukkit.craftbukkit.command;
 
 import net.minecraft.server.ICommandListener;
 import net.minecraft.server.TileEntityCommandListener;
-
 import org.bukkit.block.Block;
 import org.bukkit.command.BlockCommandSender;
 
@@ -10,6 +9,7 @@ import org.bukkit.command.BlockCommandSender;
  * Represents input from a command block
  */
 public class CraftBlockCommandSender extends ServerCommandSender implements BlockCommandSender {
+
     private final TileEntityCommandListener commandBlock;
 
     public CraftBlockCommandSender(TileEntityCommandListener commandBlockListenerAbstract) {
@@ -17,24 +17,30 @@ public class CraftBlockCommandSender extends ServerCommandSender implements Bloc
         this.commandBlock = commandBlockListenerAbstract;
     }
 
+    @Override
     public Block getBlock() {
         return commandBlock.getWorld().getWorld().getBlockAt(commandBlock.getChunkCoordinates().x, commandBlock.getChunkCoordinates().y, commandBlock.getChunkCoordinates().z);
     }
 
+    @Override
     public void sendMessage(String message) {
     }
 
+    @Override
     public void sendMessage(String[] messages) {
     }
 
+    @Override
     public String getName() {
         return commandBlock.getName();
     }
 
+    @Override
     public boolean isOp() {
         return true;
     }
 
+    @Override
     public void setOp(boolean value) {
         throw new UnsupportedOperationException("Cannot change operator status of a block");
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/command/CraftConsoleCommandSender.java b/src/main/java/org/bukkit/craftbukkit/command/CraftConsoleCommandSender.java
index 9abcf92..bfd21a0 100644
--- a/src/main/java/org/bukkit/craftbukkit/command/CraftConsoleCommandSender.java
+++ b/src/main/java/org/bukkit/craftbukkit/command/CraftConsoleCommandSender.java
@@ -18,48 +18,59 @@ public class CraftConsoleCommandSender extends ServerCommandSender implements Co
         super();
     }
 
+    @Override
     public void sendMessage(String message) {
         sendRawMessage(message);
     }
 
+    @Override
     public void sendRawMessage(String message) {
         System.out.println(ChatColor.stripColor(message));
     }
 
+    @Override
     public void sendMessage(String[] messages) {
         for (String message : messages) {
             sendMessage(message);
         }
     }
 
+    @Override
     public String getName() {
         return "CONSOLE";
     }
 
+    @Override
     public boolean isOp() {
         return true;
     }
 
+    @Override
     public void setOp(boolean value) {
         throw new UnsupportedOperationException("Cannot change operator status of server console");
     }
 
+    @Override
     public boolean beginConversation(Conversation conversation) {
         return conversationTracker.beginConversation(conversation);
     }
 
+    @Override
     public void abandonConversation(Conversation conversation) {
         conversationTracker.abandonConversation(conversation, new ConversationAbandonedEvent(conversation, new ManuallyAbandonedConversationCanceller()));
     }
 
+    @Override
     public void abandonConversation(Conversation conversation, ConversationAbandonedEvent details) {
         conversationTracker.abandonConversation(conversation, details);
     }
 
+    @Override
     public void acceptConversationInput(String input) {
         conversationTracker.acceptConversationInput(input);
     }
 
+    @Override
     public boolean isConversing() {
         return conversationTracker.isConversing();
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/command/CraftRemoteConsoleCommandSender.java b/src/main/java/org/bukkit/craftbukkit/command/CraftRemoteConsoleCommandSender.java
index 25d1255..8bff1c7 100644
--- a/src/main/java/org/bukkit/craftbukkit/command/CraftRemoteConsoleCommandSender.java
+++ b/src/main/java/org/bukkit/craftbukkit/command/CraftRemoteConsoleCommandSender.java
@@ -4,6 +4,7 @@ import net.minecraft.server.RemoteControlCommandListener;
 import org.bukkit.command.RemoteConsoleCommandSender;
 
 public class CraftRemoteConsoleCommandSender extends ServerCommandSender implements RemoteConsoleCommandSender {
+
     public CraftRemoteConsoleCommandSender() {
         super();
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/command/ServerCommandSender.java b/src/main/java/org/bukkit/craftbukkit/command/ServerCommandSender.java
index b339cf3..9a7ec5c 100644
--- a/src/main/java/org/bukkit/craftbukkit/command/ServerCommandSender.java
+++ b/src/main/java/org/bukkit/craftbukkit/command/ServerCommandSender.java
@@ -12,7 +12,9 @@ import org.bukkit.plugin.Plugin;
 import java.util.Set;
 
 public abstract class ServerCommandSender implements CommandSender {
+
     private static PermissibleBase blockPermInst;
+
     private final PermissibleBase perm;
 
     public ServerCommandSender() {
@@ -26,46 +28,57 @@ public abstract class ServerCommandSender implements CommandSender {
         }
     }
 
+    @Override
     public boolean isPermissionSet(String name) {
         return perm.isPermissionSet(name);
     }
 
+    @Override
     public boolean isPermissionSet(Permission perm) {
         return this.perm.isPermissionSet(perm);
     }
 
+    @Override
     public boolean hasPermission(String name) {
         return perm.hasPermission(name);
     }
 
+    @Override
     public boolean hasPermission(Permission perm) {
         return this.perm.hasPermission(perm);
     }
 
+    @Override
     public PermissionAttachment addAttachment(Plugin plugin, String name, boolean value) {
         return perm.addAttachment(plugin, name, value);
     }
 
+    @Override
     public PermissionAttachment addAttachment(Plugin plugin) {
         return perm.addAttachment(plugin);
     }
 
+    @Override
     public PermissionAttachment addAttachment(Plugin plugin, String name, boolean value, int ticks) {
         return perm.addAttachment(plugin, name, value, ticks);
     }
 
+    @Override
     public PermissionAttachment addAttachment(Plugin plugin, int ticks) {
         return perm.addAttachment(plugin, ticks);
     }
 
+    @Override
     public void removeAttachment(PermissionAttachment attachment) {
         perm.removeAttachment(attachment);
     }
 
+    @Override
     public void recalculatePermissions() {
         perm.recalculatePermissions();
     }
 
+    @Override
     public Set<PermissionAttachmentInfo> getEffectivePermissions() {
         return perm.getEffectivePermissions();
     }
@@ -74,6 +87,7 @@ public abstract class ServerCommandSender implements CommandSender {
         return false;
     }
 
+    @Override
     public Server getServer() {
         return Bukkit.getServer();
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/command/VanillaCommandWrapper.java b/src/main/java/org/bukkit/craftbukkit/command/VanillaCommandWrapper.java
index 5909613..7486dd7 100644
--- a/src/main/java/org/bukkit/craftbukkit/command/VanillaCommandWrapper.java
+++ b/src/main/java/org/bukkit/craftbukkit/command/VanillaCommandWrapper.java
@@ -1,7 +1,5 @@
 package org.bukkit.craftbukkit.command;
 
-import java.util.List;
-
 import net.minecraft.server.ChatMessage;
 import net.minecraft.server.CommandAbstract;
 import net.minecraft.server.CommandBlockListenerAbstract;
@@ -17,21 +15,23 @@ import net.minecraft.server.PlayerSelector;
 import net.minecraft.server.RemoteControlCommandListener;
 import net.minecraft.server.TileEntityCommandListener;
 import net.minecraft.server.WorldServer;
-
 import org.apache.commons.lang.Validate;
 import org.apache.logging.log4j.Level;
 import org.bukkit.command.BlockCommandSender;
 import org.bukkit.command.CommandSender;
 import org.bukkit.command.ConsoleCommandSender;
 import org.bukkit.command.RemoteConsoleCommandSender;
-import org.bukkit.command.defaults.*;
+import org.bukkit.command.defaults.VanillaCommand;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.entity.CraftMinecartCommand;
 import org.bukkit.craftbukkit.entity.CraftPlayer;
 import org.bukkit.entity.Player;
 import org.bukkit.entity.minecart.CommandMinecart;
 
+import java.util.List;
+
 public final class VanillaCommandWrapper extends VanillaCommand {
+
     protected final CommandAbstract vanillaCommand;
 
     public VanillaCommandWrapper(CommandAbstract vanillaCommand) {
@@ -59,7 +59,7 @@ public final class VanillaCommandWrapper extends VanillaCommand {
         try {
             vanillaCommand.execute(icommandlistener, args);
         } catch (ExceptionUsage exceptionusage) {
-            ChatMessage chatmessage = new ChatMessage("commands.generic.usage", new Object[] {new ChatMessage(exceptionusage.getMessage(), exceptionusage.getArgs())});
+            ChatMessage chatmessage = new ChatMessage("commands.generic.usage", new ChatMessage(exceptionusage.getMessage(), exceptionusage.getArgs()));
             chatmessage.getChatModifier().setColor(EnumChatFormat.RED);
             icommandlistener.sendMessage(chatmessage);
         } catch (CommandException commandexception) {
@@ -86,10 +86,12 @@ public final class VanillaCommandWrapper extends VanillaCommand {
         if (s.startsWith("/")) {
             s = s.substring(1);
         }
+
         String as[] = s.split(" ");
         as = dropFirstArgument(as);
         int i = getPlayerListSize(as);
         int j = 0;
+
         // Some commands use the worldserver variable but we leave it full of null values,
         // so we must temporarily populate it with the world of the commandsender
         WorldServer[] prev = MinecraftServer.getServer().worldServer;
@@ -99,15 +101,11 @@ public final class VanillaCommandWrapper extends VanillaCommand {
                 if (i > -1) {
                     EntityPlayer aentityplayer[] = PlayerSelector.getPlayers(icommandlistener, as[i]);
                     String s2 = as[i];
-                    EntityPlayer aentityplayer1[] = aentityplayer;
-                    int k = aentityplayer1.length;
-                    for (int l = 0; l < k;l++) {
-                        EntityPlayer entityplayer = aentityplayer1[l];
+                    for (EntityPlayer entityplayer : aentityplayer) {
                         as[i] = entityplayer.getName();
                         try {
                             vanillaCommand.execute(icommandlistener, as);
                             j++;
-                            continue;
                         } catch (CommandException commandexception1) {
                             ChatMessage chatmessage4 = new ChatMessage(commandexception1.getMessage(), commandexception1.getArgs());
                             chatmessage4.getChatModifier().setColor(EnumChatFormat.RED);
@@ -121,12 +119,12 @@ public final class VanillaCommandWrapper extends VanillaCommand {
                     j++;
                 }
             } else {
-                ChatMessage chatmessage = new ChatMessage("commands.generic.permission", new Object[0]);
+                ChatMessage chatmessage = new ChatMessage("commands.generic.permission");
                 chatmessage.getChatModifier().setColor(EnumChatFormat.RED);
                 icommandlistener.sendMessage(chatmessage);
             }
         } catch (ExceptionUsage exceptionusage) {
-            ChatMessage chatmessage1 = new ChatMessage("commands.generic.usage", new Object[] { new ChatMessage(exceptionusage.getMessage(), exceptionusage.getArgs()) });
+            ChatMessage chatmessage1 = new ChatMessage("commands.generic.usage", new ChatMessage(exceptionusage.getMessage(), exceptionusage.getArgs()));
             chatmessage1.getChatModifier().setColor(EnumChatFormat.RED);
             icommandlistener.sendMessage(chatmessage1);
         } catch (CommandException commandexception) {
@@ -134,21 +132,22 @@ public final class VanillaCommandWrapper extends VanillaCommand {
             chatmessage2.getChatModifier().setColor(EnumChatFormat.RED);
             icommandlistener.sendMessage(chatmessage2);
         } catch (Throwable throwable) {
-            ChatMessage chatmessage3 = new ChatMessage("commands.generic.exception", new Object[0]);
+            ChatMessage chatmessage3 = new ChatMessage("commands.generic.exception");
             chatmessage3.getChatModifier().setColor(EnumChatFormat.RED);
             icommandlistener.sendMessage(chatmessage3);
-            if(icommandlistener instanceof TileEntityCommandListener) {
+            if (icommandlistener instanceof TileEntityCommandListener) {
                 TileEntityCommandListener listener = (TileEntityCommandListener) icommandlistener;
                 MinecraftServer.getLogger().log(Level.WARN, String.format("CommandBlock at (%d,%d,%d) failed to handle command", listener.getChunkCoordinates().x, listener.getChunkCoordinates().y, listener.getChunkCoordinates().z), throwable);
             } else if (icommandlistener instanceof EntityMinecartCommandBlockListener) {
                 EntityMinecartCommandBlockListener listener = (EntityMinecartCommandBlockListener) icommandlistener;
                 MinecraftServer.getLogger().log(Level.WARN, String.format("MinecartCommandBlock at (%d,%d,%d) failed to handle command", listener.getChunkCoordinates().x, listener.getChunkCoordinates().y, listener.getChunkCoordinates().z), throwable);
             } else {
-                MinecraftServer.getLogger().log(Level.WARN, String.format("Unknown CommandBlock failed to handle command"), throwable);
+                MinecraftServer.getLogger().log(Level.WARN, "Unknown CommandBlock failed to handle command", throwable);
             }
         } finally {
             MinecraftServer.getServer().worldServer = prev;
         }
+
         return j;
     }
 
@@ -156,18 +155,23 @@ public final class VanillaCommandWrapper extends VanillaCommand {
         if (sender instanceof Player) {
             return ((CraftPlayer) sender).getHandle();
         }
+
         if (sender instanceof BlockCommandSender) {
             return ((CraftBlockCommandSender) sender).getTileEntity();
         }
+
         if (sender instanceof CommandMinecart) {
             return ((EntityMinecartCommandBlock) ((CraftMinecartCommand) sender).getHandle()).getCommandBlock();
         }
+
         if (sender instanceof RemoteConsoleCommandSender) {
             return RemoteControlCommandListener.instance;
         }
+
         if (sender instanceof ConsoleCommandSender) {
             return ((CraftServer) sender.getServer()).getServer();
         }
+
         return null;
     }
 
@@ -177,15 +181,13 @@ public final class VanillaCommandWrapper extends VanillaCommand {
                 return i;
             }
         }
+
         return -1;
     }
 
     private String[] dropFirstArgument(String as[]) {
         String as1[] = new String[as.length - 1];
-        for (int i = 1; i < as.length; i++) {
-            as1[i - 1] = as[i];
-        }
-
+        System.arraycopy(as, 1, as1, 0, as.length - 1);
         return as1;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/conversations/ConversationTracker.java b/src/main/java/org/bukkit/craftbukkit/conversations/ConversationTracker.java
index 30ef7d9..7ceea6f 100644
--- a/src/main/java/org/bukkit/craftbukkit/conversations/ConversationTracker.java
+++ b/src/main/java/org/bukkit/craftbukkit/conversations/ConversationTracker.java
@@ -1,13 +1,13 @@
 package org.bukkit.craftbukkit.conversations;
 
-import java.util.LinkedList;
-import java.util.logging.Level;
-
 import org.bukkit.Bukkit;
 import org.bukkit.conversations.Conversation;
 import org.bukkit.conversations.ConversationAbandonedEvent;
 import org.bukkit.conversations.ManuallyAbandonedConversationCanceller;
 
+import java.util.LinkedList;
+import java.util.logging.Level;
+
 /**
  */
 public class ConversationTracker {
@@ -23,6 +23,7 @@ public class ConversationTracker {
                 return true;
             }
         }
+
         return true;
     }
 
@@ -31,9 +32,11 @@ public class ConversationTracker {
             if (conversationQueue.getFirst() == conversation) {
                 conversation.abandon(details);
             }
+
             if (conversationQueue.contains(conversation)) {
                 conversationQueue.remove(conversation);
             }
+
             if (!conversationQueue.isEmpty()) {
                 conversationQueue.getFirst().outputNextPrompt();
             }
@@ -41,14 +44,13 @@ public class ConversationTracker {
     }
 
     public synchronized void abandonAllConversations() {
-
         LinkedList<Conversation> oldQueue = conversationQueue;
         conversationQueue = new LinkedList<Conversation>();
         for (Conversation conversation : oldQueue) {
             try {
                 conversation.abandon(new ConversationAbandonedEvent(conversation, new ManuallyAbandonedConversationCanceller()));
-            } catch (Throwable t) {
-                Bukkit.getLogger().log(Level.SEVERE, "Unexpected exception while abandoning a conversation", t);
+            } catch (Throwable throwable) {
+                Bukkit.getLogger().log(Level.SEVERE, "Unexpected exception while abandoning a conversation", throwable);
             }
         }
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/enchantments/CraftEnchantment.java b/src/main/java/org/bukkit/craftbukkit/enchantments/CraftEnchantment.java
index 18a6e38..99f1ba2 100644
--- a/src/main/java/org/bukkit/craftbukkit/enchantments/CraftEnchantment.java
+++ b/src/main/java/org/bukkit/craftbukkit/enchantments/CraftEnchantment.java
@@ -14,6 +14,18 @@ public class CraftEnchantment extends Enchantment {
         this.target = target;
     }
 
+    public static net.minecraft.server.Enchantment getRaw(Enchantment enchantment) {
+        if (enchantment instanceof EnchantmentWrapper) {
+            enchantment = ((EnchantmentWrapper) enchantment).getEnchantment();
+        }
+
+        if (enchantment instanceof CraftEnchantment) {
+            return ((CraftEnchantment) enchantment).target;
+        }
+
+        return null;
+    }
+
     @Override
     public int getMaxLevel() {
         return target.getMaxLevel();
@@ -27,28 +39,28 @@ public class CraftEnchantment extends Enchantment {
     @Override
     public EnchantmentTarget getItemTarget() {
         switch (target.slot) {
-        case ALL:
-            return EnchantmentTarget.ALL;
-        case ARMOR:
-            return EnchantmentTarget.ARMOR;
-        case ARMOR_FEET:
-            return EnchantmentTarget.ARMOR_FEET;
-        case ARMOR_HEAD:
-            return EnchantmentTarget.ARMOR_HEAD;
-        case ARMOR_LEGS:
-            return EnchantmentTarget.ARMOR_LEGS;
-        case ARMOR_TORSO:
-            return EnchantmentTarget.ARMOR_TORSO;
-        case DIGGER:
-            return EnchantmentTarget.TOOL;
-        case WEAPON:
-            return EnchantmentTarget.WEAPON;
-        case BOW:
-            return EnchantmentTarget.BOW;
-        case FISHING_ROD:
-            return EnchantmentTarget.FISHING_ROD;
-        default:
-            return null;
+            case ALL:
+                return EnchantmentTarget.ALL;
+            case ARMOR:
+                return EnchantmentTarget.ARMOR;
+            case ARMOR_FEET:
+                return EnchantmentTarget.ARMOR_FEET;
+            case ARMOR_HEAD:
+                return EnchantmentTarget.ARMOR_HEAD;
+            case ARMOR_LEGS:
+                return EnchantmentTarget.ARMOR_LEGS;
+            case ARMOR_TORSO:
+                return EnchantmentTarget.ARMOR_TORSO;
+            case DIGGER:
+                return EnchantmentTarget.TOOL;
+            case WEAPON:
+                return EnchantmentTarget.WEAPON;
+            case BOW:
+                return EnchantmentTarget.BOW;
+            case FISHING_ROD:
+                return EnchantmentTarget.FISHING_ROD;
+            default:
+                return null;
         }
     }
 
@@ -60,69 +72,57 @@ public class CraftEnchantment extends Enchantment {
     @Override
     public String getName() {
         switch (target.id) {
-        case 0:
-            return "PROTECTION_ENVIRONMENTAL";
-        case 1:
-            return "PROTECTION_FIRE";
-        case 2:
-            return "PROTECTION_FALL";
-        case 3:
-            return "PROTECTION_EXPLOSIONS";
-        case 4:
-            return "PROTECTION_PROJECTILE";
-        case 5:
-            return "OXYGEN";
-        case 6:
-            return "WATER_WORKER";
-        case 7:
-            return "THORNS";
-        case 16:
-            return "DAMAGE_ALL";
-        case 17:
-            return "DAMAGE_UNDEAD";
-        case 18:
-            return "DAMAGE_ARTHROPODS";
-        case 19:
-            return "KNOCKBACK";
-        case 20:
-            return "FIRE_ASPECT";
-        case 21:
-            return "LOOT_BONUS_MOBS";
-        case 32:
-            return "DIG_SPEED";
-        case 33:
-            return "SILK_TOUCH";
-        case 34:
-            return "DURABILITY";
-        case 35:
-            return "LOOT_BONUS_BLOCKS";
-        case 48:
-            return "ARROW_DAMAGE";
-        case 49:
-            return "ARROW_KNOCKBACK";
-        case 50:
-            return "ARROW_FIRE";
-        case 51:
-            return "ARROW_INFINITE";
-        case 61:
-            return "LUCK";
-        case 62:
-            return "LURE";
-        default:
-            return "UNKNOWN_ENCHANT_" + target.id;
-        }
-    }
-
-    public static net.minecraft.server.Enchantment getRaw(Enchantment enchantment) {
-        if (enchantment instanceof EnchantmentWrapper) {
-            enchantment = ((EnchantmentWrapper) enchantment).getEnchantment();
+            case 0:
+                return "PROTECTION_ENVIRONMENTAL";
+            case 1:
+                return "PROTECTION_FIRE";
+            case 2:
+                return "PROTECTION_FALL";
+            case 3:
+                return "PROTECTION_EXPLOSIONS";
+            case 4:
+                return "PROTECTION_PROJECTILE";
+            case 5:
+                return "OXYGEN";
+            case 6:
+                return "WATER_WORKER";
+            case 7:
+                return "THORNS";
+            case 16:
+                return "DAMAGE_ALL";
+            case 17:
+                return "DAMAGE_UNDEAD";
+            case 18:
+                return "DAMAGE_ARTHROPODS";
+            case 19:
+                return "KNOCKBACK";
+            case 20:
+                return "FIRE_ASPECT";
+            case 21:
+                return "LOOT_BONUS_MOBS";
+            case 32:
+                return "DIG_SPEED";
+            case 33:
+                return "SILK_TOUCH";
+            case 34:
+                return "DURABILITY";
+            case 35:
+                return "LOOT_BONUS_BLOCKS";
+            case 48:
+                return "ARROW_DAMAGE";
+            case 49:
+                return "ARROW_KNOCKBACK";
+            case 50:
+                return "ARROW_FIRE";
+            case 51:
+                return "ARROW_INFINITE";
+            case 61:
+                return "LUCK";
+            case 62:
+                return "LURE";
+            default:
+                return "UNKNOWN_ENCHANT_" + target.id;
         }
-
-        if (enchantment instanceof CraftEnchantment) {
-            return ((CraftEnchantment) enchantment).target;
-        }
-
-        return null;
     }
 
     @Override
@@ -130,9 +130,11 @@ public class CraftEnchantment extends Enchantment {
         if (other instanceof EnchantmentWrapper) {
             other = ((EnchantmentWrapper) other).getEnchantment();
         }
+
         if (!(other instanceof CraftEnchantment)) {
             return false;
         }
+
         CraftEnchantment ench = (CraftEnchantment) other;
         return !target.a(ench.target);
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/AbstractProjectile.java b/src/main/java/org/bukkit/craftbukkit/entity/AbstractProjectile.java
index 7c16255..ff644a5 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/AbstractProjectile.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/AbstractProjectile.java
@@ -12,12 +12,13 @@ public abstract class AbstractProjectile extends CraftEntity implements Projecti
         doesBounce = false;
     }
 
+    @Override
     public boolean doesBounce() {
         return doesBounce;
     }
 
+    @Override
     public void setBounce(boolean doesBounce) {
         this.doesBounce = doesBounce;
     }
-
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftAgeable.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftAgeable.java
index ce49700..a9ae9e0 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftAgeable.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftAgeable.java
@@ -1,52 +1,60 @@
 package org.bukkit.craftbukkit.entity;
 
 import net.minecraft.server.EntityAgeable;
-
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.Ageable;
 
 public class CraftAgeable extends CraftCreature implements Ageable {
+
     public CraftAgeable(CraftServer server, EntityAgeable entity) {
         super(server, entity);
     }
 
+    @Override
     public int getAge() {
         return getHandle().getAge();
     }
 
+    @Override
     public void setAge(int age) {
         getHandle().setAge(age);
     }
 
-    public void setAgeLock(boolean lock) {
-        getHandle().ageLocked = lock;
-    }
-
+    @Override
     public boolean getAgeLock() {
         return getHandle().ageLocked;
     }
 
+    @Override
+    public void setAgeLock(boolean lock) {
+        getHandle().ageLocked = lock;
+    }
+
+    @Override
     public void setBaby() {
         if (isAdult()) {
             setAge(-24000);
         }
     }
 
+    @Override
     public void setAdult() {
         if (!isAdult()) {
             setAge(0);
         }
     }
 
+    @Override
     public boolean isAdult() {
         return getAge() >= 0;
     }
 
-
+    @Override
     public boolean canBreed() {
         return getAge() == 0;
     }
 
+    @Override
     public void setBreed(boolean breed) {
         if (breed) {
             setAge(0);
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftAmbient.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftAmbient.java
index 086980e..780b9e4 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftAmbient.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftAmbient.java
@@ -6,6 +6,7 @@ import org.bukkit.entity.Ambient;
 import org.bukkit.entity.EntityType;
 
 public class CraftAmbient extends CraftLivingEntity implements Ambient {
+
     public CraftAmbient(CraftServer server, EntityAmbient entity) {
         super(server, entity);
     }
@@ -20,6 +21,7 @@ public class CraftAmbient extends CraftLivingEntity implements Ambient {
         return "CraftAmbient";
     }
 
+    @Override
     public EntityType getType() {
         return EntityType.UNKNOWN;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftArrow.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftArrow.java
index 8c8a173..3ac19eb 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftArrow.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftArrow.java
@@ -1,7 +1,6 @@
 package org.bukkit.craftbukkit.entity;
 
 import net.minecraft.server.EntityArrow;
-
 import org.apache.commons.lang.Validate;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.Arrow;
@@ -11,37 +10,57 @@ import org.bukkit.projectiles.ProjectileSource;
 
 public class CraftArrow extends AbstractProjectile implements Arrow {
 
+    // Spigot start
+    private final Arrow.Spigot spigot = new Arrow.Spigot() {
+        @Override
+        public double getDamage() {
+            return getHandle().e();
+        }
+
+        @Override
+        public void setDamage(double damage) {
+            getHandle().b(damage);
+        }
+    };
+
     public CraftArrow(CraftServer server, EntityArrow entity) {
         super(server, entity);
     }
 
+    @Override
+    public int getKnockbackStrength() {
+        return getHandle().knockbackStrength;
+    }
+
+    @Override
     public void setKnockbackStrength(int knockbackStrength) {
         Validate.isTrue(knockbackStrength >= 0, "Knockback cannot be negative");
         getHandle().setKnockbackStrength(knockbackStrength);
     }
 
-    public int getKnockbackStrength() {
-        return getHandle().knockbackStrength;
-    }
-
+    @Override
     public boolean isCritical() {
         return getHandle().isCritical();
     }
 
+    @Override
     public void setCritical(boolean critical) {
         getHandle().setCritical(critical);
     }
 
+    @Override
     public ProjectileSource getShooter() {
         return getHandle().projectileSource;
     }
 
+    @Override
     public void setShooter(ProjectileSource shooter) {
         if (shooter instanceof LivingEntity) {
             getHandle().shooter = ((CraftLivingEntity) shooter).getHandle();
         } else {
             getHandle().shooter = null;
         }
+
         getHandle().projectileSource = shooter;
     }
 
@@ -55,6 +74,7 @@ public class CraftArrow extends AbstractProjectile implements Arrow {
         return "CraftArrow";
     }
 
+    @Override
     public EntityType getType() {
         return EntityType.ARROW;
     }
@@ -64,6 +84,7 @@ public class CraftArrow extends AbstractProjectile implements Arrow {
         if (getHandle().shooter == null) {
             return null;
         }
+
         return (LivingEntity) getHandle().shooter.getBukkitEntity();
     }
 
@@ -72,24 +93,8 @@ public class CraftArrow extends AbstractProjectile implements Arrow {
         getHandle().shooter = ((CraftLivingEntity) shooter).getHandle();
     }
 
-    // Spigot start
-    private final Arrow.Spigot spigot = new Arrow.Spigot()
-    {
-        @Override
-        public double getDamage()
-        {
-            return getHandle().e();
-        }
-
-        @Override
-        public void setDamage(double damage)
-        {
-            getHandle().b( damage );
-        }
-    };
-
-    public Arrow.Spigot spigot()
-    {
+    @Override
+    public Arrow.Spigot spigot() {
         return spigot;
     }
     // Spigot end
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftBat.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftBat.java
index 76ada1c..d2431ed 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftBat.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftBat.java
@@ -6,6 +6,7 @@ import org.bukkit.entity.Bat;
 import org.bukkit.entity.EntityType;
 
 public class CraftBat extends CraftAmbient implements Bat {
+
     public CraftBat(CraftServer server, EntityBat entity) {
         super(server, entity);
     }
@@ -20,6 +21,7 @@ public class CraftBat extends CraftAmbient implements Bat {
         return "CraftBat";
     }
 
+    @Override
     public EntityType getType() {
         return EntityType.BAT;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftBlaze.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftBlaze.java
index 830d7a8..15ec6fe 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftBlaze.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftBlaze.java
@@ -1,12 +1,12 @@
 package org.bukkit.craftbukkit.entity;
 
 import net.minecraft.server.EntityBlaze;
-
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.Blaze;
 import org.bukkit.entity.EntityType;
 
 public class CraftBlaze extends CraftMonster implements Blaze {
+
     public CraftBlaze(CraftServer server, EntityBlaze entity) {
         super(server, entity);
     }
@@ -21,6 +21,7 @@ public class CraftBlaze extends CraftMonster implements Blaze {
         return "CraftBlaze";
     }
 
+    @Override
     public EntityType getType() {
         return EntityType.BLAZE;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftBoat.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftBoat.java
index 103b9d4..4f45843 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftBoat.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftBoat.java
@@ -11,38 +11,46 @@ public class CraftBoat extends CraftVehicle implements Boat {
         super(server, entity);
     }
 
+    @Override
     public double getMaxSpeed() {
         return getHandle().maxSpeed;
     }
 
+    @Override
     public void setMaxSpeed(double speed) {
         if (speed >= 0D) {
             getHandle().maxSpeed = speed;
         }
     }
 
+    @Override
     public double getOccupiedDeceleration() {
         return getHandle().occupiedDeceleration;
     }
 
+    @Override
     public void setOccupiedDeceleration(double speed) {
         if (speed >= 0D) {
             getHandle().occupiedDeceleration = speed;
         }
     }
 
+    @Override
     public double getUnoccupiedDeceleration() {
         return getHandle().unoccupiedDeceleration;
     }
 
+    @Override
     public void setUnoccupiedDeceleration(double speed) {
         getHandle().unoccupiedDeceleration = speed;
     }
 
+    @Override
     public boolean getWorkOnLand() {
         return getHandle().landBoats;
     }
 
+    @Override
     public void setWorkOnLand(boolean workOnLand) {
         getHandle().landBoats = workOnLand;
     }
@@ -57,6 +65,7 @@ public class CraftBoat extends CraftVehicle implements Boat {
         return "CraftBoat";
     }
 
+    @Override
     public EntityType getType() {
         return EntityType.BOAT;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftCaveSpider.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftCaveSpider.java
index 0648a85..6ccc9ec 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftCaveSpider.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftCaveSpider.java
@@ -1,12 +1,12 @@
 package org.bukkit.craftbukkit.entity;
 
 import net.minecraft.server.EntityCaveSpider;
-
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.CaveSpider;
 import org.bukkit.entity.EntityType;
 
 public class CraftCaveSpider extends CraftSpider implements CaveSpider {
+
     public CraftCaveSpider(CraftServer server, EntityCaveSpider entity) {
         super(server, entity);
     }
@@ -21,6 +21,7 @@ public class CraftCaveSpider extends CraftSpider implements CaveSpider {
         return "CraftCaveSpider";
     }
 
+    @Override
     public EntityType getType() {
         return EntityType.CAVE_SPIDER;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftChicken.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftChicken.java
index d20c219..47fcf1b 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftChicken.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftChicken.java
@@ -1,7 +1,6 @@
 package org.bukkit.craftbukkit.entity;
 
 import net.minecraft.server.EntityChicken;
-
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.Chicken;
 import org.bukkit.entity.EntityType;
@@ -22,6 +21,7 @@ public class CraftChicken extends CraftAnimals implements Chicken {
         return "CraftChicken";
     }
 
+    @Override
     public EntityType getType() {
         return EntityType.CHICKEN;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftComplexLivingEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftComplexLivingEntity.java
index cc115cc..d07aa83 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftComplexLivingEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftComplexLivingEntity.java
@@ -5,6 +5,7 @@ import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.ComplexLivingEntity;
 
 public abstract class CraftComplexLivingEntity extends CraftLivingEntity implements ComplexLivingEntity {
+
     public CraftComplexLivingEntity(CraftServer server, EntityLiving entity) {
         super(server, entity);
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftComplexPart.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftComplexPart.java
index eb1ce79..2c2ca2e 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftComplexPart.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftComplexPart.java
@@ -9,6 +9,7 @@ import org.bukkit.entity.EntityType;
 import org.bukkit.event.entity.EntityDamageEvent;
 
 public class CraftComplexPart extends CraftEntity implements ComplexEntityPart {
+
     public CraftComplexPart(CraftServer server, EntityComplexPart entity) {
         super(server, entity);
     }
@@ -18,13 +19,13 @@ public class CraftComplexPart extends CraftEntity implements ComplexEntityPart {
     }
 
     @Override
-    public void setLastDamageCause(EntityDamageEvent cause) {
-        getParent().setLastDamageCause(cause);
+    public EntityDamageEvent getLastDamageCause() {
+        return getParent().getLastDamageCause();
     }
 
     @Override
-    public EntityDamageEvent getLastDamageCause() {
-        return getParent().getLastDamageCause();
+    public void setLastDamageCause(EntityDamageEvent cause) {
+        getParent().setLastDamageCause(cause);
     }
 
     @Override
@@ -37,6 +38,7 @@ public class CraftComplexPart extends CraftEntity implements ComplexEntityPart {
         return "CraftComplexPart";
     }
 
+    @Override
     public EntityType getType() {
         return EntityType.COMPLEX_PART;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftCow.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftCow.java
index fc48ebd..31bfa02 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftCow.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftCow.java
@@ -1,7 +1,6 @@
 package org.bukkit.craftbukkit.entity;
 
 import net.minecraft.server.EntityCow;
-
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.Cow;
 import org.bukkit.entity.EntityType;
@@ -22,6 +21,7 @@ public class CraftCow extends CraftAnimals implements Cow {
         return "CraftCow";
     }
 
+    @Override
     public EntityType getType() {
         return EntityType.COW;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftCreature.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftCreature.java
index a6c0b94..659a8f1 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftCreature.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftCreature.java
@@ -7,10 +7,20 @@ import org.bukkit.entity.Creature;
 import org.bukkit.entity.LivingEntity;
 
 public class CraftCreature extends CraftLivingEntity implements Creature {
+
     public CraftCreature(CraftServer server, EntityCreature entity) {
         super(server, entity);
     }
 
+    @Override
+    public CraftLivingEntity getTarget() {
+        if (getHandle().target == null) return null;
+        if (!(getHandle().target instanceof EntityLiving)) return null;
+
+        return (CraftLivingEntity) getHandle().target.getBukkitEntity();
+    }
+
+    @Override
     public void setTarget(LivingEntity target) {
         EntityCreature entity = getHandle();
         if (target == null) {
@@ -23,13 +33,6 @@ public class CraftCreature extends CraftLivingEntity implements Creature {
         }
     }
 
-    public CraftLivingEntity getTarget() {
-        if (getHandle().target == null) return null;
-        if (!(getHandle().target instanceof EntityLiving)) return null;
-
-        return (CraftLivingEntity) getHandle().target.getBukkitEntity();
-    }
-
     @Override
     public EntityCreature getHandle() {
         return (EntityCreature) entity;
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftCreeper.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftCreeper.java
index ed771a5..a4ebb79 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftCreeper.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftCreeper.java
@@ -1,7 +1,6 @@
 package org.bukkit.craftbukkit.entity;
 
 import net.minecraft.server.EntityCreeper;
-
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.Creeper;
 import org.bukkit.entity.EntityType;
@@ -13,10 +12,12 @@ public class CraftCreeper extends CraftMonster implements Creeper {
         super(server, entity);
     }
 
+    @Override
     public boolean isPowered() {
         return getHandle().isPowered();
     }
 
+    @Override
     public void setPowered(boolean powered) {
         CraftServer server = this.server;
         Creeper entity = (Creeper) this.getHandle().getBukkitEntity();
@@ -48,6 +49,7 @@ public class CraftCreeper extends CraftMonster implements Creeper {
         return "CraftCreeper";
     }
 
+    @Override
     public EntityType getType() {
         return EntityType.CREEPER;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEgg.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEgg.java
index 60c5188..b058676 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEgg.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEgg.java
@@ -6,6 +6,7 @@ import org.bukkit.entity.Egg;
 import org.bukkit.entity.EntityType;
 
 public class CraftEgg extends CraftProjectile implements Egg {
+
     public CraftEgg(CraftServer server, EntityEgg entity) {
         super(server, entity);
     }
@@ -20,6 +21,7 @@ public class CraftEgg extends CraftProjectile implements Egg {
         return "CraftEgg";
     }
 
+    @Override
     public EntityType getType() {
         return EntityType.EGG;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderCrystal.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderCrystal.java
index 2bcf3a1..59c2661 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderCrystal.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderCrystal.java
@@ -6,6 +6,7 @@ import org.bukkit.entity.EnderCrystal;
 import org.bukkit.entity.EntityType;
 
 public class CraftEnderCrystal extends CraftEntity implements EnderCrystal {
+
     public CraftEnderCrystal(CraftServer server, EntityEnderCrystal entity) {
         super(server, entity);
     }
@@ -20,6 +21,7 @@ public class CraftEnderCrystal extends CraftEntity implements EnderCrystal {
         return "CraftEnderCrystal";
     }
 
+    @Override
     public EntityType getType() {
         return EntityType.ENDER_CRYSTAL;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderDragon.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderDragon.java
index fa0d63a..ee54d0c 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderDragon.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderDragon.java
@@ -2,18 +2,17 @@ package org.bukkit.craftbukkit.entity;
 
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.ImmutableSet.Builder;
-
-import java.util.Set;
-
 import net.minecraft.server.EntityComplexPart;
 import net.minecraft.server.EntityEnderDragon;
-
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.ComplexEntityPart;
 import org.bukkit.entity.EnderDragon;
 import org.bukkit.entity.EntityType;
 
+import java.util.Set;
+
 public class CraftEnderDragon extends CraftComplexLivingEntity implements EnderDragon {
+
     public CraftEnderDragon(CraftServer server, EntityEnderDragon entity) {
         super(server, entity);
     }
@@ -22,6 +21,7 @@ public class CraftEnderDragon extends CraftComplexLivingEntity implements EnderD
         Builder<ComplexEntityPart> builder = ImmutableSet.builder();
 
         for (EntityComplexPart part : getHandle().children) {
+            //TODO:
             builder.add((ComplexEntityPart) part.getBukkitEntity());
         }
 
@@ -38,6 +38,7 @@ public class CraftEnderDragon extends CraftComplexLivingEntity implements EnderD
         return "CraftEnderDragon";
     }
 
+    @Override
     public EntityType getType() {
         return EntityType.ENDER_DRAGON;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderDragonPart.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderDragonPart.java
index 736a460..1bd083d 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderDragonPart.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderDragonPart.java
@@ -8,6 +8,7 @@ import org.bukkit.entity.Entity;
 import org.bukkit.util.NumberConversions;
 
 public class CraftEnderDragonPart extends CraftComplexPart implements EnderDragonPart {
+
     public CraftEnderDragonPart(CraftServer server, EntityComplexPart entity) {
         super(server, entity);
     }
@@ -27,34 +28,42 @@ public class CraftEnderDragonPart extends CraftComplexPart implements EnderDrago
         return "CraftEnderDragonPart";
     }
 
+    @Override
     public void damage(double amount) {
         getParent().damage(amount);
     }
 
+    @Override
     public void damage(double amount, Entity source) {
         getParent().damage(amount, source);
     }
 
+    @Override
     public double getHealth() {
         return getParent().getHealth();
     }
 
+    @Override
     public void setHealth(double health) {
         getParent().setHealth(health);
     }
 
+    @Override
     public double getMaxHealth() {
         return getParent().getMaxHealth();
     }
 
+    @Override
     public void setMaxHealth(double health) {
         getParent().setMaxHealth(health);
     }
 
+    @Override
     public void resetMaxHealth() {
         getParent().resetMaxHealth();
     }
 
+    @Override
     @Deprecated
     public void _INVALID_damage(int amount) {
         damage(amount);
@@ -65,21 +74,25 @@ public class CraftEnderDragonPart extends CraftComplexPart implements EnderDrago
         damage(amount, source);
     }
 
+    @Override
     @Deprecated
     public int _INVALID_getHealth() {
         return NumberConversions.ceil(getHealth());
     }
 
+    @Override
     @Deprecated
     public void _INVALID_setHealth(int health) {
         setHealth(health);
     }
 
+    @Override
     @Deprecated
     public int _INVALID_getMaxHealth() {
         return NumberConversions.ceil(getMaxHealth());
     }
 
+    @Override
     @Deprecated
     public void _INVALID_setMaxHealth(int health) {
         setMaxHealth(health);
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderPearl.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderPearl.java
index f42f9ab..acc7a2c 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderPearl.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderPearl.java
@@ -6,6 +6,7 @@ import org.bukkit.entity.EnderPearl;
 import org.bukkit.entity.EntityType;
 
 public class CraftEnderPearl extends CraftProjectile implements EnderPearl {
+
     public CraftEnderPearl(CraftServer server, EntityEnderPearl entity) {
         super(server, entity);
     }
@@ -20,6 +21,7 @@ public class CraftEnderPearl extends CraftProjectile implements EnderPearl {
         return "CraftEnderPearl";
     }
 
+    @Override
     public EntityType getType() {
         return EntityType.ENDER_PEARL;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderSignal.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderSignal.java
index e3a5081..e20ec80 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderSignal.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderSignal.java
@@ -6,6 +6,7 @@ import org.bukkit.entity.EnderSignal;
 import org.bukkit.entity.EntityType;
 
 public class CraftEnderSignal extends CraftEntity implements EnderSignal {
+
     public CraftEnderSignal(CraftServer server, EntityEnderSignal entity) {
         super(server, entity);
     }
@@ -20,6 +21,7 @@ public class CraftEnderSignal extends CraftEntity implements EnderSignal {
         return "CraftEnderSignal";
     }
 
+    @Override
     public EntityType getType() {
         return EntityType.ENDER_SIGNAL;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderman.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderman.java
index 09a03c0..e556cee 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderman.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderman.java
@@ -1,7 +1,6 @@
 package org.bukkit.craftbukkit.entity;
 
 import net.minecraft.server.EntityEnderman;
-
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.entity.Enderman;
@@ -9,14 +8,17 @@ import org.bukkit.entity.EntityType;
 import org.bukkit.material.MaterialData;
 
 public class CraftEnderman extends CraftMonster implements Enderman {
+
     public CraftEnderman(CraftServer server, EntityEnderman entity) {
         super(server, entity);
     }
 
+    @Override
     public MaterialData getCarriedMaterial() {
         return CraftMagicNumbers.getMaterial(getHandle().getCarried()).getNewData((byte) getHandle().getCarriedData());
     }
 
+    @Override
     public void setCarriedMaterial(MaterialData data) {
         getHandle().setCarried(CraftMagicNumbers.getBlock(data.getItemTypeId()));
         getHandle().setCarriedData(data.getData());
@@ -32,6 +34,7 @@ public class CraftEnderman extends CraftMonster implements Enderman {
         return "CraftEnderman";
     }
 
+    @Override
     public EntityType getType() {
         return EntityType.ENDERMAN;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
index 1c8099d..1015b3b 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
@@ -1,25 +1,32 @@
 package org.bukkit.craftbukkit.entity;
 
-import java.util.List;
-import java.util.UUID;
-
 import net.minecraft.server.*;
-
 import org.bukkit.EntityEffect;
 import org.bukkit.Location;
 import org.bukkit.Server;
 import org.bukkit.World;
 import org.bukkit.craftbukkit.CraftServer;
-import org.bukkit.craftbukkit.CraftWorld;
 import org.bukkit.event.entity.EntityDamageEvent;
 import org.bukkit.event.player.PlayerTeleportEvent.TeleportCause;
 import org.bukkit.metadata.MetadataValue;
 import org.bukkit.plugin.Plugin;
 import org.bukkit.util.Vector;
 
+import java.util.List;
+import java.util.UUID;
+
 public abstract class CraftEntity implements org.bukkit.entity.Entity {
+
     protected final CraftServer server;
     protected Entity entity;
+
+    // Spigot start
+    private final Spigot spigot = new Spigot() {
+        @Override
+        public boolean isInvulnerable() {
+            return getHandle().isInvulnerable();
+        }
+    };
     private EntityDamageEvent lastDamageEvent;
 
     public CraftEntity(final CraftServer server, final Entity entity) {
@@ -34,133 +41,211 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
         if (entity instanceof EntityLiving) {
             // Players
             if (entity instanceof EntityHuman) {
-                if (entity instanceof EntityPlayer) { return new CraftPlayer(server, (EntityPlayer) entity); }
-                else { return new CraftHumanEntity(server, (EntityHuman) entity); }
-            }
-            else if (entity instanceof EntityCreature) {
+                if (entity instanceof EntityPlayer) {
+                    return new CraftPlayer(server, (EntityPlayer) entity);
+                } else {
+                    return new CraftHumanEntity(server, (EntityHuman) entity);
+                }
+            } else if (entity instanceof EntityCreature) {
                 // Animals
                 if (entity instanceof EntityAnimal) {
-                    if (entity instanceof EntityChicken) { return new CraftChicken(server, (EntityChicken) entity); }
-                    else if (entity instanceof EntityCow) {
-                        if (entity instanceof EntityMushroomCow) { return new CraftMushroomCow(server, (EntityMushroomCow) entity); }
-                        else { return new CraftCow(server, (EntityCow) entity); }
-                    }
-                    else if (entity instanceof EntityPig) { return new CraftPig(server, (EntityPig) entity); }
-                    else if (entity instanceof EntityTameableAnimal) {
-                        if (entity instanceof EntityWolf) { return new CraftWolf(server, (EntityWolf) entity); }
-                        else if (entity instanceof EntityOcelot) { return new CraftOcelot(server, (EntityOcelot) entity); }
+                    if (entity instanceof EntityChicken) {
+                        return new CraftChicken(server, (EntityChicken) entity);
+                    } else if (entity instanceof EntityCow) {
+                        if (entity instanceof EntityMushroomCow) {
+                            return new CraftMushroomCow(server, (EntityMushroomCow) entity);
+                        } else {
+                            return new CraftCow(server, (EntityCow) entity);
+                        }
+                    } else if (entity instanceof EntityPig) {
+                        return new CraftPig(server, (EntityPig) entity);
+                    } else if (entity instanceof EntityTameableAnimal) {
+                        if (entity instanceof EntityWolf) {
+                            return new CraftWolf(server, (EntityWolf) entity);
+                        } else if (entity instanceof EntityOcelot) {
+                            return new CraftOcelot(server, (EntityOcelot) entity);
+                        }
+                    } else if (entity instanceof EntitySheep) {
+                        return new CraftSheep(server, (EntitySheep) entity);
+                    } else if (entity instanceof EntityHorse) {
+                        return new CraftHorse(server, (EntityHorse) entity);
+                    } else {
+                        return new CraftAnimals(server, (EntityAnimal) entity);
                     }
-                    else if (entity instanceof EntitySheep) { return new CraftSheep(server, (EntitySheep) entity); }
-                    else if (entity instanceof EntityHorse) { return new CraftHorse(server, (EntityHorse) entity); }
-                    else  { return new CraftAnimals(server, (EntityAnimal) entity); }
                 }
                 // Monsters
                 else if (entity instanceof EntityMonster) {
                     if (entity instanceof EntityZombie) {
-                        if (entity instanceof EntityPigZombie) { return new CraftPigZombie(server, (EntityPigZombie) entity); }
-                        else { return new CraftZombie(server, (EntityZombie) entity); }
+                        if (entity instanceof EntityPigZombie) {
+                            return new CraftPigZombie(server, (EntityPigZombie) entity);
+                        } else {
+                            return new CraftZombie(server, (EntityZombie) entity);
+                        }
+                    } else if (entity instanceof EntityCreeper) {
+                        return new CraftCreeper(server, (EntityCreeper) entity);
+                    } else if (entity instanceof EntityEnderman) {
+                        return new CraftEnderman(server, (EntityEnderman) entity);
+                    } else if (entity instanceof EntitySilverfish) {
+                        return new CraftSilverfish(server, (EntitySilverfish) entity);
+                    } else if (entity instanceof EntityGiantZombie) {
+                        return new CraftGiant(server, (EntityGiantZombie) entity);
+                    } else if (entity instanceof EntitySkeleton) {
+                        return new CraftSkeleton(server, (EntitySkeleton) entity);
+                    } else if (entity instanceof EntityBlaze) {
+                        return new CraftBlaze(server, (EntityBlaze) entity);
+                    } else if (entity instanceof EntityWitch) {
+                        return new CraftWitch(server, (EntityWitch) entity);
+                    } else if (entity instanceof EntityWither) {
+                        return new CraftWither(server, (EntityWither) entity);
+                    } else if (entity instanceof EntitySpider) {
+                        if (entity instanceof EntityCaveSpider) {
+                            return new CraftCaveSpider(server, (EntityCaveSpider) entity);
+                        } else {
+                            return new CraftSpider(server, (EntitySpider) entity);
+                        }
+                    } else {
+                        return new CraftMonster(server, (EntityMonster) entity);
                     }
-                    else if (entity instanceof EntityCreeper) { return new CraftCreeper(server, (EntityCreeper) entity); }
-                    else if (entity instanceof EntityEnderman) { return new CraftEnderman(server, (EntityEnderman) entity); }
-                    else if (entity instanceof EntitySilverfish) { return new CraftSilverfish(server, (EntitySilverfish) entity); }
-                    else if (entity instanceof EntityGiantZombie) { return new CraftGiant(server, (EntityGiantZombie) entity); }
-                    else if (entity instanceof EntitySkeleton) { return new CraftSkeleton(server, (EntitySkeleton) entity); }
-                    else if (entity instanceof EntityBlaze) { return new CraftBlaze(server, (EntityBlaze) entity); }
-                    else if (entity instanceof EntityWitch) { return new CraftWitch(server, (EntityWitch) entity); }
-                    else if (entity instanceof EntityWither) { return new CraftWither(server, (EntityWither) entity); }
-                    else if (entity instanceof EntitySpider) {
-                        if (entity instanceof EntityCaveSpider) { return new CraftCaveSpider(server, (EntityCaveSpider) entity); }
-                        else { return new CraftSpider(server, (EntitySpider) entity); }
-                    }
-
-                    else  { return new CraftMonster(server, (EntityMonster) entity); }
                 }
                 // Water Animals
                 else if (entity instanceof EntityWaterAnimal) {
-                    if (entity instanceof EntitySquid) { return new CraftSquid(server, (EntitySquid) entity); }
-                    else { return new CraftWaterMob(server, (EntityWaterAnimal) entity); }
-                }
-                else if (entity instanceof EntityGolem) {
-                    if (entity instanceof EntitySnowman) { return new CraftSnowman(server, (EntitySnowman) entity); }
-                    else if (entity instanceof EntityIronGolem) { return new CraftIronGolem(server, (EntityIronGolem) entity); }
+                    if (entity instanceof EntitySquid) {
+                        return new CraftSquid(server, (EntitySquid) entity);
+                    } else {
+                        return new CraftWaterMob(server, (EntityWaterAnimal) entity);
+                    }
+                } else if (entity instanceof EntityGolem) {
+                    if (entity instanceof EntitySnowman) {
+                        return new CraftSnowman(server, (EntitySnowman) entity);
+                    } else if (entity instanceof EntityIronGolem) {
+                        return new CraftIronGolem(server, (EntityIronGolem) entity);
+                    }
+                } else if (entity instanceof EntityVillager) {
+                    return new CraftVillager(server, (EntityVillager) entity);
+                } else {
+                    return new CraftCreature(server, (EntityCreature) entity);
                 }
-                else if (entity instanceof EntityVillager) { return new CraftVillager(server, (EntityVillager) entity); }
-                else { return new CraftCreature(server, (EntityCreature) entity); }
             }
             // Slimes are a special (and broken) case
             else if (entity instanceof EntitySlime) {
-                if (entity instanceof EntityMagmaCube) { return new CraftMagmaCube(server, (EntityMagmaCube) entity); }
-                else { return new CraftSlime(server, (EntitySlime) entity); }
+                if (entity instanceof EntityMagmaCube) {
+                    return new CraftMagmaCube(server, (EntityMagmaCube) entity);
+                } else {
+                    return new CraftSlime(server, (EntitySlime) entity);
+                }
             }
             // Flying
             else if (entity instanceof EntityFlying) {
-                if (entity instanceof EntityGhast) { return new CraftGhast(server, (EntityGhast) entity); }
-                else { return new CraftFlying(server, (EntityFlying) entity); }
-            }
-            else if (entity instanceof EntityEnderDragon) {
+                if (entity instanceof EntityGhast) {
+                    return new CraftGhast(server, (EntityGhast) entity);
+                } else {
+                    return new CraftFlying(server, (EntityFlying) entity);
+                }
+            } else if (entity instanceof EntityEnderDragon) {
                 return new CraftEnderDragon(server, (EntityEnderDragon) entity);
             }
             // Ambient
             else if (entity instanceof EntityAmbient) {
-                if (entity instanceof EntityBat) { return new CraftBat(server, (EntityBat) entity); }
-                else { return new CraftAmbient(server, (EntityAmbient) entity); }
+                if (entity instanceof EntityBat) {
+                    return new CraftBat(server, (EntityBat) entity);
+                } else {
+                    return new CraftAmbient(server, (EntityAmbient) entity);
+                }
+            } else {
+                return new CraftLivingEntity(server, (EntityLiving) entity);
             }
-            else  { return new CraftLivingEntity(server, (EntityLiving) entity); }
-        }
-        else if (entity instanceof EntityComplexPart) {
+        } else if (entity instanceof EntityComplexPart) {
             EntityComplexPart part = (EntityComplexPart) entity;
-            if (part.owner instanceof EntityEnderDragon) { return new CraftEnderDragonPart(server, (EntityComplexPart) entity); }
-            else { return new CraftComplexPart(server, (EntityComplexPart) entity); }
-        }
-        else if (entity instanceof EntityExperienceOrb) { return new CraftExperienceOrb(server, (EntityExperienceOrb) entity); }
-        else if (entity instanceof EntityArrow) { return new CraftArrow(server, (EntityArrow) entity); }
-        else if (entity instanceof EntityBoat) { return new CraftBoat(server, (EntityBoat) entity); }
-        else if (entity instanceof EntityProjectile) {
-            if (entity instanceof EntityEgg) { return new CraftEgg(server, (EntityEgg) entity); }
-            else if (entity instanceof EntitySnowball) { return new CraftSnowball(server, (EntitySnowball) entity); }
-            else if (entity instanceof EntityPotion) { return new CraftThrownPotion(server, (EntityPotion) entity); }
-            else if (entity instanceof EntityEnderPearl) { return new CraftEnderPearl(server, (EntityEnderPearl) entity); }
-            else if (entity instanceof EntityThrownExpBottle) { return new CraftThrownExpBottle(server, (EntityThrownExpBottle) entity); }
-        }
-        else if (entity instanceof EntityFallingBlock) { return new CraftFallingSand(server, (EntityFallingBlock) entity); }
-        else if (entity instanceof EntityFireball) {
-            if (entity instanceof EntitySmallFireball) { return new CraftSmallFireball(server, (EntitySmallFireball) entity); }
-            else if (entity instanceof EntityLargeFireball) { return new CraftLargeFireball(server, (EntityLargeFireball) entity); }
-            else if (entity instanceof EntityWitherSkull) { return new CraftWitherSkull(server, (EntityWitherSkull) entity); }
-            else { return new CraftFireball(server, (EntityFireball) entity); }
-        }
-        else if (entity instanceof EntityEnderSignal) { return new CraftEnderSignal(server, (EntityEnderSignal) entity); }
-        else if (entity instanceof EntityEnderCrystal) { return new CraftEnderCrystal(server, (EntityEnderCrystal) entity); }
-        else if (entity instanceof EntityFishingHook) { return new CraftFish(server, (EntityFishingHook) entity); }
-        else if (entity instanceof EntityItem) { return new CraftItem(server, (EntityItem) entity); }
-        else if (entity instanceof EntityWeather) {
-            if (entity instanceof EntityLightning) { return new CraftLightningStrike(server, (EntityLightning) entity); }
-            else { return new CraftWeather(server, (EntityWeather) entity); }
-        }
-        else if (entity instanceof EntityMinecartAbstract) {
-            if (entity instanceof EntityMinecartFurnace) { return new CraftMinecartFurnace(server, (EntityMinecartFurnace) entity); }
-            else if (entity instanceof EntityMinecartChest) { return new CraftMinecartChest(server, (EntityMinecartChest) entity); }
-            else if (entity instanceof EntityMinecartTNT) { return new CraftMinecartTNT(server, (EntityMinecartTNT) entity); }
-            else if (entity instanceof EntityMinecartHopper) { return new CraftMinecartHopper(server, (EntityMinecartHopper) entity); }
-            else if (entity instanceof EntityMinecartMobSpawner) { return new CraftMinecartMobSpawner(server, (EntityMinecartMobSpawner) entity); }
-            else if (entity instanceof EntityMinecartRideable) { return new CraftMinecartRideable(server, (EntityMinecartRideable) entity); }
-            else if (entity instanceof EntityMinecartCommandBlock) { return new CraftMinecartCommand(server, (EntityMinecartCommandBlock) entity); }
+            if (part.owner instanceof EntityEnderDragon) {
+                return new CraftEnderDragonPart(server, (EntityComplexPart) entity);
+            } else {
+                return new CraftComplexPart(server, (EntityComplexPart) entity);
+            }
+        } else if (entity instanceof EntityExperienceOrb) {
+            return new CraftExperienceOrb(server, (EntityExperienceOrb) entity);
+        } else if (entity instanceof EntityArrow) {
+            return new CraftArrow(server, (EntityArrow) entity);
+        } else if (entity instanceof EntityBoat) {
+            return new CraftBoat(server, (EntityBoat) entity);
+        } else if (entity instanceof EntityProjectile) {
+            if (entity instanceof EntityEgg) {
+                return new CraftEgg(server, (EntityEgg) entity);
+            } else if (entity instanceof EntitySnowball) {
+                return new CraftSnowball(server, (EntitySnowball) entity);
+            } else if (entity instanceof EntityPotion) {
+                return new CraftThrownPotion(server, (EntityPotion) entity);
+            } else if (entity instanceof EntityEnderPearl) {
+                return new CraftEnderPearl(server, (EntityEnderPearl) entity);
+            } else if (entity instanceof EntityThrownExpBottle) {
+                return new CraftThrownExpBottle(server, (EntityThrownExpBottle) entity);
+            }
+        } else if (entity instanceof EntityFallingBlock) {
+            return new CraftFallingSand(server, (EntityFallingBlock) entity);
+        } else if (entity instanceof EntityFireball) {
+            if (entity instanceof EntitySmallFireball) {
+                return new CraftSmallFireball(server, (EntitySmallFireball) entity);
+            } else if (entity instanceof EntityLargeFireball) {
+                return new CraftLargeFireball(server, (EntityLargeFireball) entity);
+            } else if (entity instanceof EntityWitherSkull) {
+                return new CraftWitherSkull(server, (EntityWitherSkull) entity);
+            } else {
+                return new CraftFireball(server, (EntityFireball) entity);
+            }
+        } else if (entity instanceof EntityEnderSignal) {
+            return new CraftEnderSignal(server, (EntityEnderSignal) entity);
+        } else if (entity instanceof EntityEnderCrystal) {
+            return new CraftEnderCrystal(server, (EntityEnderCrystal) entity);
+        } else if (entity instanceof EntityFishingHook) {
+            return new CraftFish(server, (EntityFishingHook) entity);
+        } else if (entity instanceof EntityItem) {
+            return new CraftItem(server, (EntityItem) entity);
+        } else if (entity instanceof EntityWeather) {
+            if (entity instanceof EntityLightning) {
+                return new CraftLightningStrike(server, (EntityLightning) entity);
+            } else {
+                return new CraftWeather(server, (EntityWeather) entity);
+            }
+        } else if (entity instanceof EntityMinecartAbstract) {
+            if (entity instanceof EntityMinecartFurnace) {
+                return new CraftMinecartFurnace(server, (EntityMinecartFurnace) entity);
+            } else if (entity instanceof EntityMinecartChest) {
+                return new CraftMinecartChest(server, (EntityMinecartChest) entity);
+            } else if (entity instanceof EntityMinecartTNT) {
+                return new CraftMinecartTNT(server, (EntityMinecartTNT) entity);
+            } else if (entity instanceof EntityMinecartHopper) {
+                return new CraftMinecartHopper(server, (EntityMinecartHopper) entity);
+            } else if (entity instanceof EntityMinecartMobSpawner) {
+                return new CraftMinecartMobSpawner(server, (EntityMinecartMobSpawner) entity);
+            } else if (entity instanceof EntityMinecartRideable) {
+                return new CraftMinecartRideable(server, (EntityMinecartRideable) entity);
+            } else if (entity instanceof EntityMinecartCommandBlock) {
+                return new CraftMinecartCommand(server, (EntityMinecartCommandBlock) entity);
+            }
         } else if (entity instanceof EntityHanging) {
-            if (entity instanceof EntityPainting) { return new CraftPainting(server, (EntityPainting) entity); }
-            else if (entity instanceof EntityItemFrame) { return new CraftItemFrame(server, (EntityItemFrame) entity); }
-            else if (entity instanceof EntityLeash) { return new CraftLeash(server, (EntityLeash) entity); }
-            else { return new CraftHanging(server, (EntityHanging) entity); }
+            if (entity instanceof EntityPainting) {
+                return new CraftPainting(server, (EntityPainting) entity);
+            } else if (entity instanceof EntityItemFrame) {
+                return new CraftItemFrame(server, (EntityItemFrame) entity);
+            } else if (entity instanceof EntityLeash) {
+                return new CraftLeash(server, (EntityLeash) entity);
+            } else {
+                return new CraftHanging(server, (EntityHanging) entity);
+            }
+        } else if (entity instanceof EntityTNTPrimed) {
+            return new CraftTNTPrimed(server, (EntityTNTPrimed) entity);
+        } else if (entity instanceof EntityFireworks) {
+            return new CraftFirework(server, (EntityFireworks) entity);
         }
-        else if (entity instanceof EntityTNTPrimed) { return new CraftTNTPrimed(server, (EntityTNTPrimed) entity); }
-        else if (entity instanceof EntityFireworks) { return new CraftFirework(server, (EntityFireworks) entity); }
 
-        throw new AssertionError("Unknown entity " + entity == null ? null : entity.getClass());
+        throw new AssertionError("Unknown entity " + entity.getClass());
     }
 
+    @Override
     public Location getLocation() {
         return new Location(getWorld(), entity.locX, entity.locY, entity.locZ, entity.yaw, entity.pitch);
     }
 
+    @Override
     public Location getLocation(Location loc) {
         if (loc != null) {
             loc.setWorld(getWorld());
@@ -174,10 +259,12 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
         return loc;
     }
 
+    @Override
     public Vector getVelocity() {
         return new Vector(entity.motX, entity.motY, entity.motZ);
     }
 
+    @Override
     public void setVelocity(Vector vel) {
         entity.motX = vel.getX();
         entity.motY = vel.getY();
@@ -185,21 +272,26 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
         entity.velocityChanged = true;
     }
 
+    @Override
     public boolean isOnGround() {
         if (entity instanceof EntityArrow) {
             return ((EntityArrow) entity).isInGround();
         }
+
         return entity.onGround;
     }
 
+    @Override
     public World getWorld() {
         return entity.world.getWorld();
     }
 
+    @Override
     public boolean teleport(Location location) {
         return teleport(location, TeleportCause.PLUGIN);
     }
 
+    @Override
     public boolean teleport(Location location, TeleportCause cause) {
         if (entity.passenger != null || entity.dead) {
             return false;
@@ -210,8 +302,8 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
 
         // Spigot start
         if (!location.getWorld().equals(getWorld())) {
-          entity.teleportTo(location, cause.equals(TeleportCause.NETHER_PORTAL));
-          return true;
+            entity.teleportTo(location, cause.equals(TeleportCause.NETHER_PORTAL));
+            return true;
         }
 
         // entity.world = ((CraftWorld) location.getWorld()).getHandle();
@@ -221,14 +313,17 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
         return true;
     }
 
+    @Override
     public boolean teleport(org.bukkit.entity.Entity destination) {
         return teleport(destination.getLocation());
     }
 
+    @Override
     public boolean teleport(org.bukkit.entity.Entity destination, TeleportCause cause) {
         return teleport(destination.getLocation(), cause);
     }
 
+    @Override
     public List<org.bukkit.entity.Entity> getNearbyEntities(double x, double y, double z) {
         @SuppressWarnings("unchecked")
         List<Entity> notchEntityList = entity.world.getEntities(entity, entity.boundingBox.grow(x, y, z));
@@ -237,37 +332,46 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
         for (Entity e : notchEntityList) {
             bukkitEntityList.add(e.getBukkitEntity());
         }
+
         return bukkitEntityList;
     }
 
+    @Override
     public int getEntityId() {
         return entity.getId();
     }
 
+    @Override
     public int getFireTicks() {
         return entity.fireTicks;
     }
 
-    public int getMaxFireTicks() {
-        return entity.maxFireTicks;
-    }
-
+    @Override
     public void setFireTicks(int ticks) {
         entity.fireTicks = ticks;
     }
 
+    @Override
+    public int getMaxFireTicks() {
+        return entity.maxFireTicks;
+    }
+
+    @Override
     public void remove() {
         entity.dead = true;
     }
 
+    @Override
     public boolean isDead() {
         return !entity.isAlive();
     }
 
+    @Override
     public boolean isValid() {
         return entity.isAlive() && entity.valid;
     }
 
+    @Override
     public Server getServer() {
         return server;
     }
@@ -280,10 +384,12 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
         setVelocity(value);
     }
 
+    @Override
     public org.bukkit.entity.Entity getPassenger() {
         return isEmpty() ? null : getHandle().passenger.getBukkitEntity();
     }
 
+    @Override
     public boolean setPassenger(org.bukkit.entity.Entity passenger) {
         if (passenger instanceof CraftEntity) {
             ((CraftEntity) passenger).getHandle().setPassengerOf(getHandle());
@@ -293,10 +399,12 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
         }
     }
 
+    @Override
     public boolean isEmpty() {
         return getHandle().passenger == null;
     }
 
+    @Override
     public boolean eject() {
         if (getHandle().passenger == null) {
             return false;
@@ -306,45 +414,54 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
         return true;
     }
 
+    @Override
     public float getFallDistance() {
         return getHandle().fallDistance;
     }
 
+    @Override
     public void setFallDistance(float distance) {
         getHandle().fallDistance = distance;
     }
 
-    public void setLastDamageCause(EntityDamageEvent event) {
-        lastDamageEvent = event;
-    }
-
+    @Override
     public EntityDamageEvent getLastDamageCause() {
         return lastDamageEvent;
     }
 
+    @Override
+    public void setLastDamageCause(EntityDamageEvent event) {
+        lastDamageEvent = event;
+    }
+
+    @Override
     public UUID getUniqueId() {
         return getHandle().uniqueID;
     }
 
+    @Override
     public int getTicksLived() {
         return getHandle().ticksLived;
     }
 
+    @Override
     public void setTicksLived(int value) {
         if (value <= 0) {
             throw new IllegalArgumentException("Age must be at least 1 tick");
         }
-        getHandle().ticksLived = value;
-    }
 
-    public Entity getHandle() {
-        return entity;
+        getHandle().ticksLived = value;
     }
 
+    @Override
     public void playEffect(EntityEffect type) {
         this.getHandle().world.broadcastEntityEffect(getHandle(), type.getData());
     }
 
+    public Entity getHandle() {
+        return entity;
+    }
+
     public void setHandle(final Entity entity) {
         this.entity = entity;
     }
@@ -355,44 +472,31 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
     }
 
     @Override
-    public boolean equals(Object obj) {
-        if (obj == null) {
-            return false;
-        }
-        if (getClass() != obj.getClass()) {
-            return false;
-        }
-        final CraftEntity other = (CraftEntity) obj;
-        return (this.getEntityId() == other.getEntityId());
-    }
-
-    @Override
-    public int hashCode() {
-        int hash = 7;
-        hash = 29 * hash + this.getEntityId();
-        return hash;
-    }
-
     public void setMetadata(String metadataKey, MetadataValue newMetadataValue) {
         server.getEntityMetadata().setMetadata(this, metadataKey, newMetadataValue);
     }
 
+    @Override
     public List<MetadataValue> getMetadata(String metadataKey) {
         return server.getEntityMetadata().getMetadata(this, metadataKey);
     }
 
+    @Override
     public boolean hasMetadata(String metadataKey) {
         return server.getEntityMetadata().hasMetadata(this, metadataKey);
     }
 
+    @Override
     public void removeMetadata(String metadataKey, Plugin owningPlugin) {
         server.getEntityMetadata().removeMetadata(this, metadataKey, owningPlugin);
     }
 
+    @Override
     public boolean isInsideVehicle() {
         return getHandle().vehicle != null;
     }
 
+    @Override
     public boolean leaveVehicle() {
         if (getHandle().vehicle == null) {
             return false;
@@ -402,6 +506,7 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
         return true;
     }
 
+    @Override
     public org.bukkit.entity.Entity getVehicle() {
         if (getHandle().vehicle == null) {
             return null;
@@ -410,19 +515,30 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
         return getHandle().vehicle.getBukkitEntity();
     }
 
-    // Spigot start
-    private final Spigot spigot = new Spigot()
-    {
-        @Override
-        public boolean isInvulnerable()
-        {
-            return getHandle().isInvulnerable();
-        }
-    };
-
-    public Spigot spigot()
-    {
+    @Override
+    public Spigot spigot() {
         return spigot;
     }
     // Spigot end
+
+    @Override
+    public boolean equals(Object obj) {
+        if (obj == null) {
+            return false;
+        }
+
+        if (getClass() != obj.getClass()) {
+            return false;
+        }
+
+        final CraftEntity other = (CraftEntity) obj;
+        return (this.getEntityId() == other.getEntityId());
+    }
+
+    @Override
+    public int hashCode() {
+        int hash = 7;
+        hash = 29 * hash + this.getEntityId();
+        return hash;
+    }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftExperienceOrb.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftExperienceOrb.java
index 3a09cab..1d5e549 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftExperienceOrb.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftExperienceOrb.java
@@ -6,14 +6,17 @@ import org.bukkit.entity.EntityType;
 import org.bukkit.entity.ExperienceOrb;
 
 public class CraftExperienceOrb extends CraftEntity implements ExperienceOrb {
+
     public CraftExperienceOrb(CraftServer server, EntityExperienceOrb entity) {
         super(server, entity);
     }
 
+    @Override
     public int getExperience() {
         return getHandle().value;
     }
 
+    @Override
     public void setExperience(int value) {
         getHandle().value = value;
     }
@@ -28,6 +31,7 @@ public class CraftExperienceOrb extends CraftEntity implements ExperienceOrb {
         return "CraftExperienceOrb";
     }
 
+    @Override
     public EntityType getType() {
         return EntityType.EXPERIENCE_ORB;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftFallingSand.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftFallingSand.java
index 830f5bb..062fb5b 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftFallingSand.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftFallingSand.java
@@ -1,7 +1,6 @@
 package org.bukkit.craftbukkit.entity;
 
 import net.minecraft.server.EntityFallingBlock;
-
 import org.bukkit.Material;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
@@ -24,26 +23,32 @@ public class CraftFallingSand extends CraftEntity implements FallingSand {
         return "CraftFallingSand";
     }
 
+    @Override
     public EntityType getType() {
         return EntityType.FALLING_BLOCK;
     }
 
+    @Override
     public Material getMaterial() {
         return Material.getMaterial(getBlockId());
     }
 
+    @Override
     public int getBlockId() {
         return CraftMagicNumbers.getId(getHandle().id);
     }
 
+    @Override
     public byte getBlockData() {
         return (byte) getHandle().data;
     }
 
+    @Override
     public boolean getDropItem() {
         return getHandle().dropItem;
     }
 
+    @Override
     public void setDropItem(boolean drop) {
         getHandle().dropItem = drop;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftFireball.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftFireball.java
index 6f0b942..d37b41a 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftFireball.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftFireball.java
@@ -2,7 +2,6 @@ package org.bukkit.craftbukkit.entity;
 
 import net.minecraft.server.EntityFireball;
 import net.minecraft.server.MathHelper;
-
 import org.apache.commons.lang.Validate;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
@@ -12,43 +11,53 @@ import org.bukkit.projectiles.ProjectileSource;
 import org.bukkit.util.Vector;
 
 public class CraftFireball extends AbstractProjectile implements Fireball {
+
     public CraftFireball(CraftServer server, EntityFireball entity) {
         super(server, entity);
     }
 
+    @Override
     public float getYield() {
         return getHandle().bukkitYield;
     }
 
+    @Override
+    public void setYield(float yield) {
+        getHandle().bukkitYield = yield;
+    }
+
+    @Override
     public boolean isIncendiary() {
         return getHandle().isIncendiary;
     }
 
+    @Override
     public void setIsIncendiary(boolean isIncendiary) {
         getHandle().isIncendiary = isIncendiary;
     }
 
-    public void setYield(float yield) {
-        getHandle().bukkitYield = yield;
-    }
-
+    @Override
     public ProjectileSource getShooter() {
         return getHandle().projectileSource;
     }
 
+    @Override
     public void setShooter(ProjectileSource shooter) {
         if (shooter instanceof CraftLivingEntity) {
             getHandle().shooter = ((CraftLivingEntity) shooter).getHandle();
         } else {
             getHandle().shooter = null;
         }
+
         getHandle().projectileSource = shooter;
     }
 
+    @Override
     public Vector getDirection() {
         return new Vector(getHandle().dirX, getHandle().dirY, getHandle().dirZ);
     }
 
+    @Override
     public void setDirection(Vector direction) {
         Validate.notNull(direction, "Direction can not be null");
         double x = direction.getX();
@@ -70,6 +79,7 @@ public class CraftFireball extends AbstractProjectile implements Fireball {
         return "CraftFireball";
     }
 
+    @Override
     public EntityType getType() {
         return EntityType.UNKNOWN;
     }
@@ -84,6 +94,7 @@ public class CraftFireball extends AbstractProjectile implements Fireball {
         if (getHandle().shooter != null) {
             return (LivingEntity) getHandle().shooter.getBukkitEntity();
         }
+
         return null;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftFirework.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftFirework.java
index 76a9bdb..01a4ce0 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftFirework.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftFirework.java
@@ -3,7 +3,6 @@ package org.bukkit.craftbukkit.entity;
 import net.minecraft.server.EntityFireworks;
 import net.minecraft.server.ItemStack;
 import net.minecraft.server.Items;
-
 import org.bukkit.Material;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftFish.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftFish.java
index edb30e7..9b05358 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftFish.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftFish.java
@@ -3,7 +3,6 @@ package org.bukkit.craftbukkit.entity;
 import net.minecraft.server.EntityFishingHook;
 import net.minecraft.server.EntityHuman;
 import net.minecraft.server.MathHelper;
-
 import org.apache.commons.lang.Validate;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
@@ -12,12 +11,14 @@ import org.bukkit.entity.LivingEntity;
 import org.bukkit.projectiles.ProjectileSource;
 
 public class CraftFish extends AbstractProjectile implements Fish {
+
     private double biteChance = -1;
 
     public CraftFish(CraftServer server, EntityFishingHook entity) {
         super(server, entity);
     }
 
+    @Override
     public ProjectileSource getShooter() {
         if (getHandle().owner != null) {
             return getHandle().owner.getBukkitEntity();
@@ -26,6 +27,7 @@ public class CraftFish extends AbstractProjectile implements Fish {
         return null;
     }
 
+    @Override
     public void setShooter(ProjectileSource shooter) {
         if (shooter instanceof CraftHumanEntity) {
             getHandle().owner = (EntityHuman) ((CraftHumanEntity) shooter).entity;
@@ -42,32 +44,39 @@ public class CraftFish extends AbstractProjectile implements Fish {
         return "CraftFish";
     }
 
+    @Override
     public EntityType getType() {
         return EntityType.FISHING_HOOK;
     }
 
+    @Override
     public double getBiteChance() {
         EntityFishingHook hook = getHandle();
 
         if (this.biteChance == -1) {
             if (hook.world.isRainingAt(MathHelper.floor(hook.locX), MathHelper.floor(hook.locY) + 1, MathHelper.floor(hook.locZ))) {
-                return 1/300.0;
+                return 1 / 300.0;
             }
-            return 1/500.0;
+
+            return 1 / 500.0;
         }
+
         return this.biteChance;
     }
 
+    @Override
     public void setBiteChance(double chance) {
         Validate.isTrue(chance >= 0 && chance <= 1, "The bite chance must be between 0 and 1.");
         this.biteChance = chance;
     }
 
+    @Override
     @Deprecated
     public LivingEntity _INVALID_getShooter() {
         return (LivingEntity) getShooter();
     }
 
+    @Override
     @Deprecated
     public void _INVALID_setShooter(LivingEntity shooter) {
         setShooter(shooter);
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftGhast.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftGhast.java
index ee9516f..cac82ce 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftGhast.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftGhast.java
@@ -1,7 +1,6 @@
 package org.bukkit.craftbukkit.entity;
 
 import net.minecraft.server.EntityGhast;
-
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Ghast;
@@ -22,6 +21,7 @@ public class CraftGhast extends CraftFlying implements Ghast {
         return "CraftGhast";
     }
 
+    @Override
     public EntityType getType() {
         return EntityType.GHAST;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftGiant.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftGiant.java
index e560913..ecbead9 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftGiant.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftGiant.java
@@ -1,7 +1,6 @@
 package org.bukkit.craftbukkit.entity;
 
 import net.minecraft.server.EntityGiantZombie;
-
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Giant;
@@ -22,6 +21,7 @@ public class CraftGiant extends CraftMonster implements Giant {
         return "CraftGiant";
     }
 
+    @Override
     public EntityType getType() {
         return EntityType.GIANT;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftGolem.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftGolem.java
index 1fef5e0..b82e06a 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftGolem.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftGolem.java
@@ -5,6 +5,7 @@ import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.Golem;
 
 public class CraftGolem extends CraftCreature implements Golem {
+
     public CraftGolem(CraftServer server, EntityGolem entity) {
         super(server, entity);
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftHanging.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftHanging.java
index e51dddb..0722b73 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftHanging.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftHanging.java
@@ -8,18 +8,22 @@ import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Hanging;
 
 public class CraftHanging extends CraftEntity implements Hanging {
+
     public CraftHanging(CraftServer server, EntityHanging entity) {
         super(server, entity);
     }
 
+    @Override
     public BlockFace getAttachedFace() {
         return getFacing().getOppositeFace();
     }
 
+    @Override
     public void setFacingDirection(BlockFace face) {
         setFacingDirection(face, false);
     }
 
+    @Override
     public boolean setFacingDirection(BlockFace face, boolean force) {
         Block block = getLocation().getBlock().getRelative(getAttachedFace()).getRelative(face.getOppositeFace()).getRelative(getFacing());
         EntityHanging hanging = getHandle();
@@ -42,6 +46,7 @@ public class CraftHanging extends CraftEntity implements Hanging {
                 getHandle().setDirection(3);
                 break;
         }
+
         if (!force && !hanging.survives()) {
             // Revert since it doesn't fit
             hanging.x = x;
@@ -50,9 +55,11 @@ public class CraftHanging extends CraftEntity implements Hanging {
             hanging.setDirection(dir);
             return false;
         }
+
         return true;
     }
 
+    @Override
     public BlockFace getFacing() {
         switch (this.getHandle().direction) {
             case 0:
@@ -77,6 +84,7 @@ public class CraftHanging extends CraftEntity implements Hanging {
         return "CraftHanging";
     }
 
+    @Override
     public EntityType getType() {
         return EntityType.UNKNOWN;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftHorse.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftHorse.java
index 8522cad..3f8cc32 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftHorse.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftHorse.java
@@ -22,72 +22,96 @@ public class CraftHorse extends CraftAnimals implements Horse {
         return (EntityHorse) entity;
     }
 
+    @Override
     public Variant getVariant() {
         return Variant.values()[getHandle().getType()];
     }
 
+    @Override
     public void setVariant(Variant variant) {
         Validate.notNull(variant, "Variant cannot be null");
         getHandle().setType(variant.ordinal());
     }
 
+    @Override
     public Color getColor() {
         return Color.values()[getHandle().getVariant() & 0xFF];
     }
 
+    @Override
     public void setColor(Color color) {
         Validate.notNull(color, "Color cannot be null");
         getHandle().setVariant(color.ordinal() & 0xFF | getStyle().ordinal() << 8);
     }
 
+    @Override
     public Style getStyle() {
         return Style.values()[getHandle().getVariant() >>> 8];
     }
 
+    @Override
     public void setStyle(Style style) {
         Validate.notNull(style, "Style cannot be null");
         getHandle().setVariant(getColor().ordinal() & 0xFF | style.ordinal() << 8);
     }
 
+    @Override
     public boolean isCarryingChest() {
         return getHandle().hasChest();
     }
 
+    @Override
     public void setCarryingChest(boolean chest) {
         if (chest == isCarryingChest()) return;
         getHandle().setHasChest(chest);
         getHandle().loadChest();
     }
 
+    @Override
     public int getDomestication() {
         return getHandle().getTemper();
     }
 
+    @Override
     public void setDomestication(int value) {
         Validate.isTrue(value >= 0, "Domestication cannot be less than zero");
         Validate.isTrue(value <= getMaxDomestication(), "Domestication cannot be greater than the max domestication");
         getHandle().setTemper(value);
     }
 
+    @Override
     public int getMaxDomestication() {
         return getHandle().getMaxDomestication();
     }
 
+    @Override
     public void setMaxDomestication(int value) {
         Validate.isTrue(value > 0, "Max domestication cannot be zero or less");
         getHandle().maxDomestication = value;
     }
 
+    @Override
     public double getJumpStrength() {
         return getHandle().getJumpStrength();
     }
 
+    @Override
     public void setJumpStrength(double strength) {
         Validate.isTrue(strength >= 0, "Jump strength cannot be less than zero");
         getHandle().getAttributeInstance(EntityHorse.attributeJumpStrength).setValue(strength);
     }
 
     @Override
+    public boolean isSitting() {
+        return false;
+    }
+
+    @Override
+    public void setSitting(boolean sitting) {
+
+    }
+
+    @Override
     public boolean isTamed() {
         return getHandle().isTame();
     }
@@ -131,6 +155,7 @@ public class CraftHorse extends CraftAnimals implements Horse {
         }
     }
 
+    @Override
     public HorseInventory getInventory() {
         return new CraftInventoryHorse(getHandle().inventoryChest);
     }
@@ -140,6 +165,7 @@ public class CraftHorse extends CraftAnimals implements Horse {
         return "CraftHorse{variant=" + getVariant() + ", owner=" + getOwner() + '}';
     }
 
+    @Override
     public EntityType getType() {
         return EntityType.HORSE;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java
index 3d1ca3d..e79ea83 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java
@@ -1,7 +1,5 @@
 package org.bukkit.craftbukkit.entity;
 
-import java.util.Set;
-
 import net.minecraft.server.Container;
 import net.minecraft.server.EntityHuman;
 import net.minecraft.server.EntityMinecartHopper;
@@ -12,35 +10,38 @@ import net.minecraft.server.TileEntityBrewingStand;
 import net.minecraft.server.TileEntityDispenser;
 import net.minecraft.server.TileEntityFurnace;
 import net.minecraft.server.TileEntityHopper;
-
 import org.bukkit.GameMode;
 import org.bukkit.Location;
 import org.bukkit.Material;
-import org.bukkit.entity.HumanEntity;
-import org.bukkit.event.inventory.InventoryType;
-import org.bukkit.inventory.Inventory;
-import org.bukkit.inventory.InventoryView;
-import org.bukkit.inventory.ItemStack;
-import org.bukkit.inventory.PlayerInventory;
 import org.bukkit.block.Block;
+import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.craftbukkit.inventory.CraftContainer;
 import org.bukkit.craftbukkit.inventory.CraftInventory;
 import org.bukkit.craftbukkit.inventory.CraftInventoryPlayer;
 import org.bukkit.craftbukkit.inventory.CraftInventoryView;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
-import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.entity.HumanEntity;
+import org.bukkit.event.inventory.InventoryType;
 import org.bukkit.inventory.EntityEquipment;
+import org.bukkit.inventory.Inventory;
+import org.bukkit.inventory.InventoryView;
+import org.bukkit.inventory.ItemStack;
+import org.bukkit.inventory.PlayerInventory;
 import org.bukkit.permissions.PermissibleBase;
 import org.bukkit.permissions.Permission;
 import org.bukkit.permissions.PermissionAttachment;
 import org.bukkit.permissions.PermissionAttachmentInfo;
 import org.bukkit.plugin.Plugin;
 
+import java.util.Set;
+
 public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
-    private CraftInventoryPlayer inventory;
-    private final CraftInventory enderChest;
+
     protected final PermissibleBase perm = new PermissibleBase(this);
+
+    private final CraftInventory enderChest;
+    private CraftInventoryPlayer inventory;
     private boolean op;
     private GameMode mode;
 
@@ -51,34 +52,42 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
         enderChest = new CraftInventory(entity.getEnderChest());
     }
 
+    @Override
     public String getName() {
         return getHandle().getName();
     }
 
+    @Override
     public PlayerInventory getInventory() {
         return inventory;
     }
 
+    @Override
     public EntityEquipment getEquipment() {
         return inventory;
     }
 
+    @Override
     public Inventory getEnderChest() {
         return enderChest;
     }
 
+    @Override
     public ItemStack getItemInHand() {
         return getInventory().getItemInHand();
     }
 
+    @Override
     public void setItemInHand(ItemStack item) {
         getInventory().setItemInHand(item);
     }
 
+    @Override
     public ItemStack getItemOnCursor() {
         return CraftItemStack.asCraftMirror(getHandle().inventory.getCarried());
     }
 
+    @Override
     public void setItemOnCursor(ItemStack item) {
         net.minecraft.server.ItemStack stack = CraftItemStack.asNMSCopy(item);
         getHandle().inventory.setCarried(stack);
@@ -87,71 +96,88 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
         }
     }
 
+    @Override
     public boolean isSleeping() {
         return getHandle().sleeping;
     }
 
+    @Override
     public int getSleepTicks() {
         return getHandle().sleepTicks;
     }
 
+    @Override
     public boolean isOp() {
         return op;
     }
 
+    @Override
+    public void setOp(boolean value) {
+        this.op = value;
+        perm.recalculatePermissions();
+    }
+
+    @Override
     public boolean isPermissionSet(String name) {
         return perm.isPermissionSet(name);
     }
 
+    @Override
     public boolean isPermissionSet(Permission perm) {
         return this.perm.isPermissionSet(perm);
     }
 
+    @Override
     public boolean hasPermission(String name) {
         return perm.hasPermission(name);
     }
 
+    @Override
     public boolean hasPermission(Permission perm) {
         return this.perm.hasPermission(perm);
     }
 
+    @Override
     public PermissionAttachment addAttachment(Plugin plugin, String name, boolean value) {
         return perm.addAttachment(plugin, name, value);
     }
 
+    @Override
     public PermissionAttachment addAttachment(Plugin plugin) {
         return perm.addAttachment(plugin);
     }
 
+    @Override
     public PermissionAttachment addAttachment(Plugin plugin, String name, boolean value, int ticks) {
         return perm.addAttachment(plugin, name, value, ticks);
     }
 
+    @Override
     public PermissionAttachment addAttachment(Plugin plugin, int ticks) {
         return perm.addAttachment(plugin, ticks);
     }
 
+    @Override
     public void removeAttachment(PermissionAttachment attachment) {
         perm.removeAttachment(attachment);
     }
 
+    @Override
     public void recalculatePermissions() {
         perm.recalculatePermissions();
     }
 
-    public void setOp(boolean value) {
-        this.op = value;
-        perm.recalculatePermissions();
-    }
-
+    @Override
     public Set<PermissionAttachmentInfo> getEffectivePermissions() {
         return perm.getEffectivePermissions();
     }
 
+    @Override
     public GameMode getGameMode() {
         return mode;
     }
 
+    @Override
     public void setGameMode(GameMode mode) {
         if (mode == null) {
             throw new IllegalArgumentException("Mode cannot be null");
@@ -175,66 +201,70 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
         return "CraftHumanEntity{" + "id=" + getEntityId() + "name=" + getName() + '}';
     }
 
+    @Override
     public InventoryView getOpenInventory() {
         return getHandle().activeContainer.getBukkitView();
     }
 
+    @Override
     public InventoryView openInventory(Inventory inventory) {
-        if(!(getHandle() instanceof EntityPlayer)) return null;
+        if (!(getHandle() instanceof EntityPlayer)) return null;
         EntityPlayer player = (EntityPlayer) getHandle();
         InventoryType type = inventory.getType();
         Container formerContainer = getHandle().activeContainer;
         // TODO: Should we check that it really IS a CraftInventory first?
         CraftInventory craftinv = (CraftInventory) inventory;
-        switch(type) {
-        case PLAYER:
-        case CHEST:
-        case ENDER_CHEST:
-            getHandle().openContainer(craftinv.getInventory());
-            break;
-        case DISPENSER:
-            if (craftinv.getInventory() instanceof TileEntityDispenser) {
-                getHandle().openDispenser((TileEntityDispenser) craftinv.getInventory());
-            } else {
-                openCustomInventory(inventory, player, 3);
-            }
-            break;
-        case FURNACE:
-            if (craftinv.getInventory() instanceof TileEntityFurnace) {
-                getHandle().openFurnace((TileEntityFurnace) craftinv.getInventory());
-            } else {
-                openCustomInventory(inventory, player, 2);
-            }
-            break;
-        case WORKBENCH:
-            openCustomInventory(inventory, player, 1);
-            break;
-        case BREWING:
-            if (craftinv.getInventory() instanceof TileEntityBrewingStand) {
-                getHandle().openBrewingStand((TileEntityBrewingStand) craftinv.getInventory());
-            } else {
-                openCustomInventory(inventory, player, 5);
-            }
-            break;
-        case ENCHANTING:
-            openCustomInventory(inventory, player, 4);
-            break;
-        case HOPPER:
-            if (craftinv.getInventory() instanceof TileEntityHopper) {
-                getHandle().openHopper((TileEntityHopper) craftinv.getInventory());
-            } else if (craftinv.getInventory() instanceof EntityMinecartHopper) {
-                getHandle().openMinecartHopper((EntityMinecartHopper) craftinv.getInventory());
-            } else {
-                openCustomInventory(inventory, player, 9);
-            }
-            break;
-        case CREATIVE:
-        case CRAFTING:
-            throw new IllegalArgumentException("Can't open a " + type + " inventory!");
+        switch (type) {
+            case PLAYER:
+            case CHEST:
+            case ENDER_CHEST:
+                getHandle().openContainer(craftinv.getInventory());
+                break;
+            case DISPENSER:
+                if (craftinv.getInventory() instanceof TileEntityDispenser) {
+                    getHandle().openDispenser((TileEntityDispenser) craftinv.getInventory());
+                } else {
+                    openCustomInventory(inventory, player, 3);
+                }
+                break;
+            case FURNACE:
+                if (craftinv.getInventory() instanceof TileEntityFurnace) {
+                    getHandle().openFurnace((TileEntityFurnace) craftinv.getInventory());
+                } else {
+                    openCustomInventory(inventory, player, 2);
+                }
+                break;
+            case WORKBENCH:
+                openCustomInventory(inventory, player, 1);
+                break;
+            case BREWING:
+                if (craftinv.getInventory() instanceof TileEntityBrewingStand) {
+                    getHandle().openBrewingStand((TileEntityBrewingStand) craftinv.getInventory());
+                } else {
+                    openCustomInventory(inventory, player, 5);
+                }
+                break;
+            case ENCHANTING:
+                openCustomInventory(inventory, player, 4);
+                break;
+            case HOPPER:
+                if (craftinv.getInventory() instanceof TileEntityHopper) {
+                    getHandle().openHopper((TileEntityHopper) craftinv.getInventory());
+                } else if (craftinv.getInventory() instanceof EntityMinecartHopper) {
+                    getHandle().openMinecartHopper((EntityMinecartHopper) craftinv.getInventory());
+                } else {
+                    openCustomInventory(inventory, player, 9);
+                }
+                break;
+            case CREATIVE:
+            case CRAFTING:
+                throw new IllegalArgumentException("Can't open a " + type + " inventory!");
         }
+
         if (getHandle().activeContainer == formerContainer) {
             return null;
         }
+
         getHandle().activeContainer.checkReachable = false;
         return getHandle().activeContainer.getBukkitView();
     }
@@ -244,7 +274,7 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
         Container container = new CraftContainer(inventory, this, player.nextContainerCounter());
 
         container = CraftEventFactory.callInventoryOpenEvent(player, container);
-        if(container == null) return;
+        if (container == null) return;
 
         String title = container.getBukkitView().getTitle();
         int size = container.getBukkitView().getTopInventory().getSize();
@@ -254,6 +284,7 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
         getHandle().activeContainer.addSlotListener(player);
     }
 
+    @Override
     public InventoryView openWorkbench(Location location, boolean force) {
         if (!force) {
             Block block = location.getBlock();
@@ -261,16 +292,21 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
                 return null;
             }
         }
+
         if (location == null) {
             location = getLocation();
         }
+
         getHandle().startCrafting(location.getBlockX(), location.getBlockY(), location.getBlockZ());
+
         if (force) {
             getHandle().activeContainer.checkReachable = false;
         }
+
         return getHandle().activeContainer.getBukkitView();
     }
 
+    @Override
     public InventoryView openEnchanting(Location location, boolean force) {
         if (!force) {
             Block block = location.getBlock();
@@ -278,23 +314,30 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
                 return null;
             }
         }
+
         if (location == null) {
             location = getLocation();
         }
+
         getHandle().startEnchanting(location.getBlockX(), location.getBlockY(), location.getBlockZ(), null);
+
         if (force) {
             getHandle().activeContainer.checkReachable = false;
         }
+
         return getHandle().activeContainer.getBukkitView();
     }
 
+    @Override
     public void openInventory(InventoryView inventory) {
         if (!(getHandle() instanceof EntityPlayer)) return; // TODO: NPC support?
         if (((EntityPlayer) getHandle()).playerConnection == null) return;
+
         if (getHandle().activeContainer != getHandle().defaultContainer) {
             // fire INVENTORY_CLOSE if one already open
-            ((EntityPlayer)getHandle()).playerConnection.a(new PacketPlayInCloseWindow(getHandle().activeContainer.windowId));
+            ((EntityPlayer) getHandle()).playerConnection.a(new PacketPlayInCloseWindow(getHandle().activeContainer.windowId));
         }
+
         EntityPlayer player = (EntityPlayer) getHandle();
         Container container;
         if (inventory instanceof CraftInventoryView) {
@@ -319,18 +362,22 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
         player.activeContainer.addSlotListener(player);
     }
 
+    @Override
     public void closeInventory() {
         getHandle().closeInventory();
     }
 
+    @Override
     public boolean isBlocking() {
         return getHandle().isBlocking();
     }
 
+    @Override
     public boolean setWindowProperty(InventoryView.Property prop, int value) {
         return false;
     }
 
+    @Override
     public int getExpToLevel() {
         return getHandle().getExpToLevel();
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftIronGolem.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftIronGolem.java
index ddee207..e0a6cd2 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftIronGolem.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftIronGolem.java
@@ -6,6 +6,7 @@ import org.bukkit.entity.EntityType;
 import org.bukkit.entity.IronGolem;
 
 public class CraftIronGolem extends CraftGolem implements IronGolem {
+
     public CraftIronGolem(CraftServer server, EntityIronGolem entity) {
         super(server, entity);
     }
@@ -20,10 +21,12 @@ public class CraftIronGolem extends CraftGolem implements IronGolem {
         return "CraftIronGolem";
     }
 
+    @Override
     public boolean isPlayerCreated() {
         return getHandle().isPlayerCreated();
     }
 
+    @Override
     public void setPlayerCreated(boolean playerCreated) {
         getHandle().setPlayerCreated(playerCreated);
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftItem.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftItem.java
index 02b32cf..9256581 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftItem.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftItem.java
@@ -2,14 +2,14 @@ package org.bukkit.craftbukkit.entity;
 
 import net.minecraft.server.Entity;
 import net.minecraft.server.EntityItem;
-
+import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Item;
 import org.bukkit.inventory.ItemStack;
-import org.bukkit.craftbukkit.inventory.CraftItemStack;
-import org.bukkit.craftbukkit.CraftServer;
 
 public class CraftItem extends CraftEntity implements Item {
+
     private final EntityItem item;
 
     public CraftItem(CraftServer server, Entity entity, EntityItem item) {
@@ -21,18 +21,22 @@ public class CraftItem extends CraftEntity implements Item {
         this(server, entity, entity);
     }
 
+    @Override
     public ItemStack getItemStack() {
         return CraftItemStack.asCraftMirror(item.getItemStack());
     }
 
+    @Override
     public void setItemStack(ItemStack stack) {
         item.setItemStack(CraftItemStack.asNMSCopy(stack));
     }
 
+    @Override
     public int getPickupDelay() {
         return item.pickupDelay;
     }
 
+    @Override
     public void setPickupDelay(int delay) {
         item.pickupDelay = delay;
     }
@@ -42,6 +46,7 @@ public class CraftItem extends CraftEntity implements Item {
         return "CraftItem";
     }
 
+    @Override
     public EntityType getType() {
         return EntityType.DROPPED_ITEM;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftItemFrame.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftItemFrame.java
index 3f4e1ae..7b32586 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftItemFrame.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftItemFrame.java
@@ -2,9 +2,7 @@ package org.bukkit.craftbukkit.entity;
 
 import net.minecraft.server.EntityItemFrame;
 import net.minecraft.server.WorldServer;
-
 import org.apache.commons.lang.Validate;
-
 import org.bukkit.Rotation;
 import org.bukkit.block.BlockFace;
 import org.bukkit.craftbukkit.CraftServer;
@@ -14,10 +12,28 @@ import org.bukkit.entity.EntityType;
 import org.bukkit.entity.ItemFrame;
 
 public class CraftItemFrame extends CraftHanging implements ItemFrame {
+
     public CraftItemFrame(CraftServer server, EntityItemFrame entity) {
         super(server, entity);
     }
 
+    static int toInteger(Rotation rotation) {
+        // Translate Bukkit API rotation to NMS integer
+        switch (rotation) {
+            case NONE:
+                return 0;
+            case CLOCKWISE:
+                return 1;
+            case FLIPPED:
+                return 2;
+            case COUNTER_CLOCKWISE:
+                return 3;
+            default:
+                throw new IllegalArgumentException(rotation + " is not applicable to an ItemFrame");
+        }
+    }
+
+    @Override
     public boolean setFacingDirection(BlockFace face, boolean force) {
         if (!super.setFacingDirection(face, force)) {
             return false;
@@ -29,6 +45,12 @@ public class CraftItemFrame extends CraftHanging implements ItemFrame {
         return true;
     }
 
+    @Override
+    public org.bukkit.inventory.ItemStack getItem() {
+        return CraftItemStack.asBukkitCopy(getHandle().getItem());
+    }
+
+    @Override
     public void setItem(org.bukkit.inventory.ItemStack item) {
         if (item == null || item.getTypeId() == 0) {
             getHandle().getDataWatcher().add(2, 5);
@@ -38,48 +60,30 @@ public class CraftItemFrame extends CraftHanging implements ItemFrame {
         }
     }
 
-    public org.bukkit.inventory.ItemStack getItem() {
-        return CraftItemStack.asBukkitCopy(getHandle().getItem());
-    }
-
+    @Override
     public Rotation getRotation() {
         return toBukkitRotation(getHandle().getRotation());
     }
 
-    Rotation toBukkitRotation(int value) {
-        // Translate NMS rotation integer to Bukkit API
-        switch (value) {
-        case 0:
-            return Rotation.NONE;
-        case 1:
-            return Rotation.CLOCKWISE;
-        case 2:
-            return Rotation.FLIPPED;
-        case 3:
-            return Rotation.COUNTER_CLOCKWISE;
-        default:
-            throw new AssertionError("Unknown rotation " + value + " for " + getHandle());
-        }
-    }
-
+    @Override
     public void setRotation(Rotation rotation) {
         Validate.notNull(rotation, "Rotation cannot be null");
         getHandle().setRotation(toInteger(rotation));
     }
 
-    static int toInteger(Rotation rotation) {
-        // Translate Bukkit API rotation to NMS integer
-        switch (rotation) {
-        case NONE:
-            return 0;
-        case CLOCKWISE:
-            return 1;
-        case FLIPPED:
-            return 2;
-        case COUNTER_CLOCKWISE:
-            return 3;
-        default:
-            throw new IllegalArgumentException(rotation + " is not applicable to an ItemFrame");
+    Rotation toBukkitRotation(int value) {
+        // Translate NMS rotation integer to Bukkit API
+        switch (value) {
+            case 0:
+                return Rotation.NONE;
+            case 1:
+                return Rotation.CLOCKWISE;
+            case 2:
+                return Rotation.FLIPPED;
+            case 3:
+                return Rotation.COUNTER_CLOCKWISE;
+            default:
+                throw new AssertionError("Unknown rotation " + value + " for " + getHandle());
         }
     }
 
@@ -93,6 +97,7 @@ public class CraftItemFrame extends CraftHanging implements ItemFrame {
         return "CraftItemFrame{item=" + getItem() + ", rotation=" + getRotation() + "}";
     }
 
+    @Override
     public EntityType getType() {
         return EntityType.ITEM_FRAME;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftLargeFireball.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftLargeFireball.java
index ca03794..a6de587 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftLargeFireball.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftLargeFireball.java
@@ -6,6 +6,7 @@ import org.bukkit.entity.EntityType;
 import org.bukkit.entity.LargeFireball;
 
 public class CraftLargeFireball extends CraftFireball implements LargeFireball {
+
     public CraftLargeFireball(CraftServer server, EntityLargeFireball entity) {
         super(server, entity);
     }
@@ -26,6 +27,7 @@ public class CraftLargeFireball extends CraftFireball implements LargeFireball {
         return "CraftLargeFireball";
     }
 
+    @Override
     public EntityType getType() {
         return EntityType.FIREBALL;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftLeash.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftLeash.java
index 710ed7a..8328516 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftLeash.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftLeash.java
@@ -1,12 +1,12 @@
 package org.bukkit.craftbukkit.entity;
 
 import net.minecraft.server.EntityLeash;
-
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.LeashHitch;
 
 public class CraftLeash extends CraftHanging implements LeashHitch {
+
     public CraftLeash(CraftServer server, EntityLeash entity) {
         super(server, entity);
     }
@@ -21,6 +21,7 @@ public class CraftLeash extends CraftHanging implements LeashHitch {
         return "CraftLeash";
     }
 
+    @Override
     public EntityType getType() {
         return EntityType.LEASH_HITCH;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftLightningStrike.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftLightningStrike.java
index be4f10f..548812e 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftLightningStrike.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftLightningStrike.java
@@ -1,17 +1,26 @@
 package org.bukkit.craftbukkit.entity;
 
 import net.minecraft.server.EntityLightning;
-
 import org.bukkit.craftbukkit.CraftServer;
-import org.bukkit.entity.Arrow;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.LightningStrike;
 
 public class CraftLightningStrike extends CraftEntity implements LightningStrike {
+
+    // Spigot start
+    private final LightningStrike.Spigot spigot = new LightningStrike.Spigot() {
+
+        @Override
+        public boolean isSilent() {
+            return getHandle().isSilent;
+        }
+    };
+
     public CraftLightningStrike(final CraftServer server, final EntityLightning entity) {
         super(server, entity);
     }
 
+    @Override
     public boolean isEffect() {
         return ((EntityLightning) super.getHandle()).isEffect;
     }
@@ -26,24 +35,13 @@ public class CraftLightningStrike extends CraftEntity implements LightningStrike
         return "CraftLightningStrike";
     }
 
+    @Override
     public EntityType getType() {
         return EntityType.LIGHTNING;
     }
-    
-    // Spigot start
-    private final LightningStrike.Spigot spigot = new LightningStrike.Spigot()
-    {
 
-        @Override
-        public boolean isSilent()
-        {
-            return getHandle().isSilent;
-        }
-
-    };
-
-    public LightningStrike.Spigot spigot()
-    {
+    @Override
+    public LightningStrike.Spigot spigot() {
         return this.spigot;
     }
     // Spigot end
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
index add554e..cb7a97e 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
@@ -1,19 +1,13 @@
 package org.bukkit.craftbukkit.entity;
 
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.List;
-
 import net.minecraft.server.DamageSource;
 import net.minecraft.server.EntityArrow;
 import net.minecraft.server.EntityEgg;
 import net.minecraft.server.EntityEnderDragon;
 import net.minecraft.server.EntityEnderPearl;
+import net.minecraft.server.EntityFireball;
 import net.minecraft.server.EntityFishingHook;
 import net.minecraft.server.EntityHuman;
-import net.minecraft.server.EntityFireball;
 import net.minecraft.server.EntityInsentient;
 import net.minecraft.server.EntityLargeFireball;
 import net.minecraft.server.EntityLiving;
@@ -27,7 +21,6 @@ import net.minecraft.server.EntityWitherSkull;
 import net.minecraft.server.GenericAttributes;
 import net.minecraft.server.MobEffect;
 import net.minecraft.server.MobEffectList;
-
 import org.apache.commons.lang.Validate;
 import org.bukkit.Location;
 import org.bukkit.Material;
@@ -61,21 +54,29 @@ import org.bukkit.util.BlockIterator;
 import org.bukkit.util.NumberConversions;
 import org.bukkit.util.Vector;
 
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.List;
+
 public class CraftLivingEntity extends CraftEntity implements LivingEntity {
+
     private CraftEntityEquipment equipment;
 
     public CraftLivingEntity(final CraftServer server, final EntityLiving entity) {
         super(server, entity);
-
         if (entity instanceof EntityInsentient) {
             equipment = new CraftEntityEquipment(this);
         }
     }
 
+    @Override
     public double getHealth() {
         return Math.min(Math.max(0, getHandle().getHealth()), getMaxHealth());
     }
 
+    @Override
     public void setHealth(double health) {
         if ((health < 0) || (health > getMaxHealth())) {
             throw new IllegalArgumentException("Health must be between 0 and " + getMaxHealth());
@@ -88,38 +89,44 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
         getHandle().setHealth((float) health);
     }
 
+    @Override
     public double getMaxHealth() {
         return getHandle().getMaxHealth();
     }
 
+    @Override
     public void setMaxHealth(double amount) {
         Validate.isTrue(amount > 0, "Max health must be greater than 0");
 
         getHandle().getAttributeInstance(GenericAttributes.maxHealth).setValue(amount);
-
         if (getHealth() > amount) {
             setHealth(amount);
         }
     }
 
+    @Override
     public void resetMaxHealth() {
         setMaxHealth(getHandle().getMaxHealth());
     }
 
+    @Override
     @Deprecated
     public Egg throwEgg() {
         return launchProjectile(Egg.class);
     }
 
+    @Override
     @Deprecated
     public Snowball throwSnowball() {
         return launchProjectile(Snowball.class);
     }
 
+    @Override
     public double getEyeHeight() {
         return getHandle().getHeadHeight();
     }
 
+    @Override
     public double getEyeHeight(boolean ignoreSneaking) {
         return getEyeHeight();
     }
@@ -128,6 +135,7 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
         if (maxDistance > 120) {
             maxDistance = 120;
         }
+
         ArrayList<Block> blocks = new ArrayList<Block>();
         Iterator<Block> itr = new BlockIterator(this, maxDistance);
         while (itr.hasNext()) {
@@ -136,6 +144,7 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
             if (maxLength != 0 && blocks.size() > maxLength) {
                 blocks.remove(0);
             }
+
             int id = block.getTypeId();
             if (transparent == null) {
                 if (id != 0) {
@@ -147,50 +156,60 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
                 }
             }
         }
+
         return blocks;
     }
 
+    @Override
     public List<Block> getLineOfSight(HashSet<Byte> transparent, int maxDistance) {
         return getLineOfSight(transparent, maxDistance, 0);
     }
 
+    @Override
     public Block getTargetBlock(HashSet<Byte> transparent, int maxDistance) {
         List<Block> blocks = getLineOfSight(transparent, maxDistance, 1);
         return blocks.get(0);
     }
 
+    @Override
     public List<Block> getLastTwoTargetBlocks(HashSet<Byte> transparent, int maxDistance) {
         return getLineOfSight(transparent, maxDistance, 2);
     }
 
+    @Override
     @Deprecated
     public Arrow shootArrow() {
         return launchProjectile(Arrow.class);
     }
 
+    @Override
     public int getRemainingAir() {
         return getHandle().getAirTicks();
     }
 
+    @Override
     public void setRemainingAir(int ticks) {
         getHandle().setAirTicks(ticks);
     }
 
+    @Override
     public int getMaximumAir() {
         return getHandle().maxAirTicks;
     }
 
+    @Override
     public void setMaximumAir(int ticks) {
         getHandle().maxAirTicks = ticks;
     }
 
+    @Override
     public void damage(double amount) {
         damage(amount, null);
     }
 
+    @Override
     public void damage(double amount, org.bukkit.entity.Entity source) {
         DamageSource reason = DamageSource.GENERIC;
-
         if (source instanceof HumanEntity) {
             reason = DamageSource.playerAttack(((CraftHumanEntity) source).getHandle());
         } else if (source instanceof LivingEntity) {
@@ -204,32 +223,39 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
         }
     }
 
+    @Override
     public Location getEyeLocation() {
         Location loc = getLocation();
         loc.setY(loc.getY() + getEyeHeight());
         return loc;
     }
 
+    @Override
     public int getMaximumNoDamageTicks() {
         return getHandle().maxNoDamageTicks;
     }
 
+    @Override
     public void setMaximumNoDamageTicks(int ticks) {
         getHandle().maxNoDamageTicks = ticks;
     }
 
+    @Override
     public double getLastDamage() {
         return getHandle().lastDamage;
     }
 
+    @Override
     public void setLastDamage(double damage) {
         getHandle().lastDamage = (float) damage;
     }
 
+    @Override
     public int getNoDamageTicks() {
         return getHandle().noDamageTicks;
     }
 
+    @Override
     public void setNoDamageTicks(int ticks) {
         getHandle().noDamageTicks = ticks;
     }
@@ -248,56 +274,71 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
         return "CraftLivingEntity{" + "id=" + getEntityId() + '}';
     }
 
+    @Override
     public Player getKiller() {
         return getHandle().killer == null ? null : (Player) getHandle().killer.getBukkitEntity();
     }
 
+    @Override
     public boolean addPotionEffect(PotionEffect effect) {
         return addPotionEffect(effect, false);
     }
 
+    @Override
     public boolean addPotionEffect(PotionEffect effect, boolean force) {
         if (hasPotionEffect(effect.getType())) {
             if (!force) {
                 return false;
             }
+
             removePotionEffect(effect.getType());
         }
+
         getHandle().addEffect(new MobEffect(effect.getType().getId(), effect.getDuration(), effect.getAmplifier(), effect.isAmbient()));
         return true;
     }
 
+    @Override
     public boolean addPotionEffects(Collection<PotionEffect> effects) {
         boolean success = true;
         for (PotionEffect effect : effects) {
             success &= addPotionEffect(effect);
         }
+
         return success;
     }
 
+    @Override
     public boolean hasPotionEffect(PotionEffectType type) {
         return getHandle().hasEffect(MobEffectList.byId[type.getId()]);
     }
 
+    @Override
     public void removePotionEffect(PotionEffectType type) {
         getHandle().removeEffect(type.getId());
     }
 
+    @Override
     public Collection<PotionEffect> getActivePotionEffects() {
         List<PotionEffect> effects = new ArrayList<PotionEffect>();
         for (Object raw : getHandle().effects.values()) {
-            if (!(raw instanceof MobEffect))
+            if (!(raw instanceof MobEffect)) {
                 continue;
+            }
+
             MobEffect handle = (MobEffect) raw;
             effects.add(new PotionEffect(PotionEffectType.getById(handle.getEffectId()), handle.getDuration(), handle.getAmplifier(), handle.isAmbient()));
         }
+
         return effects;
     }
 
+    @Override
     public <T extends Projectile> T launchProjectile(Class<? extends T> projectile) {
         return launchProjectile(projectile, null);
     }
 
+    @Override
     @SuppressWarnings("unchecked")
     public <T extends Projectile> T launchProjectile(Class<? extends T> projectile, Vector velocity) {
         net.minecraft.server.World world = ((CraftWorld) getWorld()).getHandle();
@@ -336,54 +377,73 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
         Validate.notNull(launch, "Projectile not supported");
 
         if (velocity != null) {
-            ((T) launch.getBukkitEntity()).setVelocity(velocity);
+            launch.getBukkitEntity().setVelocity(velocity);
         }
 
         world.addEntity(launch);
         return (T) launch.getBukkitEntity();
     }
 
+    @Override
     public EntityType getType() {
         return EntityType.UNKNOWN;
     }
 
+    @Override
     public boolean hasLineOfSight(Entity other) {
         return getHandle().hasLineOfSight(((CraftEntity) other).getHandle());
     }
 
+    @Override
     public boolean getRemoveWhenFarAway() {
         return getHandle() instanceof EntityInsentient && !((EntityInsentient) getHandle()).persistent;
     }
 
+    @Override
     public void setRemoveWhenFarAway(boolean remove) {
         if (getHandle() instanceof EntityInsentient) {
             ((EntityInsentient) getHandle()).persistent = !remove;
         }
     }
 
+    @Override
     public EntityEquipment getEquipment() {
         return equipment;
     }
 
+    @Override
+    public boolean getCanPickupItems() {
+        return getHandle() instanceof EntityInsentient && ((EntityInsentient) getHandle()).canPickUpLoot;
+    }
+
+    @Override
     public void setCanPickupItems(boolean pickup) {
         if (getHandle() instanceof EntityInsentient) {
             ((EntityInsentient) getHandle()).canPickUpLoot = pickup;
         }
     }
 
-    public boolean getCanPickupItems() {
-        return getHandle() instanceof EntityInsentient && ((EntityInsentient) getHandle()).canPickUpLoot;
+    @Override
+    public boolean teleport(Location location, PlayerTeleportEvent.TeleportCause cause) {
+        return getHealth() > 0 && super.teleport(location, cause);
     }
 
     @Override
-    public boolean teleport(Location location, PlayerTeleportEvent.TeleportCause cause) {
-        if (getHealth() == 0) {
-            return false;
+    public String getCustomName() {
+        if (!(getHandle() instanceof EntityInsentient)) {
+            return null;
+        }
+
+        String name = ((EntityInsentient) getHandle()).getCustomName();
+
+        if (name == null || name.length() == 0) {
+            return null;
         }
 
-        return super.teleport(location, cause);
+        return name;
     }
 
+    @Override
     public void setCustomName(String name) {
         if (!(getHandle() instanceof EntityInsentient)) {
             return;
@@ -401,41 +461,29 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
         ((EntityInsentient) getHandle()).setCustomName(name);
     }
 
-    public String getCustomName() {
-        if (!(getHandle() instanceof EntityInsentient)) {
-            return null;
-        }
-
-        String name = ((EntityInsentient) getHandle()).getCustomName();
-
-        if (name == null || name.length() == 0) {
-            return null;
-        }
-
-        return name;
+    @Override
+    public boolean isCustomNameVisible() {
+        return getHandle() instanceof EntityInsentient && ((EntityInsentient) getHandle()).getCustomNameVisible();
     }
 
+    @Override
     public void setCustomNameVisible(boolean flag) {
         if (getHandle() instanceof EntityInsentient) {
             ((EntityInsentient) getHandle()).setCustomNameVisible(flag);
         }
     }
 
-    public boolean isCustomNameVisible() {
-        return getHandle() instanceof EntityInsentient && ((EntityInsentient) getHandle()).getCustomNameVisible();
-    }
-
+    @Override
     public boolean isLeashed() {
-        if (!(getHandle() instanceof EntityInsentient)) {
-            return false;
-        }
-        return ((EntityInsentient) getHandle()).getLeashHolder() != null;
+        return getHandle() instanceof EntityInsentient && ((EntityInsentient) getHandle()).getLeashHolder() != null;
     }
 
+    @Override
     public Entity getLeashHolder() throws IllegalStateException {
         if (!isLeashed()) {
             throw new IllegalStateException("Entity not leashed");
         }
+
         return ((EntityInsentient) getHandle()).getLeashHolder().getBukkitEntity();
     }
 
@@ -443,10 +491,12 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
         if (!isLeashed()) {
             return false;
         }
+
         ((EntityInsentient) getHandle()).unleash(true, false);
         return true;
     }
 
+    @Override
     public boolean setLeashHolder(Entity holder) {
         if ((getHandle() instanceof EntityWither) || !(getHandle() instanceof EntityInsentient)) {
             return false;
@@ -461,45 +511,54 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
         }
 
         unleash();
+
         ((EntityInsentient) getHandle()).setLeashHolder(((CraftEntity) holder).getHandle(), true);
         return true;
     }
 
+    @Override
     @Deprecated
     public int _INVALID_getLastDamage() {
         return NumberConversions.ceil(getLastDamage());
     }
 
+    @Override
     @Deprecated
     public void _INVALID_setLastDamage(int damage) {
         setLastDamage(damage);
     }
 
+    @Override
     @Deprecated
     public void _INVALID_damage(int amount) {
         damage(amount);
     }
 
+    @Override
     @Deprecated
     public void _INVALID_damage(int amount, Entity source) {
         damage(amount, source);
     }
 
+    @Override
     @Deprecated
     public int _INVALID_getHealth() {
         return NumberConversions.ceil(getHealth());
     }
 
+    @Override
     @Deprecated
     public void _INVALID_setHealth(int health) {
         setHealth(health);
     }
 
+    @Override
     @Deprecated
     public int _INVALID_getMaxHealth() {
         return NumberConversions.ceil(getMaxHealth());
     }
 
+    @Override
     @Deprecated
     public void _INVALID_setMaxHealth(int health) {
         setMaxHealth(health);
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftMagmaCube.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftMagmaCube.java
index dace70b..5e005c9 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftMagmaCube.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftMagmaCube.java
@@ -1,7 +1,6 @@
 package org.bukkit.craftbukkit.entity;
 
 import net.minecraft.server.EntityMagmaCube;
-
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.MagmaCube;
@@ -12,6 +11,7 @@ public class CraftMagmaCube extends CraftSlime implements MagmaCube {
         super(server, entity);
     }
 
+    @Override
     public EntityMagmaCube getHandle() {
         return (EntityMagmaCube) entity;
     }
@@ -21,6 +21,7 @@ public class CraftMagmaCube extends CraftSlime implements MagmaCube {
         return "CraftMagmaCube";
     }
 
+    @Override
     public EntityType getType() {
         return EntityType.MAGMA_CUBE;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecart.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecart.java
index daf6bb4..86893a2 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecart.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecart.java
@@ -1,55 +1,65 @@
 package org.bukkit.craftbukkit.entity;
 
 import net.minecraft.server.EntityMinecartAbstract;
-
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.Minecart;
 import org.bukkit.util.NumberConversions;
 import org.bukkit.util.Vector;
 
 public abstract class CraftMinecart extends CraftVehicle implements Minecart {
+
     public CraftMinecart(CraftServer server, EntityMinecartAbstract entity) {
         super(server, entity);
     }
 
-    public void setDamage(double damage) {
-        getHandle().setDamage((float) damage);
-    }
-
+    @Override
     public double getDamage() {
         return getHandle().getDamage();
     }
 
+    @Override
+    public void setDamage(double damage) {
+        getHandle().setDamage((float) damage);
+    }
+
+    @Override
     public double getMaxSpeed() {
         return getHandle().maxSpeed;
     }
 
+    @Override
     public void setMaxSpeed(double speed) {
         if (speed >= 0D) {
             getHandle().maxSpeed = speed;
         }
     }
 
+    @Override
     public boolean isSlowWhenEmpty() {
         return getHandle().slowWhenEmpty;
     }
 
+    @Override
     public void setSlowWhenEmpty(boolean slow) {
         getHandle().slowWhenEmpty = slow;
     }
 
+    @Override
     public Vector getFlyingVelocityMod() {
         return getHandle().getFlyingVelocityMod();
     }
 
+    @Override
     public void setFlyingVelocityMod(Vector flying) {
         getHandle().setFlyingVelocityMod(flying);
     }
 
+    @Override
     public Vector getDerailedVelocityMod() {
         return getHandle().getDerailedVelocityMod();
     }
 
+    @Override
     public void setDerailedVelocityMod(Vector derailed) {
         getHandle().setDerailedVelocityMod(derailed);
     }
@@ -59,11 +69,13 @@ public abstract class CraftMinecart extends CraftVehicle implements Minecart {
         return (EntityMinecartAbstract) entity;
     }
 
+    @Override
     @Deprecated
     public void _INVALID_setDamage(int damage) {
         setDamage(damage);
     }
 
+    @Override
     @Deprecated
     public int _INVALID_getDamage() {
         return NumberConversions.ceil(getDamage());
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartChest.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartChest.java
index f5a1875..b418aa0 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartChest.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartChest.java
@@ -1,7 +1,6 @@
 package org.bukkit.craftbukkit.entity;
 
 import net.minecraft.server.EntityMinecartChest;
-
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.inventory.CraftInventory;
 import org.bukkit.entity.EntityType;
@@ -10,6 +9,7 @@ import org.bukkit.inventory.Inventory;
 
 @SuppressWarnings("deprecation")
 public class CraftMinecartChest extends CraftMinecart implements StorageMinecart {
+
     private final CraftInventory inventory;
 
     public CraftMinecartChest(CraftServer server, EntityMinecartChest entity) {
@@ -17,6 +17,7 @@ public class CraftMinecartChest extends CraftMinecart implements StorageMinecart
         inventory = new CraftInventory(entity);
     }
 
+    @Override
     public Inventory getInventory() {
         return inventory;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartCommand.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartCommand.java
index 813b080..0db4e61 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartCommand.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartCommand.java
@@ -1,9 +1,6 @@
 package org.bukkit.craftbukkit.entity;
 
-import java.util.Set;
-
 import net.minecraft.server.EntityMinecartCommandBlock;
-
 import org.bukkit.Bukkit;
 import org.bukkit.Server;
 import org.bukkit.craftbukkit.CraftServer;
@@ -15,7 +12,10 @@ import org.bukkit.permissions.PermissionAttachment;
 import org.bukkit.permissions.PermissionAttachmentInfo;
 import org.bukkit.plugin.Plugin;
 
+import java.util.Set;
+
 public class CraftMinecartCommand extends CraftMinecart implements CommandMinecart {
+
     private final PermissibleBase perm = new PermissibleBase(this);
 
     public CraftMinecartCommand(CraftServer server, EntityMinecartCommandBlock entity) {
@@ -33,11 +33,6 @@ public class CraftMinecartCommand extends CraftMinecart implements CommandMineca
     }
 
     @Override
-    public void setName(String name) {
-        ((EntityMinecartCommandBlock) getHandle()).getCommandBlock().setName(name != null ? name : "@");
-    }
-
-    @Override
     public EntityType getType() {
         return EntityType.MINECART_COMMAND;
     }
@@ -56,6 +51,11 @@ public class CraftMinecartCommand extends CraftMinecart implements CommandMineca
     }
 
     @Override
+    public void setName(String name) {
+        ((EntityMinecartCommandBlock) getHandle()).getCommandBlock().setName(name != null ? name : "@");
+    }
+
+    @Override
     public boolean isOp() {
         return true;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartFurnace.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartFurnace.java
index 463b4ce..93cb861 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartFurnace.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartFurnace.java
@@ -1,13 +1,13 @@
 package org.bukkit.craftbukkit.entity;
 
 import net.minecraft.server.EntityMinecartFurnace;
-
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.PoweredMinecart;
 
 @SuppressWarnings("deprecation")
 public class CraftMinecartFurnace extends CraftMinecart implements PoweredMinecart {
+
     public CraftMinecartFurnace(CraftServer server, EntityMinecartFurnace entity) {
         super(server, entity);
     }
@@ -17,6 +17,7 @@ public class CraftMinecartFurnace extends CraftMinecart implements PoweredMineca
         return "CraftMinecartFurnace";
     }
 
+    @Override
     public EntityType getType() {
         return EntityType.MINECART_FURNACE;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartHopper.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartHopper.java
index 9bd358d..397dce9 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartHopper.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartHopper.java
@@ -1,7 +1,6 @@
 package org.bukkit.craftbukkit.entity;
 
 import net.minecraft.server.EntityMinecartHopper;
-
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.inventory.CraftInventory;
 import org.bukkit.entity.EntityType;
@@ -9,6 +8,7 @@ import org.bukkit.entity.minecart.HopperMinecart;
 import org.bukkit.inventory.Inventory;
 
 final class CraftMinecartHopper extends CraftMinecart implements HopperMinecart {
+
     private final CraftInventory inventory;
 
     CraftMinecartHopper(CraftServer server, EntityMinecartHopper entity) {
@@ -21,10 +21,12 @@ final class CraftMinecartHopper extends CraftMinecart implements HopperMinecart
         return "CraftMinecartHopper{" + "inventory=" + inventory + '}';
     }
 
+    @Override
     public EntityType getType() {
         return EntityType.MINECART_HOPPER;
     }
 
+    @Override
     public Inventory getInventory() {
         return inventory;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartMobSpawner.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartMobSpawner.java
index a78d816..b41a71b 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartMobSpawner.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartMobSpawner.java
@@ -1,12 +1,12 @@
 package org.bukkit.craftbukkit.entity;
 
 import net.minecraft.server.EntityMinecartMobSpawner;
-
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.minecart.SpawnerMinecart;
 
 final class CraftMinecartMobSpawner extends CraftMinecart implements SpawnerMinecart {
+
     CraftMinecartMobSpawner(CraftServer server, EntityMinecartMobSpawner entity) {
         super(server, entity);
     }
@@ -16,6 +16,7 @@ final class CraftMinecartMobSpawner extends CraftMinecart implements SpawnerMine
         return "CraftMinecartMobSpawner";
     }
 
+    @Override
     public EntityType getType() {
         return EntityType.MINECART_MOB_SPAWNER;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartRideable.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartRideable.java
index 9305d88..e23f1d3 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartRideable.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartRideable.java
@@ -1,12 +1,12 @@
 package org.bukkit.craftbukkit.entity;
 
 import net.minecraft.server.EntityMinecartAbstract;
-
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.minecart.RideableMinecart;
 
 public class CraftMinecartRideable extends CraftMinecart implements RideableMinecart {
+
     public CraftMinecartRideable(CraftServer server, EntityMinecartAbstract entity) {
         super(server, entity);
     }
@@ -16,6 +16,7 @@ public class CraftMinecartRideable extends CraftMinecart implements RideableMine
         return "CraftMinecartRideable";
     }
 
+    @Override
     public EntityType getType() {
         return EntityType.MINECART;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartTNT.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartTNT.java
index 0c8109b..c01f56d 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartTNT.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartTNT.java
@@ -1,12 +1,12 @@
 package org.bukkit.craftbukkit.entity;
 
 import net.minecraft.server.EntityMinecartTNT;
-
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.minecart.ExplosiveMinecart;
 
 final class CraftMinecartTNT extends CraftMinecart implements ExplosiveMinecart {
+
     CraftMinecartTNT(CraftServer server, EntityMinecartTNT entity) {
         super(server, entity);
     }
@@ -16,6 +16,7 @@ final class CraftMinecartTNT extends CraftMinecart implements ExplosiveMinecart
         return "CraftMinecartTNT";
     }
 
+    @Override
     public EntityType getType() {
         return EntityType.MINECART_TNT;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftMonster.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftMonster.java
index 72dedbc..6bfb4bc 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftMonster.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftMonster.java
@@ -1,7 +1,6 @@
 package org.bukkit.craftbukkit.entity;
 
 import net.minecraft.server.EntityMonster;
-
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.Monster;
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftMushroomCow.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftMushroomCow.java
index 3dd7ea3..6466ff2 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftMushroomCow.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftMushroomCow.java
@@ -1,12 +1,12 @@
 package org.bukkit.craftbukkit.entity;
 
 import net.minecraft.server.EntityMushroomCow;
-
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.MushroomCow;
 
 public class CraftMushroomCow extends CraftCow implements MushroomCow {
+
     public CraftMushroomCow(CraftServer server, EntityMushroomCow entity) {
         super(server, entity);
     }
@@ -21,6 +21,7 @@ public class CraftMushroomCow extends CraftCow implements MushroomCow {
         return "CraftMushroomCow";
     }
 
+    @Override
     public EntityType getType() {
         return EntityType.MUSHROOM_COW;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftOcelot.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftOcelot.java
index 37cc315..1f8ba15 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftOcelot.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftOcelot.java
@@ -7,6 +7,7 @@ import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Ocelot;
 
 public class CraftOcelot extends CraftTameableAnimal implements Ocelot {
+
     public CraftOcelot(CraftServer server, EntityOcelot wolf) {
         super(server, wolf);
     }
@@ -16,10 +17,12 @@ public class CraftOcelot extends CraftTameableAnimal implements Ocelot {
         return (EntityOcelot) entity;
     }
 
+    @Override
     public Type getCatType() {
         return Type.getType(getHandle().getCatType());
     }
 
+    @Override
     public void setCatType(Type type) {
         Validate.notNull(type, "Cat type cannot be null");
         getHandle().setCatType(type.getId());
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPainting.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPainting.java
index 925a15f..3d1e6e5 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPainting.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPainting.java
@@ -3,7 +3,6 @@ package org.bukkit.craftbukkit.entity;
 import net.minecraft.server.EntityPainting;
 import net.minecraft.server.EnumArt;
 import net.minecraft.server.WorldServer;
-
 import org.bukkit.Art;
 import org.bukkit.block.BlockFace;
 import org.bukkit.craftbukkit.CraftArt;
@@ -18,15 +17,18 @@ public class CraftPainting extends CraftHanging implements Painting {
         super(server, entity);
     }
 
+    @Override
     public Art getArt() {
         EnumArt art = getHandle().art;
         return CraftArt.NotchToBukkit(art);
     }
 
+    @Override
     public boolean setArt(Art art) {
         return setArt(art, false);
     }
 
+    @Override
     public boolean setArt(Art art, boolean force) {
         EntityPainting painting = this.getHandle();
         EnumArt oldArt = painting.art;
@@ -38,10 +40,12 @@ public class CraftPainting extends CraftHanging implements Painting {
             painting.setDirection(painting.direction);
             return false;
         }
+
         this.update();
         return true;
     }
 
+    @Override
     public boolean setFacingDirection(BlockFace face, boolean force) {
         if (super.setFacingDirection(face, force)) {
             update();
@@ -75,6 +79,7 @@ public class CraftPainting extends CraftHanging implements Painting {
         return "CraftPainting{art=" + getArt() + "}";
     }
 
+    @Override
     public EntityType getType() {
         return EntityType.PAINTING;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPig.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPig.java
index 82bc7a6..4346c58 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPig.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPig.java
@@ -1,24 +1,27 @@
 package org.bukkit.craftbukkit.entity;
 
 import net.minecraft.server.EntityPig;
-
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Pig;
 
 public class CraftPig extends CraftAnimals implements Pig {
+
     public CraftPig(CraftServer server, EntityPig entity) {
         super(server, entity);
     }
 
+    @Override
     public boolean hasSaddle() {
         return getHandle().hasSaddle();
     }
 
+    @Override
     public void setSaddle(boolean saddled) {
         getHandle().setSaddle(saddled);
     }
 
+    @Override
     public EntityPig getHandle() {
         return (EntityPig) entity;
     }
@@ -28,6 +31,7 @@ public class CraftPig extends CraftAnimals implements Pig {
         return "CraftPig";
     }
 
+    @Override
     public EntityType getType() {
         return EntityType.PIG;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPigZombie.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPigZombie.java
index 0e6ccea..c97a294 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPigZombie.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPigZombie.java
@@ -1,7 +1,6 @@
 package org.bukkit.craftbukkit.entity;
 
 import net.minecraft.server.EntityPigZombie;
-
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.PigZombie;
@@ -12,23 +11,27 @@ public class CraftPigZombie extends CraftZombie implements PigZombie {
         super(server, entity);
     }
 
+    @Override
     public int getAnger() {
         return getHandle().angerLevel;
     }
 
+    @Override
     public void setAnger(int level) {
         getHandle().angerLevel = level;
     }
 
-    public void setAngry(boolean angry) {
-        setAnger(angry ? 400 : 0);
-    }
-
+    @Override
     public boolean isAngry() {
         return getAnger() > 0;
     }
 
     @Override
+    public void setAngry(boolean angry) {
+        setAnger(angry ? 400 : 0);
+    }
+
+    @Override
     public EntityPigZombie getHandle() {
         return (EntityPigZombie) entity;
     }
@@ -38,6 +41,7 @@ public class CraftPigZombie extends CraftZombie implements PigZombie {
         return "CraftPigZombie";
     }
 
+    @Override
     public EntityType getType() {
         return EntityType.PIG_ZOMBIE;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 52760c0..f15b894 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -1,47 +1,67 @@
 package org.bukkit.craftbukkit.entity;
 
 import com.google.common.collect.ImmutableSet;
-import com.google.common.collect.MapMaker;
-
-import java.io.ByteArrayOutputStream;
-import java.io.IOException;
-import java.net.InetSocketAddress;
-import java.net.SocketAddress;
-import java.util.Collection;
-import java.util.HashSet;
-import java.util.LinkedHashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.UUID;
-import java.util.logging.Level;
-import java.util.logging.Logger;
-
 import net.md_5.bungee.api.chat.BaseComponent;
-import net.minecraft.server.*;
-
+import net.minecraft.server.AttributeInstance;
+import net.minecraft.server.AttributeMapServer;
+import net.minecraft.server.AttributeModifiable;
+import net.minecraft.server.AttributeRanged;
+import net.minecraft.server.ChunkCoordinates;
+import net.minecraft.server.Container;
+import net.minecraft.server.Entity;
+import net.minecraft.server.EntityHuman;
+import net.minecraft.server.EntityPlayer;
+import net.minecraft.server.EntityTracker;
+import net.minecraft.server.EntityTrackerEntry;
+import net.minecraft.server.EnumGamemode;
+import net.minecraft.server.IAttribute;
+import net.minecraft.server.IChatBaseComponent;
+import net.minecraft.server.NBTTagCompound;
+import net.minecraft.server.Packet;
+import net.minecraft.server.PacketPlayOutBlockChange;
+import net.minecraft.server.PacketPlayOutChat;
+import net.minecraft.server.PacketPlayOutCustomPayload;
+import net.minecraft.server.PacketPlayOutGameStateChange;
+import net.minecraft.server.PacketPlayOutMap;
+import net.minecraft.server.PacketPlayOutNamedSoundEffect;
+import net.minecraft.server.PacketPlayOutPlayerInfo;
+import net.minecraft.server.PacketPlayOutSpawnPosition;
+import net.minecraft.server.PacketPlayOutUpdateAttributes;
+import net.minecraft.server.PacketPlayOutUpdateHealth;
+import net.minecraft.server.PacketPlayOutUpdateSign;
+import net.minecraft.server.PacketPlayOutWorldEvent;
+import net.minecraft.server.PacketPlayOutWorldParticles;
+import net.minecraft.server.PlayerConnection;
+import net.minecraft.server.WorldServer;
 import net.minecraft.util.com.mojang.authlib.GameProfile;
-import org.apache.commons.lang.Validate;
 import org.apache.commons.lang.NotImplementedException;
-import org.bukkit.*;
+import org.apache.commons.lang.Validate;
 import org.bukkit.Achievement;
 import org.bukkit.BanList;
-import org.bukkit.Statistic;
+import org.bukkit.Effect;
+import org.bukkit.GameMode;
+import org.bukkit.Instrument;
+import org.bukkit.Location;
 import org.bukkit.Material;
+import org.bukkit.Note;
+import org.bukkit.OfflinePlayer;
+import org.bukkit.Sound;
+import org.bukkit.Statistic;
 import org.bukkit.Statistic.Type;
+import org.bukkit.WeatherType;
 import org.bukkit.World;
 import org.bukkit.configuration.serialization.DelegateDeserialization;
 import org.bukkit.conversations.Conversation;
 import org.bukkit.conversations.ConversationAbandonedEvent;
 import org.bukkit.conversations.ManuallyAbandonedConversationCanceller;
-import org.bukkit.craftbukkit.block.CraftSign;
-import org.bukkit.craftbukkit.conversations.ConversationTracker;
 import org.bukkit.craftbukkit.CraftEffect;
 import org.bukkit.craftbukkit.CraftOfflinePlayer;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.CraftSound;
 import org.bukkit.craftbukkit.CraftStatistic;
 import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.craftbukkit.block.CraftSign;
+import org.bukkit.craftbukkit.conversations.ConversationTracker;
 import org.bukkit.craftbukkit.map.CraftMapView;
 import org.bukkit.craftbukkit.map.RenderData;
 import org.bukkit.craftbukkit.scoreboard.CraftScoreboard;
@@ -60,6 +80,20 @@ import org.bukkit.plugin.Plugin;
 import org.bukkit.plugin.messaging.StandardMessenger;
 import org.bukkit.scoreboard.Scoreboard;
 
+import java.io.ByteArrayOutputStream;
+import java.io.IOException;
+import java.net.InetSocketAddress;
+import java.net.SocketAddress;
+import java.util.Collection;
+import java.util.HashSet;
+import java.util.LinkedHashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.UUID;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+
 @DelegateDeserialization(CraftOfflinePlayer.class)
 public class CraftPlayer extends CraftHumanEntity implements Player {
     private long firstPlayed = 0;
@@ -210,12 +244,11 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
             if (entityplayer.playerConnection == null) continue;
 
             if (entityplayer.getBukkitEntity().canSee(this)) {
-                if (entityplayer.playerConnection.networkManager.getVersion() < 28)
-                {
-                    entityplayer.playerConnection.sendPacket( oldpacket );
-                    entityplayer.playerConnection.sendPacket( packet );
+                if (entityplayer.playerConnection.networkManager.getVersion() < 28) {
+                    entityplayer.playerConnection.sendPacket(oldpacket);
+                    entityplayer.playerConnection.sendPacket(packet);
                 } else {
-                    entityplayer.playerConnection.sendPacket( newPacket );
+                    entityplayer.playerConnection.sendPacket(newPacket);
                 }
             }
         }
@@ -245,7 +278,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public void kickPlayer(String message) {
-        org.spigotmc.AsyncCatcher.catchOp( "player kick"); // Spigot
+        org.spigotmc.AsyncCatcher.catchOp("player kick"); // Spigot
         if (getHandle().playerConnection == null) return;
 
         getHandle().playerConnection.disconnect(message == null ? "" : message);
@@ -282,23 +315,23 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
         String instrumentName = null;
         switch (instrument) {
-        case 0:
-            instrumentName = "harp";
-            break;
-        case 1:
-            instrumentName = "bd";
-            break;
-        case 2:
-            instrumentName = "snare";
-            break;
-        case 3:
-            instrumentName = "hat";
-            break;
-        case 4:
-            instrumentName = "bassattack";
-            break;
-        }
-        getHandle().playerConnection.sendPacket(new PacketPlayOutNamedSoundEffect("note."+instrumentName, loc.getBlockX(), loc.getBlockY(), loc.getBlockZ(), 3.0f, note));
+            case 0:
+                instrumentName = "harp";
+                break;
+            case 1:
+                instrumentName = "bd";
+                break;
+            case 2:
+                instrumentName = "snare";
+                break;
+            case 3:
+                instrumentName = "hat";
+                break;
+            case 4:
+                instrumentName = "bassattack";
+                break;
+        }
+        getHandle().playerConnection.sendPacket(new PacketPlayOutNamedSoundEffect("note." + instrumentName, loc.getBlockX(), loc.getBlockY(), loc.getBlockZ(), 3.0f, note));
     }
 
     @Override
@@ -323,7 +356,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
                 instrumentName = "bassattack";
                 break;
         }
-        getHandle().playerConnection.sendPacket(new PacketPlayOutNamedSoundEffect("note."+instrumentName, loc.getBlockX(), loc.getBlockY(), loc.getBlockZ(), 3.0f, note.getId()));
+        getHandle().playerConnection.sendPacket(new PacketPlayOutNamedSoundEffect("note." + instrumentName, loc.getBlockX(), loc.getBlockY(), loc.getBlockZ(), 3.0f, note.getId()));
     }
 
     @Override
@@ -831,64 +864,79 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         return GameMode.getByValue(getHandle().playerInteractManager.getGameMode().getId());
     }
 
+    @Override
     public void giveExp(int exp) {
         getHandle().giveExp(exp);
     }
 
+    @Override
     public void giveExpLevels(int levels) {
         getHandle().levelDown(levels);
     }
 
+    @Override
     public float getExp() {
         return getHandle().exp;
     }
 
+    @Override
     public void setExp(float exp) {
         getHandle().exp = exp;
         getHandle().lastSentExp = -1;
     }
 
+    @Override
     public int getLevel() {
         return getHandle().expLevel;
     }
 
+    @Override
     public void setLevel(int level) {
         getHandle().expLevel = level;
         getHandle().lastSentExp = -1;
     }
 
+    @Override
     public int getTotalExperience() {
         return getHandle().expTotal;
     }
 
+    @Override
     public void setTotalExperience(int exp) {
         getHandle().expTotal = exp;
     }
 
+    @Override
     public float getExhaustion() {
         return getHandle().getFoodData().exhaustionLevel;
     }
 
+    @Override
     public void setExhaustion(float value) {
         getHandle().getFoodData().exhaustionLevel = value;
     }
 
+    @Override
     public float getSaturation() {
         return getHandle().getFoodData().saturationLevel;
     }
 
+    @Override
     public void setSaturation(float value) {
         getHandle().getFoodData().saturationLevel = value;
     }
 
+    @Override
     public int getFoodLevel() {
         return getHandle().getFoodData().foodLevel;
     }
 
+    @Override
     public void setFoodLevel(int value) {
         getHandle().getFoodData().foodLevel = value;
     }
 
+    @Override
     public Location getBedSpawnLocation() {
         World world = getServer().getWorld(getHandle().spawnWorld);
         ChunkCoordinates bed = getHandle().getBed();
@@ -902,10 +950,12 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         return null;
     }
 
+    @Override
     public void setBedSpawnLocation(Location location) {
         setBedSpawnLocation(location, false);
     }
 
+    @Override
     public void setBedSpawnLocation(Location location, boolean override) {
         if (location == null) {
             getHandle().setRespawnPosition(null, override);
@@ -915,6 +965,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         }
     }
 
+    @Override
     public void hidePlayer(Player player) {
         Validate.notNull(player, "hidden player cannot be null");
         if (getHandle().playerConnection == null) return;
@@ -931,9 +982,10 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         }
 
         //remove the hidden player from this player user list
-        getHandle().playerConnection.sendPacket(PacketPlayOutPlayerInfo.removePlayer( ( (CraftPlayer) player ).getHandle ())); // Spigot - protocol patch
+        getHandle().playerConnection.sendPacket(PacketPlayOutPlayerInfo.removePlayer(((CraftPlayer) player).getHandle())); // Spigot - protocol patch
     }
 
+    @Override
     public void showPlayer(Player player) {
         Validate.notNull(player, "shown player cannot be null");
         if (getHandle().playerConnection == null) return;
@@ -948,25 +1000,26 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
             entry.updatePlayer(getHandle());
         }
 
-        getHandle().playerConnection.sendPacket(PacketPlayOutPlayerInfo.addPlayer( ( (CraftPlayer) player ).getHandle ())); // Spigot - protocol patch
+        getHandle().playerConnection.sendPacket(PacketPlayOutPlayerInfo.addPlayer(((CraftPlayer) player).getHandle())); // Spigot - protocol patch
     }
 
     public void removeDisconnectingPlayer(Player player) {
         hiddenPlayers.remove(player.getUniqueId());
     }
 
+    @Override
     public boolean canSee(Player player) {
         return !hiddenPlayers.contains(player.getUniqueId());
     }
 
+    @Override
     public Map<String, Object> serialize() {
         Map<String, Object> result = new LinkedHashMap<String, Object>();
-
         result.put("name", getName());
-
         return result;
     }
 
+    @Override
     public Player getPlayer() {
         return this;
     }
@@ -990,25 +1043,29 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         if (hash == 0 || hash == 485) {
             hash = 97 * 5 + (this.getUniqueId() != null ? this.getUniqueId().hashCode() : 0);
         }
+
         return hash;
     }
 
+    @Override
     public long getFirstPlayed() {
         return firstPlayed;
     }
 
+    public void setFirstPlayed(long firstPlayed) {
+        this.firstPlayed = firstPlayed;
+    }
+
+    @Override
     public long getLastPlayed() {
         return lastPlayed;
     }
 
+    @Override
     public boolean hasPlayedBefore() {
         return hasPlayedBefore;
     }
 
-    public void setFirstPlayed(long firstPlayed) {
-        this.firstPlayed = firstPlayed;
-    }
-
     public void readExtraData(NBTTagCompound nbttagcompound) {
         hasPlayedBefore = true;
         if (nbttagcompound.hasKey("bukkit")) {
@@ -1047,26 +1104,32 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         data.setString("lastKnownName", handle.getName());
     }
 
+    @Override
     public boolean beginConversation(Conversation conversation) {
         return conversationTracker.beginConversation(conversation);
     }
 
+    @Override
     public void abandonConversation(Conversation conversation) {
         conversationTracker.abandonConversation(conversation, new ConversationAbandonedEvent(conversation, new ManuallyAbandonedConversationCanceller()));
     }
 
+    @Override
     public void abandonConversation(Conversation conversation, ConversationAbandonedEvent details) {
         conversationTracker.abandonConversation(conversation, details);
     }
 
+    @Override
     public void acceptConversationInput(String input) {
         conversationTracker.acceptConversationInput(input);
     }
 
+    @Override
     public boolean isConversing() {
         return conversationTracker.isConversing();
     }
 
+    @Override
     public void sendPluginMessage(Plugin source, String channel, byte[] message) {
         StandardMessenger.validatePluginMessage(server.getMessenger(), source, channel, message);
         if (getHandle().playerConnection == null) return;
@@ -1077,6 +1140,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         }
     }
 
+    @Override
     public void setTexturePack(String url) {
         setResourcePack(url);
     }
@@ -1089,7 +1153,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     public void addChannel(String channel) {
-        com.google.common.base.Preconditions.checkState( channels.size() < 128, "Too many channels registered" ); // Spigot
+        com.google.common.base.Preconditions.checkState(channels.size() < 128, "Too many channels registered"); // Spigot
         if (channels.add(channel)) {
             server.getPluginManager().callEvent(new PlayerRegisterChannelEvent(this, channel));
         }
@@ -1101,6 +1165,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         }
     }
 
+    @Override
     public Set<String> getListeningPluginChannels() {
         return ImmutableSet.copyOf(channels);
     }
@@ -1156,6 +1221,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         if (container.getBukkitView().getType() != prop.getType()) {
             return false;
         }
+
         getHandle().setContainerData(container, prop.getId(), value);
         return true;
     }
@@ -1165,10 +1231,12 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         perm.clearPermissions();
     }
 
+    @Override
     public boolean isFlying() {
         return getHandle().abilities.isFlying;
     }
 
+    @Override
     public void setFlying(boolean value) {
         boolean needsUpdate = getHandle().abilities.canFly != value; // PaperSpigot - Only refresh abilities if needed
         if (!getAllowFlight() && value) {
@@ -1179,10 +1247,12 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         if (needsUpdate) getHandle().updateAbilities(); // PaperSpigot - Only refresh abilities if needed
     }
 
+    @Override
     public boolean getAllowFlight() {
         return getHandle().abilities.canFly;
     }
 
+    @Override
     public void setAllowFlight(boolean value) {
         if (isFlying() && !value) {
             getHandle().abilities.isFlying = false;
@@ -1201,29 +1271,32 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         }
     }
 
+    @Override
+    public float getFlySpeed() {
+        return getHandle().abilities.flySpeed * 2f;
+    }
+
+    @Override
     public void setFlySpeed(float value) {
         validateSpeed(value);
         EntityPlayer player = getHandle();
-        player.abilities.flySpeed = Math.max( value, 0.0001f ) / 2f; // Spigot
+        player.abilities.flySpeed = Math.max(value, 0.0001f) / 2f; // Spigot
         player.updateAbilities();
+    }
 
+    @Override
+    public float getWalkSpeed() {
+        return getHandle().abilities.walkSpeed * 2f;
     }
 
+    @Override
     public void setWalkSpeed(float value) {
         validateSpeed(value);
         EntityPlayer player = getHandle();
-        player.abilities.walkSpeed = Math.max( value, 0.0001f ) / 2f; // Spigot
+        player.abilities.walkSpeed = Math.max(value, 0.0001f) / 2f; // Spigot
         player.updateAbilities();
     }
 
-    public float getFlySpeed() {
-        return getHandle().abilities.flySpeed * 2f;
-    }
-
-    public float getWalkSpeed() {
-        return getHandle().abilities.walkSpeed * 2f;
-    }
-
     private void validateSpeed(float value) {
         if (value < 0) {
             if (value < -1f) {
@@ -1249,23 +1322,27 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         getHandle().triggerHealthUpdate();
     }
 
+    @Override
     public CraftScoreboard getScoreboard() {
         return this.server.getScoreboardManager().getPlayerBoard(this);
     }
 
+    @Override
     public void setScoreboard(Scoreboard scoreboard) {
         Validate.notNull(scoreboard, "Scoreboard cannot be null");
         PlayerConnection playerConnection = getHandle().playerConnection;
         if (playerConnection == null) {
             throw new IllegalStateException("Cannot set scoreboard yet");
         }
-        if (playerConnection.isDisconnected()) {
-            // throw new IllegalStateException("Cannot set scoreboard for invalid CraftPlayer"); // Spigot - remove this as Mojang's semi asynchronous Netty implementation can lead to races
-        }
+
+        //if (playerConnection.isDisconnected()) {
+        // throw new IllegalStateException("Cannot set scoreboard for invalid CraftPlayer"); // Spigot - remove this as Mojang's semi asynchronous Netty implementation can lead to races
+        //}
 
         this.server.getScoreboardManager().setPlayerBoard(this, scoreboard);
     }
 
+    @Override
     public void setHealthScale(double value) {
         Validate.isTrue((float) value > 0F, "Must be greater than 0");
         healthScale = value;
@@ -1273,16 +1350,19 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         updateScaledHealth();
     }
 
+    @Override
     public double getHealthScale() {
         return healthScale;
     }
 
+    @Override
     public void setHealthScaled(boolean scale) {
         if (scaledHealth != (scaledHealth = scale)) {
             updateScaledHealth();
         }
     }
 
+    @Override
     public boolean isHealthScaled() {
         return scaledHealth;
     }
@@ -1318,6 +1398,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         if (!scaledHealth && !force) {
             return;
         }
+
         for (Object genericInstance : collection) {
             IAttribute attribute = ((AttributeInstance) genericInstance).getAttribute();
             if (attribute.getName().equals("generic.maxHealth")) {
@@ -1325,140 +1406,123 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
                 break;
             }
         }
+
         // Spigot start
         double healthMod = scaledHealth ? healthScale : getMaxHealth();
-        if ( healthMod >= Float.MAX_VALUE || healthMod <= 0 )
-        {
+        if (healthMod >= Float.MAX_VALUE || healthMod <= 0) {
             healthMod = 20; // Reset health
-            getServer().getLogger().warning( getName() + " tried to crash the server with a large health attribute" );
+            getServer().getLogger().warning(getName() + " tried to crash the server with a large health attribute");
         }
+
         collection.add(new AttributeModifiable(getHandle().getAttributeMap(), (new AttributeRanged("generic.maxHealth", healthMod, 0.0D, Float.MAX_VALUE)).a("Max Health").a(true)));
         // Spigot end
     }
 
     // Spigot start
-    private final Player.Spigot spigot = new Player.Spigot()
-    {
+    private final Player.Spigot spigot = new Player.Spigot() {
 
         @Override
-        public InetSocketAddress getRawAddress()
-        {
+        public InetSocketAddress getRawAddress() {
             return (InetSocketAddress) getHandle().playerConnection.networkManager.getRawAddress();
         }
 
         @Override
-        public boolean getCollidesWithEntities()
-        {
+        public boolean getCollidesWithEntities() {
             return getHandle().collidesWithEntities;
         }
 
         @Override
-        public void setCollidesWithEntities(boolean collides)
-        {
+        public void setCollidesWithEntities(boolean collides) {
             getHandle().collidesWithEntities = collides;
             getHandle().k = collides; // First boolean of Entity
         }
 
         @Override
-        public void respawn()
-        {
-            if ( getHealth() <= 0 && isOnline() )
-            {
-                server.getServer().getPlayerList().moveToWorld( getHandle(), 0, false );
+        public void respawn() {
+            if (getHealth() <= 0 && isOnline()) {
+                server.getServer().getPlayerList().moveToWorld(getHandle(), 0, false);
             }
         }
 
         @Override
-        public void playEffect( Location location, Effect effect, int id, int data, float offsetX, float offsetY, float offsetZ, float speed, int particleCount, int radius )
-        {
-            Validate.notNull( location, "Location cannot be null" );
-            Validate.notNull( effect, "Effect cannot be null" );
-            Validate.notNull( location.getWorld(), "World cannot be null" );
+        public void playEffect(Location location, Effect effect, int id, int data, float offsetX, float offsetY, float offsetZ, float speed, int particleCount, int radius) {
+            Validate.notNull(location, "Location cannot be null");
+            Validate.notNull(effect, "Effect cannot be null");
+            Validate.notNull(location.getWorld(), "World cannot be null");
             Packet packet;
-            if ( effect.getType() != Effect.Type.PARTICLE )
-            {
+            if (effect.getType() != Effect.Type.PARTICLE) {
                 int packetData = effect.getId();
-                packet = new PacketPlayOutWorldEvent( packetData, location.getBlockX(), location.getBlockY(), location.getBlockZ(), id, false );
-            } else
-            {
+                packet = new PacketPlayOutWorldEvent(packetData, location.getBlockX(), location.getBlockY(), location.getBlockZ(), id, false);
+            } else {
                 StringBuilder particleFullName = new StringBuilder();
-                particleFullName.append( effect.getName() );
-                if ( effect.getData() != null && ( effect.getData().equals( Material.class ) || effect.getData().equals( org.bukkit.material.MaterialData.class ) ) )
-                {
-                    particleFullName.append( '_' ).append( id );
+                particleFullName.append(effect.getName());
+                if (effect.getData() != null && (effect.getData().equals(Material.class) || effect.getData().equals(org.bukkit.material.MaterialData.class))) {
+                    particleFullName.append('_').append(id);
                 }
-                if ( effect.getData() != null && effect.getData().equals( org.bukkit.material.MaterialData.class ) )
-                {
-                    particleFullName.append( '_' ).append( data );
+                if (effect.getData() != null && effect.getData().equals(org.bukkit.material.MaterialData.class)) {
+                    particleFullName.append('_').append(data);
                 }
-                packet = new PacketPlayOutWorldParticles( particleFullName.toString(), (float) location.getX(), (float) location.getY(), (float) location.getZ(), offsetX, offsetY, offsetZ, speed, particleCount );
+                packet = new PacketPlayOutWorldParticles(particleFullName.toString(), (float) location.getX(), (float) location.getY(), (float) location.getZ(), offsetX, offsetY, offsetZ, speed, particleCount);
             }
             int distance;
             radius *= radius;
-            if ( getHandle().playerConnection == null )
-            {
+            if (getHandle().playerConnection == null) {
                 return;
             }
-            if ( !location.getWorld().equals( getWorld() ) )
-            {
+            if (!location.getWorld().equals(getWorld())) {
                 return;
             }
 
-            distance = (int) getLocation().distanceSquared( location );
-            if ( distance <= radius )
-            {
-                getHandle().playerConnection.sendPacket( packet );
+            distance = (int) getLocation().distanceSquared(location);
+            if (distance <= radius) {
+                getHandle().playerConnection.sendPacket(packet);
             }
         }
 
         @Override
-        public String getLocale()
-        {
-           return getHandle().locale;
+        public String getLocale() {
+            return getHandle().locale;
         }
 
         @Override
-        public Set<Player> getHiddenPlayers()
-        {
+        public Set<Player> getHiddenPlayers() {
             Set<Player> ret = new HashSet<Player>();
-            for ( UUID u : hiddenPlayers )
-            {
-                ret.add( getServer().getPlayer( u ) );
+            for (UUID u : hiddenPlayers) {
+                ret.add(getServer().getPlayer(u));
             }
 
-            return java.util.Collections.unmodifiableSet( ret );
+            return java.util.Collections.unmodifiableSet(ret);
         }
 
         @Override
-        public void sendMessage( BaseComponent component )
-        {
-            sendMessage( new BaseComponent[] { component } );
+        public void sendMessage(BaseComponent component) {
+            sendMessage(new BaseComponent[]{component});
         }
 
         @Override
-        public void sendMessage( BaseComponent... components )
-        {
-            if ( getHandle().playerConnection == null ) return;
+        public void sendMessage(BaseComponent... components) {
+            if (getHandle().playerConnection == null) return;
 
             PacketPlayOutChat packet = new PacketPlayOutChat();
             packet.components = components;
-            getHandle().playerConnection.sendPacket( packet );
+            getHandle().playerConnection.sendPacket(packet);
         }
 
         // PaperSpigot start - Add affects spawning API
+        @Override
         public void setAffectsSpawning(boolean affects) {
             getHandle().affectsSpawning = affects;
         }
 
+        @Override
         public boolean getAffectsSpawning() {
             return getHandle().affectsSpawning;
         }
         // PaperSpigot end
-
     };
 
-    public Player.Spigot spigot()
-    {
+    @Override
+    public Player.Spigot spigot() {
         return spigot;
     }
     // Spigot end
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftProjectile.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftProjectile.java
index 2f29f2f..cc952b4 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftProjectile.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftProjectile.java
@@ -2,21 +2,23 @@ package org.bukkit.craftbukkit.entity;
 
 import net.minecraft.server.EntityLiving;
 import net.minecraft.server.EntityProjectile;
-
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.LivingEntity;
 import org.bukkit.entity.Projectile;
 import org.bukkit.projectiles.ProjectileSource;
 
 public abstract class CraftProjectile extends AbstractProjectile implements Projectile {
+
     public CraftProjectile(CraftServer server, net.minecraft.server.Entity entity) {
         super(server, entity);
     }
 
+    @Override
     public ProjectileSource getShooter() {
         return getHandle().projectileSource;
     }
 
+    @Override
     public void setShooter(ProjectileSource shooter) {
         if (shooter instanceof CraftLivingEntity) {
             getHandle().shooter = (EntityLiving) ((CraftLivingEntity) shooter).entity;
@@ -27,6 +29,7 @@ public abstract class CraftProjectile extends AbstractProjectile implements Proj
             getHandle().shooter = null;
             getHandle().shooterName = null;
         }
+
         getHandle().projectileSource = shooter;
     }
 
@@ -40,12 +43,12 @@ public abstract class CraftProjectile extends AbstractProjectile implements Proj
         return "CraftProjectile";
     }
 
-
     @Deprecated
     public LivingEntity _INVALID_getShooter() {
         if (getHandle().shooter == null) {
             return null;
         }
+
         return (LivingEntity) getHandle().shooter.getBukkitEntity();
     }
 
@@ -54,6 +57,7 @@ public abstract class CraftProjectile extends AbstractProjectile implements Proj
         if (shooter == null) {
             return;
         }
+
         getHandle().shooter = ((CraftLivingEntity) shooter).getHandle();
         if (shooter instanceof CraftHumanEntity) {
             getHandle().shooterName = ((CraftHumanEntity) shooter).getName();
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftSheep.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftSheep.java
index 81b938a..e81ba59 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftSheep.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftSheep.java
@@ -1,29 +1,33 @@
 package org.bukkit.craftbukkit.entity;
 
 import net.minecraft.server.EntitySheep;
-
 import org.bukkit.DyeColor;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Sheep;
 
 public class CraftSheep extends CraftAnimals implements Sheep {
+
     public CraftSheep(CraftServer server, EntitySheep entity) {
         super(server, entity);
     }
 
+    @Override
     public DyeColor getColor() {
         return DyeColor.getByWoolData((byte) getHandle().getColor());
     }
 
+    @Override
     public void setColor(DyeColor color) {
         getHandle().setColor(color.getWoolData());
     }
 
+    @Override
     public boolean isSheared() {
         return getHandle().isSheared();
     }
 
+    @Override
     public void setSheared(boolean flag) {
         getHandle().setSheared(flag);
     }
@@ -38,6 +42,7 @@ public class CraftSheep extends CraftAnimals implements Sheep {
         return "CraftSheep";
     }
 
+    @Override
     public EntityType getType() {
         return EntityType.SHEEP;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftSilverfish.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftSilverfish.java
index ef94775..08ec1d7 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftSilverfish.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftSilverfish.java
@@ -1,12 +1,12 @@
 package org.bukkit.craftbukkit.entity;
 
 import net.minecraft.server.EntitySilverfish;
-
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Silverfish;
 
 public class CraftSilverfish extends CraftMonster implements Silverfish {
+
     public CraftSilverfish(CraftServer server, EntitySilverfish entity) {
         super(server, entity);
     }
@@ -21,6 +21,7 @@ public class CraftSilverfish extends CraftMonster implements Silverfish {
         return "CraftSilverfish";
     }
 
+    @Override
     public EntityType getType() {
         return EntityType.SILVERFISH;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftSkeleton.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftSkeleton.java
index 58da899..c75b1da 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftSkeleton.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftSkeleton.java
@@ -1,7 +1,6 @@
 package org.bukkit.craftbukkit.entity;
 
 import net.minecraft.server.EntitySkeleton;
-
 import org.apache.commons.lang.Validate;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
@@ -23,14 +22,17 @@ public class CraftSkeleton extends CraftMonster implements Skeleton {
         return "CraftSkeleton";
     }
 
+    @Override
     public EntityType getType() {
         return EntityType.SKELETON;
     }
 
+    @Override
     public SkeletonType getSkeletonType() {
         return SkeletonType.getType(getHandle().getSkeletonType());
     }
 
+    @Override
     public void setSkeletonType(SkeletonType type) {
         Validate.notNull(type);
         getHandle().setSkeletonType(type.getId());
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftSlime.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftSlime.java
index da3df00..298c063 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftSlime.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftSlime.java
@@ -1,7 +1,6 @@
 package org.bukkit.craftbukkit.entity;
 
 import net.minecraft.server.EntitySlime;
-
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Slime;
@@ -30,6 +29,7 @@ public class CraftSlime extends CraftLivingEntity implements Slime {
         return "CraftSlime";
     }
 
+    @Override
     public EntityType getType() {
         return EntityType.SLIME;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftSmallFireball.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftSmallFireball.java
index 7200970..4365e1b 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftSmallFireball.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftSmallFireball.java
@@ -6,6 +6,7 @@ import org.bukkit.entity.EntityType;
 import org.bukkit.entity.SmallFireball;
 
 public class CraftSmallFireball extends CraftFireball implements SmallFireball {
+
     public CraftSmallFireball(CraftServer server, EntitySmallFireball entity) {
         super(server, entity);
     }
@@ -20,6 +21,7 @@ public class CraftSmallFireball extends CraftFireball implements SmallFireball {
         return "CraftSmallFireball";
     }
 
+    @Override
     public EntityType getType() {
         return EntityType.SMALL_FIREBALL;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftSnowball.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftSnowball.java
index 44de749..94b008f 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftSnowball.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftSnowball.java
@@ -6,6 +6,7 @@ import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Snowball;
 
 public class CraftSnowball extends CraftProjectile implements Snowball {
+
     public CraftSnowball(CraftServer server, EntitySnowball entity) {
         super(server, entity);
     }
@@ -20,6 +21,7 @@ public class CraftSnowball extends CraftProjectile implements Snowball {
         return "CraftSnowball";
     }
 
+    @Override
     public EntityType getType() {
         return EntityType.SNOWBALL;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftSnowman.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftSnowman.java
index 319a3f3..5782214 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftSnowman.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftSnowman.java
@@ -6,6 +6,7 @@ import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Snowman;
 
 public class CraftSnowman extends CraftGolem implements Snowman {
+
     public CraftSnowman(CraftServer server, EntitySnowman entity) {
         super(server, entity);
     }
@@ -20,6 +21,7 @@ public class CraftSnowman extends CraftGolem implements Snowman {
         return "CraftSnowman";
     }
 
+    @Override
     public EntityType getType() {
         return EntityType.SNOWMAN;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftSpider.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftSpider.java
index 2a07fe1..a3f452a 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftSpider.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftSpider.java
@@ -1,7 +1,6 @@
 package org.bukkit.craftbukkit.entity;
 
 import net.minecraft.server.EntitySpider;
-
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Spider;
@@ -22,6 +21,7 @@ public class CraftSpider extends CraftMonster implements Spider {
         return "CraftSpider";
     }
 
+    @Override
     public EntityType getType() {
         return EntityType.SPIDER;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftSquid.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftSquid.java
index 433a7c6..6cb0962 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftSquid.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftSquid.java
@@ -1,7 +1,6 @@
 package org.bukkit.craftbukkit.entity;
 
 import net.minecraft.server.EntitySquid;
-
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Squid;
@@ -22,6 +21,7 @@ public class CraftSquid extends CraftWaterMob implements Squid {
         return "CraftSquid";
     }
 
+    @Override
     public EntityType getType() {
         return EntityType.SQUID;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftTNTPrimed.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftTNTPrimed.java
index d4167b7..a739750 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftTNTPrimed.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftTNTPrimed.java
@@ -2,7 +2,6 @@ package org.bukkit.craftbukkit.entity;
 
 import net.minecraft.server.EntityLiving;
 import net.minecraft.server.EntityTNTPrimed;
-
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.Entity;
 import org.bukkit.entity.EntityType;
@@ -14,26 +13,32 @@ public class CraftTNTPrimed extends CraftEntity implements TNTPrimed {
         super(server, entity);
     }
 
+    @Override
     public float getYield() {
         return getHandle().yield;
     }
 
+    @Override
+    public void setYield(float yield) {
+        getHandle().yield = yield;
+    }
+
+    @Override
     public boolean isIncendiary() {
         return getHandle().isIncendiary;
     }
 
+    @Override
     public void setIsIncendiary(boolean isIncendiary) {
         getHandle().isIncendiary = isIncendiary;
     }
 
-    public void setYield(float yield) {
-        getHandle().yield = yield;
-    }
-
+    @Override
     public int getFuseTicks() {
         return getHandle().fuseTicks;
     }
 
+    @Override
     public void setFuseTicks(int fuseTicks) {
         getHandle().fuseTicks = fuseTicks;
     }
@@ -48,10 +53,12 @@ public class CraftTNTPrimed extends CraftEntity implements TNTPrimed {
         return "CraftTNTPrimed";
     }
 
+    @Override
     public EntityType getType() {
         return EntityType.PRIMED_TNT;
     }
 
+    @Override
     public Entity getSource() {
         EntityLiving source = getHandle().getSource();
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftTameableAnimal.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftTameableAnimal.java
index d4bf3a0..9723ef3 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftTameableAnimal.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftTameableAnimal.java
@@ -9,13 +9,14 @@ import org.bukkit.entity.Tameable;
 import java.util.UUID;
 
 public class CraftTameableAnimal extends CraftAnimals implements Tameable, Creature {
+
     public CraftTameableAnimal(CraftServer server, EntityTameableAnimal entity) {
         super(server, entity);
     }
 
     @Override
     public EntityTameableAnimal getHandle() {
-        return (EntityTameableAnimal)super.getHandle();
+        return (EntityTameableAnimal) super.getHandle();
     }
 
     public UUID getOwnerUUID() {
@@ -34,6 +35,30 @@ public class CraftTameableAnimal extends CraftAnimals implements Tameable, Creat
         }
     }
 
+    @Override
+    public boolean isSitting() {
+        return getHandle().isSitting();
+    }
+
+    @Override
+    public void setSitting(boolean sitting) {
+        getHandle().getGoalSit().setSitting(sitting);
+    }
+
+    @Override
+    public boolean isTamed() {
+        return getHandle().isTamed();
+    }
+
+    @Override
+    public void setTamed(boolean tamed) {
+        getHandle().setTamed(tamed);
+        if (!tamed) {
+            setOwnerUUID(null);
+        }
+    }
+
+    @Override
     public AnimalTamer getOwner() {
         if (getOwnerUUID() == null) {
             return null;
@@ -47,10 +72,7 @@ public class CraftTameableAnimal extends CraftAnimals implements Tameable, Creat
         return owner;
     }
 
-    public boolean isTamed() {
-        return getHandle().isTamed();
-    }
-
+    @Override
     public void setOwner(AnimalTamer tamer) {
         if (tamer != null) {
             setTamed(true);
@@ -62,21 +84,6 @@ public class CraftTameableAnimal extends CraftAnimals implements Tameable, Creat
         }
     }
 
-    public void setTamed(boolean tame) {
-        getHandle().setTamed(tame);
-        if (!tame) {
-            setOwnerUUID(null);
-        }
-    }
-
-    public boolean isSitting() {
-        return getHandle().isSitting();
-    }
-
-    public void setSitting(boolean sitting) {
-        getHandle().getGoalSit().setSitting(sitting);
-    }
-
     @Override
     public String toString() {
         return getClass().getSimpleName() + "{owner=" + getOwner() + ",tamed=" + isTamed() + "}";
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftThrownExpBottle.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftThrownExpBottle.java
index fb3416e..870e858 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftThrownExpBottle.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftThrownExpBottle.java
@@ -6,6 +6,7 @@ import org.bukkit.entity.EntityType;
 import org.bukkit.entity.ThrownExpBottle;
 
 public class CraftThrownExpBottle extends CraftProjectile implements ThrownExpBottle {
+
     public CraftThrownExpBottle(CraftServer server, EntityThrownExpBottle entity) {
         super(server, entity);
     }
@@ -20,6 +21,7 @@ public class CraftThrownExpBottle extends CraftProjectile implements ThrownExpBo
         return "EntityThrownExpBottle";
     }
 
+    @Override
     public EntityType getType() {
         return EntityType.THROWN_EXP_BOTTLE;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftThrownPotion.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftThrownPotion.java
index 18da426..cb2a82b 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftThrownPotion.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftThrownPotion.java
@@ -1,9 +1,6 @@
 package org.bukkit.craftbukkit.entity;
 
-import java.util.Collection;
-
 import net.minecraft.server.EntityPotion;
-
 import org.apache.commons.lang.Validate;
 import org.bukkit.Material;
 import org.bukkit.craftbukkit.CraftServer;
@@ -14,24 +11,29 @@ import org.bukkit.inventory.ItemStack;
 import org.bukkit.potion.Potion;
 import org.bukkit.potion.PotionEffect;
 
+import java.util.Collection;
+
 public class CraftThrownPotion extends CraftProjectile implements ThrownPotion {
+
     public CraftThrownPotion(CraftServer server, EntityPotion entity) {
         super(server, entity);
     }
 
     // TODO: This one does not handle custom NBT potion effects does it?
     // In that case this method could be said to be misleading or incorrect
+    @Override
     public Collection<PotionEffect> getEffects() {
         return Potion.getBrewer().getEffectsFromDamage(getHandle().getPotionValue());
     }
 
+    @Override
     public ItemStack getItem() {
         // We run this method once since it will set the item stack if there is none.
         getHandle().getPotionValue();
-
         return CraftItemStack.asBukkitCopy(getHandle().item);
     }
 
+    @Override
     public void setItem(ItemStack item) {
         // The ItemStack must not be null.
         Validate.notNull(item, "ItemStack cannot be null.");
@@ -52,6 +54,7 @@ public class CraftThrownPotion extends CraftProjectile implements ThrownPotion {
         return "CraftThrownPotion";
     }
 
+    @Override
     public EntityType getType() {
         return EntityType.SPLASH_POTION;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftVehicle.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftVehicle.java
index 8e4af46..7311166 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftVehicle.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftVehicle.java
@@ -4,6 +4,7 @@ import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.Vehicle;
 
 public abstract class CraftVehicle extends CraftEntity implements Vehicle {
+
     public CraftVehicle(CraftServer server, net.minecraft.server.Entity entity) {
         super(server, entity);
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java
index 398029b..bf590bc 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java
@@ -7,6 +7,7 @@ import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Villager;
 
 public class CraftVillager extends CraftAgeable implements Villager {
+
     public CraftVillager(CraftServer server, EntityVillager entity) {
         super(server, entity);
     }
@@ -21,14 +22,17 @@ public class CraftVillager extends CraftAgeable implements Villager {
         return "CraftVillager";
     }
 
+    @Override
     public EntityType getType() {
         return EntityType.VILLAGER;
     }
 
+    @Override
     public Profession getProfession() {
         return Profession.getProfession(getHandle().getProfession());
     }
 
+    @Override
     public void setProfession(Profession profession) {
         Validate.notNull(profession);
         getHandle().setProfession(profession.getId());
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftWaterMob.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftWaterMob.java
index 39e8d89..2be8839 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftWaterMob.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftWaterMob.java
@@ -1,7 +1,6 @@
 package org.bukkit.craftbukkit.entity;
 
 import net.minecraft.server.EntityWaterAnimal;
-
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.WaterMob;
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftWeather.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftWeather.java
index 91a7493..a413626 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftWeather.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftWeather.java
@@ -6,6 +6,7 @@ import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Weather;
 
 public class CraftWeather extends CraftEntity implements Weather {
+
     public CraftWeather(final CraftServer server, final EntityWeather entity) {
         super(server, entity);
     }
@@ -20,6 +21,7 @@ public class CraftWeather extends CraftEntity implements Weather {
         return "CraftWeather";
     }
 
+    @Override
     public EntityType getType() {
         return EntityType.WEATHER;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftWitch.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftWitch.java
index c08833c..720576b 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftWitch.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftWitch.java
@@ -2,10 +2,11 @@ package org.bukkit.craftbukkit.entity;
 
 import net.minecraft.server.EntityWitch;
 import org.bukkit.craftbukkit.CraftServer;
-import org.bukkit.entity.Witch;
 import org.bukkit.entity.EntityType;
+import org.bukkit.entity.Witch;
 
 public class CraftWitch extends CraftMonster implements Witch {
+
     public CraftWitch(CraftServer server, EntityWitch entity) {
         super(server, entity);
     }
@@ -20,6 +21,7 @@ public class CraftWitch extends CraftMonster implements Witch {
         return "CraftWitch";
     }
 
+    @Override
     public EntityType getType() {
         return EntityType.WITCH;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftWither.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftWither.java
index fad3db8..861d7bc 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftWither.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftWither.java
@@ -2,10 +2,11 @@ package org.bukkit.craftbukkit.entity;
 
 import net.minecraft.server.EntityWither;
 import org.bukkit.craftbukkit.CraftServer;
-import org.bukkit.entity.Wither;
 import org.bukkit.entity.EntityType;
+import org.bukkit.entity.Wither;
 
 public class CraftWither extends CraftMonster implements Wither {
+
     public CraftWither(CraftServer server, EntityWither entity) {
         super(server, entity);
     }
@@ -20,6 +21,7 @@ public class CraftWither extends CraftMonster implements Wither {
         return "CraftWither";
     }
 
+    @Override
     public EntityType getType() {
         return EntityType.WITHER;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftWitherSkull.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftWitherSkull.java
index 563177e..41e6347 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftWitherSkull.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftWitherSkull.java
@@ -6,18 +6,19 @@ import org.bukkit.entity.EntityType;
 import org.bukkit.entity.WitherSkull;
 
 public class CraftWitherSkull extends CraftFireball implements WitherSkull {
+
     public CraftWitherSkull(CraftServer server, EntityWitherSkull entity) {
         super(server, entity);
     }
 
     @Override
-    public void setCharged(boolean charged) {
-        getHandle().setCharged(charged);
+    public boolean isCharged() {
+        return getHandle().isCharged();
     }
 
     @Override
-    public boolean isCharged() {
-        return getHandle().isCharged();
+    public void setCharged(boolean charged) {
+        getHandle().setCharged(charged);
     }
 
     @Override
@@ -30,6 +31,7 @@ public class CraftWitherSkull extends CraftFireball implements WitherSkull {
         return "CraftWitherSkull";
     }
 
+    @Override
     public EntityType getType() {
         return EntityType.WITHER_SKULL;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftWolf.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftWolf.java
index 3d0e7cb..4adb38b 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftWolf.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftWolf.java
@@ -7,14 +7,17 @@ import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Wolf;
 
 public class CraftWolf extends CraftTameableAnimal implements Wolf {
+
     public CraftWolf(CraftServer server, EntityWolf wolf) {
         super(server, wolf);
     }
 
+    @Override
     public boolean isAngry() {
         return getHandle().isAngry();
     }
 
+    @Override
     public void setAngry(boolean angry) {
         getHandle().setAngry(angry);
     }
@@ -29,10 +32,12 @@ public class CraftWolf extends CraftTameableAnimal implements Wolf {
         return EntityType.WOLF;
     }
 
+    @Override
     public DyeColor getCollarColor() {
         return DyeColor.getByWoolData((byte) getHandle().getCollarColor());
     }
 
+    @Override
     public void setCollarColor(DyeColor color) {
         getHandle().setCollarColor(color.getWoolData());
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftZombie.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftZombie.java
index 619579d..7bb4ef8 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftZombie.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftZombie.java
@@ -1,7 +1,6 @@
 package org.bukkit.craftbukkit.entity;
 
 import net.minecraft.server.EntityZombie;
-
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Zombie;
@@ -22,22 +21,27 @@ public class CraftZombie extends CraftMonster implements Zombie {
         return "CraftZombie";
     }
 
+    @Override
     public EntityType getType() {
         return EntityType.ZOMBIE;
     }
 
+    @Override
     public boolean isBaby() {
         return getHandle().isBaby();
     }
 
+    @Override
     public void setBaby(boolean flag) {
         getHandle().setBaby(flag);
     }
 
+    @Override
     public boolean isVillager() {
         return getHandle().isVillager();
     }
 
+    @Override
     public void setVillager(boolean flag) {
         getHandle().setVillager(flag);
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
index c493da5..10b7861 100644
--- a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
+++ b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
@@ -1,14 +1,7 @@
 package org.bukkit.craftbukkit.event;
 
-import java.net.InetAddress;
-import java.util.ArrayList;
-import java.util.EnumMap;
-import java.util.List;
-import java.util.Map;
-
 import com.google.common.base.Function;
 import com.google.common.base.Functions;
-
 import net.minecraft.server.ChunkCoordinates;
 import net.minecraft.server.Container;
 import net.minecraft.server.DamageSource;
@@ -33,7 +26,7 @@ import net.minecraft.server.PacketPlayOutSetSlot;
 import net.minecraft.server.Slot;
 import net.minecraft.server.World;
 import net.minecraft.server.WorldServer;
-
+import net.minecraft.util.org.apache.commons.lang3.Validate;
 import org.bukkit.Bukkit;
 import org.bukkit.Material;
 import org.bukkit.Server;
@@ -68,23 +61,73 @@ import org.bukkit.entity.ThrownExpBottle;
 import org.bukkit.entity.ThrownPotion;
 import org.bukkit.event.Cancellable;
 import org.bukkit.event.Event;
-import org.bukkit.event.block.*;
+import org.bukkit.event.block.Action;
+import org.bukkit.event.block.BlockDamageEvent;
+import org.bukkit.event.block.BlockFadeEvent;
+import org.bukkit.event.block.BlockGrowEvent;
+import org.bukkit.event.block.BlockIgniteEvent;
 import org.bukkit.event.block.BlockIgniteEvent.IgniteCause;
-import org.bukkit.event.entity.*;
+import org.bukkit.event.block.BlockMultiPlaceEvent;
+import org.bukkit.event.block.BlockPlaceEvent;
+import org.bukkit.event.block.BlockRedstoneEvent;
+import org.bukkit.event.block.BlockSpreadEvent;
+import org.bukkit.event.block.NotePlayEvent;
+import org.bukkit.event.entity.CreatureSpawnEvent;
 import org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason;
+import org.bukkit.event.entity.CreeperPowerEvent;
+import org.bukkit.event.entity.EntityBreakDoorEvent;
+import org.bukkit.event.entity.EntityChangeBlockEvent;
+import org.bukkit.event.entity.EntityDamageByBlockEvent;
+import org.bukkit.event.entity.EntityDamageByEntityEvent;
+import org.bukkit.event.entity.EntityDamageEvent;
 import org.bukkit.event.entity.EntityDamageEvent.DamageCause;
 import org.bukkit.event.entity.EntityDamageEvent.DamageModifier;
+import org.bukkit.event.entity.EntityDeathEvent;
+import org.bukkit.event.entity.EntityShootBowEvent;
+import org.bukkit.event.entity.EntityTameEvent;
+import org.bukkit.event.entity.EntityTargetEvent;
+import org.bukkit.event.entity.EntityTargetLivingEntityEvent;
+import org.bukkit.event.entity.ExpBottleEvent;
+import org.bukkit.event.entity.FoodLevelChangeEvent;
+import org.bukkit.event.entity.HorseJumpEvent;
+import org.bukkit.event.entity.ItemDespawnEvent;
+import org.bukkit.event.entity.ItemSpawnEvent;
+import org.bukkit.event.entity.PigZapEvent;
+import org.bukkit.event.entity.PlayerDeathEvent;
+import org.bukkit.event.entity.PlayerLeashEntityEvent;
+import org.bukkit.event.entity.PotionSplashEvent;
+import org.bukkit.event.entity.ProjectileHitEvent;
+import org.bukkit.event.entity.ProjectileLaunchEvent;
+import org.bukkit.event.entity.SpawnerSpawnEvent;
 import org.bukkit.event.inventory.InventoryCloseEvent;
 import org.bukkit.event.inventory.InventoryOpenEvent;
 import org.bukkit.event.inventory.PrepareItemCraftEvent;
-import org.bukkit.event.player.*;
+import org.bukkit.event.player.PlayerAchievementAwardedEvent;
+import org.bukkit.event.player.PlayerBucketEmptyEvent;
+import org.bukkit.event.player.PlayerBucketFillEvent;
+import org.bukkit.event.player.PlayerEditBookEvent;
+import org.bukkit.event.player.PlayerEvent;
+import org.bukkit.event.player.PlayerExpChangeEvent;
+import org.bukkit.event.player.PlayerInteractEvent;
+import org.bukkit.event.player.PlayerItemBreakEvent;
+import org.bukkit.event.player.PlayerLevelChangeEvent;
+import org.bukkit.event.player.PlayerStatisticIncrementEvent;
+import org.bukkit.event.player.PlayerUnleashEntityEvent;
 import org.bukkit.event.server.ServerListPingEvent;
 import org.bukkit.inventory.InventoryView;
 import org.bukkit.inventory.meta.BookMeta;
 
+import java.net.InetAddress;
+import java.util.ArrayList;
+import java.util.EnumMap;
+import java.util.List;
+import java.util.Map;
+
 public class CraftEventFactory {
+
     public static final DamageSource MELTING = CraftDamageSource.copyOf(DamageSource.BURN);
     public static final DamageSource POISON = CraftDamageSource.copyOf(DamageSource.MAGIC);
+    private static final Function<? super Double, Double> ZERO = Functions.constant(-0.0);
     public static org.bukkit.block.Block blockDamage; // For use in EntityDamageByBlockEvent
     public static Entity entityDamage; // For use in EntityDamageByEntityEvent
 
@@ -113,15 +156,17 @@ public class CraftEventFactory {
      * Block place methods
      */
     public static BlockMultiPlaceEvent callBlockMultiPlaceEvent(World world, EntityHuman who, List<BlockState> blockStates, int clickedX, int clickedY, int clickedZ) {
+        Validate.notNull(who, "EntityHuman cannot be null");
+
         CraftWorld craftWorld = world.getWorld();
         CraftServer craftServer = world.getServer();
-        Player player = (who == null) ? null : (Player) who.getBukkitEntity();
+        Player player = (Player) who.getBukkitEntity();
 
         Block blockClicked = craftWorld.getBlockAt(clickedX, clickedY, clickedZ);
 
         boolean canBuild = true;
-        for (int i = 0; i < blockStates.size(); i++) {
-            if (!canBuild(craftWorld, player, blockStates.get(i).getX(), blockStates.get(i).getZ())) {
+        for (BlockState blockState : blockStates) {
+            if (!canBuild(craftWorld, player, blockState.getX(), blockState.getZ())) {
                 canBuild = false;
                 break;
             }
@@ -129,15 +174,15 @@ public class CraftEventFactory {
 
         BlockMultiPlaceEvent event = new BlockMultiPlaceEvent(blockStates, blockClicked, player.getItemInHand(), player, canBuild);
         craftServer.getPluginManager().callEvent(event);
-
         return event;
     }
 
     public static BlockPlaceEvent callBlockPlaceEvent(World world, EntityHuman who, BlockState replacedBlockState, int clickedX, int clickedY, int clickedZ) {
+        Validate.notNull(who, "EntityHuman cannot be null");
+
         CraftWorld craftWorld = world.getWorld();
         CraftServer craftServer = world.getServer();
-
-        Player player = (who == null) ? null : (Player) who.getBukkitEntity();
+        Player player = (Player) who.getBukkitEntity();
 
         Block blockClicked = craftWorld.getBlockAt(clickedX, clickedY, clickedZ);
         Block placedBlock = replacedBlockState.getBlock();
@@ -146,7 +191,6 @@ public class CraftEventFactory {
 
         BlockPlaceEvent event = new BlockPlaceEvent(placedBlock, replacedBlockState, blockClicked, player.getItemInHand(), player, canBuild);
         craftServer.getPluginManager().callEvent(event);
-
         return event;
     }
 
@@ -156,9 +200,8 @@ public class CraftEventFactory {
     public static SpawnerSpawnEvent callSpawnerSpawnEvent(Entity spawnee, int spawnerX, int spawnerY, int spawnerZ) {
         org.bukkit.craftbukkit.entity.CraftEntity entity = spawnee.getBukkitEntity();
         BlockState state = entity.getWorld().getBlockAt(spawnerX, spawnerY, spawnerZ).getState();
-
         if (!(state instanceof CreatureSpawner)) {
-            state = null;
+            throw new IllegalArgumentException("Block at " + spawnerX + ", " + spawnerY + ", " + spawnerZ + " is not a spawner");
         }
 
         SpawnerSpawnEvent event = new SpawnerSpawnEvent(entity, (CreatureSpawner) state);
@@ -178,7 +221,9 @@ public class CraftEventFactory {
     }
 
     private static PlayerEvent getPlayerBucketEvent(boolean isFilling, EntityHuman who, int clickedX, int clickedY, int clickedZ, int clickedFace, ItemStack itemstack, net.minecraft.server.Item item) {
-        Player player = (who == null) ? null : (Player) who.getBukkitEntity();
+        Validate.notNull(who, "EntityHuman cannot be null");
+
+        Player player = (Player) who.getBukkitEntity();
         CraftItemStack itemInHand = CraftItemStack.asNewCraftStack(item);
         Material bucket = CraftMagicNumbers.getMaterial(itemstack.getItem());
 
@@ -188,7 +233,7 @@ public class CraftEventFactory {
         Block blockClicked = craftWorld.getBlockAt(clickedX, clickedY, clickedZ);
         BlockFace blockFace = CraftBlock.notchToBlockFace(clickedFace);
 
-        PlayerEvent event = null;
+        PlayerEvent event;
         if (isFilling) {
             event = new PlayerBucketFillEvent(player, blockClicked, blockFace, bucket, itemInHand);
             ((PlayerBucketFillEvent) event).setCancelled(!canBuild(craftWorld, player, clickedX, clickedZ));
@@ -198,7 +243,6 @@ public class CraftEventFactory {
         }
 
         craftServer.getPluginManager().callEvent(event);
-
         return event;
     }
 
@@ -209,11 +253,14 @@ public class CraftEventFactory {
         if (action != Action.LEFT_CLICK_AIR && action != Action.RIGHT_CLICK_AIR) {
             throw new IllegalArgumentException(String.format("%s performing %s with %s", who, action, itemstack)); // Spigot
         }
+
         return callPlayerInteractEvent(who, action, 0, 256, 0, 0, itemstack);
     }
 
     public static PlayerInteractEvent callPlayerInteractEvent(EntityHuman who, Action action, int clickedX, int clickedY, int clickedZ, int clickedFace, ItemStack itemstack) {
-        Player player = (who == null) ? null : (Player) who.getBukkitEntity();
+        Validate.notNull(who, "EntityHuman cannot be null");
+
+        Player player = (Player) who.getBukkitEntity();
         CraftItemStack itemInHand = CraftItemStack.asCraftMirror(itemstack);
 
         CraftWorld craftWorld = (CraftWorld) player.getWorld();
@@ -225,12 +272,12 @@ public class CraftEventFactory {
         if (clickedY > 255) {
             blockClicked = null;
             switch (action) {
-            case LEFT_CLICK_BLOCK:
-                action = Action.LEFT_CLICK_AIR;
-                break;
-            case RIGHT_CLICK_BLOCK:
-                action = Action.RIGHT_CLICK_AIR;
-                break;
+                case LEFT_CLICK_BLOCK:
+                    action = Action.LEFT_CLICK_AIR;
+                    break;
+                case RIGHT_CLICK_BLOCK:
+                    action = Action.RIGHT_CLICK_AIR;
+                    break;
             }
         }
 
@@ -240,7 +287,6 @@ public class CraftEventFactory {
 
         PlayerInteractEvent event = new PlayerInteractEvent(player, action, itemInHand, blockClicked, blockFace);
         craftServer.getPluginManager().callEvent(event);
-
         return event;
     }
 
@@ -248,17 +294,18 @@ public class CraftEventFactory {
      * EntityShootBowEvent
      */
     public static EntityShootBowEvent callEntityShootBowEvent(EntityLiving who, ItemStack itemstack, EntityArrow entityArrow, float force) {
+        Validate.notNull(who, "EntityLiving cannot be null");
+
         LivingEntity shooter = (LivingEntity) who.getBukkitEntity();
         CraftItemStack itemInHand = CraftItemStack.asCraftMirror(itemstack);
         Arrow arrow = (Arrow) entityArrow.getBukkitEntity();
 
-        if (itemInHand != null && (itemInHand.getType() == Material.AIR || itemInHand.getAmount() == 0)) {
+        if (itemInHand.getType() == Material.AIR || itemInHand.getAmount() == 0) {
             itemInHand = null;
         }
 
         EntityShootBowEvent event = new EntityShootBowEvent(shooter, itemInHand, arrow, force);
         Bukkit.getPluginManager().callEvent(event);
-
         return event;
     }
 
@@ -266,17 +313,17 @@ public class CraftEventFactory {
      * BlockDamageEvent
      */
     public static BlockDamageEvent callBlockDamageEvent(EntityHuman who, int x, int y, int z, ItemStack itemstack, boolean instaBreak) {
-        Player player = (who == null) ? null : (Player) who.getBukkitEntity();
+        Validate.notNull(who, "EntityHuman cannot be null");
+
+        Player player = (Player) who.getBukkitEntity();
         CraftItemStack itemInHand = CraftItemStack.asCraftMirror(itemstack);
 
         CraftWorld craftWorld = (CraftWorld) player.getWorld();
         CraftServer craftServer = (CraftServer) player.getServer();
 
         Block blockClicked = craftWorld.getBlockAt(x, y, z);
-
         BlockDamageEvent event = new BlockDamageEvent(player, blockClicked, itemInHand, instaBreak);
         craftServer.getPluginManager().callEvent(event);
-
         return event;
     }
 
@@ -286,7 +333,6 @@ public class CraftEventFactory {
     public static CreatureSpawnEvent callCreatureSpawnEvent(EntityLiving entityliving, SpawnReason spawnReason) {
         LivingEntity entity = (LivingEntity) entityliving.getBukkitEntity();
         CraftServer craftServer = (CraftServer) entity.getServer();
-
         CreatureSpawnEvent event = new CreatureSpawnEvent(entity, spawnReason);
         craftServer.getPluginManager().callEvent(event);
         return event;
@@ -313,9 +359,7 @@ public class CraftEventFactory {
     public static ItemSpawnEvent callItemSpawnEvent(EntityItem entityitem) {
         org.bukkit.entity.Item entity = (org.bukkit.entity.Item) entityitem.getBukkitEntity();
         CraftServer craftServer = (CraftServer) entity.getServer();
-
         ItemSpawnEvent event = new ItemSpawnEvent(entity, entity.getLocation());
-
         craftServer.getPluginManager().callEvent(event);
         return event;
     }
@@ -325,9 +369,7 @@ public class CraftEventFactory {
      */
     public static ItemDespawnEvent callItemDespawnEvent(EntityItem entityitem) {
         org.bukkit.entity.Item entity = (org.bukkit.entity.Item) entityitem.getBukkitEntity();
-
         ItemDespawnEvent event = new ItemDespawnEvent(entity, entity.getLocation());
-
         entity.getServer().getPluginManager().callEvent(event);
         return event;
     }
@@ -337,7 +379,6 @@ public class CraftEventFactory {
      */
     public static PotionSplashEvent callPotionSplashEvent(EntityPotion potion, Map<LivingEntity, Double> affectedEntities) {
         ThrownPotion thrownPotion = (ThrownPotion) potion.getBukkitEntity();
-
         PotionSplashEvent event = new PotionSplashEvent(thrownPotion, affectedEntities);
         Bukkit.getPluginManager().callEvent(event);
         return event;
@@ -349,7 +390,6 @@ public class CraftEventFactory {
     public static BlockFadeEvent callBlockFadeEvent(Block block, net.minecraft.server.Block type) {
         BlockState state = block.getState();
         state.setTypeId(net.minecraft.server.Block.getId(type));
-
         BlockFadeEvent event = new BlockFadeEvent(block, state);
         Bukkit.getPluginManager().callEvent(event);
         return event;
@@ -362,7 +402,6 @@ public class CraftEventFactory {
 
         BlockSpreadEvent event = new BlockSpreadEvent(block, source, state);
         Bukkit.getPluginManager().callEvent(event);
-
         if (!event.isCancelled()) {
             state.update(true);
         }
@@ -379,11 +418,10 @@ public class CraftEventFactory {
         Bukkit.getServer().getPluginManager().callEvent(event);
 
         victim.expToDrop = event.getDroppedExp();
-
         for (org.bukkit.inventory.ItemStack stack : event.getDrops()) {
-            if (stack == null || stack.getType() == Material.AIR || stack.getAmount() == 0) continue;
-
-            world.dropItemNaturally(entity.getLocation(), stack);
+            if (stack != null && stack.getType() != Material.AIR && stack.getAmount() != 0) {
+                world.dropItemNaturally(entity.getLocation(), stack);
+            }
         }
 
         return event;
@@ -407,9 +445,9 @@ public class CraftEventFactory {
         }
 
         for (org.bukkit.inventory.ItemStack stack : event.getDrops()) {
-            if (stack == null || stack.getType() == Material.AIR) continue;
-
-            world.dropItemNaturally(entity.getLocation(), stack);
+            if (stack != null && stack.getType() != Material.AIR) {
+                world.dropItemNaturally(entity.getLocation(), stack);
+            }
         }
 
         return event;
@@ -560,21 +598,22 @@ public class CraftEventFactory {
         return event;
     }
 
-    private static final Function<? super Double, Double> ZERO = Functions.constant(-0.0);
-
     public static EntityDamageEvent handleLivingEntityDamageEvent(Entity damagee, DamageSource source, double rawDamage, double hardHatModifier, double blockingModifier, double armorModifier, double resistanceModifier, double magicModifier, double absorptionModifier, Function<Double, Double> hardHat, Function<Double, Double> blocking, Function<Double, Double> armor, Function<Double, Double> resistance, Function<Double, Double> magic, Function<Double, Double> absorption) {
         Map<DamageModifier, Double> modifiers = new EnumMap<DamageModifier, Double>(DamageModifier.class);
         Map<DamageModifier, Function<? super Double, Double>> modifierFunctions = new EnumMap<DamageModifier, Function<? super Double, Double>>(DamageModifier.class);
         modifiers.put(DamageModifier.BASE, rawDamage);
         modifierFunctions.put(DamageModifier.BASE, ZERO);
+
         if (source == DamageSource.FALLING_BLOCK || source == DamageSource.ANVIL) {
             modifiers.put(DamageModifier.HARD_HAT, hardHatModifier);
             modifierFunctions.put(DamageModifier.HARD_HAT, hardHat);
         }
+
         if (damagee instanceof EntityHuman) {
             modifiers.put(DamageModifier.BLOCKING, blockingModifier);
             modifierFunctions.put(DamageModifier.BLOCKING, blocking);
         }
+
         modifiers.put(DamageModifier.ARMOR, armorModifier);
         modifierFunctions.put(DamageModifier.ARMOR, armor);
         modifiers.put(DamageModifier.RESISTANCE, resistanceModifier);
@@ -603,10 +642,7 @@ public class CraftEventFactory {
         functions.put(DamageModifier.BASE, ZERO);
 
         final EntityDamageEvent event = handleEntityDamageEvent(entity, source, modifiers, functions);
-        if (event == null) {
-            return false;
-        }
-        return event.isCancelled() || (cancelOnZeroDamage && event.getDamage() == 0);
+        return event != null && (event.isCancelled() || (cancelOnZeroDamage && event.getDamage() == 0));
     }
 
     public static PlayerLevelChangeEvent callPlayerLevelChangeEvent(Player player, int oldLevel, int newLevel) {
@@ -669,7 +705,6 @@ public class CraftEventFactory {
     public static EntityChangeBlockEvent callEntityChangeBlockEvent(Entity entity, int x, int y, int z, net.minecraft.server.Block type, int data) {
         Block block = entity.world.getWorld().getBlockAt(x, y, z);
         Material material = CraftMagicNumbers.getMaterial(type);
-
         return callEntityChangeBlockEvent(entity.getBukkitEntity(), block, material, data);
     }
 
@@ -703,12 +738,14 @@ public class CraftEventFactory {
     }
 
     public static EntityBreakDoorEvent callEntityBreakDoorEvent(Entity entity, int x, int y, int z) {
-        org.bukkit.entity.Entity entity1 = entity.getBukkitEntity();
-        Block block = entity1.getWorld().getBlockAt(x, y, z);
-
-        EntityBreakDoorEvent event = new EntityBreakDoorEvent((LivingEntity) entity1, block);
-        entity1.getServer().getPluginManager().callEvent(event);
+        if (!(entity instanceof LivingEntity)) {
+            throw new IllegalArgumentException("Entity " + entity.getBukkitEntity().getType().name() + " cannot break doors");
+        }
 
+        LivingEntity livingEntity = (LivingEntity) entity.getBukkitEntity();
+        Block block = livingEntity.getWorld().getBlockAt(x, y, z);
+        EntityBreakDoorEvent event = new EntityBreakDoorEvent(livingEntity, block);
+        livingEntity.getServer().getPluginManager().callEvent(event);
         return event;
     }
 
@@ -723,7 +760,6 @@ public class CraftEventFactory {
 
         InventoryOpenEvent event = new InventoryOpenEvent(container.getBukkitView());
         server.getPluginManager().callEvent(event);
-
         if (event.isCancelled()) {
             container.transferTo(player.activeContainer, craftPlayer);
             return null;
@@ -740,7 +776,6 @@ public class CraftEventFactory {
         Bukkit.getPluginManager().callEvent(event);
 
         org.bukkit.inventory.ItemStack bitem = event.getInventory().getResult();
-
         return CraftItemStack.asNMSCopy(bitem);
     }
 
@@ -809,18 +844,18 @@ public class CraftEventFactory {
         org.bukkit.entity.Entity bukkitIgniter = igniter.getBukkitEntity();
         IgniteCause cause;
         switch (bukkitIgniter.getType()) {
-        case ENDER_CRYSTAL:
-            cause = IgniteCause.ENDER_CRYSTAL;
-            break;
-        case LIGHTNING:
-            cause = IgniteCause.LIGHTNING;
-            break;
-        case SMALL_FIREBALL:
-        case FIREBALL:
-            cause = IgniteCause.FIREBALL;
-            break;
-        default:
-            cause = IgniteCause.FLINT_AND_STEEL;
+            case ENDER_CRYSTAL:
+                cause = IgniteCause.ENDER_CRYSTAL;
+                break;
+            case LIGHTNING:
+                cause = IgniteCause.LIGHTNING;
+                break;
+            case SMALL_FIREBALL:
+            case FIREBALL:
+                cause = IgniteCause.FIREBALL;
+                break;
+            default:
+                cause = IgniteCause.FLINT_AND_STEEL;
         }
 
         BlockIgniteEvent event = new BlockIgniteEvent(bukkitWorld.getBlockAt(x, y, z), cause, bukkitIgniter);
@@ -847,6 +882,7 @@ public class CraftEventFactory {
         if (human.activeContainer == human.defaultContainer) { // Spigot Update - 20141001a
             return;
         }
+
         InventoryCloseEvent event = new InventoryCloseEvent(human.activeContainer.getBukkitView());
         human.world.getServer().getPluginManager().callEvent(event);
         human.activeContainer.transferTo(human.defaultContainer, human.getBukkitEntity());
@@ -893,6 +929,7 @@ public class CraftEventFactory {
             if (current != 0) {
                 return null;
             }
+
             event = new PlayerAchievementAwardedEvent(player, CraftStatistic.getBukkitAchievement((net.minecraft.server.Achievement) statistic));
         } else {
             org.bukkit.Statistic stat = CraftStatistic.getBukkitStatistic(statistic);
@@ -912,6 +949,7 @@ public class CraftEventFactory {
                     return null;
                 default:
             }
+
             if (stat.getType() == Type.UNTYPED) {
                 event = new PlayerStatisticIncrementEvent(player, stat, current, current + incrementation);
             } else if (stat.getType() == Type.ENTITY) {
@@ -922,6 +960,7 @@ public class CraftEventFactory {
                 event = new PlayerStatisticIncrementEvent(player, stat, current, current + incrementation, material);
             }
         }
+
         entityHuman.world.getServer().getPluginManager().callEvent(event);
         return (Cancellable) event;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java b/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java
index 9a46d0c..8ed0ec6 100644
--- a/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java
+++ b/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java
@@ -1,8 +1,5 @@
 package org.bukkit.craftbukkit.generator;
 
-import java.util.List;
-import java.util.Random;
-
 import net.minecraft.server.BiomeBase;
 import net.minecraft.server.Chunk;
 import net.minecraft.server.ChunkPosition;
@@ -13,41 +10,33 @@ import net.minecraft.server.IProgressUpdate;
 import net.minecraft.server.World;
 import net.minecraft.server.WorldGenStronghold;
 import net.minecraft.server.WorldServer;
-
 import org.bukkit.block.Biome;
+import org.bukkit.craftbukkit.block.CraftBlock;
 import org.bukkit.generator.BlockPopulator;
 import org.bukkit.generator.ChunkGenerator;
-import org.bukkit.craftbukkit.block.CraftBlock;
+
+import java.util.List;
+import java.util.Random;
 
 public class CustomChunkGenerator extends InternalChunkGenerator {
+
     private final ChunkGenerator generator;
     private final WorldServer world;
     private final Random random;
     private final WorldGenStronghold strongholdGen = new WorldGenStronghold();
 
-    private static class CustomBiomeGrid implements BiomeGrid {
-        BiomeBase[] biome;
-
-        public Biome getBiome(int x, int z) {
-            return CraftBlock.biomeBaseToBiome(biome[(z << 4) | x]);
-        }
-
-        public void setBiome(int x, int z, Biome bio) {
-           biome[(z << 4) | x] = CraftBlock.biomeToBiomeBase(bio);
-        }
-    }
-
     public CustomChunkGenerator(World world, long seed, ChunkGenerator generator) {
         this.world = (WorldServer) world;
         this.generator = generator;
-
         this.random = new Random(seed);
     }
 
+    @Override
     public boolean isChunkLoaded(int x, int z) {
         return true;
     }
 
+    @Override
     public Chunk getOrCreateChunk(int x, int z) {
         random.setSeed((long) x * 341873128712L + (long) z * 132897987541L);
 
@@ -93,8 +82,7 @@ public class CustomChunkGenerator extends InternalChunkGenerator {
                 // Build chunk section
                 csect[sec] = new ChunkSection(sec << 4, true, secBlkID, secExtBlkID);
             }
-        }
-        else { // Else check for byte-per-block section data
+        } else { // Else check for byte-per-block section data
             byte[][] btypes = generator.generateBlockSections(this.world.getWorld(), this.random, x, z, biomegrid);
 
             if (btypes != null) {
@@ -109,8 +97,7 @@ public class CustomChunkGenerator extends InternalChunkGenerator {
                     }
                     csect[sec] = new ChunkSection(sec << 4, true, btypes[sec], null);
                 }
-            }
-            else { // Else, fall back to pre 1.2 method
+            } else { // Else, fall back to pre 1.2 method
                 @SuppressWarnings("deprecation")
                 byte[] types = generator.generate(this.world.getWorld(), this.random, x, z);
                 int ydim = types.length / 256;
@@ -152,46 +139,55 @@ public class CustomChunkGenerator extends InternalChunkGenerator {
                 }
             }
         }
+
         // Set biome grid
         byte[] biomeIndex = chunk.m();
         for (int i = 0; i < biomeIndex.length; i++) {
             biomeIndex[i] = (byte) (biomegrid.biome[i].id & 0xFF);
         }
+
         // Initialize lighting
         chunk.initLighting();
-
         return chunk;
     }
 
+    @Override
     public void getChunkAt(IChunkProvider icp, int i, int i1) {
         // Nothing!
     }
 
+    @Override
     public boolean saveChunks(boolean bln, IProgressUpdate ipu) {
         return true;
     }
 
+    @Override
     public boolean unloadChunks() {
         return false;
     }
 
+    @Override
     public boolean canSave() {
         return true;
     }
 
+    @Override
     @SuppressWarnings("deprecation")
     public byte[] generate(org.bukkit.World world, Random random, int x, int z) {
         return generator.generate(world, random, x, z);
     }
 
+    @Override
     public byte[][] generateBlockSections(org.bukkit.World world, Random random, int x, int z, BiomeGrid biomes) {
         return generator.generateBlockSections(world, random, x, z, biomes);
     }
 
+    @Override
     public short[][] generateExtBlockSections(org.bukkit.World world, Random random, int x, int z, BiomeGrid biomes) {
         return generator.generateExtBlockSections(world, random, x, z, biomes);
     }
 
+    @Override
     public Chunk getChunkAt(int x, int z) {
         return getOrCreateChunk(x, z);
     }
@@ -206,25 +202,44 @@ public class CustomChunkGenerator extends InternalChunkGenerator {
         return generator.getDefaultPopulators(world);
     }
 
+    @Override
     public List<?> getMobsFor(EnumCreatureType type, int x, int y, int z) {
         BiomeBase biomebase = world.getBiome(x, z);
-
         return biomebase == null ? null : biomebase.getMobs(type);
     }
 
+    @Override
     public ChunkPosition findNearestMapFeature(World world, String type, int x, int y, int z) {
         return "Stronghold".equals(type) && this.strongholdGen != null ? this.strongholdGen.getNearestGeneratedFeature(world, x, y, z) : null;
     }
 
-    public void recreateStructures(int i, int j) {}
+    @Override
+    public void recreateStructures(int i, int j) {
+    }
 
+    @Override
     public int getLoadedChunks() {
         return 0;
     }
 
+    @Override
     public String getName() {
         return "CustomChunkGenerator";
     }
 
-    public void c() {}
+    @Override
+    public void c() {
+    }
+
+    private static class CustomBiomeGrid implements BiomeGrid {
+        BiomeBase[] biome;
+
+        public Biome getBiome(int x, int z) {
+            return CraftBlock.biomeBaseToBiome(biome[(z << 4) | x]);
+        }
+
+        public void setBiome(int x, int z, Biome bio) {
+            biome[(z << 4) | x] = CraftBlock.biomeToBiomeBase(bio);
+        }
+    }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/generator/InternalChunkGenerator.java b/src/main/java/org/bukkit/craftbukkit/generator/InternalChunkGenerator.java
index 19565e5..d700552 100644
--- a/src/main/java/org/bukkit/craftbukkit/generator/InternalChunkGenerator.java
+++ b/src/main/java/org/bukkit/craftbukkit/generator/InternalChunkGenerator.java
@@ -5,4 +5,5 @@ import org.bukkit.generator.ChunkGenerator;
 
 // Do not implement functions to this class, add to NormalChunkGenerator
 public abstract class InternalChunkGenerator extends ChunkGenerator implements IChunkProvider {
+
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/generator/NetherChunkGenerator.java b/src/main/java/org/bukkit/craftbukkit/generator/NetherChunkGenerator.java
index 59d7bbe..ff973db 100644
--- a/src/main/java/org/bukkit/craftbukkit/generator/NetherChunkGenerator.java
+++ b/src/main/java/org/bukkit/craftbukkit/generator/NetherChunkGenerator.java
@@ -6,6 +6,7 @@ import net.minecraft.server.World;
  * This class is useless. Just fyi.
  */
 public class NetherChunkGenerator extends NormalChunkGenerator {
+
     public NetherChunkGenerator(World world, long seed) {
         super(world, seed);
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/generator/NormalChunkGenerator.java b/src/main/java/org/bukkit/craftbukkit/generator/NormalChunkGenerator.java
index ceab581..92b521a 100644
--- a/src/main/java/org/bukkit/craftbukkit/generator/NormalChunkGenerator.java
+++ b/src/main/java/org/bukkit/craftbukkit/generator/NormalChunkGenerator.java
@@ -1,86 +1,103 @@
 package org.bukkit.craftbukkit.generator;
 
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Random;
-
 import net.minecraft.server.Chunk;
 import net.minecraft.server.ChunkPosition;
 import net.minecraft.server.EnumCreatureType;
 import net.minecraft.server.IChunkProvider;
 import net.minecraft.server.IProgressUpdate;
 import net.minecraft.server.World;
-
 import org.bukkit.craftbukkit.CraftWorld;
 import org.bukkit.generator.BlockPopulator;
 
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Random;
+
 public class NormalChunkGenerator extends InternalChunkGenerator {
+
     private final IChunkProvider provider;
 
     public NormalChunkGenerator(World world, long seed) {
         provider = world.worldProvider.getChunkProvider();
     }
 
+    @Override
     public byte[] generate(org.bukkit.World world, Random random, int x, int z) {
         throw new UnsupportedOperationException("Not supported.");
     }
 
+    @Override
     public boolean canSpawn(org.bukkit.World world, int x, int z) {
         return ((CraftWorld) world).getHandle().worldProvider.canSpawn(x, z);
     }
 
+    @Override
     public List<BlockPopulator> getDefaultPopulators(org.bukkit.World world) {
         return new ArrayList<BlockPopulator>();
     }
 
+    @Override
     public boolean isChunkLoaded(int i, int i1) {
         return provider.isChunkLoaded(i, i1);
     }
 
+    @Override
     public Chunk getOrCreateChunk(int i, int i1) {
         return provider.getOrCreateChunk(i, i1);
     }
 
+    @Override
     public Chunk getChunkAt(int i, int i1) {
         return provider.getChunkAt(i, i1);
     }
 
+    @Override
     public void getChunkAt(IChunkProvider icp, int i, int i1) {
         provider.getChunkAt(icp, i, i1);
     }
 
+    @Override
     public boolean saveChunks(boolean bln, IProgressUpdate ipu) {
         return provider.saveChunks(bln, ipu);
     }
 
+    @Override
     public boolean unloadChunks() {
         return provider.unloadChunks();
     }
 
+    @Override
     public boolean canSave() {
         return provider.canSave();
     }
 
+    @Override
     public List<?> getMobsFor(EnumCreatureType ect, int i, int i1, int i2) {
         return provider.getMobsFor(ect, i, i1, i2);
     }
 
+    @Override
     public ChunkPosition findNearestMapFeature(World world, String string, int i, int i1, int i2) {
         return provider.findNearestMapFeature(world, string, i, i1, i2);
     }
 
+    @Override
     public void recreateStructures(int i, int j) {
         provider.recreateStructures(i, j);
     }
 
     // n.m.s implementations always return 0. (The true implementation is in ChunkProviderServer)
+    @Override
     public int getLoadedChunks() {
         return 0;
     }
 
+    @Override
     public String getName() {
         return "NormalWorldGenerator";
     }
 
-    public void c() {}
+    @Override
+    public void c() {
+    }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/generator/SkyLandsChunkGenerator.java b/src/main/java/org/bukkit/craftbukkit/generator/SkyLandsChunkGenerator.java
index e327996..d212979 100644
--- a/src/main/java/org/bukkit/craftbukkit/generator/SkyLandsChunkGenerator.java
+++ b/src/main/java/org/bukkit/craftbukkit/generator/SkyLandsChunkGenerator.java
@@ -6,6 +6,7 @@ import net.minecraft.server.World;
  * This class is useless. Just fyi.
  */
 public class SkyLandsChunkGenerator extends NormalChunkGenerator {
+
     public SkyLandsChunkGenerator(World world, long seed) {
         super(world, seed);
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/help/CommandAliasHelpTopic.java b/src/main/java/org/bukkit/craftbukkit/help/CommandAliasHelpTopic.java
index 9f2238c..3787b91 100644
--- a/src/main/java/org/bukkit/craftbukkit/help/CommandAliasHelpTopic.java
+++ b/src/main/java/org/bukkit/craftbukkit/help/CommandAliasHelpTopic.java
@@ -27,6 +27,7 @@ public class CommandAliasHelpTopic extends HelpTopic {
             sb.append("\n");
             sb.append(aliasForTopic.getFullText(forWho));
         }
+
         return sb.toString();
     }
 
@@ -34,11 +35,7 @@ public class CommandAliasHelpTopic extends HelpTopic {
     public boolean canSee(CommandSender commandSender) {
         if (amendedPermission == null) {
             HelpTopic aliasForTopic = helpMap.getHelpTopic(aliasFor);
-            if (aliasForTopic != null) {
-                return aliasForTopic.canSee(commandSender);
-            } else {
-                return false;
-            }
+            return aliasForTopic != null && aliasForTopic.canSee(commandSender);
         } else {
             return commandSender.hasPermission(amendedPermission);
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/help/CustomHelpTopic.java b/src/main/java/org/bukkit/craftbukkit/help/CustomHelpTopic.java
index 6dee229..43cd5ce 100644
--- a/src/main/java/org/bukkit/craftbukkit/help/CustomHelpTopic.java
+++ b/src/main/java/org/bukkit/craftbukkit/help/CustomHelpTopic.java
@@ -8,6 +8,7 @@ import org.bukkit.help.HelpTopic;
  * This is a help topic implementation for general topics registered in the help.yml file.
  */
 public class CustomHelpTopic extends HelpTopic {
+
     private final String permissionNode;
 
     public CustomHelpTopic(String name, String shortText, String fullText, String permissionNode) {
@@ -17,15 +18,8 @@ public class CustomHelpTopic extends HelpTopic {
         this.fullText = shortText + "\n" + fullText;
     }
 
+    @Override
     public boolean canSee(CommandSender sender) {
-        if (sender instanceof ConsoleCommandSender) {
-            return true;
-        }
-
-        if (!permissionNode.equals("")) {
-            return sender.hasPermission(permissionNode);
-        } else {
-            return true;
-        }
+        return sender instanceof ConsoleCommandSender || permissionNode.equals("") || sender.hasPermission(permissionNode);
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/help/CustomIndexHelpTopic.java b/src/main/java/org/bukkit/craftbukkit/help/CustomIndexHelpTopic.java
index 2089a5f..e37794b 100644
--- a/src/main/java/org/bukkit/craftbukkit/help/CustomIndexHelpTopic.java
+++ b/src/main/java/org/bukkit/craftbukkit/help/CustomIndexHelpTopic.java
@@ -9,11 +9,10 @@ import java.util.HashSet;
 import java.util.LinkedList;
 import java.util.List;
 
-/**
- */
 public class CustomIndexHelpTopic extends IndexHelpTopic {
-    private List<String> futureTopics;
+
     private final HelpMap helpMap;
+    private List<String> futureTopics;
 
     public CustomIndexHelpTopic(HelpMap helpMap, String name, String shortText, String permission, List<String> futureTopics, String preamble) {
         super(name, shortText, permission, new HashSet<HelpTopic>(), preamble);
diff --git a/src/main/java/org/bukkit/craftbukkit/help/HelpTopicAmendment.java b/src/main/java/org/bukkit/craftbukkit/help/HelpTopicAmendment.java
index 4f0e00e..2e79f58 100644
--- a/src/main/java/org/bukkit/craftbukkit/help/HelpTopicAmendment.java
+++ b/src/main/java/org/bukkit/craftbukkit/help/HelpTopicAmendment.java
@@ -4,6 +4,7 @@ package org.bukkit.craftbukkit.help;
  * A HelpTopicAmendment represents the contents of a topic amendment from the help.yml
  */
 public class HelpTopicAmendment {
+
     private final String topicName;
     private final String shortText;
     private final String fullText;
@@ -18,6 +19,7 @@ public class HelpTopicAmendment {
 
     /**
      * Gets the amended full text
+     *
      * @return the full text
      */
     public String getFullText() {
@@ -26,6 +28,7 @@ public class HelpTopicAmendment {
 
     /**
      * Gets the amended short text
+     *
      * @return the short text
      */
     public String getShortText() {
@@ -34,6 +37,7 @@ public class HelpTopicAmendment {
 
     /**
      * Gets the name of the topic being amended
+     *
      * @return the topic name
      */
     public String getTopicName() {
@@ -42,6 +46,7 @@ public class HelpTopicAmendment {
 
     /**
      * Gets the amended permission
+     *
      * @return the permission
      */
     public String getPermission() {
diff --git a/src/main/java/org/bukkit/craftbukkit/help/HelpYamlReader.java b/src/main/java/org/bukkit/craftbukkit/help/HelpYamlReader.java
index 60a6221..ed0b984 100644
--- a/src/main/java/org/bukkit/craftbukkit/help/HelpYamlReader.java
+++ b/src/main/java/org/bukkit/craftbukkit/help/HelpYamlReader.java
@@ -1,13 +1,12 @@
 package org.bukkit.craftbukkit.help;
 
+import com.google.common.base.Charsets;
 import org.bukkit.ChatColor;
 import org.bukkit.Server;
 import org.bukkit.configuration.ConfigurationSection;
 import org.bukkit.configuration.file.YamlConfiguration;
 import org.bukkit.help.HelpTopic;
 
-import com.google.common.base.Charsets;
-
 import java.io.File;
 import java.io.IOException;
 import java.io.InputStreamReader;
@@ -20,9 +19,9 @@ import java.util.logging.Level;
  */
 public class HelpYamlReader {
 
-    private YamlConfiguration helpYaml;
     private final char ALT_COLOR_CODE = '&';
     private final Server server;
+    private YamlConfiguration helpYaml;
 
     public HelpYamlReader(Server server) {
         this.server = server;
@@ -65,6 +64,7 @@ public class HelpYamlReader {
                 topics.add(new CustomHelpTopic(topicName, shortText, fullText, permission));
             }
         }
+
         return topics;
     }
 
@@ -86,6 +86,7 @@ public class HelpYamlReader {
                 topics.add(new CustomIndexHelpTopic(server.getHelpMap(), topicName, shortText, permission, commands, preamble));
             }
         }
+
         return topics;
     }
 
@@ -106,6 +107,7 @@ public class HelpYamlReader {
                 amendments.add(new HelpTopicAmendment(topicName, description, usage, permission));
             }
         }
+
         return amendments;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/help/MultipleCommandAliasHelpTopic.java b/src/main/java/org/bukkit/craftbukkit/help/MultipleCommandAliasHelpTopic.java
index 6f4b22b..5e5d13e 100644
--- a/src/main/java/org/bukkit/craftbukkit/help/MultipleCommandAliasHelpTopic.java
+++ b/src/main/java/org/bukkit/craftbukkit/help/MultipleCommandAliasHelpTopic.java
@@ -16,22 +16,23 @@ public class MultipleCommandAliasHelpTopic extends HelpTopic {
 
     public MultipleCommandAliasHelpTopic(MultipleCommandAlias alias) {
         this.alias = alias;
-
-        name = "/" + alias.getLabel();
+        this.name = "/" + alias.getLabel();
 
         // Build short text
         StringBuilder sb = new StringBuilder();
         for (int i = 0; i < alias.getCommands().length; i++) {
             if (i != 0) {
-                sb.append(ChatColor.GOLD + " > " + ChatColor.WHITE);
+                sb.append(ChatColor.GOLD).append(" > ").append(ChatColor.WHITE);
             }
+
             sb.append("/");
             sb.append(alias.getCommands()[i].getLabel());
         }
-        shortText = sb.toString();
+
+        this.shortText = sb.toString();
 
         // Build full text
-        fullText = ChatColor.GOLD + "Alias for: " + ChatColor.WHITE + getShortText();
+        this.fullText = ChatColor.GOLD + "Alias for: " + ChatColor.WHITE + getShortText();
     }
 
     public boolean canSee(CommandSender sender) {
diff --git a/src/main/java/org/bukkit/craftbukkit/help/SimpleHelpMap.java b/src/main/java/org/bukkit/craftbukkit/help/SimpleHelpMap.java
index 7dd5afe..df81d52 100644
--- a/src/main/java/org/bukkit/craftbukkit/help/SimpleHelpMap.java
+++ b/src/main/java/org/bukkit/craftbukkit/help/SimpleHelpMap.java
@@ -3,25 +3,41 @@ package org.bukkit.craftbukkit.help;
 import com.google.common.base.Predicate;
 import com.google.common.base.Predicates;
 import com.google.common.collect.Collections2;
-
-import org.bukkit.command.*;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandExecutor;
+import org.bukkit.command.MultipleCommandAlias;
+import org.bukkit.command.PluginCommand;
+import org.bukkit.command.PluginIdentifiableCommand;
 import org.bukkit.command.defaults.BukkitCommand;
 import org.bukkit.command.defaults.VanillaCommand;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.command.VanillaCommandWrapper;
-import org.bukkit.help.*;
-
-import java.util.*;
+import org.bukkit.help.GenericCommandHelpTopic;
+import org.bukkit.help.HelpMap;
+import org.bukkit.help.HelpTopic;
+import org.bukkit.help.HelpTopicComparator;
+import org.bukkit.help.HelpTopicFactory;
+import org.bukkit.help.IndexHelpTopic;
+
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.TreeMap;
+import java.util.TreeSet;
 
 /**
  * Standard implementation of {@link HelpMap} for CraftBukkit servers.
  */
 public class SimpleHelpMap implements HelpMap {
 
-    private HelpTopic defaultTopic;
     private final Map<String, HelpTopic> helpTopics;
     private final Map<Class, HelpTopicFactory<Command>> topicFactoryMap;
     private final CraftServer server;
+
+    private HelpTopic defaultTopic;
     private HelpYamlReader yaml;
 
     @SuppressWarnings("unchecked")
@@ -41,6 +57,7 @@ public class SimpleHelpMap implements HelpMap {
         registerHelpTopicFactory(MultipleCommandAlias.class, new MultipleCommandAliasHelpTopicFactory());
     }
 
+    @Override
     public synchronized HelpTopic getHelpTopic(String topicName) {
         if (topicName.equals("")) {
             return defaultTopic;
@@ -53,10 +70,12 @@ public class SimpleHelpMap implements HelpMap {
         return null;
     }
 
+    @Override
     public Collection<HelpTopic> getHelpTopics() {
         return helpTopics.values();
     }
 
+    @Override
     public synchronized void addTopic(HelpTopic topic) {
         // Existing topics take priority
         if (!helpTopics.containsKey(topic.getName())) {
@@ -64,10 +83,12 @@ public class SimpleHelpMap implements HelpMap {
         }
     }
 
+    @Override
     public synchronized void clear() {
         helpTopics.clear();
     }
 
+    @Override
     public List<String> getIgnoredPlugins() {
         return yaml.getIgnoredPlugins();
     }
@@ -106,7 +127,8 @@ public class SimpleHelpMap implements HelpMap {
         }
 
         // Initialize help topics from the server's command map
-        outer: for (Command command : server.getCommandMap().getCommands()) {
+        outer:
+        for (Command command : server.getCommandMap().getCommands()) {
             if (commandInIgnoredPlugin(command, ignoredPlugins)) {
                 continue;
             }
@@ -118,12 +140,14 @@ public class SimpleHelpMap implements HelpMap {
                     if (t != null) addTopic(t);
                     continue outer;
                 }
-                if (command instanceof PluginCommand && c.isAssignableFrom(((PluginCommand)command).getExecutor().getClass())) {
+
+                if (command instanceof PluginCommand && c.isAssignableFrom(((PluginCommand) command).getExecutor().getClass())) {
                     HelpTopic t = topicFactoryMap.get(c).createTopic(command);
                     if (t != null) addTopic(t);
                     continue outer;
                 }
             }
+
             addTopic(new GenericCommandHelpTopic(command));
         }
 
@@ -132,6 +156,7 @@ public class SimpleHelpMap implements HelpMap {
             if (commandInIgnoredPlugin(command, ignoredPlugins)) {
                 continue;
             }
+
             for (String alias : command.getAliases()) {
                 // Only register if this command owns the alias
                 if (server.getCommandMap().getCommand(alias) == command) {
@@ -174,6 +199,7 @@ public class SimpleHelpMap implements HelpMap {
                     if (!pluginIndexes.containsKey(pluginName)) {
                         pluginIndexes.put(pluginName, new TreeSet<HelpTopic>(HelpTopicComparator.helpTopicComparatorInstance())); //keep things in topic order
                     }
+
                     pluginIndexes.get(pluginName).add(topic);
                 }
             }
@@ -184,34 +210,35 @@ public class SimpleHelpMap implements HelpMap {
         if (command instanceof VanillaCommandWrapper) {
             return "Minecraft";
         }
+
         if (command instanceof BukkitCommand || command instanceof VanillaCommand) {
             return "Bukkit";
         }
+
         if (command instanceof PluginIdentifiableCommand) {
-            return ((PluginIdentifiableCommand)command).getPlugin().getName();
+            return ((PluginIdentifiableCommand) command).getPlugin().getName();
         }
+
         return null;
     }
 
     private boolean commandInIgnoredPlugin(Command command, Set<String> ignoredPlugins) {
-        if ((command instanceof BukkitCommand || command instanceof VanillaCommand) && ignoredPlugins.contains("Bukkit")) {
-            return true;
-        }
-        if (command instanceof PluginIdentifiableCommand && ignoredPlugins.contains(((PluginIdentifiableCommand)command).getPlugin().getName())) {
-            return true;
-        }
-        return false;
+        return (command instanceof BukkitCommand || command instanceof VanillaCommand) && ignoredPlugins.contains("Bukkit") ||
+                command instanceof PluginIdentifiableCommand && ignoredPlugins.contains(((PluginIdentifiableCommand) command).getPlugin().getName());
     }
 
+    @Override
     public void registerHelpTopicFactory(Class commandClass, HelpTopicFactory factory) {
         if (!Command.class.isAssignableFrom(commandClass) && !CommandExecutor.class.isAssignableFrom(commandClass)) {
-            throw new IllegalArgumentException("commandClass must implement either Command or CommandExecutor!");
+            throw new IllegalArgumentException("Command class must implement either Command or CommandExecutor");
         }
+
         topicFactoryMap.put(commandClass, factory);
     }
 
     private class IsCommandTopicPredicate implements Predicate<HelpTopic> {
 
+        @Override
         public boolean apply(HelpTopic topic) {
             return topic.getName().charAt(0) == '/';
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftContainer.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftContainer.java
index 42568a2..708e0a4 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftContainer.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftContainer.java
@@ -1,29 +1,29 @@
 package org.bukkit.craftbukkit.inventory;
 
-import org.bukkit.craftbukkit.entity.CraftPlayer;
-import org.bukkit.entity.HumanEntity;
-import org.bukkit.event.inventory.InventoryType;
-import org.bukkit.inventory.Inventory;
-import org.bukkit.inventory.InventoryView;
-
 import net.minecraft.server.Container;
 import net.minecraft.server.EntityHuman;
 import net.minecraft.server.IInventory;
 import net.minecraft.server.PacketPlayOutOpenWindow;
 import net.minecraft.server.Slot;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
+import org.bukkit.entity.HumanEntity;
+import org.bukkit.event.inventory.InventoryType;
+import org.bukkit.inventory.Inventory;
+import org.bukkit.inventory.InventoryView;
 
 public class CraftContainer extends Container {
+
     private final InventoryView view;
+    private final int cachedSize;
     private InventoryType cachedType;
     private String cachedTitle;
-    private final int cachedSize;
 
     public CraftContainer(InventoryView view, int id) {
         this.view = view;
         this.windowId = id;
         // TODO: Do we need to check that it really is a CraftInventory?
-        IInventory top = ((CraftInventory)view.getTopInventory()).getInventory();
-        IInventory bottom = ((CraftInventory)view.getBottomInventory()).getInventory();
+        IInventory top = ((CraftInventory) view.getTopInventory()).getInventory();
+        IInventory bottom = ((CraftInventory) view.getBottomInventory()).getInventory();
         cachedType = view.getType();
         cachedTitle = view.getTitle();
         cachedSize = getSize();
@@ -54,6 +54,41 @@ public class CraftContainer extends Container {
         }, id);
     }
 
+    public static int getNotchInventoryType(InventoryType type) {
+        int typeID;
+        switch (type) {
+            case WORKBENCH:
+                typeID = 1;
+                break;
+            case FURNACE:
+                typeID = 2;
+                break;
+            case DISPENSER:
+                typeID = 3;
+                break;
+            case ENCHANTING:
+                typeID = 4;
+                break;
+            case BREWING:
+                typeID = 5;
+                break;
+            case BEACON:
+                typeID = 7;
+                break;
+            case ANVIL:
+                typeID = 8;
+                break;
+            case HOPPER:
+                typeID = 9;
+                break;
+            default:
+                typeID = 0;
+                break;
+        }
+
+        return typeID;
+    }
+
     @Override
     public InventoryView getBukkitView() {
         return view;
@@ -68,6 +103,7 @@ public class CraftContainer extends Container {
         if (cachedType == view.getType() && cachedSize == getSize() && cachedTitle.equals(view.getTitle())) {
             return true;
         }
+
         // If the window type has changed for some reason, update the player
         // This method will be called every tick or something, so it's
         // as good a place as any to put something like this.
@@ -77,81 +113,49 @@ public class CraftContainer extends Container {
         if (view.getPlayer() instanceof CraftPlayer) {
             CraftPlayer player = (CraftPlayer) view.getPlayer();
             int type = getNotchInventoryType(cachedType);
-            IInventory top = ((CraftInventory)view.getTopInventory()).getInventory();
-            IInventory bottom = ((CraftInventory)view.getBottomInventory()).getInventory();
+            IInventory top = ((CraftInventory) view.getTopInventory()).getInventory();
+            IInventory bottom = ((CraftInventory) view.getBottomInventory()).getInventory();
             this.b.clear();
             this.c.clear();
             if (typeChanged) {
                 setupSlots(top, bottom);
             }
+
             int size = getSize();
             player.getHandle().playerConnection.sendPacket(new PacketPlayOutOpenWindow(this.windowId, type, cachedTitle, size, true));
             player.updateInventory();
         }
-        return true;
-    }
 
-    public static int getNotchInventoryType(InventoryType type) {
-        int typeID;
-        switch(type) {
-        case WORKBENCH:
-            typeID = 1;
-            break;
-        case FURNACE:
-            typeID = 2;
-            break;
-        case DISPENSER:
-            typeID = 3;
-            break;
-        case ENCHANTING:
-            typeID = 4;
-            break;
-        case BREWING:
-            typeID = 5;
-            break;
-        case BEACON:
-            typeID = 7;
-            break;
-        case ANVIL:
-            typeID = 8;
-            break;
-        case HOPPER:
-            typeID = 9;
-            break;
-        default:
-            typeID = 0;
-            break;
-        }
-        return typeID;
+        return true;
     }
 
     private void setupSlots(IInventory top, IInventory bottom) {
-        switch(cachedType) {
-        case CREATIVE:
-            break; // TODO: This should be an error?
-        case PLAYER:
-        case CHEST:
-            setupChest(top, bottom);
-            break;
-        case DISPENSER:
-            setupDispenser(top, bottom);
-            break;
-        case FURNACE:
-            setupFurnace(top, bottom);
-            break;
-        case CRAFTING: // TODO: This should be an error?
-        case WORKBENCH:
-            setupWorkbench(top, bottom);
-            break;
-        case ENCHANTING:
-            setupEnchanting(top, bottom);
-            break;
-        case BREWING:
-            setupBrewing(top, bottom);
-            break;
-        case HOPPER:
-            setupHopper(top, bottom);
-            break;
+        switch (cachedType) {
+            case CREATIVE:
+                break; // TODO: This should be an error?
+            case PLAYER:
+            case CHEST:
+                setupChest(top, bottom);
+                break;
+            case DISPENSER:
+                setupDispenser(top, bottom);
+                break;
+            case FURNACE:
+                setupFurnace(top, bottom);
+                break;
+            case CRAFTING: // TODO: This should be an error?
+            case WORKBENCH:
+                setupWorkbench(top, bottom);
+                break;
+            case ENCHANTING:
+                setupEnchanting(top, bottom);
+                break;
+            case BREWING:
+                setupBrewing(top, bottom);
+                break;
+            case HOPPER:
+                setupHopper(top, bottom);
+                break;
         }
     }
 
@@ -176,6 +180,7 @@ public class CraftContainer extends Container {
         for (col = 0; col < 9; ++col) {
             this.a(new Slot(bottom, col, 8 + col * 18, 161 + i));
         }
+
         // End copy from ContainerChest
     }
 
@@ -201,6 +206,7 @@ public class CraftContainer extends Container {
         for (col = 0; col < 9; ++col) {
             this.a(new Slot(bottom, col, 8 + col * 18, 142));
         }
+
         // End copy from ContainerWorkbench
     }
 
@@ -222,6 +228,7 @@ public class CraftContainer extends Container {
         for (col = 0; col < 9; ++col) {
             this.a(new Slot(bottom, col, 8 + col * 18, 142));
         }
+
         // End copy from ContainerFurnace
     }
 
@@ -245,6 +252,7 @@ public class CraftContainer extends Container {
         for (col = 0; col < 9; ++col) {
             this.a(new Slot(bottom, col, 8 + col * 18, 142));
         }
+
         // End copy from ContainerDispenser
     }
 
@@ -263,6 +271,7 @@ public class CraftContainer extends Container {
         for (row = 0; row < 9; ++row) {
             this.a(new Slot(bottom, row, 8 + row * 18, 142));
         }
+
         // End copy from ContainerEnchantTable
     }
 
@@ -284,6 +293,7 @@ public class CraftContainer extends Container {
         for (i = 0; i < 9; ++i) {
             this.a(new Slot(bottom, i, 8 + i * 18, 142));
         }
+
         // End copy from ContainerBrewingStand
     }
 
@@ -306,9 +316,11 @@ public class CraftContainer extends Container {
         for (i = 0; i < 9; ++i) {
             this.a(new Slot(bottom, i, 8 + i * 18, 58 + b0));
         }
+
         // End copy from ContainerHopper
     }
 
+    @Override
     public boolean a(EntityHuman entity) {
         return true;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftEntityEquipment.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftEntityEquipment.java
index 2213482..83c101a 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftEntityEquipment.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftEntityEquipment.java
@@ -1,13 +1,13 @@
 package org.bukkit.craftbukkit.inventory;
 
 import net.minecraft.server.EntityInsentient;
-
 import org.bukkit.craftbukkit.entity.CraftLivingEntity;
 import org.bukkit.entity.Entity;
 import org.bukkit.inventory.EntityEquipment;
 import org.bukkit.inventory.ItemStack;
 
 public class CraftEntityEquipment implements EntityEquipment {
+
     private static final int WEAPON_SLOT = 0;
     private static final int HELMET_SLOT = 4;
     private static final int CHEST_SLOT = 3;
@@ -21,56 +21,69 @@ public class CraftEntityEquipment implements EntityEquipment {
         this.entity = entity;
     }
 
+    @Override
     public ItemStack getItemInHand() {
         return getEquipment(WEAPON_SLOT);
     }
 
+    @Override
     public void setItemInHand(ItemStack stack) {
         setEquipment(WEAPON_SLOT, stack);
     }
 
+    @Override
     public ItemStack getHelmet() {
         return getEquipment(HELMET_SLOT);
     }
 
+    @Override
     public void setHelmet(ItemStack helmet) {
         setEquipment(HELMET_SLOT, helmet);
     }
 
+    @Override
     public ItemStack getChestplate() {
         return getEquipment(CHEST_SLOT);
     }
 
+    @Override
     public void setChestplate(ItemStack chestplate) {
         setEquipment(CHEST_SLOT, chestplate);
     }
 
+    @Override
     public ItemStack getLeggings() {
         return getEquipment(LEG_SLOT);
     }
 
+    @Override
     public void setLeggings(ItemStack leggings) {
         setEquipment(LEG_SLOT, leggings);
     }
 
+    @Override
     public ItemStack getBoots() {
         return getEquipment(BOOT_SLOT);
     }
 
+    @Override
     public void setBoots(ItemStack boots) {
         setEquipment(BOOT_SLOT, boots);
     }
 
+    @Override
     public ItemStack[] getArmorContents() {
         ItemStack[] armor = new ItemStack[INVENTORY_SLOTS - 1];
-        for(int slot = WEAPON_SLOT + 1; slot < INVENTORY_SLOTS; slot++) {
+        for (int slot = WEAPON_SLOT + 1; slot < INVENTORY_SLOTS; slot++) {
             armor[slot - 1] = getEquipment(slot);
         }
+
         return armor;
     }
 
+    @Override
     public void setArmorContents(ItemStack[] items) {
-        for(int slot = WEAPON_SLOT + 1; slot < INVENTORY_SLOTS; slot++) {
+        for (int slot = WEAPON_SLOT + 1; slot < INVENTORY_SLOTS; slot++) {
             ItemStack equipment = items != null && slot <= items.length ? items[slot - 1] : null;
             setEquipment(slot, equipment);
         }
@@ -84,61 +97,73 @@ public class CraftEntityEquipment implements EntityEquipment {
         entity.getHandle().setEquipment(slot, CraftItemStack.asNMSCopy(stack));
     }
 
+    @Override
     public void clear() {
-        for(int i = 0; i < INVENTORY_SLOTS; i++) {
+        for (int i = 0; i < INVENTORY_SLOTS; i++) {
             setEquipment(i, null);
         }
     }
 
+    @Override
     public Entity getHolder() {
         return entity;
     }
 
+    @Override
     public float getItemInHandDropChance() {
-       return getDropChance(WEAPON_SLOT);
+        return getDropChance(WEAPON_SLOT);
     }
 
+    @Override
     public void setItemInHandDropChance(float chance) {
         setDropChance(WEAPON_SLOT, chance);
     }
 
+    @Override
     public float getHelmetDropChance() {
         return getDropChance(HELMET_SLOT);
     }
 
+    @Override
     public void setHelmetDropChance(float chance) {
         setDropChance(HELMET_SLOT, chance);
     }
 
+    @Override
     public float getChestplateDropChance() {
         return getDropChance(CHEST_SLOT);
     }
 
+    @Override
     public void setChestplateDropChance(float chance) {
         setDropChance(CHEST_SLOT, chance);
     }
 
+    @Override
     public float getLeggingsDropChance() {
         return getDropChance(LEG_SLOT);
     }
 
+    @Override
     public void setLeggingsDropChance(float chance) {
         setDropChance(LEG_SLOT, chance);
     }
 
+    @Override
     public float getBootsDropChance() {
         return getDropChance(BOOT_SLOT);
     }
 
+    @Override
     public void setBootsDropChance(float chance) {
         setDropChance(BOOT_SLOT, chance);
     }
 
-    private void setDropChance(int slot, float chance) {
-        ((EntityInsentient) entity.getHandle()).dropChances[slot] = chance - 0.1F;
-    }
-
     private float getDropChance(int slot) {
         return ((EntityInsentient) entity.getHandle()).dropChances[slot] + 0.1F;
     }
+
+    private void setDropChance(int slot, float chance) {
+        ((EntityInsentient) entity.getHandle()).dropChances[slot] = chance - 0.1F;
+    }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftFurnaceRecipe.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftFurnaceRecipe.java
index 69f17db..59ebada 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftFurnaceRecipe.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftFurnaceRecipe.java
@@ -1,12 +1,11 @@
 package org.bukkit.craftbukkit.inventory;
 
 import net.minecraft.server.RecipesFurnace;
-
-import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.inventory.FurnaceRecipe;
 import org.bukkit.inventory.ItemStack;
 
 public class CraftFurnaceRecipe extends FurnaceRecipe implements CraftRecipe {
+
     public CraftFurnaceRecipe(ItemStack result, ItemStack source) {
         super(result, source.getType(), source.getDurability());
     }
@@ -15,6 +14,7 @@ public class CraftFurnaceRecipe extends FurnaceRecipe implements CraftRecipe {
         if (recipe instanceof CraftFurnaceRecipe) {
             return (CraftFurnaceRecipe) recipe;
         }
+
         return new CraftFurnaceRecipe(recipe.getResult(), recipe.getInput());
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
index 6748465..d62c690 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
@@ -1,9 +1,5 @@
 package org.bukkit.craftbukkit.inventory;
 
-import java.util.HashMap;
-import java.util.List;
-import java.util.ListIterator;
-
 import net.minecraft.server.ContainerAnvilInventory;
 import net.minecraft.server.ContainerEnchantTableInventory;
 import net.minecraft.server.IHopper;
@@ -17,16 +13,20 @@ import net.minecraft.server.TileEntityBrewingStand;
 import net.minecraft.server.TileEntityDispenser;
 import net.minecraft.server.TileEntityDropper;
 import net.minecraft.server.TileEntityFurnace;
-
 import org.apache.commons.lang.Validate;
+import org.bukkit.Material;
 import org.bukkit.entity.HumanEntity;
 import org.bukkit.event.inventory.InventoryType;
 import org.bukkit.inventory.Inventory;
 import org.bukkit.inventory.InventoryHolder;
 import org.bukkit.inventory.ItemStack;
-import org.bukkit.Material;
+
+import java.util.HashMap;
+import java.util.List;
+import java.util.ListIterator;
 
 public class CraftInventory implements Inventory {
+
     protected final IInventory inventory;
 
     public CraftInventory(IInventory inventory) {
@@ -37,19 +37,23 @@ public class CraftInventory implements Inventory {
         return inventory;
     }
 
+    @Override
     public int getSize() {
         return getInventory().getSize();
     }
 
+    @Override
     public String getName() {
         return getInventory().getInventoryName();
     }
 
+    @Override
     public ItemStack getItem(int index) {
         net.minecraft.server.ItemStack item = getInventory().getItem(index);
         return item == null ? null : CraftItemStack.asCraftMirror(item);
     }
 
+    @Override
     public ItemStack[] getContents() {
         ItemStack[] items = new ItemStack[getSize()];
         net.minecraft.server.ItemStack[] mcItems = getInventory().getContents();
@@ -62,6 +66,7 @@ public class CraftInventory implements Inventory {
         return items;
     }
 
+    @Override
     public void setContents(ItemStack[] items) {
         if (getInventory().getContents().length < items.length) {
             throw new IllegalArgumentException("Invalid inventory size; expected " + getInventory().getContents().length + " or less");
@@ -78,40 +83,49 @@ public class CraftInventory implements Inventory {
         }
     }
 
+    @Override
     public void setItem(int index, ItemStack item) {
         getInventory().setItem(index, ((item == null || item.getTypeId() == 0) ? null : CraftItemStack.asNMSCopy(item)));
     }
 
+    @Override
     public boolean contains(int materialId) {
         for (ItemStack item : getContents()) {
             if (item != null && item.getTypeId() == materialId) {
                 return true;
             }
         }
+
         return false;
     }
 
+    @Override
     public boolean contains(Material material) {
         Validate.notNull(material, "Material cannot be null");
         return contains(material.getId());
     }
 
+    @Override
     public boolean contains(ItemStack item) {
         if (item == null) {
             return false;
         }
+
         for (ItemStack i : getContents()) {
             if (item.equals(i)) {
                 return true;
             }
         }
+
         return false;
     }
 
+    @Override
     public boolean contains(int materialId, int amount) {
         if (amount <= 0) {
             return true;
         }
+
         for (ItemStack item : getContents()) {
             if (item != null && item.getTypeId() == materialId) {
                 if ((amount -= item.getAmount()) <= 0) {
@@ -119,47 +133,57 @@ public class CraftInventory implements Inventory {
                 }
             }
         }
+
         return false;
     }
 
+    @Override
     public boolean contains(Material material, int amount) {
         Validate.notNull(material, "Material cannot be null");
         return contains(material.getId(), amount);
     }
 
+    @Override
     public boolean contains(ItemStack item, int amount) {
         if (item == null) {
             return false;
         }
+
         if (amount <= 0) {
             return true;
         }
+
         for (ItemStack i : getContents()) {
             if (item.equals(i) && --amount <= 0) {
                 return true;
             }
         }
+
         return false;
     }
 
+    @Override
     public boolean containsAtLeast(ItemStack item, int amount) {
         if (item == null) {
             return false;
         }
+
         if (amount <= 0) {
             return true;
         }
+
         for (ItemStack i : getContents()) {
             if (item.isSimilar(i) && (amount -= i.getAmount()) <= 0) {
                 return true;
             }
         }
+
         return false;
     }
 
+    @Override
     public HashMap<Integer, ItemStack> all(int materialId) {
         HashMap<Integer, ItemStack> slots = new HashMap<Integer, ItemStack>();
-
         ItemStack[] inventory = getContents();
         for (int i = 0; i < inventory.length; i++) {
             ItemStack item = inventory[i];
@@ -167,14 +191,17 @@ public class CraftInventory implements Inventory {
                 slots.put(i, item);
             }
         }
+
         return slots;
     }
 
+    @Override
     public HashMap<Integer, ItemStack> all(Material material) {
         Validate.notNull(material, "Material cannot be null");
         return all(material.getId());
     }
 
+    @Override
     public HashMap<Integer, ItemStack> all(ItemStack item) {
         HashMap<Integer, ItemStack> slots = new HashMap<Integer, ItemStack>();
         if (item != null) {
@@ -185,9 +212,11 @@ public class CraftInventory implements Inventory {
                 }
             }
         }
+
         return slots;
     }
 
+    @Override
     public int first(int materialId) {
         ItemStack[] inventory = getContents();
         for (int i = 0; i < inventory.length; i++) {
@@ -196,14 +225,17 @@ public class CraftInventory implements Inventory {
                 return i;
             }
         }
+
         return -1;
     }
 
+    @Override
     public int first(Material material) {
         Validate.notNull(material, "Material cannot be null");
         return first(material.getId());
     }
 
+    @Override
     public int first(ItemStack item) {
         return first(item, true);
     }
@@ -212,17 +244,19 @@ public class CraftInventory implements Inventory {
         if (item == null) {
             return -1;
         }
+
         ItemStack[] inventory = getContents();
         for (int i = 0; i < inventory.length; i++) {
             if (inventory[i] == null) continue;
-
             if (withAmount ? item.equals(inventory[i]) : item.isSimilar(inventory[i])) {
                 return i;
             }
         }
+
         return -1;
     }
 
+    @Override
     public int firstEmpty() {
         ItemStack[] inventory = getContents();
         for (int i = 0; i < inventory.length; i++) {
@@ -230,6 +264,7 @@ public class CraftInventory implements Inventory {
                 return i;
             }
         }
+
         return -1;
     }
 
@@ -241,6 +276,7 @@ public class CraftInventory implements Inventory {
                 return i;
             }
         }
+
         return -1;
     }
 
@@ -255,15 +291,18 @@ public class CraftInventory implements Inventory {
         if (item == null) {
             return -1;
         }
+
         for (int i = 0; i < inventory.length; i++) {
             ItemStack cItem = inventory[i];
             if (cItem != null && cItem.getAmount() < cItem.getMaxStackSize() && cItem.isSimilar(filteredItem)) {
                 return i;
             }
         }
+
         return -1;
     }
 
+    @Override
     public HashMap<Integer, ItemStack> addItem(ItemStack... items) {
         Validate.noNullElements(items, "Item cannot be null");
         HashMap<Integer, ItemStack> leftover = new HashMap<Integer, ItemStack>();
@@ -322,9 +361,11 @@ public class CraftInventory implements Inventory {
                 }
             }
         }
+
         return leftover;
     }
 
+    @Override
     public HashMap<Integer, ItemStack> removeItem(ItemStack... items) {
         Validate.notNull(items, "Items cannot be null");
         HashMap<Integer, ItemStack> leftover = new HashMap<Integer, ItemStack>();
@@ -365,6 +406,7 @@ public class CraftInventory implements Inventory {
                 }
             }
         }
+
         return leftover;
     }
 
@@ -372,6 +414,7 @@ public class CraftInventory implements Inventory {
         return getInventory().getMaxStackSize();
     }
 
+    @Override
     public void remove(int materialId) {
         ItemStack[] items = getContents();
         for (int i = 0; i < items.length; i++) {
@@ -381,11 +424,13 @@ public class CraftInventory implements Inventory {
         }
     }
 
+    @Override
     public void remove(Material material) {
         Validate.notNull(material, "Material cannot be null");
         remove(material.getId());
     }
 
+    @Override
     public void remove(ItemStack item) {
         ItemStack[] items = getContents();
         for (int i = 0; i < items.length; i++) {
@@ -395,35 +440,43 @@ public class CraftInventory implements Inventory {
         }
     }
 
+    @Override
     public void clear(int index) {
         setItem(index, null);
     }
 
+    @Override
     public void clear() {
         for (int i = 0; i < getSize(); i++) {
             clear(i);
         }
     }
 
+    @Override
     public ListIterator<ItemStack> iterator() {
         return new InventoryIterator(this);
     }
 
+    @Override
     public ListIterator<ItemStack> iterator(int index) {
         if (index < 0) {
             index += getSize() + 1; // ie, with -1, previous() will return the last element
         }
+
         return new InventoryIterator(this, index);
     }
 
+    @Override
     public List<HumanEntity> getViewers() {
         return this.inventory.getViewers();
     }
 
+    @Override
     public String getTitle() {
         return inventory.getInventoryName();
     }
 
+    @Override
     public InventoryType getType() {
         // Thanks to Droppers extending Dispensers, order is important.
         if (inventory instanceof InventoryCrafting) {
@@ -457,25 +510,28 @@ public class CraftInventory implements Inventory {
         }
     }
 
+    @Override
     public InventoryHolder getHolder() {
         return inventory.getOwner();
     }
 
+    @Override
     public int getMaxStackSize() {
         return inventory.getMaxStackSize();
     }
 
+    @Override
     public void setMaxStackSize(int size) {
         inventory.setMaxStackSize(size);
     }
 
     @Override
-    public int hashCode() {
-        return inventory.hashCode();
+    public boolean equals(final Object obj) {
+        return obj instanceof CraftInventory && ((CraftInventory) obj).inventory.equals(this.inventory);
     }
 
     @Override
-    public boolean equals(final Object obj) {
-        return obj instanceof CraftInventory && ((CraftInventory) obj).inventory.equals(this.inventory);
+    public int hashCode() {
+        return inventory.hashCode();
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryAnvil.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryAnvil.java
index 46a1d38..e84c672 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryAnvil.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryAnvil.java
@@ -1,11 +1,11 @@
 package org.bukkit.craftbukkit.inventory;
 
 import net.minecraft.server.IInventory;
-
 import org.bukkit.inventory.AnvilInventory;
 import org.bukkit.inventory.ItemStack;
 
 public class CraftInventoryAnvil extends CraftInventory implements AnvilInventory {
+
     private final IInventory resultInventory;
 
     public CraftInventoryAnvil(IInventory inventory, IInventory resultInventory) {
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryBeacon.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryBeacon.java
index 43c4107..6ad2d7d 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryBeacon.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryBeacon.java
@@ -5,15 +5,18 @@ import org.bukkit.inventory.BeaconInventory;
 import org.bukkit.inventory.ItemStack;
 
 public class CraftInventoryBeacon extends CraftInventory implements BeaconInventory {
+
     public CraftInventoryBeacon(TileEntityBeacon beacon) {
         super(beacon);
     }
 
-    public void setItem(ItemStack item) {
-        setItem(0, item);
-    }
-
+    @Override
     public ItemStack getItem() {
         return getItem(0);
     }
+
+    @Override
+    public void setItem(ItemStack item) {
+        setItem(0, item);
+    }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryBrewer.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryBrewer.java
index 6de6e6e..cb06a8f 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryBrewer.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryBrewer.java
@@ -1,20 +1,22 @@
 package org.bukkit.craftbukkit.inventory;
 
+import net.minecraft.server.IInventory;
 import org.bukkit.block.BrewingStand;
 import org.bukkit.inventory.BrewerInventory;
 import org.bukkit.inventory.ItemStack;
 
-import net.minecraft.server.IInventory;
-
 public class CraftInventoryBrewer extends CraftInventory implements BrewerInventory {
+
     public CraftInventoryBrewer(IInventory inventory) {
         super(inventory);
     }
 
+    @Override
     public ItemStack getIngredient() {
         return getItem(3);
     }
 
+    @Override
     public void setIngredient(ItemStack ingredient) {
         setItem(3, ingredient);
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryCrafting.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryCrafting.java
index 7bbf1df..1679eee 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryCrafting.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryCrafting.java
@@ -1,15 +1,15 @@
 package org.bukkit.craftbukkit.inventory;
 
-import net.minecraft.server.IRecipe;
 import net.minecraft.server.IInventory;
+import net.minecraft.server.IRecipe;
 import net.minecraft.server.InventoryCrafting;
-
 import org.bukkit.inventory.CraftingInventory;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.Recipe;
 import org.bukkit.util.Java15Compat;
 
 public class CraftInventoryCrafting extends CraftInventory implements CraftingInventory {
+
     private final IInventory resultInventory;
 
     public CraftInventoryCrafting(InventoryCrafting inventory, IInventory resultInventory) {
@@ -31,22 +31,12 @@ public class CraftInventoryCrafting extends CraftInventory implements CraftingIn
     }
 
     @Override
-    public void setContents(ItemStack[] items) {
-        int resultLen = getResultInventory().getContents().length;
-        int len = getMatrixInventory().getContents().length + resultLen;
-        if (len > items.length) {
-            throw new IllegalArgumentException("Invalid inventory size; expected " + len + " or less");
-        }
-        setContents(items[0], Java15Compat.Arrays_copyOfRange(items, 1, items.length));
-    }
-
-    @Override
     public ItemStack[] getContents() {
         ItemStack[] items = new ItemStack[getSize()];
         net.minecraft.server.ItemStack[] mcResultItems = getResultInventory().getContents();
 
-        int i = 0;
-        for (i = 0; i < mcResultItems.length; i++ ) {
+        int i;
+        for (i = 0; i < mcResultItems.length; i++) {
             items[i] = CraftItemStack.asCraftMirror(mcResultItems[i]);
         }
 
@@ -59,6 +49,17 @@ public class CraftInventoryCrafting extends CraftInventory implements CraftingIn
         return items;
     }
 
+    @Override
+    public void setContents(ItemStack[] items) {
+        int resultLen = getResultInventory().getContents().length;
+        int len = getMatrixInventory().getContents().length + resultLen;
+        if (len > items.length) {
+            throw new IllegalArgumentException("Invalid inventory size; expected " + len + " or less");
+        }
+
+        setContents(items[0], Java15Compat.Arrays_copyOfRange(items, 1, items.length));
+    }
+
     public void setContents(ItemStack result, ItemStack[] contents) {
         setResult(result);
         setMatrix(contents);
@@ -84,23 +85,19 @@ public class CraftInventoryCrafting extends CraftInventory implements CraftingIn
         }
     }
 
+    @Override
     public ItemStack[] getMatrix() {
         ItemStack[] items = new ItemStack[getSize()];
         net.minecraft.server.ItemStack[] matrix = getMatrixInventory().getContents();
 
-        for (int i = 0; i < matrix.length; i++ ) {
+        for (int i = 0; i < matrix.length; i++) {
             items[i] = CraftItemStack.asCraftMirror(matrix[i]);
         }
 
         return items;
     }
 
-    public ItemStack getResult() {
-        net.minecraft.server.ItemStack item = getResultInventory().getItem(0);
-        if(item != null) return CraftItemStack.asCraftMirror(item);
-        return null;
-    }
-
+    @Override
     public void setMatrix(ItemStack[] contents) {
         if (getMatrixInventory().getContents().length > contents.length) {
             throw new IllegalArgumentException("Invalid inventory size; expected " + getMatrixInventory().getContents().length + " or less");
@@ -108,7 +105,7 @@ public class CraftInventoryCrafting extends CraftInventory implements CraftingIn
 
         net.minecraft.server.ItemStack[] mcItems = getMatrixInventory().getContents();
 
-        for (int i = 0; i < mcItems.length; i++ ) {
+        for (int i = 0; i < mcItems.length; i++) {
             if (i < contents.length) {
                 ItemStack item = contents[i];
                 if (item == null || item.getTypeId() <= 0) {
@@ -122,6 +119,13 @@ public class CraftInventoryCrafting extends CraftInventory implements CraftingIn
         }
     }
 
+    @Override
+    public ItemStack getResult() {
+        net.minecraft.server.ItemStack item = getResultInventory().getItem(0);
+        return item == null ? null : CraftItemStack.asCraftMirror(item);
+    }
+
+    @Override
     public void setResult(ItemStack item) {
         net.minecraft.server.ItemStack[] contents = getResultInventory().getContents();
         if (item == null || item.getTypeId() <= 0) {
@@ -131,8 +135,9 @@ public class CraftInventoryCrafting extends CraftInventory implements CraftingIn
         }
     }
 
+    @Override
     public Recipe getRecipe() {
-        IRecipe recipe = ((InventoryCrafting)getInventory()).currentRecipe;
+        IRecipe recipe = ((InventoryCrafting) getInventory()).currentRecipe;
         return recipe == null ? null : recipe.toBukkitRecipe();
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryCustom.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryCustom.java
index 8b8a317..77f4207 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryCustom.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryCustom.java
@@ -1,19 +1,19 @@
 package org.bukkit.craftbukkit.inventory;
 
-import java.util.ArrayList;
-import java.util.List;
-
+import net.minecraft.server.EntityHuman;
+import net.minecraft.server.IInventory;
+import net.minecraft.server.ItemStack;
 import org.apache.commons.lang.Validate;
 import org.bukkit.craftbukkit.entity.CraftHumanEntity;
 import org.bukkit.entity.HumanEntity;
 import org.bukkit.event.inventory.InventoryType;
 import org.bukkit.inventory.InventoryHolder;
 
-import net.minecraft.server.EntityHuman;
-import net.minecraft.server.IInventory;
-import net.minecraft.server.ItemStack;
+import java.util.ArrayList;
+import java.util.List;
 
 public class CraftInventoryCustom extends CraftInventory {
+
     public CraftInventoryCustom(InventoryHolder owner, InventoryType type) {
         super(new MinecraftInventory(owner, type));
     }
@@ -32,11 +32,11 @@ public class CraftInventoryCustom extends CraftInventory {
 
     static class MinecraftInventory implements IInventory {
         private final ItemStack[] items;
-        private int maxStack = MAX_STACK;
         private final List<HumanEntity> viewers;
         private final String title;
-        private InventoryType type;
         private final InventoryHolder owner;
+        private int maxStack = MAX_STACK;
+        private InventoryType type;
 
         public MinecraftInventory(InventoryHolder owner, InventoryType type) {
             this(owner, type.getDefaultSize(), type.getDefaultTitle());
@@ -62,18 +62,22 @@ public class CraftInventoryCustom extends CraftInventory {
             this.type = InventoryType.CHEST;
         }
 
+        @Override
         public int getSize() {
             return items.length;
         }
 
+        @Override
         public ItemStack getItem(int i) {
             return items[i];
         }
 
+        @Override
         public ItemStack splitStack(int i, int j) {
             ItemStack stack = this.getItem(i);
             ItemStack result;
             if (stack == null) return null;
+
             if (stack.count <= j) {
                 this.setItem(i, null);
                 result = stack;
@@ -81,14 +85,17 @@ public class CraftInventoryCustom extends CraftInventory {
                 result = CraftItemStack.copyNMSStack(stack, j);
                 stack.count -= j;
             }
+
             this.update();
             return result;
         }
 
+        @Override
         public ItemStack splitWithoutUpdate(int i) {
             ItemStack stack = this.getItem(i);
             ItemStack result;
             if (stack == null) return null;
+
             if (stack.count <= 1) {
                 this.setItem(i, null);
                 result = stack;
@@ -96,9 +103,11 @@ public class CraftInventoryCustom extends CraftInventory {
                 result = CraftItemStack.copyNMSStack(stack, 1);
                 stack.count -= 1;
             }
+
             return result;
         }
 
+        @Override
         public void setItem(int i, ItemStack itemstack) {
             items[i] = itemstack;
             if (itemstack != null && this.getMaxStackSize() > 0 && itemstack.count > this.getMaxStackSize()) {
@@ -106,36 +115,46 @@ public class CraftInventoryCustom extends CraftInventory {
             }
         }
 
+        @Override
         public String getInventoryName() {
             return title;
         }
 
+        @Override
         public int getMaxStackSize() {
             return maxStack;
         }
 
+        @Override
         public void setMaxStackSize(int size) {
             maxStack = size;
         }
 
-        public void update() {}
+        @Override
+        public void update() {
+        }
 
+        @Override
         public boolean a(EntityHuman entityhuman) {
             return true;
         }
 
+        @Override
         public ItemStack[] getContents() {
             return items;
         }
 
+        @Override
         public void onOpen(CraftHumanEntity who) {
             viewers.add(who);
         }
 
+        @Override
         public void onClose(CraftHumanEntity who) {
             viewers.remove(who);
         }
 
+        @Override
         public List<HumanEntity> getViewers() {
             return viewers;
         }
@@ -144,18 +163,25 @@ public class CraftInventoryCustom extends CraftInventory {
             return type;
         }
 
-        public void closeContainer() {}
+        @Override
+        public void closeContainer() {
+        }
 
+        @Override
         public InventoryHolder getOwner() {
             return owner;
         }
 
-        public void startOpen() {}
+        @Override
+        public void startOpen() {
+        }
 
+        @Override
         public boolean k_() {
             return false;
         }
 
+        @Override
         public boolean b(int i, ItemStack itemstack) {
             return true;
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryDoubleChest.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryDoubleChest.java
index 0459f41..b444c76 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryDoubleChest.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryDoubleChest.java
@@ -1,13 +1,13 @@
 package org.bukkit.craftbukkit.inventory;
 
+import net.minecraft.server.InventoryLargeChest;
 import org.bukkit.block.DoubleChest;
 import org.bukkit.inventory.DoubleChestInventory;
 import org.bukkit.inventory.Inventory;
 import org.bukkit.inventory.ItemStack;
 
-import net.minecraft.server.InventoryLargeChest;
-
 public class CraftInventoryDoubleChest extends CraftInventory implements DoubleChestInventory {
+
     private final CraftInventory left;
     private final CraftInventory right;
 
@@ -19,11 +19,13 @@ public class CraftInventoryDoubleChest extends CraftInventory implements DoubleC
 
     public CraftInventoryDoubleChest(InventoryLargeChest largeChest) {
         super(largeChest);
+
         if (largeChest.left instanceof InventoryLargeChest) {
             left = new CraftInventoryDoubleChest((InventoryLargeChest) largeChest.left);
         } else {
             left = new CraftInventory(largeChest.left);
         }
+
         if (largeChest.right instanceof InventoryLargeChest) {
             right = new CraftInventoryDoubleChest((InventoryLargeChest) largeChest.right);
         } else {
@@ -31,10 +33,12 @@ public class CraftInventoryDoubleChest extends CraftInventory implements DoubleC
         }
     }
 
+    @Override
     public Inventory getLeftSide() {
         return left;
     }
 
+    @Override
     public Inventory getRightSide() {
         return right;
     }
@@ -44,8 +48,9 @@ public class CraftInventoryDoubleChest extends CraftInventory implements DoubleC
         if (getInventory().getContents().length < items.length) {
             throw new IllegalArgumentException("Invalid inventory size; expected " + getInventory().getContents().length + " or less");
         }
+
         ItemStack[] leftItems = new ItemStack[left.getSize()], rightItems = new ItemStack[right.getSize()];
-        System.arraycopy(items, 0, leftItems, 0, Math.min(left.getSize(),items.length));
+        System.arraycopy(items, 0, leftItems, 0, Math.min(left.getSize(), items.length));
         left.setContents(leftItems);
         if (items.length >= left.getSize()) {
             System.arraycopy(items, left.getSize(), rightItems, 0, Math.min(right.getSize(), items.length - left.getSize()));
@@ -57,4 +62,16 @@ public class CraftInventoryDoubleChest extends CraftInventory implements DoubleC
     public DoubleChest getHolder() {
         return new DoubleChest(this);
     }
+
+    @Override
+    public boolean equals(Object obj) {
+        if (!(obj instanceof DoubleChestInventory)) return false;
+        DoubleChestInventory other = (DoubleChestInventory) obj;
+        return this.left.equals(other.getLeftSide()) && this.right.equals(other.getRightSide());
+    }
+
+    @Override
+    public int hashCode() {
+        return 31 * this.left.hashCode() + this.right.hashCode();
+    }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryEnchanting.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryEnchanting.java
index fdc58f1..23126a5 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryEnchanting.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryEnchanting.java
@@ -1,25 +1,27 @@
 package org.bukkit.craftbukkit.inventory;
 
+import net.minecraft.server.ContainerEnchantTableInventory;
 import org.bukkit.inventory.EnchantingInventory;
 import org.bukkit.inventory.ItemStack;
 
-import net.minecraft.server.ContainerEnchantTableInventory;
-
 public class CraftInventoryEnchanting extends CraftInventory implements EnchantingInventory {
+
     public CraftInventoryEnchanting(ContainerEnchantTableInventory inventory) {
         super(inventory);
     }
 
-    public void setItem(ItemStack item) {
-        setItem(0,item);
-    }
-
+    @Override
     public ItemStack getItem() {
         return getItem(0);
     }
 
     @Override
+    public void setItem(ItemStack item) {
+        setItem(0, item);
+    }
+
+    @Override
     public ContainerEnchantTableInventory getInventory() {
-        return (ContainerEnchantTableInventory)inventory;
+        return (ContainerEnchantTableInventory) inventory;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryFurnace.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryFurnace.java
index 37a631e..46a9c11 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryFurnace.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryFurnace.java
@@ -1,38 +1,44 @@
 package org.bukkit.craftbukkit.inventory;
 
+import net.minecraft.server.TileEntityFurnace;
 import org.bukkit.block.Furnace;
 import org.bukkit.inventory.FurnaceInventory;
 import org.bukkit.inventory.ItemStack;
 
-import net.minecraft.server.TileEntityFurnace;
-
 public class CraftInventoryFurnace extends CraftInventory implements FurnaceInventory {
+
     public CraftInventoryFurnace(TileEntityFurnace inventory) {
         super(inventory);
     }
 
+    @Override
     public ItemStack getResult() {
         return getItem(2);
     }
 
-    public ItemStack getFuel() {
-        return getItem(1);
+    @Override
+    public void setResult(ItemStack stack) {
+        setItem(2, stack);
     }
 
-    public ItemStack getSmelting() {
-        return getItem(0);
+    @Override
+    public ItemStack getFuel() {
+        return getItem(1);
     }
 
+    @Override
     public void setFuel(ItemStack stack) {
-        setItem(1,stack);
+        setItem(1, stack);
     }
 
-    public void setResult(ItemStack stack) {
-        setItem(2,stack);
+    @Override
+    public ItemStack getSmelting() {
+        return getItem(0);
     }
 
+    @Override
     public void setSmelting(ItemStack stack) {
-        setItem(0,stack);
+        setItem(0, stack);
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryHorse.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryHorse.java
index 5adbd74..c579209 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryHorse.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryHorse.java
@@ -10,18 +10,22 @@ public class CraftInventoryHorse extends CraftInventory implements HorseInventor
         super(inventory);
     }
 
+    @Override
     public ItemStack getSaddle() {
         return getItem(0);
     }
 
-    public ItemStack getArmor() {
-       return getItem(1);
-    }
-
+    @Override
     public void setSaddle(ItemStack stack) {
         setItem(0, stack);
     }
 
+    @Override
+    public ItemStack getArmor() {
+        return getItem(1);
+    }
+
+    @Override
     public void setArmor(ItemStack stack) {
         setItem(1, stack);
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryMerchant.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryMerchant.java
index 7f89c2a..2a8cb7e 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryMerchant.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryMerchant.java
@@ -4,6 +4,7 @@ import net.minecraft.server.InventoryMerchant;
 import org.bukkit.inventory.MerchantInventory;
 
 public class CraftInventoryMerchant extends CraftInventory implements MerchantInventory {
+
     public CraftInventoryMerchant(InventoryMerchant merchant) {
         super(merchant);
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryPlayer.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryPlayer.java
index 84955df..194d8e5 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryPlayer.java
@@ -2,7 +2,6 @@ package org.bukkit.craftbukkit.inventory;
 
 import net.minecraft.server.PacketPlayOutHeldItemSlot;
 import net.minecraft.server.PlayerInventory;
-
 import org.apache.commons.lang.Validate;
 import org.bukkit.craftbukkit.entity.CraftPlayer;
 import org.bukkit.entity.HumanEntity;
@@ -10,6 +9,7 @@ import org.bukkit.inventory.EntityEquipment;
 import org.bukkit.inventory.ItemStack;
 
 public class CraftInventoryPlayer extends CraftInventory implements org.bukkit.inventory.PlayerInventory, EntityEquipment {
+
     public CraftInventoryPlayer(net.minecraft.server.PlayerInventory inventory) {
         super(inventory);
     }
@@ -24,81 +24,96 @@ public class CraftInventoryPlayer extends CraftInventory implements org.bukkit.i
         return super.getSize() - 4;
     }
 
+    @Override
     public ItemStack getItemInHand() {
         return CraftItemStack.asCraftMirror(getInventory().getItemInHand());
     }
 
+    @Override
     public void setItemInHand(ItemStack stack) {
         setItem(getHeldItemSlot(), stack);
     }
 
+    @Override
     public int getHeldItemSlot() {
         return getInventory().itemInHandIndex;
     }
 
+    @Override
     public void setHeldItemSlot(int slot) {
         Validate.isTrue(slot >= 0 && slot < PlayerInventory.getHotbarSize(), "Slot is not between 0 and 8 inclusive");
         this.getInventory().itemInHandIndex = slot;
         ((CraftPlayer) this.getHolder()).getHandle().playerConnection.sendPacket(new PacketPlayOutHeldItemSlot(slot));
     }
 
+    @Override
     public ItemStack getHelmet() {
         return getItem(getSize() + 3);
     }
 
-    public ItemStack getChestplate() {
-        return getItem(getSize() + 2);
-    }
-
-    public ItemStack getLeggings() {
-        return getItem(getSize() + 1);
-    }
-
-    public ItemStack getBoots() {
-        return getItem(getSize() + 0);
-    }
-
+    @Override
     public void setHelmet(ItemStack helmet) {
         setItem(getSize() + 3, helmet);
     }
 
+    @Override
+    public ItemStack getChestplate() {
+        return getItem(getSize() + 2);
+    }
+
+    @Override
     public void setChestplate(ItemStack chestplate) {
         setItem(getSize() + 2, chestplate);
     }
 
+    @Override
+    public ItemStack getLeggings() {
+        return getItem(getSize() + 1);
+    }
+
+    @Override
     public void setLeggings(ItemStack leggings) {
         setItem(getSize() + 1, leggings);
     }
 
+    @Override
+    public ItemStack getBoots() {
+        return getItem(getSize());
+    }
+
+    @Override
     public void setBoots(ItemStack boots) {
-        setItem(getSize() + 0, boots);
+        setItem(getSize(), boots);
     }
 
+    @Override
     public ItemStack[] getArmorContents() {
         net.minecraft.server.ItemStack[] mcItems = getInventory().getArmorContents();
         ItemStack[] ret = new ItemStack[mcItems.length];
-
         for (int i = 0; i < mcItems.length; i++) {
             ret[i] = CraftItemStack.asCraftMirror(mcItems[i]);
         }
+
         return ret;
     }
 
+    @Override
     public void setArmorContents(ItemStack[] items) {
-        int cnt = getSize();
-
+        int count = getSize();
         if (items == null) {
             items = new ItemStack[4];
         }
+
         for (ItemStack item : items) {
             if (item == null || item.getTypeId() == 0) {
-                clear(cnt++);
+                clear(count++);
             } else {
-                setItem(cnt++, item);
+                setItem(count++, item);
             }
         }
     }
 
+    @Override
     public int clear(int id, int data) {
         int count = 0;
         ItemStack[] items = getContents();
@@ -123,6 +138,7 @@ public class CraftInventoryPlayer extends CraftInventory implements org.bukkit.i
             count += item.getAmount();
             setItem(armorSlot++, null);
         }
+
         return count;
     }
 
@@ -131,42 +147,52 @@ public class CraftInventoryPlayer extends CraftInventory implements org.bukkit.i
         return (HumanEntity) inventory.getOwner();
     }
 
+    @Override
     public float getItemInHandDropChance() {
         return 1;
     }
 
+    @Override
     public void setItemInHandDropChance(float chance) {
         throw new UnsupportedOperationException();
     }
 
+    @Override
     public float getHelmetDropChance() {
         return 1;
     }
 
+    @Override
     public void setHelmetDropChance(float chance) {
         throw new UnsupportedOperationException();
     }
 
+    @Override
     public float getChestplateDropChance() {
         return 1;
     }
 
+    @Override
     public void setChestplateDropChance(float chance) {
         throw new UnsupportedOperationException();
     }
 
+    @Override
     public float getLeggingsDropChance() {
         return 1;
     }
 
+    @Override
     public void setLeggingsDropChance(float chance) {
         throw new UnsupportedOperationException();
     }
 
+    @Override
     public float getBootsDropChance() {
         return 1;
     }
 
+    @Override
     public void setBootsDropChance(float chance) {
         throw new UnsupportedOperationException();
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryView.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryView.java
index ae47a0e..c138415 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryView.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryView.java
@@ -1,5 +1,6 @@
 package org.bukkit.craftbukkit.inventory;
 
+import net.minecraft.server.Container;
 import org.bukkit.GameMode;
 import org.bukkit.craftbukkit.entity.CraftHumanEntity;
 import org.bukkit.entity.HumanEntity;
@@ -9,8 +10,6 @@ import org.bukkit.inventory.Inventory;
 import org.bukkit.inventory.InventoryView;
 import org.bukkit.inventory.ItemStack;
 
-import net.minecraft.server.Container;
-
 public class CraftInventoryView extends InventoryView {
     private final Container container;
     private final CraftHumanEntity player;
@@ -23,6 +22,74 @@ public class CraftInventoryView extends InventoryView {
         this.container = container;
     }
 
+    public static SlotType getSlotType(InventoryView inventory, int slot) {
+        SlotType type = SlotType.CONTAINER;
+        if (slot >= 0 && slot < inventory.getTopInventory().getSize()) {
+            switch (inventory.getType()) {
+                case FURNACE:
+                    if (slot == 2) {
+                        type = SlotType.RESULT;
+                    } else if (slot == 1) {
+                        type = SlotType.FUEL;
+                    } else {
+                        type = SlotType.CRAFTING;
+                    }
+                    break;
+                case BREWING:
+                    if (slot == 3) {
+                        type = SlotType.FUEL;
+                    } else {
+                        type = SlotType.CRAFTING;
+                    }
+                    break;
+                case ENCHANTING:
+                    type = SlotType.CRAFTING;
+                    break;
+                case WORKBENCH:
+                case CRAFTING:
+                    if (slot == 0) {
+                        type = SlotType.RESULT;
+                    } else {
+                        type = SlotType.CRAFTING;
+                    }
+                    break;
+                case MERCHANT:
+                    if (slot == 2) {
+                        type = SlotType.RESULT;
+                    } else {
+                        type = SlotType.CRAFTING;
+                    }
+                    break;
+                case BEACON:
+                    type = SlotType.CRAFTING;
+                    break;
+                case ANVIL:
+                    if (slot == 2) {
+                        type = SlotType.RESULT;
+                    } else {
+                        type = SlotType.CRAFTING;
+                    }
+                    break;
+                default:
+                    // Nothing to do, it's a CONTAINER slot
+            }
+        } else {
+            if (slot == -999) {
+                type = SlotType.OUTSIDE;
+            } else if (inventory.getType() == InventoryType.CRAFTING) {
+                if (slot < 9) {
+                    type = SlotType.ARMOR;
+                } else if (slot > 35) {
+                    type = SlotType.QUICKBAR;
+                }
+            } else if (slot >= (inventory.countSlots() - 9)) {
+                type = SlotType.QUICKBAR;
+            }
+        }
+
+        return type;
+    }
+
     @Override
     public Inventory getTopInventory() {
         return viewing;
@@ -44,6 +111,7 @@ public class CraftInventoryView extends InventoryView {
         if (type == InventoryType.CRAFTING && player.getGameMode() == GameMode.CREATIVE) {
             return InventoryType.CREATIVE;
         }
+
         return type;
     }
 
@@ -62,6 +130,7 @@ public class CraftInventoryView extends InventoryView {
         if (slot == -999) {
             return null;
         }
+
         return CraftItemStack.asCraftMirror(container.getSlot(slot).getItem());
     }
 
@@ -72,71 +141,4 @@ public class CraftInventoryView extends InventoryView {
     public Container getHandle() {
         return container;
     }
-
-    public static SlotType getSlotType(InventoryView inventory, int slot) {
-        SlotType type = SlotType.CONTAINER;
-        if (slot >= 0 && slot < inventory.getTopInventory().getSize()) {
-            switch(inventory.getType()) {
-            case FURNACE:
-                if (slot == 2) {
-                    type = SlotType.RESULT;
-                } else if(slot == 1) {
-                    type = SlotType.FUEL;
-                } else {
-                    type = SlotType.CRAFTING;
-                }
-                break;
-            case BREWING:
-                if (slot == 3) {
-                    type = SlotType.FUEL;
-                } else {
-                    type = SlotType.CRAFTING;
-                }
-                break;
-            case ENCHANTING:
-                type = SlotType.CRAFTING;
-                break;
-            case WORKBENCH:
-            case CRAFTING:
-                if (slot == 0) {
-                    type = SlotType.RESULT;
-                } else {
-                    type = SlotType.CRAFTING;
-                }
-                break;
-            case MERCHANT:
-                if (slot == 2) {
-                    type = SlotType.RESULT;
-                } else {
-                    type = SlotType.CRAFTING;
-                }
-                break;
-            case BEACON:
-                type = SlotType.CRAFTING;
-                break;
-            case ANVIL:
-                if (slot == 2) {
-                    type = SlotType.RESULT;
-                } else {
-                    type = SlotType.CRAFTING;
-                }
-                break;
-            default:
-                // Nothing to do, it's a CONTAINER slot
-            }
-        } else {
-            if (slot == -999) {
-                type = SlotType.OUTSIDE;
-            } else if (inventory.getType() == InventoryType.CRAFTING) {
-                if (slot < 9) {
-                    type = SlotType.ARMOR;
-                } else if (slot > 35) {
-                    type = SlotType.QUICKBAR;
-                }
-            } else if (slot >= (inventory.countSlots() - 9)) {
-                type = SlotType.QUICKBAR;
-            }
-        }
-        return type;
-    }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java
index 1b2394d..5cb9002 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java
@@ -1,7 +1,6 @@
 package org.bukkit.craftbukkit.inventory;
 
-import java.util.Collection;
-
+import com.google.common.collect.ImmutableSet;
 import org.apache.commons.lang.Validate;
 import org.bukkit.Color;
 import org.bukkit.Material;
@@ -10,41 +9,48 @@ import org.bukkit.inventory.ItemFactory;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.meta.ItemMeta;
 
-import com.google.common.collect.ImmutableSet;
+import java.util.Collection;
 
 public final class CraftItemFactory implements ItemFactory {
+
     static final Color DEFAULT_LEATHER_COLOR = Color.fromRGB(0xA06540);
     static final Collection<String> KNOWN_NBT_ATTRIBUTE_NAMES;
+
     private static final CraftItemFactory instance;
 
     static {
         instance = new CraftItemFactory();
         ConfigurationSerialization.registerClass(CraftMetaItem.SerializableMeta.class);
         KNOWN_NBT_ATTRIBUTE_NAMES = ImmutableSet.<String>builder()
-            .add("generic.attackDamage")
-            .add("generic.followRange")
-            .add("generic.knockbackResistance")
-            .add("generic.maxHealth")
-            .add("generic.movementSpeed")
-            .add("horse.jumpStrength")
-            .add("zombie.spawnReinforcements")
-            .build();
+                .add("generic.attackDamage")
+                .add("generic.followRange")
+                .add("generic.knockbackResistance")
+                .add("generic.maxHealth")
+                .add("generic.movementSpeed")
+                .add("horse.jumpStrength")
+                .add("zombie.spawnReinforcements")
+                .build();
     }
 
     private CraftItemFactory() {
+
+    }
+
+    public static CraftItemFactory instance() {
+        return instance;
     }
 
+    @Override
     public boolean isApplicable(ItemMeta meta, ItemStack itemstack) {
-        if (itemstack == null) {
-            return false;
-        }
-        return isApplicable(meta, itemstack.getType());
+        return itemstack != null && isApplicable(meta, itemstack.getType());
     }
 
+    @Override
     public boolean isApplicable(ItemMeta meta, Material type) {
         if (type == null || meta == null) {
             return false;
         }
+
         if (!(meta instanceof CraftMetaItem)) {
             throw new IllegalArgumentException("Meta of " + meta.getClass().toString() + " not created by " + CraftItemFactory.class.getName());
         }
@@ -52,6 +58,7 @@ public final class CraftItemFactory implements ItemFactory {
         return ((CraftMetaItem) meta).applicableTo(type);
     }
 
+    @Override
     public ItemMeta getItemMeta(Material material) {
         Validate.notNull(material, "Material cannot be null");
         return getItemMeta(material, null);
@@ -59,46 +66,51 @@ public final class CraftItemFactory implements ItemFactory {
 
     private ItemMeta getItemMeta(Material material, CraftMetaItem meta) {
         switch (material) {
-        case AIR:
-            return null;
-        case WRITTEN_BOOK:
-        case BOOK_AND_QUILL:
-            return meta instanceof CraftMetaBook ? meta : new CraftMetaBook(meta);
-        case SKULL_ITEM:
-            return meta instanceof CraftMetaSkull ? meta : new CraftMetaSkull(meta);
-        case LEATHER_HELMET:
-        case LEATHER_CHESTPLATE:
-        case LEATHER_LEGGINGS:
-        case LEATHER_BOOTS:
-            return meta instanceof CraftMetaLeatherArmor ? meta : new CraftMetaLeatherArmor(meta);
-        case POTION:
-            return meta instanceof CraftMetaPotion ? meta : new CraftMetaPotion(meta);
-        case MAP:
-            return meta instanceof CraftMetaMap ? meta : new CraftMetaMap(meta);
-        case FIREWORK:
-            return meta instanceof CraftMetaFirework ? meta : new CraftMetaFirework(meta);
-        case FIREWORK_CHARGE:
-            return meta instanceof CraftMetaCharge ? meta : new CraftMetaCharge(meta);
-        case ENCHANTED_BOOK:
-            return meta instanceof CraftMetaEnchantedBook ? meta : new CraftMetaEnchantedBook(meta);
-        default:
-            return new CraftMetaItem(meta);
+            case AIR:
+                return null;
+            case WRITTEN_BOOK:
+            case BOOK_AND_QUILL:
+                return meta instanceof CraftMetaBook ? meta : new CraftMetaBook(meta);
+            case SKULL_ITEM:
+                return meta instanceof CraftMetaSkull ? meta : new CraftMetaSkull(meta);
+            case LEATHER_HELMET:
+            case LEATHER_CHESTPLATE:
+            case LEATHER_LEGGINGS:
+            case LEATHER_BOOTS:
+                return meta instanceof CraftMetaLeatherArmor ? meta : new CraftMetaLeatherArmor(meta);
+            case POTION:
+                return meta instanceof CraftMetaPotion ? meta : new CraftMetaPotion(meta);
+            case MAP:
+                return meta instanceof CraftMetaMap ? meta : new CraftMetaMap(meta);
+            case FIREWORK:
+                return meta instanceof CraftMetaFirework ? meta : new CraftMetaFirework(meta);
+            case FIREWORK_CHARGE:
+                return meta instanceof CraftMetaCharge ? meta : new CraftMetaCharge(meta);
+            case ENCHANTED_BOOK:
+                return meta instanceof CraftMetaEnchantedBook ? meta : new CraftMetaEnchantedBook(meta);
+            default:
+                return new CraftMetaItem(meta);
         }
     }
 
+    @Override
     public boolean equals(ItemMeta meta1, ItemMeta meta2) {
         if (meta1 == meta2) {
             return true;
         }
+
         if (meta1 != null && !(meta1 instanceof CraftMetaItem)) {
             throw new IllegalArgumentException("First meta of " + meta1.getClass().getName() + " does not belong to " + CraftItemFactory.class.getName());
         }
+
         if (meta2 != null && !(meta2 instanceof CraftMetaItem)) {
             throw new IllegalArgumentException("Second meta " + meta2.getClass().getName() + " does not belong to " + CraftItemFactory.class.getName());
         }
+
         if (meta1 == null) {
             return ((CraftMetaItem) meta2).isEmpty();
         }
+
         if (meta2 == null) {
             return ((CraftMetaItem) meta1).isEmpty();
         }
@@ -119,23 +131,23 @@ public final class CraftItemFactory implements ItemFactory {
         return meta1.equalsCommon(meta2) && meta1.notUncommon(meta2) && meta2.notUncommon(meta1);
     }
 
-    public static CraftItemFactory instance() {
-        return instance;
-    }
-
+    @Override
     public ItemMeta asMetaFor(ItemMeta meta, ItemStack stack) {
         Validate.notNull(stack, "Stack cannot be null");
         return asMetaFor(meta, stack.getType());
     }
 
+    @Override
     public ItemMeta asMetaFor(ItemMeta meta, Material material) {
         Validate.notNull(material, "Material cannot be null");
         if (!(meta instanceof CraftMetaItem)) {
             throw new IllegalArgumentException("Meta of " + (meta != null ? meta.getClass().toString() : "null") + " not created by " + CraftItemFactory.class.getName());
         }
+
         return getItemMeta(material, (CraftMetaItem) meta);
     }
 
+    @Override
     public Color getDefaultLeatherColor() {
         return DEFAULT_LEATHER_COLOR;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
index 704be69..01ad65d 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
@@ -1,16 +1,10 @@
 package org.bukkit.craftbukkit.inventory;
 
-import static org.bukkit.craftbukkit.inventory.CraftMetaItem.ENCHANTMENTS;
-import static org.bukkit.craftbukkit.inventory.CraftMetaItem.ENCHANTMENTS_ID;
-import static org.bukkit.craftbukkit.inventory.CraftMetaItem.ENCHANTMENTS_LVL;
-
-import java.util.Map;
-
+import com.google.common.collect.ImmutableMap;
 import net.minecraft.server.EnchantmentManager;
 import net.minecraft.server.Item;
 import net.minecraft.server.NBTTagCompound;
 import net.minecraft.server.NBTTagList;
-
 import org.apache.commons.lang.Validate;
 import org.bukkit.Material;
 import org.bukkit.configuration.serialization.DelegateDeserialization;
@@ -19,16 +13,44 @@ import org.bukkit.enchantments.Enchantment;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.meta.ItemMeta;
 
-import com.google.common.collect.ImmutableMap;
+import java.util.Map;
+
+import static org.bukkit.craftbukkit.inventory.CraftMetaItem.*;
 
 @DelegateDeserialization(ItemStack.class)
 public final class CraftItemStack extends ItemStack {
 
+    net.minecraft.server.ItemStack handle;
+
+    /**
+     * Mirror
+     */
+    private CraftItemStack(net.minecraft.server.ItemStack item) {
+        this.handle = item;
+    }
+
+    private CraftItemStack(ItemStack item) {
+        this(item.getTypeId(), item.getAmount(), item.getDurability(), item.hasItemMeta() ? item.getItemMeta() : null);
+    }
+
+    private CraftItemStack(Material type, int amount, short durability, ItemMeta itemMeta) {
+        setType(type);
+        setAmount(amount);
+        setDurability(durability);
+        setItemMeta(itemMeta);
+    }
+
+    private CraftItemStack(int typeId, int amount, short durability, ItemMeta itemMeta) {
+        this(Material.getMaterial(typeId), amount, durability, itemMeta);
+
+    }
+
     public static net.minecraft.server.ItemStack asNMSCopy(ItemStack original) {
         if (original instanceof CraftItemStack) {
             CraftItemStack stack = (CraftItemStack) original;
             return stack.handle == null ? null : stack.handle.cloneItemStack();
         }
+
         if (original == null || original.getTypeId() <= 0) {
             return null;
         }
@@ -43,6 +65,7 @@ public final class CraftItemStack extends ItemStack {
         if (original.hasItemMeta()) {
             setItemMeta(stack, original.getItemMeta());
         }
+
         return stack;
     }
 
@@ -59,10 +82,12 @@ public final class CraftItemStack extends ItemStack {
         if (original == null) {
             return new ItemStack(Material.AIR);
         }
+
         ItemStack stack = new ItemStack(CraftMagicNumbers.getMaterial(original.getItem()), original.count, (short) original.getData());
         if (hasItemMeta(original)) {
             stack.setItemMeta(getItemMeta(original));
         }
+
         return stack;
     }
 
@@ -75,6 +100,7 @@ public final class CraftItemStack extends ItemStack {
             CraftItemStack stack = (CraftItemStack) original;
             return new CraftItemStack(stack.handle == null ? null : stack.handle.cloneItemStack());
         }
+
         return new CraftItemStack(original);
     }
 
@@ -86,29 +112,100 @@ public final class CraftItemStack extends ItemStack {
         return new CraftItemStack(CraftMagicNumbers.getMaterial(item), amount, (short) 0, null);
     }
 
-    net.minecraft.server.ItemStack handle;
+    static boolean makeTag(net.minecraft.server.ItemStack item) {
+        if (item == null) {
+            return false;
+        }
 
-    /**
-     * Mirror
-     */
-    private CraftItemStack(net.minecraft.server.ItemStack item) {
-        this.handle = item;
+        if (item.tag == null) {
+            item.setTag(new NBTTagCompound());
+        }
+
+        return true;
     }
 
-    private CraftItemStack(ItemStack item) {
-        this(item.getTypeId(), item.getAmount(), item.getDurability(), item.hasItemMeta() ? item.getItemMeta() : null);
+    static Map<Enchantment, Integer> getEnchantments(net.minecraft.server.ItemStack item) {
+        NBTTagList list = (item != null && item.hasEnchantments()) ? item.getEnchantments() : null;
+
+        if (list == null || list.size() == 0) {
+            return ImmutableMap.of();
+        }
+
+        ImmutableMap.Builder<Enchantment, Integer> result = ImmutableMap.builder();
+
+        for (int i = 0; i < list.size(); i++) {
+            int id = 0xffff & list.get(i).getShort(ENCHANTMENTS_ID.NBT);
+            int level = 0xffff & list.get(i).getShort(ENCHANTMENTS_LVL.NBT);
+
+            result.put(Enchantment.getById(id), level);
+        }
+
+        return result.build();
     }
 
-    private CraftItemStack(Material type, int amount, short durability, ItemMeta itemMeta) {
-        setType(type);
-        setAmount(amount);
-        setDurability(durability);
-        setItemMeta(itemMeta);
+    static NBTTagList getEnchantmentList(net.minecraft.server.ItemStack item) {
+        return (item != null && item.hasEnchantments()) ? item.getEnchantments() : null;
     }
 
-    private CraftItemStack(int typeId, int amount, short durability, ItemMeta itemMeta) {
-        this(Material.getMaterial(typeId), amount, durability, itemMeta);
+    public static ItemMeta getItemMeta(net.minecraft.server.ItemStack item) {
+        if (!hasItemMeta(item)) {
+            return CraftItemFactory.instance().getItemMeta(getType(item));
+        }
+
+        switch (getType(item)) {
+            case WRITTEN_BOOK:
+            case BOOK_AND_QUILL:
+                return new CraftMetaBook(item.tag);
+            case SKULL_ITEM:
+                return new CraftMetaSkull(item.tag);
+            case LEATHER_HELMET:
+            case LEATHER_CHESTPLATE:
+            case LEATHER_LEGGINGS:
+            case LEATHER_BOOTS:
+                return new CraftMetaLeatherArmor(item.tag);
+            case POTION:
+                return new CraftMetaPotion(item.tag);
+            case MAP:
+                return new CraftMetaMap(item.tag);
+            case FIREWORK:
+                return new CraftMetaFirework(item.tag);
+            case FIREWORK_CHARGE:
+                return new CraftMetaCharge(item.tag);
+            case ENCHANTED_BOOK:
+                return new CraftMetaEnchantedBook(item.tag);
+            default:
+                return new CraftMetaItem(item.tag);
+        }
+    }
+
+    static Material getType(net.minecraft.server.ItemStack item) {
+        Material material = Material.getMaterial(item == null ? 0 : CraftMagicNumbers.getId(item.getItem()));
+        return material == null ? Material.AIR : material;
+    }
+
+    public static boolean setItemMeta(net.minecraft.server.ItemStack item, ItemMeta itemMeta) {
+        if (item == null) {
+            return false;
+        }
+
+        if (CraftItemFactory.instance().equals(itemMeta, null)) {
+            item.tag = null;
+            return true;
+        }
+
+        if (!CraftItemFactory.instance().isApplicable(itemMeta, getType(item))) {
+            return false;
+        }
+
+        NBTTagCompound tag = new NBTTagCompound();
+        item.setTag(tag);
 
+        ((CraftMetaItem) itemMeta).applyToItem(tag);
+        return true;
+    }
+
+    static boolean hasItemMeta(net.minecraft.server.ItemStack item) {
+        return !(item == null || item.tag == null || item.tag.isEmpty());
     }
 
     @Override
@@ -133,6 +230,7 @@ public final class CraftItemStack extends ItemStack {
                 setItemMeta(handle, getItemMeta(handle));
             }
         }
+
         setData(null);
     }
 
@@ -146,6 +244,7 @@ public final class CraftItemStack extends ItemStack {
         if (handle == null) {
             return;
         }
+
         if (amount == 0) {
             handle = null;
         } else {
@@ -154,19 +253,19 @@ public final class CraftItemStack extends ItemStack {
     }
 
     @Override
-    public void setDurability(final short durability) {
-        // Ignore damage if item is null
+    public short getDurability() {
         if (handle != null) {
-            handle.setData(durability);
+            return (short) handle.getData();
+        } else {
+            return -1;
         }
     }
 
     @Override
-    public short getDurability() {
+    public void setDurability(final short durability) {
+        // Ignore damage if item is null
         if (handle != null) {
-            return (short) handle.getData();
-        } else {
-            return -1;
+            handle.setData(durability);
         }
     }
 
@@ -182,39 +281,29 @@ public final class CraftItemStack extends ItemStack {
         if (!makeTag(handle)) {
             return;
         }
+
         NBTTagList list = getEnchantmentList(handle);
         if (list == null) {
             list = new NBTTagList();
             handle.tag.set(ENCHANTMENTS.NBT, list);
         }
-        int size = list.size();
 
+        int size = list.size();
         for (int i = 0; i < size; i++) {
-            NBTTagCompound tag = (NBTTagCompound) list.get(i);
+            NBTTagCompound tag = list.get(i);
             short id = tag.getShort(ENCHANTMENTS_ID.NBT);
             if (id == ench.getId()) {
                 tag.setShort(ENCHANTMENTS_LVL.NBT, (short) level);
                 return;
             }
         }
+
         NBTTagCompound tag = new NBTTagCompound();
         tag.setShort(ENCHANTMENTS_ID.NBT, (short) ench.getId());
         tag.setShort(ENCHANTMENTS_LVL.NBT, (short) level);
         list.add(tag);
     }
 
-    static boolean makeTag(net.minecraft.server.ItemStack item) {
-        if (item == null) {
-            return false;
-        }
-
-        if (item.tag == null) {
-            item.setTag(new NBTTagCompound());
-        }
-
-        return true;
-    }
-
     @Override
     public boolean containsEnchantment(Enchantment ench) {
         return getEnchantmentLevel(ench) > 0;
@@ -237,12 +326,13 @@ public final class CraftItemStack extends ItemStack {
         if (list == null) {
             return 0;
         }
+
         int index = Integer.MIN_VALUE;
         int level = Integer.MIN_VALUE;
         int size = list.size();
 
         for (int i = 0; i < size; i++) {
-            NBTTagCompound enchantment = (NBTTagCompound) list.get(i);
+            NBTTagCompound enchantment = list.get(i);
             int id = 0xffff & enchantment.getShort(ENCHANTMENTS_ID.NBT);
             if (id == ench.getId()) {
                 index = i;
@@ -254,11 +344,13 @@ public final class CraftItemStack extends ItemStack {
         if (index == Integer.MIN_VALUE) {
             return 0;
         }
+
         if (size == 1) {
             handle.tag.remove(ENCHANTMENTS.NBT);
             if (handle.tag.isEmpty()) {
                 handle.tag = null;
             }
+
             return level;
         }
 
@@ -269,8 +361,8 @@ public final class CraftItemStack extends ItemStack {
                 listCopy.add(list.get(i));
             }
         }
-        handle.tag.set(ENCHANTMENTS.NBT, listCopy);
 
+        handle.tag.set(ENCHANTMENTS.NBT, listCopy);
         return level;
     }
 
@@ -279,35 +371,13 @@ public final class CraftItemStack extends ItemStack {
         return getEnchantments(handle);
     }
 
-    static Map<Enchantment, Integer> getEnchantments(net.minecraft.server.ItemStack item) {
-        NBTTagList list = (item != null && item.hasEnchantments()) ? item.getEnchantments() : null;
-
-        if (list == null || list.size() == 0) {
-            return ImmutableMap.of();
-        }
-
-        ImmutableMap.Builder<Enchantment, Integer> result = ImmutableMap.builder();
-
-        for (int i = 0; i < list.size(); i++) {
-            int id = 0xffff & ((NBTTagCompound) list.get(i)).getShort(ENCHANTMENTS_ID.NBT);
-            int level = 0xffff & ((NBTTagCompound) list.get(i)).getShort(ENCHANTMENTS_LVL.NBT);
-
-            result.put(Enchantment.getById(id), level);
-        }
-
-        return result.build();
-    }
-
-    static NBTTagList getEnchantmentList(net.minecraft.server.ItemStack item) {
-        return (item != null && item.hasEnchantments()) ? item.getEnchantments() : null;
-    }
-
     @Override
     public CraftItemStack clone() {
         CraftItemStack itemStack = (CraftItemStack) super.clone();
         if (this.handle != null) {
             itemStack.handle = this.handle.cloneItemStack();
         }
+
         return itemStack;
     }
 
@@ -316,73 +386,21 @@ public final class CraftItemStack extends ItemStack {
         return getItemMeta(handle);
     }
 
-    public static ItemMeta getItemMeta(net.minecraft.server.ItemStack item) {
-        if (!hasItemMeta(item)) {
-            return CraftItemFactory.instance().getItemMeta(getType(item));
-        }
-        switch (getType(item)) {
-            case WRITTEN_BOOK:
-            case BOOK_AND_QUILL:
-                return new CraftMetaBook(item.tag);
-            case SKULL_ITEM:
-                return new CraftMetaSkull(item.tag);
-            case LEATHER_HELMET:
-            case LEATHER_CHESTPLATE:
-            case LEATHER_LEGGINGS:
-            case LEATHER_BOOTS:
-                return new CraftMetaLeatherArmor(item.tag);
-            case POTION:
-                return new CraftMetaPotion(item.tag);
-            case MAP:
-                return new CraftMetaMap(item.tag);
-            case FIREWORK:
-                return new CraftMetaFirework(item.tag);
-            case FIREWORK_CHARGE:
-                return new CraftMetaCharge(item.tag);
-            case ENCHANTED_BOOK:
-                return new CraftMetaEnchantedBook(item.tag);
-            default:
-                return new CraftMetaItem(item.tag);
-        }
-    }
-
-    static Material getType(net.minecraft.server.ItemStack item) {
-        Material material = Material.getMaterial(item == null ? 0 : CraftMagicNumbers.getId(item.getItem()));
-        return material == null ? Material.AIR : material;
-    }
-
     @Override
     public boolean setItemMeta(ItemMeta itemMeta) {
         return setItemMeta(handle, itemMeta);
     }
 
-    public static boolean setItemMeta(net.minecraft.server.ItemStack item, ItemMeta itemMeta) {
-        if (item == null) {
-            return false;
-        }
-        if (CraftItemFactory.instance().equals(itemMeta, null)) {
-            item.tag = null;
-            return true;
-        }
-        if (!CraftItemFactory.instance().isApplicable(itemMeta, getType(item))) {
-            return false;
-        }
-
-        NBTTagCompound tag = new NBTTagCompound();
-        item.setTag(tag);
-
-        ((CraftMetaItem) itemMeta).applyToItem(tag);
-        return true;
-    }
-
     @Override
     public boolean isSimilar(ItemStack stack) {
         if (stack == null) {
             return false;
         }
+
         if (stack == this) {
             return true;
         }
+
         if (!(stack instanceof CraftItemStack)) {
             return stack.getClass() == ItemStack.class && stack.isSimilar(this);
         }
@@ -391,9 +409,11 @@ public final class CraftItemStack extends ItemStack {
         if (handle == that.handle) {
             return true;
         }
+
         if (handle == null || that.handle == null) {
             return false;
         }
+
         if (!(that.getTypeId() == getTypeId() && getDurability() == that.getDurability())) {
             return false;
         }
@@ -404,8 +424,4 @@ public final class CraftItemStack extends ItemStack {
     public boolean hasItemMeta() {
         return hasItemMeta(handle);
     }
-
-    static boolean hasItemMeta(net.minecraft.server.ItemStack item) {
-        return !(item == null || item.tag == null || item.tag.isEmpty());
-    }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBook.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBook.java
index bdc6364..d399b80 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBook.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBook.java
@@ -1,28 +1,28 @@
 package org.bukkit.craftbukkit.inventory;
 
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Map;
-
+import com.google.common.base.Strings;
+import com.google.common.collect.ImmutableList;
+import com.google.common.collect.ImmutableMap.Builder;
 import net.minecraft.server.NBTTagCompound;
 import net.minecraft.server.NBTTagList;
-
 import org.apache.commons.lang.Validate;
 import org.bukkit.Material;
 import org.bukkit.configuration.serialization.DelegateDeserialization;
 import org.bukkit.craftbukkit.inventory.CraftMetaItem.SerializableMeta;
 import org.bukkit.inventory.meta.BookMeta;
 
-import com.google.common.base.Strings;
-import com.google.common.collect.ImmutableList;
-import com.google.common.collect.ImmutableMap.Builder;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Map;
+
+import static org.spigotmc.ValidateUtils.limit;
 
 // Spigot start
-import static org.spigotmc.ValidateUtils.*;
 // Spigot end
 
 @DelegateDeserialization(SerializableMeta.class)
 class CraftMetaBook extends CraftMetaItem implements BookMeta {
+
     static final ItemMetaKey BOOK_TITLE = new ItemMetaKey("title");
     static final ItemMetaKey BOOK_AUTHOR = new ItemMetaKey("author");
     static final ItemMetaKey BOOK_PAGES = new ItemMetaKey("pages");
@@ -39,6 +39,7 @@ class CraftMetaBook extends CraftMetaItem implements BookMeta {
         if (!(meta instanceof CraftMetaBook)) {
             return;
         }
+
         CraftMetaBook bookMeta = (CraftMetaBook) meta;
         this.title = bookMeta.title;
         this.author = bookMeta.author;
@@ -49,11 +50,11 @@ class CraftMetaBook extends CraftMetaItem implements BookMeta {
         super(tag);
 
         if (tag.hasKey(BOOK_TITLE.NBT)) {
-            this.title = limit( tag.getString(BOOK_TITLE.NBT), 1024 ); // Spigot
+            this.title = limit(tag.getString(BOOK_TITLE.NBT), 1024); // Spigot
         }
 
         if (tag.hasKey(BOOK_AUTHOR.NBT)) {
-            this.author = limit( tag.getString(BOOK_AUTHOR.NBT), 1024 ); // Spigot
+            this.author = limit(tag.getString(BOOK_AUTHOR.NBT), 1024); // Spigot
         }
 
         if (tag.hasKey(BOOK_PAGES.NBT)) {
@@ -61,7 +62,7 @@ class CraftMetaBook extends CraftMetaItem implements BookMeta {
             String[] pageArray = new String[pages.size()];
 
             for (int i = 0; i < pages.size(); i++) {
-                String page = limit( pages.getString(i), 2048 ); // Spigot
+                String page = limit(pages.getString(i), 2048); // Spigot
                 pageArray[i] = page;
             }
 
@@ -109,30 +110,35 @@ class CraftMetaBook extends CraftMetaItem implements BookMeta {
     @Override
     boolean applicableTo(Material type) {
         switch (type) {
-        case WRITTEN_BOOK:
-        case BOOK_AND_QUILL:
-            return true;
-        default:
-            return false;
+            case WRITTEN_BOOK:
+            case BOOK_AND_QUILL:
+                return true;
+            default:
+                return false;
         }
     }
 
+    @Override
     public boolean hasAuthor() {
         return !Strings.isNullOrEmpty(author);
     }
 
+    @Override
     public boolean hasTitle() {
         return !Strings.isNullOrEmpty(title);
     }
 
+    @Override
     public boolean hasPages() {
         return !pages.isEmpty();
     }
 
+    @Override
     public String getTitle() {
         return this.title;
     }
 
+    @Override
     public boolean setTitle(final String title) {
         if (title == null) {
             this.title = null;
@@ -145,19 +151,23 @@ class CraftMetaBook extends CraftMetaItem implements BookMeta {
         return true;
     }
 
+    @Override
     public String getAuthor() {
         return this.author;
     }
 
+    @Override
     public void setAuthor(final String author) {
         this.author = author;
     }
 
+    @Override
     public String getPage(final int page) {
         Validate.isTrue(isValidPage(page), "Invalid page number");
         return pages.get(page - 1);
     }
 
+    @Override
     public void setPage(final int page, final String text) {
         if (!isValidPage(page)) {
             throw new IllegalArgumentException("Invalid page number " + page + "/" + pages.size());
@@ -166,12 +176,13 @@ class CraftMetaBook extends CraftMetaItem implements BookMeta {
         pages.set(page - 1, text == null ? "" : text.length() > MAX_PAGE_LENGTH ? text.substring(0, MAX_PAGE_LENGTH) : text);
     }
 
+    @Override
     public void setPages(final String... pages) {
         this.pages.clear();
-
         addPage(pages);
     }
 
+    @Override
     public void addPage(final String... pages) {
         for (String page : pages) {
             if (page == null) {
@@ -184,14 +195,17 @@ class CraftMetaBook extends CraftMetaItem implements BookMeta {
         }
     }
 
+    @Override
     public int getPageCount() {
         return pages.size();
     }
 
+    @Override
     public List<String> getPages() {
         return ImmutableList.copyOf(pages);
     }
 
+    @Override
     public void setPages(List<String> pages) {
         this.pages.clear();
         CraftMetaItem.safelyAdd(pages, this.pages, MAX_PAGE_LENGTH);
@@ -215,12 +229,15 @@ class CraftMetaBook extends CraftMetaItem implements BookMeta {
         if (hasTitle()) {
             hash = 61 * hash + this.title.hashCode();
         }
+
         if (hasAuthor()) {
             hash = 61 * hash + 13 * this.author.hashCode();
         }
+
         if (hasPages()) {
             hash = 61 * hash + 17 * this.pages.hashCode();
         }
+
         return original != hash ? CraftMetaBook.class.hashCode() ^ hash : hash;
     }
 
@@ -229,13 +246,14 @@ class CraftMetaBook extends CraftMetaItem implements BookMeta {
         if (!super.equalsCommon(meta)) {
             return false;
         }
+
         if (meta instanceof CraftMetaBook) {
             CraftMetaBook that = (CraftMetaBook) meta;
-
             return (hasTitle() ? that.hasTitle() && this.title.equals(that.title) : !that.hasTitle())
                     && (hasAuthor() ? that.hasAuthor() && this.author.equals(that.author) : !that.hasAuthor())
                     && (hasPages() ? that.hasPages() && this.pages.equals(that.pages) : !that.hasPages());
         }
+
         return true;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaCharge.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaCharge.java
index bff3be9..7f34574 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaCharge.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaCharge.java
@@ -1,16 +1,14 @@
 package org.bukkit.craftbukkit.inventory;
 
-import java.util.Map;
-
+import com.google.common.collect.ImmutableMap.Builder;
 import net.minecraft.server.NBTTagCompound;
-
 import org.bukkit.FireworkEffect;
 import org.bukkit.Material;
 import org.bukkit.configuration.serialization.DelegateDeserialization;
 import org.bukkit.craftbukkit.inventory.CraftMetaItem.SerializableMeta;
 import org.bukkit.inventory.meta.FireworkEffectMeta;
 
-import com.google.common.collect.ImmutableMap.Builder;
+import java.util.Map;
 
 @DelegateDeserialization(SerializableMeta.class)
 class CraftMetaCharge extends CraftMetaItem implements FireworkEffectMeta {
@@ -20,7 +18,6 @@ class CraftMetaCharge extends CraftMetaItem implements FireworkEffectMeta {
 
     CraftMetaCharge(CraftMetaItem meta) {
         super(meta);
-
         if (meta instanceof CraftMetaCharge) {
             effect = ((CraftMetaCharge) meta).effect;
         }
@@ -28,7 +25,6 @@ class CraftMetaCharge extends CraftMetaItem implements FireworkEffectMeta {
 
     CraftMetaCharge(Map<String, Object> map) {
         super(map);
-
         setEffect(SerializableMeta.getObject(FireworkEffect.class, map, EXPLOSION.BUKKIT, true));
     }
 
@@ -40,19 +36,22 @@ class CraftMetaCharge extends CraftMetaItem implements FireworkEffectMeta {
         }
     }
 
-    public void setEffect(FireworkEffect effect) {
-        this.effect = effect;
-    }
-
+    @Override
     public boolean hasEffect() {
         return effect != null;
     }
 
+    @Override
     public FireworkEffect getEffect() {
         return effect;
     }
 
     @Override
+    public void setEffect(FireworkEffect effect) {
+        this.effect = effect;
+    }
+
+    @Override
     void applyToItem(NBTTagCompound itemTag) {
         super.applyToItem(itemTag);
 
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaEnchantedBook.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaEnchantedBook.java
index 8d44e55..dcfdcc4 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaEnchantedBook.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaEnchantedBook.java
@@ -1,21 +1,20 @@
 package org.bukkit.craftbukkit.inventory;
 
-import java.util.HashMap;
-import java.util.Map;
-
+import com.google.common.collect.ImmutableMap;
+import com.google.common.collect.ImmutableMap.Builder;
 import net.minecraft.server.NBTTagCompound;
-
 import org.bukkit.Material;
 import org.bukkit.configuration.serialization.DelegateDeserialization;
 import org.bukkit.craftbukkit.inventory.CraftMetaItem.SerializableMeta;
 import org.bukkit.enchantments.Enchantment;
 import org.bukkit.inventory.meta.EnchantmentStorageMeta;
 
-import com.google.common.collect.ImmutableMap;
-import com.google.common.collect.ImmutableMap.Builder;
+import java.util.HashMap;
+import java.util.Map;
 
 @DelegateDeserialization(SerializableMeta.class)
 class CraftMetaEnchantedBook extends CraftMetaItem implements EnchantmentStorageMeta {
+
     static final ItemMetaKey STORED_ENCHANTMENTS = new ItemMetaKey("StoredEnchantments", "stored-enchants");
 
     private Map<Enchantment, Integer> enchantments;
@@ -46,14 +45,12 @@ class CraftMetaEnchantedBook extends CraftMetaItem implements EnchantmentStorage
 
     CraftMetaEnchantedBook(Map<String, Object> map) {
         super(map);
-
         enchantments = buildEnchantments(map, STORED_ENCHANTMENTS);
     }
 
     @Override
     void applyToItem(NBTTagCompound itemTag) {
         super.applyToItem(itemTag);
-
         applyEnchantments(enchantments, itemTag, STORED_ENCHANTMENTS);
     }
 
@@ -77,11 +74,12 @@ class CraftMetaEnchantedBook extends CraftMetaItem implements EnchantmentStorage
         if (!super.equalsCommon(meta)) {
             return false;
         }
+
         if (meta instanceof CraftMetaEnchantedBook) {
             CraftMetaEnchantedBook that = (CraftMetaEnchantedBook) meta;
-
             return (hasStoredEnchants() ? that.hasStoredEnchants() && this.enchantments.equals(that.enchantments) : !that.hasStoredEnchants());
         }
+
         return true;
     }
 
@@ -116,9 +114,7 @@ class CraftMetaEnchantedBook extends CraftMetaItem implements EnchantmentStorage
     @Override
     Builder<String, Object> serialize(Builder<String, Object> builder) {
         super.serialize(builder);
-
         serializeEnchantments(enchantments, builder, STORED_ENCHANTMENTS);
-
         return builder;
     }
 
@@ -126,22 +122,32 @@ class CraftMetaEnchantedBook extends CraftMetaItem implements EnchantmentStorage
         return !hasStoredEnchants();
     }
 
+    @Override
     public boolean hasStoredEnchant(Enchantment ench) {
         return hasStoredEnchants() && enchantments.containsKey(ench);
     }
 
+    @Override
     public int getStoredEnchantLevel(Enchantment ench) {
         Integer level = hasStoredEnchants() ? enchantments.get(ench) : null;
         if (level == null) {
             return 0;
         }
+
         return level;
     }
 
+    @Override
+    public boolean hasStoredEnchants() {
+        return !(enchantments == null || enchantments.isEmpty());
+    }
+
+    @Override
     public Map<Enchantment, Integer> getStoredEnchants() {
         return hasStoredEnchants() ? ImmutableMap.copyOf(enchantments) : ImmutableMap.<Enchantment, Integer>of();
     }
 
+    @Override
     public boolean addStoredEnchant(Enchantment ench, int level, boolean ignoreRestrictions) {
         if (enchantments == null) {
             enchantments = new HashMap<Enchantment, Integer>(4);
@@ -151,17 +157,16 @@ class CraftMetaEnchantedBook extends CraftMetaItem implements EnchantmentStorage
             Integer old = enchantments.put(ench, level);
             return old == null || old != level;
         }
+
         return false;
     }
 
+    @Override
     public boolean removeStoredEnchant(Enchantment ench) {
         return hasStoredEnchants() && enchantments.remove(ench) != null;
     }
 
-    public boolean hasStoredEnchants() {
-        return !(enchantments == null || enchantments.isEmpty());
-    }
-
+    @Override
     public boolean hasConflictingStoredEnchant(Enchantment ench) {
         return checkConflictingEnchants(enchantments, ench);
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaFirework.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaFirework.java
index 5a409ae..5fe86d6 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaFirework.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaFirework.java
@@ -1,13 +1,9 @@
 package org.bukkit.craftbukkit.inventory;
 
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.List;
-import java.util.Map;
-
+import com.google.common.collect.ImmutableList;
+import com.google.common.collect.ImmutableMap.Builder;
 import net.minecraft.server.NBTTagCompound;
 import net.minecraft.server.NBTTagList;
-
 import org.apache.commons.lang.Validate;
 import org.bukkit.Color;
 import org.bukkit.FireworkEffect;
@@ -19,11 +15,14 @@ import org.bukkit.craftbukkit.inventory.CraftMetaItem.ItemMetaKey.Specific.To;
 import org.bukkit.craftbukkit.inventory.CraftMetaItem.SerializableMeta;
 import org.bukkit.inventory.meta.FireworkMeta;
 
-import com.google.common.collect.ImmutableList;
-import com.google.common.collect.ImmutableMap.Builder;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.List;
+import java.util.Map;
 
 @DelegateDeserialization(SerializableMeta.class)
 class CraftMetaFirework extends CraftMetaItem implements FireworkMeta {
+
     /*
        "Fireworks", "Explosion", "Explosions", "Flight", "Type", "Trail", "Flicker", "Colors", "FadeColors";
 
@@ -65,7 +64,6 @@ class CraftMetaFirework extends CraftMetaItem implements FireworkMeta {
         }
 
         CraftMetaFirework that = (CraftMetaFirework) meta;
-
         this.power = that.power;
 
         if (that.hasEffects()) {
@@ -81,7 +79,6 @@ class CraftMetaFirework extends CraftMetaItem implements FireworkMeta {
         }
 
         NBTTagCompound fireworks = tag.getCompound(FIREWORKS.NBT);
-
         power = 0xff & fireworks.getByte(FLIGHT.NBT);
 
         if (!fireworks.hasKey(EXPLOSIONS.NBT)) {
@@ -90,12 +87,23 @@ class CraftMetaFirework extends CraftMetaItem implements FireworkMeta {
 
         NBTTagList fireworkEffects = fireworks.getList(EXPLOSIONS.NBT, 10);
         List<FireworkEffect> effects = this.effects = new ArrayList<FireworkEffect>(fireworkEffects.size());
-
         for (int i = 0; i < fireworkEffects.size(); i++) {
-            effects.add(getEffect((NBTTagCompound) fireworkEffects.get(i)));
+            effects.add(getEffect(fireworkEffects.get(i)));
         }
     }
 
+    CraftMetaFirework(Map<String, Object> map) {
+        super(map);
+
+        Integer power = SerializableMeta.getObject(Integer.class, map, FLIGHT.BUKKIT, true);
+        if (power != null) {
+            setPower(power);
+        }
+
+        Iterable<?> effects = SerializableMeta.getObject(Iterable.class, map, EXPLOSIONS.BUKKIT, true);
+        safelyAddEffects(effects);
+    }
+
     static FireworkEffect getEffect(NBTTagCompound explosion) {
         FireworkEffect.Builder effect = FireworkEffect.builder()
                 .flicker(explosion.getBoolean(EXPLOSION_FLICKER.NBT))
@@ -128,7 +136,6 @@ class CraftMetaFirework extends CraftMetaItem implements FireworkMeta {
         addColors(explosion, EXPLOSION_FADE, effect.getFadeColors());
 
         explosion.setByte(EXPLOSION_TYPE.NBT, (byte) getNBT(effect.getType()));
-
         return explosion;
     }
 
@@ -166,16 +173,18 @@ class CraftMetaFirework extends CraftMetaItem implements FireworkMeta {
         }
     }
 
-    CraftMetaFirework(Map<String, Object> map) {
-        super(map);
+    static void addColors(NBTTagCompound compound, ItemMetaKey key, List<Color> colors) {
+        if (colors.isEmpty()) {
+            return;
+        }
 
-        Integer power = SerializableMeta.getObject(Integer.class, map, FLIGHT.BUKKIT, true);
-        if (power != null) {
-            setPower(power);
+        final int[] colorArray = new int[colors.size()];
+        int i = 0;
+        for (Color color : colors) {
+            colorArray[i++] = color.asRGB();
         }
 
-        Iterable<?> effects = SerializableMeta.getObject(Iterable.class, map, EXPLOSIONS.BUKKIT, true);
-        safelyAddEffects(effects);
+        compound.setIntArray(key.NBT, colorArray);
     }
 
     public boolean hasEffects() {
@@ -227,23 +236,9 @@ class CraftMetaFirework extends CraftMetaItem implements FireworkMeta {
         }
     }
 
-    static void addColors(NBTTagCompound compound, ItemMetaKey key, List<Color> colors) {
-        if (colors.isEmpty()) {
-            return;
-        }
-
-        final int[] colorArray = new int[colors.size()];
-        int i = 0;
-        for (Color color : colors) {
-            colorArray[i++] = color.asRGB();
-        }
-
-        compound.setIntArray(key.NBT, colorArray);
-    }
-
     @Override
     boolean applicableTo(Material type) {
-        switch(type) {
+        switch (type) {
             case FIREWORK:
                 return true;
             default:
@@ -257,7 +252,7 @@ class CraftMetaFirework extends CraftMetaItem implements FireworkMeta {
     }
 
     boolean isFireworkEmpty() {
-        return  !(hasEffects() || hasPower());
+        return !(hasEffects() || hasPower());
     }
 
     boolean hasPower() {
@@ -272,7 +267,6 @@ class CraftMetaFirework extends CraftMetaItem implements FireworkMeta {
 
         if (meta instanceof CraftMetaFirework) {
             CraftMetaFirework that = (CraftMetaFirework) meta;
-
             return (hasPower() ? that.hasPower() && this.power == that.power : !that.hasPower())
                     && (hasEffects() ? that.hasEffects() && this.effects.equals(that.effects) : !that.hasEffects());
         }
@@ -289,12 +283,15 @@ class CraftMetaFirework extends CraftMetaItem implements FireworkMeta {
     int applyHash() {
         final int original;
         int hash = original = super.applyHash();
+
         if (hasPower()) {
             hash = 61 * hash + power;
         }
+
         if (hasEffects()) {
             hash = 61 * hash + 13 * effects.hashCode();
         }
+
         return hash != original ? CraftMetaFirework.class.hashCode() ^ hash : hash;
     }
 
@@ -324,15 +321,18 @@ class CraftMetaFirework extends CraftMetaItem implements FireworkMeta {
         return meta;
     }
 
+    @Override
     public void addEffect(FireworkEffect effect) {
         Validate.notNull(effect, "Effect cannot be null");
         if (this.effects == null) {
             this.effects = new ArrayList<FireworkEffect>();
         }
+
         this.effects.add(effect);
     }
 
-    public void addEffects(FireworkEffect...effects) {
+    @Override
+    public void addEffects(FireworkEffect... effects) {
         Validate.notNull(effects, "Effects cannot be null");
         if (effects.length == 0) {
             return;
@@ -349,19 +349,23 @@ class CraftMetaFirework extends CraftMetaItem implements FireworkMeta {
         }
     }
 
-    public void addEffects(Iterable<FireworkEffect> effects) {
-        Validate.notNull(effects, "Effects cannot be null");
-        safelyAddEffects(effects);
-    }
-
+    @Override
     public List<FireworkEffect> getEffects() {
         return this.effects == null ? ImmutableList.<FireworkEffect>of() : ImmutableList.copyOf(this.effects);
     }
 
+    @Override
     public int getEffectsSize() {
         return this.effects == null ? 0 : this.effects.size();
     }
 
+    @Override
+    public void addEffects(Iterable<FireworkEffect> effects) {
+        Validate.notNull(effects, "Effects cannot be null");
+        safelyAddEffects(effects);
+    }
+
+    @Override
     public void removeEffect(int index) {
         if (this.effects == null) {
             throw new IndexOutOfBoundsException("Index: " + index + ", Size: 0");
@@ -370,14 +374,17 @@ class CraftMetaFirework extends CraftMetaItem implements FireworkMeta {
         }
     }
 
+    @Override
     public void clearEffects() {
         this.effects = null;
     }
 
+    @Override
     public int getPower() {
         return this.power;
     }
 
+    @Override
     public void setPower(int power) {
         Validate.isTrue(power >= 0, "Power cannot be less than zero: ", power);
         Validate.isTrue(power < 0x80, "Power cannot be more than 127: ", power);
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
index f7a7adc..6c1f2e0 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
@@ -1,18 +1,10 @@
 package org.bukkit.craftbukkit.inventory;
 
-import java.lang.annotation.ElementType;
-import java.lang.annotation.Retention;
-import java.lang.annotation.RetentionPolicy;
-import java.lang.annotation.Target;
-import java.lang.reflect.Constructor;
-import java.lang.reflect.InvocationTargetException;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.NoSuchElementException;
-
+import com.google.common.base.Strings;
+import com.google.common.collect.ImmutableList;
+import com.google.common.collect.ImmutableMap;
+import net.minecraft.server.GenericAttributes;
+import net.minecraft.server.IAttribute;
 import net.minecraft.server.NBTBase;
 import net.minecraft.server.NBTTagCompound;
 import net.minecraft.server.NBTTagDouble;
@@ -20,7 +12,6 @@ import net.minecraft.server.NBTTagInt;
 import net.minecraft.server.NBTTagList;
 import net.minecraft.server.NBTTagLong;
 import net.minecraft.server.NBTTagString;
-
 import org.apache.commons.lang.Validate;
 import org.bukkit.Material;
 import org.bukkit.configuration.serialization.ConfigurationSerializable;
@@ -32,19 +23,27 @@ import org.bukkit.enchantments.Enchantment;
 import org.bukkit.inventory.meta.ItemMeta;
 import org.bukkit.inventory.meta.Repairable;
 
-import com.google.common.base.Strings;
-import com.google.common.collect.ImmutableList;
-import com.google.common.collect.ImmutableMap;
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+import java.lang.reflect.Constructor;
+import java.lang.reflect.InvocationTargetException;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.NoSuchElementException;
+
+import static org.spigotmc.ValidateUtils.limit;
 
 // Spigot start
-import static org.spigotmc.ValidateUtils.*;
-import net.minecraft.server.GenericAttributes;
-import net.minecraft.server.IAttribute;
 // Spigot end
 
 /**
  * Children must include the following:
- *
+ * <p>
  * <li> Constructor(CraftMetaItem meta)
  * <li> Constructor(NBTTagCompound tag)
  * <li> Constructor(Map<String, Object> map)
@@ -67,116 +66,6 @@ import net.minecraft.server.IAttribute;
 @DelegateDeserialization(CraftMetaItem.SerializableMeta.class)
 class CraftMetaItem implements ItemMeta, Repairable {
 
-    static class ItemMetaKey {
-
-        @Retention(RetentionPolicy.SOURCE)
-        @Target(ElementType.FIELD)
-        @interface Specific {
-            enum To {
-                BUKKIT,
-                NBT,
-                ;
-            }
-            To value();
-        }
-
-        final String BUKKIT;
-        final String NBT;
-
-        ItemMetaKey(final String both) {
-            this(both, both);
-        }
-
-        ItemMetaKey(final String nbt, final String bukkit) {
-            this.NBT = nbt;
-            this.BUKKIT = bukkit;
-        }
-    }
-
-    @SerializableAs("ItemMeta")
-    public static class SerializableMeta implements ConfigurationSerializable {
-        static final String TYPE_FIELD = "meta-type";
-
-        static final ImmutableMap<Class<? extends CraftMetaItem>, String> classMap;
-        static final ImmutableMap<String, Constructor<? extends CraftMetaItem>> constructorMap;
-
-        static {
-            classMap = ImmutableMap.<Class<? extends CraftMetaItem>, String>builder()
-                    .put(CraftMetaBook.class, "BOOK")
-                    .put(CraftMetaSkull.class, "SKULL")
-                    .put(CraftMetaLeatherArmor.class, "LEATHER_ARMOR")
-                    .put(CraftMetaMap.class, "MAP")
-                    .put(CraftMetaPotion.class, "POTION")
-                    .put(CraftMetaEnchantedBook.class, "ENCHANTED")
-                    .put(CraftMetaFirework.class, "FIREWORK")
-                    .put(CraftMetaCharge.class, "FIREWORK_EFFECT")
-                    .put(CraftMetaItem.class, "UNSPECIFIC")
-                    .build();
-
-            final ImmutableMap.Builder<String, Constructor<? extends CraftMetaItem>> classConstructorBuilder = ImmutableMap.builder();
-            for (Map.Entry<Class<? extends CraftMetaItem>, String> mapping : classMap.entrySet()) {
-                try {
-                    classConstructorBuilder.put(mapping.getValue(), mapping.getKey().getDeclaredConstructor(Map.class));
-                } catch (NoSuchMethodException e) {
-                    throw new AssertionError(e);
-                }
-            }
-            constructorMap = classConstructorBuilder.build();
-        }
-
-        private SerializableMeta() {
-        }
-
-        public static ItemMeta deserialize(Map<String, Object> map) throws Throwable {
-            Validate.notNull(map, "Cannot deserialize null map");
-
-            String type = getString(map, TYPE_FIELD, false);
-            Constructor<? extends CraftMetaItem> constructor = constructorMap.get(type);
-
-            if (constructor == null) {
-                throw new IllegalArgumentException(type + " is not a valid " + TYPE_FIELD);
-            }
-
-            try {
-                return constructor.newInstance(map);
-            } catch (final InstantiationException e) {
-                throw new AssertionError(e);
-            } catch (final IllegalAccessException e) {
-                throw new AssertionError(e);
-            } catch (final InvocationTargetException e) {
-                throw e.getCause();
-            }
-        }
-
-        public Map<String, Object> serialize() {
-            throw new AssertionError();
-        }
-
-        static String getString(Map<?, ?> map, Object field, boolean nullable) {
-            return getObject(String.class, map, field, nullable);
-        }
-
-        static boolean getBoolean(Map<?, ?> map, Object field) {
-            Boolean value = getObject(Boolean.class, map, field, true);
-            return value != null && value;
-        }
-
-        static <T> T getObject(Class<T> clazz, Map<?, ?> map, Object field, boolean nullable) {
-            final Object object = map.get(field);
-
-            if (clazz.isInstance(object)) {
-                return clazz.cast(object);
-            }
-            if (object == null) {
-                if (!nullable) {
-                    throw new NoSuchElementException(map + " does not contain " + field);
-                }
-                return null;
-            }
-            throw new IllegalArgumentException(field + "(" + object + ") is not a valid " + clazz);
-        }
-    }
-
     static final ItemMetaKey NAME = new ItemMetaKey("Name", "display-name");
     @Specific(Specific.To.NBT)
     static final ItemMetaKey DISPLAY = new ItemMetaKey("display");
@@ -202,13 +91,25 @@ class CraftMetaItem implements ItemMeta, Repairable {
     @Specific(Specific.To.NBT)
     static final ItemMetaKey ATTRIBUTES_UUID_LOW = new ItemMetaKey("UUIDLeast");
     static final ItemMetaKey UNBREAKABLE = new ItemMetaKey("Unbreakable"); // Spigot
+    private final NBTTagList attributes;
+    // Spigot start
+    private final Spigot spigot = new Spigot() {
+        private boolean unbreakable;
 
+        @Override
+        public boolean isUnbreakable() {
+            return unbreakable;
+        }
+
+        @Override
+        public void setUnbreakable(boolean setUnbreakable) {
+            unbreakable = setUnbreakable;
+        }
+    };
     private String displayName;
     private List<String> lore;
     private Map<Enchantment, Integer> enchantments;
     private int repairCost;
-    private final NBTTagList attributes;
-
     CraftMetaItem(CraftMetaItem meta) {
         if (meta == null) {
             attributes = null;
@@ -216,7 +117,6 @@ class CraftMetaItem implements ItemMeta, Repairable {
         }
 
         this.displayName = meta.displayName;
-
         if (meta.hasLore()) {
             this.lore = new ArrayList<String>(meta.lore);
         }
@@ -227,7 +127,7 @@ class CraftMetaItem implements ItemMeta, Repairable {
 
         this.repairCost = meta.repairCost;
         this.attributes = meta.attributes;
-        spigot.setUnbreakable( meta.spigot.isUnbreakable() ); // Spigot
+        spigot.setUnbreakable(meta.spigot.isUnbreakable()); // Spigot
     }
 
     CraftMetaItem(NBTTagCompound tag) {
@@ -235,7 +135,7 @@ class CraftMetaItem implements ItemMeta, Repairable {
             NBTTagCompound display = tag.getCompound(DISPLAY.NBT);
 
             if (display.hasKey(NAME.NBT)) {
-                displayName = limit( display.getString(NAME.NBT), 1024 ); // Spigot
+                displayName = limit(display.getString(NAME.NBT), 1024); // Spigot
             }
 
             if (display.hasKey(LORE.NBT)) {
@@ -243,7 +143,7 @@ class CraftMetaItem implements ItemMeta, Repairable {
                 lore = new ArrayList<String>(list.size());
 
                 for (int index = 0; index < list.size(); index++) {
-                    String line = limit( list.getString(index), 1024 ); // Spigot
+                    String line = limit(list.getString(index), 1024); // Spigot
                     lore.add(line);
                 }
             }
@@ -255,7 +155,6 @@ class CraftMetaItem implements ItemMeta, Repairable {
             repairCost = tag.getInt(REPAIR.NBT);
         }
 
-
         if (tag.get(ATTRIBUTES.NBT) instanceof NBTTagList) {
             NBTTagList save = null;
             NBTTagList nbttaglist = tag.getList(ATTRIBUTES.NBT, 10);
@@ -264,16 +163,16 @@ class CraftMetaItem implements ItemMeta, Repairable {
             net.minecraft.util.gnu.trove.map.hash.TObjectDoubleHashMap<String> attributeTracker = new net.minecraft.util.gnu.trove.map.hash.TObjectDoubleHashMap<String>();
             net.minecraft.util.gnu.trove.map.hash.TObjectDoubleHashMap<String> attributeTrackerX = new net.minecraft.util.gnu.trove.map.hash.TObjectDoubleHashMap<String>();
             Map<String, IAttribute> attributesByName = new HashMap<String, IAttribute>();
-            attributeTracker.put( "generic.maxHealth", 20.0 );
-            attributesByName.put( "generic.maxHealth", GenericAttributes.maxHealth );
-            attributeTracker.put( "generic.followRange", 32.0 );
-            attributesByName.put( "generic.followRange", GenericAttributes.b );
-            attributeTracker.put( "generic.knockbackResistance", 0.0 );
-            attributesByName.put( "generic.knockbackResistance", GenericAttributes.c );
-            attributeTracker.put( "generic.movementSpeed", 0.7 );
-            attributesByName.put( "generic.movementSpeed", GenericAttributes.d );
-            attributeTracker.put( "generic.attackDamage", 1.0 );
-            attributesByName.put( "generic.attackDamage", GenericAttributes.e );
+            attributeTracker.put("generic.maxHealth", 20.0);
+            attributesByName.put("generic.maxHealth", GenericAttributes.maxHealth);
+            attributeTracker.put("generic.followRange", 32.0);
+            attributesByName.put("generic.followRange", GenericAttributes.b);
+            attributeTracker.put("generic.knockbackResistance", 0.0);
+            attributesByName.put("generic.knockbackResistance", GenericAttributes.c);
+            attributeTracker.put("generic.movementSpeed", 0.7);
+            attributesByName.put("generic.movementSpeed", GenericAttributes.d);
+            attributeTracker.put("generic.attackDamage", 1.0);
+            attributesByName.put("generic.attackDamage", GenericAttributes.e);
             NBTTagList oldList = nbttaglist;
             nbttaglist = new NBTTagList();
 
@@ -281,123 +180,126 @@ class CraftMetaItem implements ItemMeta, Repairable {
             List<NBTTagCompound> op1 = new ArrayList<NBTTagCompound>();
             List<NBTTagCompound> op2 = new ArrayList<NBTTagCompound>();
 
-            for ( int i = 0; i < oldList.size(); ++i )
-            {
-                NBTTagCompound nbttagcompound = oldList.get( i );
-                if ( nbttagcompound == null ) continue;
+            for (int i = 0; i < oldList.size(); ++i) {
+                NBTTagCompound nbttagcompound = oldList.get(i);
+                if (nbttagcompound == null) continue;
 
-                if ( !( nbttagcompound.get( ATTRIBUTES_UUID_HIGH.NBT ) instanceof NBTTagLong ) )
-                {
+                if (!(nbttagcompound.get(ATTRIBUTES_UUID_HIGH.NBT) instanceof NBTTagLong)) {
                     continue;
                 }
-                if ( !( nbttagcompound.get( ATTRIBUTES_UUID_LOW.NBT ) instanceof NBTTagLong ) )
-                {
+
+                if (!(nbttagcompound.get(ATTRIBUTES_UUID_LOW.NBT) instanceof NBTTagLong)) {
                     continue;
                 }
-                if ( !( nbttagcompound.get( ATTRIBUTES_IDENTIFIER.NBT ) instanceof NBTTagString ) || !CraftItemFactory.KNOWN_NBT_ATTRIBUTE_NAMES.contains( nbttagcompound.getString( ATTRIBUTES_IDENTIFIER.NBT ) ) )
-                {
+
+                if (!(nbttagcompound.get(ATTRIBUTES_IDENTIFIER.NBT) instanceof NBTTagString) || !CraftItemFactory.KNOWN_NBT_ATTRIBUTE_NAMES.contains(nbttagcompound.getString(ATTRIBUTES_IDENTIFIER.NBT))) {
                     continue;
                 }
-                if ( !( nbttagcompound.get( ATTRIBUTES_NAME.NBT ) instanceof NBTTagString ) || nbttagcompound.getString( ATTRIBUTES_NAME.NBT ).isEmpty() )
-                {
+
+                if (!(nbttagcompound.get(ATTRIBUTES_NAME.NBT) instanceof NBTTagString) || nbttagcompound.getString(ATTRIBUTES_NAME.NBT).isEmpty()) {
                     continue;
                 }
-                if ( !( nbttagcompound.get( ATTRIBUTES_VALUE.NBT ) instanceof NBTTagDouble ) )
-                {
+
+                if (!(nbttagcompound.get(ATTRIBUTES_VALUE.NBT) instanceof NBTTagDouble)) {
                     continue;
                 }
-                if ( !( nbttagcompound.get( ATTRIBUTES_TYPE.NBT ) instanceof NBTTagInt ) || nbttagcompound.getInt( ATTRIBUTES_TYPE.NBT ) < 0 || nbttagcompound.getInt( ATTRIBUTES_TYPE.NBT ) > 2 )
-                {
+
+                if (!(nbttagcompound.get(ATTRIBUTES_TYPE.NBT) instanceof NBTTagInt) || nbttagcompound.getInt(ATTRIBUTES_TYPE.NBT) < 0 || nbttagcompound.getInt(ATTRIBUTES_TYPE.NBT) > 2) {
                     continue;
                 }
 
-                switch ( nbttagcompound.getInt( ATTRIBUTES_TYPE.NBT ) )
-                {
+                switch (nbttagcompound.getInt(ATTRIBUTES_TYPE.NBT)) {
                     case 0:
-                        op0.add( nbttagcompound );
+                        op0.add(nbttagcompound);
                         break;
                     case 1:
-                        op1.add( nbttagcompound );
+                        op1.add(nbttagcompound);
                         break;
                     case 2:
-                        op2.add( nbttagcompound );
+                        op2.add(nbttagcompound);
                         break;
                 }
             }
-            for ( NBTTagCompound nbtTagCompound : op0 )
-            {
-                String name = nbtTagCompound.getString( ATTRIBUTES_IDENTIFIER.NBT );
-                if ( attributeTracker.containsKey( name ) )
-                {
-                    double val = attributeTracker.get( name );
-                    val += nbtTagCompound.getDouble( ATTRIBUTES_VALUE.NBT );
-                    if ( val != attributesByName.get( name ).a( val ) )
-                    {
+
+            for (NBTTagCompound nbtTagCompound : op0) {
+                String name = nbtTagCompound.getString(ATTRIBUTES_IDENTIFIER.NBT);
+                if (attributeTracker.containsKey(name)) {
+                    double val = attributeTracker.get(name);
+                    val += nbtTagCompound.getDouble(ATTRIBUTES_VALUE.NBT);
+                    if (val != attributesByName.get(name).a(val)) {
                         continue;
                     }
-                    attributeTracker.put( name, val );
+
+                    attributeTracker.put(name, val);
                 }
-                nbttaglist.add( nbtTagCompound );
+
+                nbttaglist.add(nbtTagCompound);
             }
-            for ( String name : attributeTracker.keySet() )
-            {
-                attributeTrackerX.put( name, attributeTracker.get( name ) );
+
+            for (String name : attributeTracker.keySet()) {
+                attributeTrackerX.put(name, attributeTracker.get(name));
             }
-            for ( NBTTagCompound nbtTagCompound : op1 )
-            {
-                String name = nbtTagCompound.getString( ATTRIBUTES_IDENTIFIER.NBT );
-                if ( attributeTracker.containsKey( name ) )
-                {
-                    double val = attributeTracker.get( name );
-                    double valX = attributeTrackerX.get( name );
-                    val += valX * nbtTagCompound.getDouble( ATTRIBUTES_VALUE.NBT );
-                    if ( val != attributesByName.get( name ).a( val ) )
-                    {
+
+            for (NBTTagCompound nbtTagCompound : op1) {
+                String name = nbtTagCompound.getString(ATTRIBUTES_IDENTIFIER.NBT);
+                if (attributeTracker.containsKey(name)) {
+                    double val = attributeTracker.get(name);
+                    double valX = attributeTrackerX.get(name);
+                    val += valX * nbtTagCompound.getDouble(ATTRIBUTES_VALUE.NBT);
+                    if (val != attributesByName.get(name).a(val)) {
                         continue;
                     }
-                    attributeTracker.put( name, val );
+
+                    attributeTracker.put(name, val);
                 }
-                nbttaglist.add( nbtTagCompound );
+
+                nbttaglist.add(nbtTagCompound);
             }
-            for ( NBTTagCompound nbtTagCompound : op2 )
-            {
-                String name = nbtTagCompound.getString( ATTRIBUTES_IDENTIFIER.NBT );
-                if ( attributeTracker.containsKey( name ) )
-                {
-                    double val = attributeTracker.get( name );
-                    val += val * nbtTagCompound.getDouble( ATTRIBUTES_VALUE.NBT );
-                    if ( val != attributesByName.get( name ).a( val ) )
-                    {
+
+            for (NBTTagCompound nbtTagCompound : op2) {
+                String name = nbtTagCompound.getString(ATTRIBUTES_IDENTIFIER.NBT);
+                if (attributeTracker.containsKey(name)) {
+                    double val = attributeTracker.get(name);
+                    val += val * nbtTagCompound.getDouble(ATTRIBUTES_VALUE.NBT);
+                    if (val != attributesByName.get(name).a(val)) {
                         continue;
                     }
-                    attributeTracker.put( name, val );
+
+                    attributeTracker.put(name, val);
                 }
-                nbttaglist.add( nbtTagCompound );
+
+                nbttaglist.add(nbtTagCompound);
             }
 
             // Spigot end
 
             for (int i = 0; i < nbttaglist.size(); ++i) {
-                if (!(nbttaglist.get(i) instanceof NBTTagCompound)) {
+                NBTTagCompound nbttagcompound = nbttaglist.get(i);
+
+                if (nbttagcompound == null) {
                     continue;
                 }
-                NBTTagCompound nbttagcompound = (NBTTagCompound) nbttaglist.get(i);
 
                 if (!(nbttagcompound.get(ATTRIBUTES_UUID_HIGH.NBT) instanceof NBTTagLong)) {
                     continue;
                 }
+
                 if (!(nbttagcompound.get(ATTRIBUTES_UUID_LOW.NBT) instanceof NBTTagLong)) {
                     continue;
                 }
+
                 if (!(nbttagcompound.get(ATTRIBUTES_IDENTIFIER.NBT) instanceof NBTTagString) || !CraftItemFactory.KNOWN_NBT_ATTRIBUTE_NAMES.contains(nbttagcompound.getString(ATTRIBUTES_IDENTIFIER.NBT))) {
                     continue;
                 }
+
                 if (!(nbttagcompound.get(ATTRIBUTES_NAME.NBT) instanceof NBTTagString) || nbttagcompound.getString(ATTRIBUTES_NAME.NBT).isEmpty()) {
                     continue;
                 }
+
                 if (!(nbttagcompound.get(ATTRIBUTES_VALUE.NBT) instanceof NBTTagDouble)) {
                     continue;
                 }
+
                 if (!(nbttagcompound.get(ATTRIBUTES_TYPE.NBT) instanceof NBTTagInt) || nbttagcompound.getInt(ATTRIBUTES_TYPE.NBT) < 0 || nbttagcompound.getInt(ATTRIBUTES_TYPE.NBT) > 2) {
                     continue;
                 }
@@ -420,36 +322,14 @@ class CraftMetaItem implements ItemMeta, Repairable {
         } else {
             attributes = null;
         }
+
         // Spigot start
-        if ( tag.hasKey( UNBREAKABLE.NBT ) )
-        {
-            spigot.setUnbreakable( tag.getBoolean( UNBREAKABLE.NBT ) );
+        if (tag.hasKey(UNBREAKABLE.NBT)) {
+            spigot.setUnbreakable(tag.getBoolean(UNBREAKABLE.NBT));
         }
         // Spigot end
     }
 
-    static Map<Enchantment, Integer> buildEnchantments(NBTTagCompound tag, ItemMetaKey key) {
-        if (!tag.hasKey(key.NBT)) {
-            return null;
-        }
-
-        NBTTagList ench = tag.getList(key.NBT, 10);
-        Map<Enchantment, Integer> enchantments = new HashMap<Enchantment, Integer>(ench.size());
-
-        for (int i = 0; i < ench.size(); i++) {
-            int id = 0xffff & ((NBTTagCompound) ench.get(i)).getShort(ENCHANTMENTS_ID.NBT);
-            int level = 0xffff & ((NBTTagCompound) ench.get(i)).getShort(ENCHANTMENTS_LVL.NBT);
-
-            // Spigot start - skip invalid enchantments
-            Enchantment e = Enchantment.getById(id);
-            if (e == null) continue;
-            // Spigot end
-            enchantments.put(e, level);
-        }
-
-        return enchantments;
-    }
-
     CraftMetaItem(Map<String, Object> map) {
         setDisplayName(SerializableMeta.getString(map, NAME.BUKKIT, true));
 
@@ -467,14 +347,35 @@ class CraftMetaItem implements ItemMeta, Repairable {
 
         attributes = null;
         // Spigot start
-        Boolean unbreakable = SerializableMeta.getObject( Boolean.class, map, UNBREAKABLE.BUKKIT, true );
-        if ( unbreakable != null )
-        {
-            spigot.setUnbreakable( unbreakable );
+        Boolean unbreakable = SerializableMeta.getObject(Boolean.class, map, UNBREAKABLE.BUKKIT, true);
+        if (unbreakable != null) {
+            spigot.setUnbreakable(unbreakable);
         }
         // Spigot end
     }
 
+    static Map<Enchantment, Integer> buildEnchantments(NBTTagCompound tag, ItemMetaKey key) {
+        if (!tag.hasKey(key.NBT)) {
+            return null;
+        }
+
+        NBTTagList ench = tag.getList(key.NBT, 10);
+        Map<Enchantment, Integer> enchantments = new HashMap<Enchantment, Integer>(ench.size());
+
+        for (int i = 0; i < ench.size(); i++) {
+            int id = 0xffff & ench.get(i).getShort(ENCHANTMENTS_ID.NBT);
+            int level = 0xffff & ench.get(i).getShort(ENCHANTMENTS_LVL.NBT);
+
+            // Spigot start - skip invalid enchantments
+            Enchantment enchant = Enchantment.getById(id);
+            if (enchant == null) continue;
+            // Spigot end
+            enchantments.put(enchant, level);
+        }
+
+        return enchantments;
+    }
+
     static Map<Enchantment, Integer> buildEnchantments(Map<String, Object> map, ItemMetaKey key) {
         Map<?, ?> ench = SerializableMeta.getObject(Map.class, map, key.BUKKIT, true);
         if (ench == null) {
@@ -493,34 +394,6 @@ class CraftMetaItem implements ItemMeta, Repairable {
         return enchantments;
     }
 
-    @Overridden
-    void applyToItem(NBTTagCompound itemTag) {
-        if (hasDisplayName()) {
-            setDisplayTag(itemTag, NAME.NBT, new NBTTagString(displayName));
-        }
-
-        if (hasLore()) {
-            setDisplayTag(itemTag, LORE.NBT, createStringList(lore));
-        }
-
-        applyEnchantments(enchantments, itemTag, ENCHANTMENTS);
-
-        // Spigot start
-        if ( spigot.isUnbreakable() )
-        {
-            itemTag.setBoolean( UNBREAKABLE.NBT, true );
-        }
-        // Spigot end
-
-        if (hasRepairCost()) {
-            itemTag.setInt(REPAIR.NBT, repairCost);
-        }
-
-        if (attributes != null) {
-            itemTag.set(ATTRIBUTES.NBT, attributes);
-        }
-    }
-
     static NBTTagList createStringList(List<String> list) {
         if (list == null || list.isEmpty()) {
             return null;
@@ -553,6 +426,84 @@ class CraftMetaItem implements ItemMeta, Repairable {
         tag.set(key.NBT, list);
     }
 
+    static void serializeEnchantments(Map<Enchantment, Integer> enchantments, ImmutableMap.Builder<String, Object> builder, ItemMetaKey key) {
+        if (enchantments == null || enchantments.isEmpty()) {
+            return;
+        }
+
+        ImmutableMap.Builder<String, Integer> enchants = ImmutableMap.builder();
+        for (Map.Entry<? extends Enchantment, Integer> enchant : enchantments.entrySet()) {
+            enchants.put(enchant.getKey().getName(), enchant.getValue());
+        }
+
+        builder.put(key.BUKKIT, enchants.build());
+    }
+
+    static void safelyAdd(Iterable<?> addFrom, Collection<String> addTo, int maxItemLength) {
+        if (addFrom == null) {
+            return;
+        }
+
+        for (Object object : addFrom) {
+            if (!(object instanceof String)) {
+                if (object != null) {
+                    throw new IllegalArgumentException(addFrom + " cannot contain non-string " + object.getClass().getName());
+                }
+
+                addTo.add("");
+            } else {
+                String page = object.toString();
+
+                if (page.length() > maxItemLength) {
+                    page = page.substring(0, maxItemLength);
+                }
+
+                addTo.add(page);
+            }
+        }
+    }
+
+    static boolean checkConflictingEnchants(Map<Enchantment, Integer> enchantments, Enchantment ench) {
+        if (enchantments == null || enchantments.isEmpty()) {
+            return false;
+        }
+
+        for (Enchantment enchant : enchantments.keySet()) {
+            if (enchant.conflictsWith(ench)) {
+                return true;
+            }
+        }
+
+        return false;
+    }
+
+    @Overridden
+    void applyToItem(NBTTagCompound itemTag) {
+        if (hasDisplayName()) {
+            setDisplayTag(itemTag, NAME.NBT, new NBTTagString(displayName));
+        }
+
+        if (hasLore()) {
+            setDisplayTag(itemTag, LORE.NBT, createStringList(lore));
+        }
+
+        applyEnchantments(enchantments, itemTag, ENCHANTMENTS);
+
+        // Spigot start
+        if (spigot.isUnbreakable()) {
+            itemTag.setBoolean(UNBREAKABLE.NBT, true);
+        }
+        // Spigot end
+
+        if (hasRepairCost()) {
+            itemTag.setInt(REPAIR.NBT, repairCost);
+        }
+
+        if (attributes != null) {
+            itemTag.set(ATTRIBUTES.NBT, attributes);
+        }
+    }
+
     void setDisplayTag(NBTTagCompound tag, String key, NBTBase value) {
         final NBTTagCompound display = tag.getCompound(DISPLAY.NBT);
 
@@ -573,18 +524,22 @@ class CraftMetaItem implements ItemMeta, Repairable {
         return !(hasDisplayName() || hasEnchants() || hasLore() || hasAttributes() || hasRepairCost() || spigot.isUnbreakable()); // Spigot
     }
 
+    @Override
     public String getDisplayName() {
         return displayName;
     }
 
+    @Override
     public final void setDisplayName(String name) {
         this.displayName = name;
     }
 
+    @Override
     public boolean hasDisplayName() {
         return !Strings.isNullOrEmpty(displayName);
     }
 
+    @Override
     public boolean hasLore() {
         return this.lore != null && !this.lore.isEmpty();
     }
@@ -593,26 +548,32 @@ class CraftMetaItem implements ItemMeta, Repairable {
         return this.attributes != null;
     }
 
+    @Override
     public boolean hasRepairCost() {
         return repairCost > 0;
     }
 
+    @Override
     public boolean hasEnchant(Enchantment ench) {
         return hasEnchants() && enchantments.containsKey(ench);
     }
 
+    @Override
     public int getEnchantLevel(Enchantment ench) {
         Integer level = hasEnchants() ? enchantments.get(ench) : null;
         if (level == null) {
             return 0;
         }
+
         return level;
     }
 
+    @Override
     public Map<Enchantment, Integer> getEnchants() {
         return hasEnchants() ? ImmutableMap.copyOf(enchantments) : ImmutableMap.<Enchantment, Integer>of();
     }
 
+    @Override
     public boolean addEnchant(Enchantment ench, int level, boolean ignoreRestrictions) {
         if (enchantments == null) {
             enchantments = new HashMap<Enchantment, Integer>(4);
@@ -622,32 +583,38 @@ class CraftMetaItem implements ItemMeta, Repairable {
             Integer old = enchantments.put(ench, level);
             return old == null || old != level;
         }
+
         return false;
     }
 
+    @Override
     public boolean removeEnchant(Enchantment ench) {
         // Spigot start
-        boolean b = hasEnchants() && enchantments.remove( ench ) != null;
-        if ( enchantments != null && enchantments.isEmpty() )
-        {
+        boolean b = hasEnchants() && enchantments.remove(ench) != null;
+        if (enchantments != null && enchantments.isEmpty()) {
             this.enchantments = null;
         }
+
         return b;
         // Spigot end
     }
 
+    @Override
     public boolean hasEnchants() {
         return !(enchantments == null || enchantments.isEmpty());
     }
 
+    @Override
     public boolean hasConflictingEnchant(Enchantment ench) {
         return checkConflictingEnchants(enchantments, ench);
     }
 
+    @Override
     public List<String> getLore() {
         return this.lore == null ? null : new ArrayList<String>(this.lore);
     }
 
+    @Override
     public void setLore(List<String> lore) { // too tired to think if .clone is better
         if (lore == null) {
             this.lore = null;
@@ -661,10 +628,12 @@ class CraftMetaItem implements ItemMeta, Repairable {
         }
     }
 
+    @Override
     public int getRepairCost() {
         return repairCost;
     }
 
+    @Override
     public void setRepairCost(int cost) { // TODO: Does this have limits?
         repairCost = cost;
     }
@@ -674,13 +643,13 @@ class CraftMetaItem implements ItemMeta, Repairable {
         if (object == null) {
             return false;
         }
+
         if (object == this) {
             return true;
         }
-        if (!(object instanceof CraftMetaItem)) {
-            return false;
-        }
-        return CraftItemFactory.instance().equals(this, (ItemMeta) object);
+
+        return object instanceof CraftMetaItem && CraftItemFactory.instance().equals(this, (ItemMeta) object);
+
     }
 
     /**
@@ -765,93 +734,132 @@ class CraftMetaItem implements ItemMeta, Repairable {
         }
 
         // Spigot start
-        if ( spigot.isUnbreakable() )
-        {
-            builder.put( UNBREAKABLE.BUKKIT, true );
+        if (spigot.isUnbreakable()) {
+            builder.put(UNBREAKABLE.BUKKIT, true);
         }
-        // Spigot end
 
+        // Spigot end
         return builder;
     }
 
-    static void serializeEnchantments(Map<Enchantment, Integer> enchantments, ImmutableMap.Builder<String, Object> builder, ItemMetaKey key) {
-        if (enchantments == null || enchantments.isEmpty()) {
-            return;
+    @Override
+    public final String toString() {
+        return SerializableMeta.classMap.get(getClass()) + "_META:" + serialize(); // TODO: cry
+    }
+
+    @Override
+    public Spigot spigot() {
+        return spigot;
+    }
+
+    static class ItemMetaKey {
+
+        final String BUKKIT;
+        final String NBT;
+        ItemMetaKey(final String both) {
+            this(both, both);
         }
 
-        ImmutableMap.Builder<String, Integer> enchants = ImmutableMap.builder();
-        for (Map.Entry<? extends Enchantment, Integer> enchant : enchantments.entrySet()) {
-            enchants.put(enchant.getKey().getName(), enchant.getValue());
+        ItemMetaKey(final String nbt, final String bukkit) {
+            this.NBT = nbt;
+            this.BUKKIT = bukkit;
         }
 
-        builder.put(key.BUKKIT, enchants.build());
-    }
+        @Retention(RetentionPolicy.SOURCE)
+        @Target(ElementType.FIELD)
+        @interface Specific {
+            To value();
 
-    static void safelyAdd(Iterable<?> addFrom, Collection<String> addTo, int maxItemLength) {
-        if (addFrom == null) {
-            return;
+            enum To {
+                BUKKIT,
+                NBT,;
+            }
         }
+    }
 
-        for (Object object : addFrom) {
-            if (!(object instanceof String)) {
-                if (object != null) {
-                    throw new IllegalArgumentException(addFrom + " cannot contain non-string " + object.getClass().getName());
-                }
+    @SerializableAs("ItemMeta")
+    public static class SerializableMeta implements ConfigurationSerializable {
+        static final String TYPE_FIELD = "meta-type";
 
-                addTo.add("");
-            } else {
-                String page = object.toString();
+        static final ImmutableMap<Class<? extends CraftMetaItem>, String> classMap;
+        static final ImmutableMap<String, Constructor<? extends CraftMetaItem>> constructorMap;
 
-                if (page.length() > maxItemLength) {
-                    page = page.substring(0, maxItemLength);
-                }
+        static {
+            classMap = ImmutableMap.<Class<? extends CraftMetaItem>, String>builder()
+                    .put(CraftMetaBook.class, "BOOK")
+                    .put(CraftMetaSkull.class, "SKULL")
+                    .put(CraftMetaLeatherArmor.class, "LEATHER_ARMOR")
+                    .put(CraftMetaMap.class, "MAP")
+                    .put(CraftMetaPotion.class, "POTION")
+                    .put(CraftMetaEnchantedBook.class, "ENCHANTED")
+                    .put(CraftMetaFirework.class, "FIREWORK")
+                    .put(CraftMetaCharge.class, "FIREWORK_EFFECT")
+                    .put(CraftMetaItem.class, "UNSPECIFIC")
+                    .build();
 
-                addTo.add(page);
+            final ImmutableMap.Builder<String, Constructor<? extends CraftMetaItem>> classConstructorBuilder = ImmutableMap.builder();
+            for (Map.Entry<Class<? extends CraftMetaItem>, String> mapping : classMap.entrySet()) {
+                try {
+                    classConstructorBuilder.put(mapping.getValue(), mapping.getKey().getDeclaredConstructor(Map.class));
+                } catch (NoSuchMethodException e) {
+                    throw new AssertionError(e);
+                }
             }
+            constructorMap = classConstructorBuilder.build();
         }
-    }
 
-    static boolean checkConflictingEnchants(Map<Enchantment, Integer> enchantments, Enchantment ench) {
-        if (enchantments == null || enchantments.isEmpty()) {
-            return false;
+        private SerializableMeta() {
+
         }
 
-        for (Enchantment enchant : enchantments.keySet()) {
-            if (enchant.conflictsWith(ench)) {
-                return true;
+        public static ItemMeta deserialize(Map<String, Object> map) throws Throwable {
+            Validate.notNull(map, "Cannot deserialize null map");
+
+            String type = getString(map, TYPE_FIELD, false);
+            Constructor<? extends CraftMetaItem> constructor = constructorMap.get(type);
+
+            if (constructor == null) {
+                throw new IllegalArgumentException(type + " is not a valid " + TYPE_FIELD);
+            }
+
+            try {
+                return constructor.newInstance(map);
+            } catch (final InstantiationException e) {
+                throw new AssertionError(e);
+            } catch (final IllegalAccessException e) {
+                throw new AssertionError(e);
+            } catch (final InvocationTargetException e) {
+                throw e.getCause();
             }
         }
 
-        return false;
-    }
+        static String getString(Map<?, ?> map, Object field, boolean nullable) {
+            return getObject(String.class, map, field, nullable);
+        }
 
-    @Override
-    public final String toString() {
-        return SerializableMeta.classMap.get(getClass()) + "_META:" + serialize(); // TODO: cry
-    }
+        static boolean getBoolean(Map<?, ?> map, Object field) {
+            Boolean value = getObject(Boolean.class, map, field, true);
+            return value != null && value;
+        }
 
-    // Spigot start
-    private final Spigot spigot = new Spigot()
-    {
-        private boolean unbreakable;
+        static <T> T getObject(Class<T> clazz, Map<?, ?> map, Object field, boolean nullable) {
+            final Object object = map.get(field);
 
-        @Override
-        public void setUnbreakable(boolean setUnbreakable)
-        {
-            unbreakable = setUnbreakable;
+            if (clazz.isInstance(object)) {
+                return clazz.cast(object);
+            }
+            if (object == null) {
+                if (!nullable) {
+                    throw new NoSuchElementException(map + " does not contain " + field);
+                }
+                return null;
+            }
+            throw new IllegalArgumentException(field + "(" + object + ") is not a valid " + clazz);
         }
 
-        @Override
-        public boolean isUnbreakable()
-        {
-            return unbreakable;
+        public Map<String, Object> serialize() {
+            throw new AssertionError();
         }
-    };
-
-    @Override
-    public Spigot spigot()
-    {
-        return spigot;
     }
     // Spigot end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaLeatherArmor.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaLeatherArmor.java
index 5478e9b..d6df7f8 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaLeatherArmor.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaLeatherArmor.java
@@ -1,22 +1,21 @@
 package org.bukkit.craftbukkit.inventory;
 
-import static org.bukkit.craftbukkit.inventory.CraftItemFactory.DEFAULT_LEATHER_COLOR;
-
-import java.util.Map;
-
+import com.google.common.collect.ImmutableMap.Builder;
 import net.minecraft.server.NBTTagCompound;
 import net.minecraft.server.NBTTagInt;
-
 import org.bukkit.Color;
 import org.bukkit.Material;
 import org.bukkit.configuration.serialization.DelegateDeserialization;
 import org.bukkit.craftbukkit.inventory.CraftMetaItem.SerializableMeta;
 import org.bukkit.inventory.meta.LeatherArmorMeta;
 
-import com.google.common.collect.ImmutableMap.Builder;
+import java.util.Map;
+
+import static org.bukkit.craftbukkit.inventory.CraftItemFactory.DEFAULT_LEATHER_COLOR;
 
 @DelegateDeserialization(SerializableMeta.class)
 class CraftMetaLeatherArmor extends CraftMetaItem implements LeatherArmorMeta {
+
     static final ItemMetaKey COLOR = new ItemMetaKey("color");
 
     private Color color = DEFAULT_LEATHER_COLOR;
@@ -66,7 +65,7 @@ class CraftMetaLeatherArmor extends CraftMetaItem implements LeatherArmorMeta {
 
     @Override
     boolean applicableTo(Material type) {
-        switch(type) {
+        switch (type) {
             case LEATHER_HELMET:
             case LEATHER_CHESTPLATE:
             case LEATHER_LEGGINGS:
@@ -82,10 +81,12 @@ class CraftMetaLeatherArmor extends CraftMetaItem implements LeatherArmorMeta {
         return (CraftMetaLeatherArmor) super.clone();
     }
 
+    @Override
     public Color getColor() {
         return color;
     }
 
+    @Override
     public void setColor(Color color) {
         this.color = color == null ? DEFAULT_LEATHER_COLOR : color;
     }
@@ -110,11 +111,12 @@ class CraftMetaLeatherArmor extends CraftMetaItem implements LeatherArmorMeta {
         if (!super.equalsCommon(meta)) {
             return false;
         }
+
         if (meta instanceof CraftMetaLeatherArmor) {
             CraftMetaLeatherArmor that = (CraftMetaLeatherArmor) meta;
-
             return color.equals(that.color);
         }
+
         return true;
     }
 
@@ -130,6 +132,7 @@ class CraftMetaLeatherArmor extends CraftMetaItem implements LeatherArmorMeta {
         if (hasColor()) {
             hash ^= color.hashCode();
         }
+
         return original != hash ? CraftMetaSkull.class.hashCode() ^ hash : hash;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaMap.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaMap.java
index d8af390..ea29fd1 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaMap.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaMap.java
@@ -1,15 +1,13 @@
 package org.bukkit.craftbukkit.inventory;
 
-import java.util.Map;
-
+import com.google.common.collect.ImmutableMap;
 import net.minecraft.server.NBTTagCompound;
-
 import org.bukkit.Material;
 import org.bukkit.configuration.serialization.DelegateDeserialization;
 import org.bukkit.craftbukkit.inventory.CraftMetaItem.SerializableMeta;
 import org.bukkit.inventory.meta.MapMeta;
 
-import com.google.common.collect.ImmutableMap;
+import java.util.Map;
 
 @DelegateDeserialization(SerializableMeta.class)
 class CraftMetaMap extends CraftMetaItem implements MapMeta {
@@ -80,10 +78,12 @@ class CraftMetaMap extends CraftMetaItem implements MapMeta {
         return scaling != SCALING_EMPTY;
     }
 
+    @Override
     public boolean isScaling() {
         return scaling == SCALING_TRUE;
     }
 
+    @Override
     public void setScaling(boolean scaling) {
         this.scaling = scaling ? SCALING_TRUE : SCALING_FALSE;
     }
@@ -93,11 +93,12 @@ class CraftMetaMap extends CraftMetaItem implements MapMeta {
         if (!super.equalsCommon(meta)) {
             return false;
         }
+
         if (meta instanceof CraftMetaMap) {
             CraftMetaMap that = (CraftMetaMap) meta;
-
             return (this.scaling == that.scaling);
         }
+
         return true;
     }
 
@@ -118,6 +119,7 @@ class CraftMetaMap extends CraftMetaItem implements MapMeta {
         return original != hash ? CraftMetaMap.class.hashCode() ^ hash : hash;
     }
 
+    @Override
     public CraftMetaMap clone() {
         return (CraftMetaMap) super.clone();
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaPotion.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaPotion.java
index cebb941..a061104 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaPotion.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaPotion.java
@@ -1,23 +1,21 @@
 package org.bukkit.craftbukkit.inventory;
 
-import java.util.ArrayList;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-
+import com.google.common.collect.ImmutableList;
+import com.google.common.collect.ImmutableMap.Builder;
 import net.minecraft.server.NBTTagCompound;
 import net.minecraft.server.NBTTagList;
-
 import org.apache.commons.lang.Validate;
 import org.bukkit.Material;
 import org.bukkit.configuration.serialization.DelegateDeserialization;
+import org.bukkit.craftbukkit.inventory.CraftMetaItem.SerializableMeta;
 import org.bukkit.inventory.meta.PotionMeta;
 import org.bukkit.potion.PotionEffect;
 import org.bukkit.potion.PotionEffectType;
-import org.bukkit.craftbukkit.inventory.CraftMetaItem.SerializableMeta;
 
-import com.google.common.collect.ImmutableList;
-import com.google.common.collect.ImmutableMap.Builder;
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
 
 @DelegateDeserialization(SerializableMeta.class)
 class CraftMetaPotion extends CraftMetaItem implements PotionMeta {
@@ -106,7 +104,7 @@ class CraftMetaPotion extends CraftMetaItem implements PotionMeta {
 
     @Override
     boolean applicableTo(Material type) {
-        switch(type) {
+        switch (type) {
             case POTION:
                 return true;
             default:
@@ -120,20 +118,25 @@ class CraftMetaPotion extends CraftMetaItem implements PotionMeta {
         if (this.customEffects != null) {
             clone.customEffects = new ArrayList<PotionEffect>(this.customEffects);
         }
+
         return clone;
     }
 
+    @Override
     public boolean hasCustomEffects() {
         return !(customEffects == null || customEffects.isEmpty());
     }
 
+    @Override
     public List<PotionEffect> getCustomEffects() {
         if (hasCustomEffects()) {
             return ImmutableList.copyOf(customEffects);
         }
+
         return ImmutableList.of();
     }
 
+    @Override
     public boolean addCustomEffect(PotionEffect effect, boolean overwrite) {
         Validate.notNull(effect, "Potion effect must not be null");
 
@@ -158,6 +161,7 @@ class CraftMetaPotion extends CraftMetaItem implements PotionMeta {
         }
     }
 
+    @Override
     public boolean removeCustomEffect(PotionEffectType type) {
         Validate.notNull(type, "Potion effect type must not be null");
 
@@ -174,14 +178,17 @@ class CraftMetaPotion extends CraftMetaItem implements PotionMeta {
                 changed = true;
             }
         }
+
         return changed;
     }
 
+    @Override
     public boolean hasCustomEffect(PotionEffectType type) {
         Validate.notNull(type, "Potion effect type must not be null");
         return indexOfEffect(type) != -1;
     }
 
+    @Override
     public boolean setMainEffect(PotionEffectType type) {
         Validate.notNull(type, "Potion effect type must not be null");
         int index = indexOfEffect(type);
@@ -205,9 +212,11 @@ class CraftMetaPotion extends CraftMetaItem implements PotionMeta {
                 return i;
             }
         }
+
         return -1;
     }
 
+    @Override
     public boolean clearCustomEffects() {
         boolean changed = hasCustomEffects();
         customEffects = null;
@@ -221,6 +230,7 @@ class CraftMetaPotion extends CraftMetaItem implements PotionMeta {
         if (hasCustomEffects()) {
             hash = 73 * hash + customEffects.hashCode();
         }
+
         return original != hash ? CraftMetaPotion.class.hashCode() ^ hash : hash;
     }
 
@@ -229,11 +239,12 @@ class CraftMetaPotion extends CraftMetaItem implements PotionMeta {
         if (!super.equalsCommon(meta)) {
             return false;
         }
+
         if (meta instanceof CraftMetaPotion) {
             CraftMetaPotion that = (CraftMetaPotion) meta;
-
             return (this.hasCustomEffects() ? that.hasCustomEffects() && this.customEffects.equals(that.customEffects) : !that.hasCustomEffects());
         }
+
         return true;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaSkull.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaSkull.java
index e32bcb1..28879d4 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaSkull.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaSkull.java
@@ -1,18 +1,16 @@
 package org.bukkit.craftbukkit.inventory;
 
-import java.util.Map;
-
+import com.google.common.collect.ImmutableMap.Builder;
 import net.minecraft.server.GameProfileSerializer;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.NBTTagCompound;
 import net.minecraft.util.com.mojang.authlib.GameProfile;
-
 import org.bukkit.Material;
 import org.bukkit.configuration.serialization.DelegateDeserialization;
 import org.bukkit.craftbukkit.inventory.CraftMetaItem.SerializableMeta;
 import org.bukkit.inventory.meta.SkullMeta;
 
-import com.google.common.collect.ImmutableMap.Builder;
+import java.util.Map;
 
 @DelegateDeserialization(SerializableMeta.class)
 class CraftMetaSkull extends CraftMetaItem implements SkullMeta {
@@ -52,32 +50,27 @@ class CraftMetaSkull extends CraftMetaItem implements SkullMeta {
         if (hasOwner()) {
             NBTTagCompound owner = new NBTTagCompound();
             GameProfileSerializer.serialize(owner, profile);
-            tag.set( SKULL_OWNER.NBT, owner );
+            tag.set(SKULL_OWNER.NBT, owner);
             // Spigot start - do an async lookup of the profile. 
             // Unfortunately there is not way to refresh the holding
             // inventory, so that responsibility is left to the user.
-            net.minecraft.server.TileEntitySkull.executor.execute( new Runnable()
-            {
+            net.minecraft.server.TileEntitySkull.executor.execute(new Runnable() {
                 @Override
-                public void run()
-                {
-
-                    final GameProfile profile = net.minecraft.server.TileEntitySkull.skinCache.getUnchecked( CraftMetaSkull.this.profile.getName().toLowerCase() );
-                    if ( profile != null )
-                    {
-                        MinecraftServer.getServer().processQueue.add( new Runnable()
-                        {
+                public void run() {
+
+                    final GameProfile profile = net.minecraft.server.TileEntitySkull.skinCache.getUnchecked(CraftMetaSkull.this.profile.getName().toLowerCase());
+                    if (profile != null) {
+                        MinecraftServer.getServer().processQueue.add(new Runnable() {
                             @Override
-                            public void run()
-                            {
+                            public void run() {
                                 NBTTagCompound owner = new NBTTagCompound();
-                                GameProfileSerializer.serialize( owner, profile );
-                                tag.set( SKULL_OWNER.NBT, owner );
+                                GameProfileSerializer.serialize(owner, profile);
+                                tag.set(SKULL_OWNER.NBT, owner);
                             }
-                        } );
+                        });
                     }
                 }
-            } );
+            });
             // Spigot end
         }
     }
@@ -93,7 +86,7 @@ class CraftMetaSkull extends CraftMetaItem implements SkullMeta {
 
     @Override
     boolean applicableTo(Material type) {
-        switch(type) {
+        switch (type) {
             case SKULL_ITEM:
                 return true;
             default:
@@ -106,14 +99,17 @@ class CraftMetaSkull extends CraftMetaItem implements SkullMeta {
         return (CraftMetaSkull) super.clone();
     }
 
+    @Override
     public boolean hasOwner() {
         return profile != null;
     }
 
+    @Override
     public String getOwner() {
         return hasOwner() ? profile.getName() : null;
     }
 
+    @Override
     public boolean setOwner(String name) {
         if (name != null && name.length() > MAX_OWNER_LENGTH) {
             return false;
@@ -162,6 +158,7 @@ class CraftMetaSkull extends CraftMetaItem implements SkullMeta {
         if (hasOwner()) {
             return builder.put(SKULL_OWNER.BUKKIT, this.profile.getName());
         }
+
         return builder;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftRecipe.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftRecipe.java
index d3e03e2..9d59b3c 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftRecipe.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftRecipe.java
@@ -3,5 +3,6 @@ package org.bukkit.craftbukkit.inventory;
 import org.bukkit.inventory.Recipe;
 
 public interface CraftRecipe extends Recipe {
+
     void addToCraftingManager();
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftShapedRecipe.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftShapedRecipe.java
index baea759..befd44d 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftShapedRecipe.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftShapedRecipe.java
@@ -1,14 +1,13 @@
 package org.bukkit.craftbukkit.inventory;
 
-import java.util.Map;
-
 import net.minecraft.server.CraftingManager;
 import net.minecraft.server.ShapedRecipes;
-
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.ShapedRecipe;
 
+import java.util.Map;
+
 public class CraftShapedRecipe extends ShapedRecipe implements CraftRecipe {
     // TODO: Could eventually use this to add a matches() method or some such
     private ShapedRecipes recipe;
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftShapelessRecipe.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftShapelessRecipe.java
index 53479c7..1b2c4da 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftShapelessRecipe.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftShapelessRecipe.java
@@ -1,15 +1,15 @@
 package org.bukkit.craftbukkit.inventory;
 
-import java.util.List;
-
 import net.minecraft.server.CraftingManager;
 import net.minecraft.server.ShapelessRecipes;
-
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.ShapelessRecipe;
 
+import java.util.List;
+
 public class CraftShapelessRecipe extends ShapelessRecipe implements CraftRecipe {
+
     // TODO: Could eventually use this to add a matches() method or some such
     private ShapelessRecipes recipe;
 
@@ -43,6 +43,7 @@ public class CraftShapelessRecipe extends ShapelessRecipe implements CraftRecipe
             data[i] = new net.minecraft.server.ItemStack(CraftMagicNumbers.getItem(id), 1, dmg);
             i++;
         }
+
         CraftingManager.getInstance().registerShapelessRecipe(CraftItemStack.asNMSCopy(this.getResult()), data);
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/InventoryIterator.java b/src/main/java/org/bukkit/craftbukkit/inventory/InventoryIterator.java
index e3b5f42..97b041b 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/InventoryIterator.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/InventoryIterator.java
@@ -1,12 +1,14 @@
 package org.bukkit.craftbukkit.inventory;
 
-import java.util.ListIterator;
-
 import org.bukkit.inventory.Inventory;
 import org.bukkit.inventory.ItemStack;
 
+import java.util.ListIterator;
+
 public class InventoryIterator implements ListIterator<ItemStack> {
+
     private final Inventory inventory;
+
     private int nextIndex;
     private Boolean lastDirection; // true = forward, false = backward, null = haven't moved yet
 
@@ -50,6 +52,7 @@ public class InventoryIterator implements ListIterator<ItemStack> {
         if (lastDirection == null) {
             throw new IllegalStateException("No current item!");
         }
+
         int i = lastDirection ? nextIndex - 1 : nextIndex;
         inventory.setItem(i, item);
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/RecipeIterator.java b/src/main/java/org/bukkit/craftbukkit/inventory/RecipeIterator.java
index 53b53b7..4eeae0a 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/RecipeIterator.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/RecipeIterator.java
@@ -1,17 +1,18 @@
 package org.bukkit.craftbukkit.inventory;
 
-import java.util.Iterator;
-
-import org.bukkit.inventory.Recipe;
-
 import net.minecraft.server.CraftingManager;
 import net.minecraft.server.IRecipe;
 import net.minecraft.server.RecipesFurnace;
+import org.bukkit.inventory.Recipe;
+
+import java.util.Iterator;
 
 public class RecipeIterator implements Iterator<Recipe> {
+
     private final Iterator<IRecipe> recipes;
     private final Iterator<net.minecraft.server.ItemStack> smeltingCustom;
     private final Iterator<net.minecraft.server.ItemStack> smeltingVanilla;
+
     private Iterator<?> removeFrom = null;
 
     public RecipeIterator() {
@@ -48,6 +49,7 @@ public class RecipeIterator implements Iterator<Recipe> {
         if (removeFrom == null) {
             throw new IllegalStateException();
         }
+
         removeFrom.remove();
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/map/CraftMapCanvas.java b/src/main/java/org/bukkit/craftbukkit/map/CraftMapCanvas.java
index b5e9e31..f11cd3b 100644
--- a/src/main/java/org/bukkit/craftbukkit/map/CraftMapCanvas.java
+++ b/src/main/java/org/bukkit/craftbukkit/map/CraftMapCanvas.java
@@ -1,17 +1,19 @@
 package org.bukkit.craftbukkit.map;
 
-import java.awt.Image;
-import java.util.Arrays;
 import org.bukkit.map.MapCanvas;
 import org.bukkit.map.MapCursorCollection;
 import org.bukkit.map.MapFont;
 import org.bukkit.map.MapFont.CharacterSprite;
 import org.bukkit.map.MapPalette;
 
+import java.awt.*;
+import java.util.Arrays;
+
 public class CraftMapCanvas implements MapCanvas {
 
     private final byte[] buffer = new byte[128 * 128];
     private final CraftMapView mapView;
+
     private byte[] base;
     private MapCursorCollection cursors = new MapCursorCollection();
 
@@ -20,36 +22,48 @@ public class CraftMapCanvas implements MapCanvas {
         Arrays.fill(buffer, (byte) -1);
     }
 
+    @Override
     public CraftMapView getMapView() {
         return mapView;
     }
 
+    @Override
     public MapCursorCollection getCursors() {
         return cursors;
     }
 
+    @Override
     public void setCursors(MapCursorCollection cursors) {
         this.cursors = cursors;
     }
 
+    @Override
     public void setPixel(int x, int y, byte color) {
-        if (x < 0 || y < 0 || x >= 128 || y >= 128)
+        if (x < 0 || y < 0 || x >= 128 || y >= 128) {
             return;
+        }
+
         if (buffer[y * 128 + x] != color) {
             buffer[y * 128 + x] = color;
             mapView.worldMap.flagDirty(x, y, y);
         }
     }
 
+    @Override
     public byte getPixel(int x, int y) {
-        if (x < 0 || y < 0 || x >= 128 || y >= 128)
+        if (x < 0 || y < 0 || x >= 128 || y >= 128) {
             return 0;
+        }
+
         return buffer[y * 128 + x];
     }
 
+    @Override
     public byte getBasePixel(int x, int y) {
-        if (x < 0 || y < 0 || x >= 128 || y >= 128)
+        if (x < 0 || y < 0 || x >= 128 || y >= 128) {
             return 0;
+        }
+
         return base[y * 128 + x];
     }
 
@@ -61,6 +75,7 @@ public class CraftMapCanvas implements MapCanvas {
         return buffer;
     }
 
+    @Override
     public void drawImage(int x, int y, Image image) {
         byte[] bytes = MapPalette.imageToBytes(image);
         for (int x2 = 0; x2 < image.getWidth(null); ++x2) {
@@ -70,6 +85,7 @@ public class CraftMapCanvas implements MapCanvas {
         }
     }
 
+    @Override
     public void drawText(int x, int y, MapFont font, String text) {
         int xStart = x;
         byte color = MapPalette.DARK_GRAY;
@@ -90,8 +106,8 @@ public class CraftMapCanvas implements MapCanvas {
                         color = Byte.parseByte(text.substring(i + 1, j));
                         i = j;
                         continue;
+                    } catch (NumberFormatException ignored) {
                     }
-                    catch (NumberFormatException ex) {}
                 }
             }
 
@@ -103,8 +119,8 @@ public class CraftMapCanvas implements MapCanvas {
                     }
                 }
             }
+
             x += sprite.getWidth() + 1;
         }
     }
-
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/map/CraftMapRenderer.java b/src/main/java/org/bukkit/craftbukkit/map/CraftMapRenderer.java
index 392dba4..c0f0d39 100644
--- a/src/main/java/org/bukkit/craftbukkit/map/CraftMapRenderer.java
+++ b/src/main/java/org/bukkit/craftbukkit/map/CraftMapRenderer.java
@@ -2,7 +2,6 @@ package org.bukkit.craftbukkit.map;
 
 import net.minecraft.server.WorldMap;
 import net.minecraft.server.WorldMapDecoration;
-
 import org.bukkit.Bukkit;
 import org.bukkit.entity.Player;
 import org.bukkit.map.MapCanvas;
@@ -45,5 +44,4 @@ public class CraftMapRenderer extends MapRenderer {
             cursors.addCursor(decoration.locX, decoration.locY, (byte) (decoration.rotation & 15), decoration.type);
         }
     }
-
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/map/CraftMapView.java b/src/main/java/org/bukkit/craftbukkit/map/CraftMapView.java
index c9f0027..0ec651a 100644
--- a/src/main/java/org/bukkit/craftbukkit/map/CraftMapView.java
+++ b/src/main/java/org/bukkit/craftbukkit/map/CraftMapView.java
@@ -1,13 +1,6 @@
 package org.bukkit.craftbukkit.map;
 
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
 import net.minecraft.server.WorldMap;
-
 import org.bukkit.Bukkit;
 import org.bukkit.World;
 import org.bukkit.craftbukkit.CraftWorld;
@@ -15,25 +8,31 @@ import org.bukkit.craftbukkit.entity.CraftPlayer;
 import org.bukkit.map.MapRenderer;
 import org.bukkit.map.MapView;
 
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
 public final class CraftMapView implements MapView {
 
-    private final Map<CraftPlayer, RenderData> renderCache = new HashMap<CraftPlayer, RenderData>();
     public final List<MapRenderer> renderers = new ArrayList<MapRenderer>(); // Spigot
-    private final Map<MapRenderer, Map<CraftPlayer, CraftMapCanvas>> canvases = new HashMap<MapRenderer, Map<CraftPlayer, CraftMapCanvas>>();
     protected final WorldMap worldMap;
+    private final Map<CraftPlayer, RenderData> renderCache = new HashMap<CraftPlayer, RenderData>();
+    private final Map<MapRenderer, Map<CraftPlayer, CraftMapCanvas>> canvases = new HashMap<MapRenderer, Map<CraftPlayer, CraftMapCanvas>>();
 
     public CraftMapView(WorldMap worldMap) {
         this.worldMap = worldMap;
         addRenderer(new CraftMapRenderer(this, worldMap));
     }
 
+    @Override
     public short getId() {
         String text = worldMap.id;
         if (text.startsWith("map_")) {
             try {
                 return Short.parseShort(text.substring("map_".length()));
-            }
-            catch (NumberFormatException ex) {
+            } catch (NumberFormatException ex) {
                 throw new IllegalStateException("Map has non-numeric ID");
             }
         } else {
@@ -41,18 +40,22 @@ public final class CraftMapView implements MapView {
         }
     }
 
+    @Override
     public boolean isVirtual() {
         return renderers.size() > 0 && !(renderers.get(0) instanceof CraftMapRenderer);
     }
 
+    @Override
     public Scale getScale() {
         return Scale.valueOf(worldMap.scale);
     }
 
+    @Override
     public void setScale(Scale scale) {
         worldMap.scale = scale.getValue();
     }
 
+    @Override
     public World getWorld() {
         byte dimension = worldMap.map;
         for (World world : Bukkit.getServer().getWorlds()) {
@@ -60,33 +63,41 @@ public final class CraftMapView implements MapView {
                 return world;
             }
         }
+
         return null;
     }
 
+    @Override
     public void setWorld(World world) {
         worldMap.map = (byte) ((CraftWorld) world).getHandle().dimension;
     }
 
+    @Override
     public int getCenterX() {
         return worldMap.centerX;
     }
 
-    public int getCenterZ() {
-        return worldMap.centerZ;
-    }
-
+    @Override
     public void setCenterX(int x) {
         worldMap.centerX = x;
     }
 
+    @Override
+    public int getCenterZ() {
+        return worldMap.centerZ;
+    }
+
+    @Override
     public void setCenterZ(int z) {
         worldMap.centerZ = z;
     }
 
+    @Override
     public List<MapRenderer> getRenderers() {
         return new ArrayList<MapRenderer>(renderers);
     }
 
+    @Override
     public void addRenderer(MapRenderer renderer) {
         if (!renderers.contains(renderer)) {
             renderers.add(renderer);
@@ -95,6 +106,7 @@ public final class CraftMapView implements MapView {
         }
     }
 
+    @Override
     public boolean removeRenderer(MapRenderer renderer) {
         if (renderers.contains(renderer)) {
             renderers.remove(renderer);
@@ -114,8 +126,11 @@ public final class CraftMapView implements MapView {
 
     private boolean isContextual() {
         for (MapRenderer renderer : renderers) {
-            if (renderer.isContextual()) return true;
+            if (renderer.isContextual()) {
+                return true;
+            }
         }
+
         return false;
     }
 
@@ -159,5 +174,4 @@ public final class CraftMapView implements MapView {
 
         return render;
     }
-
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/map/RenderData.java b/src/main/java/org/bukkit/craftbukkit/map/RenderData.java
index 256a131..245f889 100644
--- a/src/main/java/org/bukkit/craftbukkit/map/RenderData.java
+++ b/src/main/java/org/bukkit/craftbukkit/map/RenderData.java
@@ -1,8 +1,9 @@
 package org.bukkit.craftbukkit.map;
 
-import java.util.ArrayList;
 import org.bukkit.map.MapCursor;
 
+import java.util.ArrayList;
+
 public class RenderData {
 
     public final byte[] buffer;
@@ -12,5 +13,4 @@ public class RenderData {
         this.buffer = new byte[128 * 128];
         this.cursors = new ArrayList<MapCursor>();
     }
-
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/metadata/BlockMetadataStore.java b/src/main/java/org/bukkit/craftbukkit/metadata/BlockMetadataStore.java
index 6f7102f..2e3714c 100644
--- a/src/main/java/org/bukkit/craftbukkit/metadata/BlockMetadataStore.java
+++ b/src/main/java/org/bukkit/craftbukkit/metadata/BlockMetadataStore.java
@@ -18,6 +18,7 @@ public class BlockMetadataStore extends MetadataStoreBase<Block> implements Meta
 
     /**
      * Initializes a BlockMetadataStore.
+     *
      * @param owningWorld The world to which this BlockMetadataStore belongs.
      */
     public BlockMetadataStore(World owningWorld) {
@@ -26,24 +27,26 @@ public class BlockMetadataStore extends MetadataStoreBase<Block> implements Meta
 
     /**
      * Generates a unique metadata key for a {@link Block} object based on its coordinates in the world.
-     * @see MetadataStoreBase#disambiguate(Object, String)
-     * @param block the block
+     *
+     * @param block       the block
      * @param metadataKey The name identifying the metadata value
      * @return a unique metadata key
+     * @see MetadataStoreBase#disambiguate(Object, String)
      */
     @Override
     protected String disambiguate(Block block, String metadataKey) {
-        return Integer.toString(block.getX()) + ":" + Integer.toString(block.getY()) + ":"  + Integer.toString(block.getZ()) + ":"  + metadataKey;
+        return Integer.toString(block.getX()) + ":" + Integer.toString(block.getY()) + ":" + Integer.toString(block.getZ()) + ":" + metadataKey;
     }
 
     /**
      * Retrieves the metadata for a {@link Block}, ensuring the block being asked for actually belongs to this BlockMetadataStore's
      * owning world.
+     *
      * @see MetadataStoreBase#getMetadata(Object, String)
      */
     @Override
     public List<MetadataValue> getMetadata(Block block, String metadataKey) {
-        if(block.getWorld() == owningWorld) {
+        if (block.getWorld() == owningWorld) {
             return super.getMetadata(block, metadataKey);
         } else {
             throw new IllegalArgumentException("Block does not belong to world " + owningWorld.getName());
@@ -53,11 +56,12 @@ public class BlockMetadataStore extends MetadataStoreBase<Block> implements Meta
     /**
      * Tests to see if a metadata value has been added to a {@link Block}, ensuring the block being interrogated belongs
      * to this BlockMetadataStore's owning world.
+     *
      * @see MetadataStoreBase#hasMetadata(Object, String)
      */
     @Override
     public boolean hasMetadata(Block block, String metadataKey) {
-        if(block.getWorld() == owningWorld) {
+        if (block.getWorld() == owningWorld) {
             return super.hasMetadata(block, metadataKey);
         } else {
             throw new IllegalArgumentException("Block does not belong to world " + owningWorld.getName());
@@ -67,11 +71,12 @@ public class BlockMetadataStore extends MetadataStoreBase<Block> implements Meta
     /**
      * Removes metadata from from a {@link Block} belonging to a given {@link Plugin}, ensuring the block being deleted from belongs
      * to this BlockMetadataStore's owning world.
+     *
      * @see MetadataStoreBase#removeMetadata(Object, String, org.bukkit.plugin.Plugin)
      */
     @Override
     public void removeMetadata(Block block, String metadataKey, Plugin owningPlugin) {
-        if(block.getWorld() == owningWorld) {
+        if (block.getWorld() == owningWorld) {
             super.removeMetadata(block, metadataKey, owningPlugin);
         } else {
             throw new IllegalArgumentException("Block does not belong to world " + owningWorld.getName());
@@ -81,11 +86,12 @@ public class BlockMetadataStore extends MetadataStoreBase<Block> implements Meta
     /**
      * Sets or overwrites a metadata value on a {@link Block} from a given {@link Plugin}, ensuring the target block belongs
      * to this BlockMetadataStore's owning world.
+     *
      * @see MetadataStoreBase#setMetadata(Object, String, org.bukkit.metadata.MetadataValue)
      */
     @Override
     public void setMetadata(Block block, String metadataKey, MetadataValue newMetadataValue) {
-        if(block.getWorld() == owningWorld) {
+        if (block.getWorld() == owningWorld) {
             super.setMetadata(block, metadataKey, newMetadataValue);
         } else {
             throw new IllegalArgumentException("Block does not belong to world " + owningWorld.getName());
diff --git a/src/main/java/org/bukkit/craftbukkit/metadata/EntityMetadataStore.java b/src/main/java/org/bukkit/craftbukkit/metadata/EntityMetadataStore.java
index 35c484f..bbb9409 100644
--- a/src/main/java/org/bukkit/craftbukkit/metadata/EntityMetadataStore.java
+++ b/src/main/java/org/bukkit/craftbukkit/metadata/EntityMetadataStore.java
@@ -8,13 +8,14 @@ import org.bukkit.metadata.MetadataStoreBase;
  * An EntityMetadataStore stores metadata values for all {@link Entity} classes an their descendants.
  */
 public class EntityMetadataStore extends MetadataStoreBase<Entity> implements MetadataStore<Entity> {
+
     /**
      * Generates a unique metadata key for an {@link Entity} UUID.
      *
-     * @see MetadataStoreBase#disambiguate(Object, String)
-     * @param entity the entity
+     * @param entity      the entity
      * @param metadataKey The name identifying the metadata value
      * @return a unique metadata key
+     * @see MetadataStoreBase#disambiguate(Object, String)
      */
     @Override
     protected String disambiguate(Entity entity, String metadataKey) {
diff --git a/src/main/java/org/bukkit/craftbukkit/metadata/PlayerMetadataStore.java b/src/main/java/org/bukkit/craftbukkit/metadata/PlayerMetadataStore.java
index d4d7f38..d25e1b8 100644
--- a/src/main/java/org/bukkit/craftbukkit/metadata/PlayerMetadataStore.java
+++ b/src/main/java/org/bukkit/craftbukkit/metadata/PlayerMetadataStore.java
@@ -8,13 +8,15 @@ import org.bukkit.metadata.MetadataStoreBase;
  * A PlayerMetadataStore stores metadata for {@link org.bukkit.entity.Player} and {@link OfflinePlayer} objects.
  */
 public class PlayerMetadataStore extends MetadataStoreBase<OfflinePlayer> implements MetadataStore<OfflinePlayer> {
+
     /**
      * Generates a unique metadata key for {@link org.bukkit.entity.Player} and {@link OfflinePlayer} using the player
      * name.
-     * @see MetadataStoreBase#disambiguate(Object, String)
-     * @param player the player
+     *
+     * @param player      the player
      * @param metadataKey The name identifying the metadata value
      * @return a unique metadata key
+     * @see MetadataStoreBase#disambiguate(Object, String)
      */
     @Override
     protected String disambiguate(OfflinePlayer player, String metadataKey) {
diff --git a/src/main/java/org/bukkit/craftbukkit/metadata/WorldMetadataStore.java b/src/main/java/org/bukkit/craftbukkit/metadata/WorldMetadataStore.java
index dd37ed2..0022f85 100644
--- a/src/main/java/org/bukkit/craftbukkit/metadata/WorldMetadataStore.java
+++ b/src/main/java/org/bukkit/craftbukkit/metadata/WorldMetadataStore.java
@@ -8,12 +8,14 @@ import org.bukkit.metadata.MetadataStoreBase;
  * An WorldMetadataStore stores metadata values for {@link World} objects.
  */
 public class WorldMetadataStore extends MetadataStoreBase<World> implements MetadataStore<World> {
+
     /**
      * Generates a unique metadata key for a {@link World} object based on the world UID.
-     * @see WorldMetadataStore#disambiguate(Object, String)
-     * @param world the world
+     *
+     * @param world       the world
      * @param metadataKey The name identifying the metadata value
      * @return a unique metadata key
+     * @see WorldMetadataStore#disambiguate(Object, String)
      */
     @Override
     protected String disambiguate(World world, String metadataKey) {
diff --git a/src/main/java/org/bukkit/craftbukkit/potion/CraftPotionBrewer.java b/src/main/java/org/bukkit/craftbukkit/potion/CraftPotionBrewer.java
index bb16958..017dc47 100644
--- a/src/main/java/org/bukkit/craftbukkit/potion/CraftPotionBrewer.java
+++ b/src/main/java/org/bukkit/craftbukkit/potion/CraftPotionBrewer.java
@@ -1,47 +1,48 @@
 package org.bukkit.craftbukkit.potion;
 
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.List;
-import java.util.Map;
-
+import com.google.common.collect.Maps;
 import net.minecraft.server.MobEffect;
-
-import org.bukkit.potion.PotionEffectType;
 import org.bukkit.potion.PotionBrewer;
 import org.bukkit.potion.PotionEffect;
+import org.bukkit.potion.PotionEffectType;
 
-import com.google.common.collect.Maps;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.List;
+import java.util.Map;
 
 public class CraftPotionBrewer implements PotionBrewer {
+
     private static final Map<Integer, Collection<PotionEffect>> cache = Maps.newHashMap();
 
     public Collection<PotionEffect> getEffectsFromDamage(int damage) {
-        if (cache.containsKey(damage))
+        if (cache.containsKey(damage)) {
             return cache.get(damage);
+        }
 
         List<?> mcEffects = net.minecraft.server.PotionBrewer.getEffects(damage, false);
         List<PotionEffect> effects = new ArrayList<PotionEffect>();
-        if (mcEffects == null)
+        if (mcEffects == null) {
             return effects;
+        }
 
         for (Object raw : mcEffects) {
-            if (raw == null || !(raw instanceof MobEffect))
+            if (raw == null || !(raw instanceof MobEffect)) {
                 continue;
+            }
+
             MobEffect mcEffect = (MobEffect) raw;
-            PotionEffect effect = new PotionEffect(PotionEffectType.getById(mcEffect.getEffectId()),
-                    mcEffect.getDuration(), mcEffect.getAmplifier());
+            PotionEffect effect = new PotionEffect(PotionEffectType.getById(mcEffect.getEffectId()), mcEffect.getDuration(), mcEffect.getAmplifier());
+
             // Minecraft PotionBrewer applies duration modifiers automatically.
             effects.add(effect);
         }
 
         cache.put(damage, effects);
-
         return effects;
     }
 
     public PotionEffect createEffect(PotionEffectType potion, int duration, int amplifier) {
-        return new PotionEffect(potion, potion.isInstant() ? 1 : (int) (duration * potion.getDurationModifier()),
-                amplifier);
+        return new PotionEffect(potion, potion.isInstant() ? 1 : (int) (duration * potion.getDurationModifier()), amplifier);
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/potion/CraftPotionEffectType.java b/src/main/java/org/bukkit/craftbukkit/potion/CraftPotionEffectType.java
index b59d142..27ff1a9 100644
--- a/src/main/java/org/bukkit/craftbukkit/potion/CraftPotionEffectType.java
+++ b/src/main/java/org/bukkit/craftbukkit/potion/CraftPotionEffectType.java
@@ -1,10 +1,10 @@
 package org.bukkit.craftbukkit.potion;
 
 import net.minecraft.server.MobEffectList;
-
 import org.bukkit.potion.PotionEffectType;
 
 public class CraftPotionEffectType extends PotionEffectType {
+
     private final MobEffectList handle;
 
     public CraftPotionEffectType(MobEffectList handle) {
@@ -24,54 +24,54 @@ public class CraftPotionEffectType extends PotionEffectType {
     @Override
     public String getName() {
         switch (handle.id) {
-        case 1:
-            return "SPEED";
-        case 2:
-            return "SLOW";
-        case 3:
-            return "FAST_DIGGING";
-        case 4:
-            return "SLOW_DIGGING";
-        case 5:
-            return "INCREASE_DAMAGE";
-        case 6:
-            return "HEAL";
-        case 7:
-            return "HARM";
-        case 8:
-            return "JUMP";
-        case 9:
-            return "CONFUSION";
-        case 10:
-            return "REGENERATION";
-        case 11:
-            return "DAMAGE_RESISTANCE";
-        case 12:
-            return "FIRE_RESISTANCE";
-        case 13:
-            return "WATER_BREATHING";
-        case 14:
-            return "INVISIBILITY";
-        case 15:
-            return "BLINDNESS";
-        case 16:
-            return "NIGHT_VISION";
-        case 17:
-            return "HUNGER";
-        case 18:
-            return "WEAKNESS";
-        case 19:
-            return "POISON";
-        case 20:
-            return "WITHER";
-        case 21:
-            return "HEALTH_BOOST";
-        case 22:
-            return "ABSORPTION";
-        case 23:
-            return "SATURATION";
-        default:
-            return "UNKNOWN_EFFECT_TYPE_" + handle.id;
+            case 1:
+                return "SPEED";
+            case 2:
+                return "SLOW";
+            case 3:
+                return "FAST_DIGGING";
+            case 4:
+                return "SLOW_DIGGING";
+            case 5:
+                return "INCREASE_DAMAGE";
+            case 6:
+                return "HEAL";
+            case 7:
+                return "HARM";
+            case 8:
+                return "JUMP";
+            case 9:
+                return "CONFUSION";
+            case 10:
+                return "REGENERATION";
+            case 11:
+                return "DAMAGE_RESISTANCE";
+            case 12:
+                return "FIRE_RESISTANCE";
+            case 13:
+                return "WATER_BREATHING";
+            case 14:
+                return "INVISIBILITY";
+            case 15:
+                return "BLINDNESS";
+            case 16:
+                return "NIGHT_VISION";
+            case 17:
+                return "HUNGER";
+            case 18:
+                return "WEAKNESS";
+            case 19:
+                return "POISON";
+            case 20:
+                return "WITHER";
+            case 21:
+                return "HEALTH_BOOST";
+            case 22:
+                return "ABSORPTION";
+            case 23:
+                return "SATURATION";
+            default:
+                return "UNKNOWN_EFFECT_TYPE_" + handle.id;
         }
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/projectiles/CraftBlockProjectileSource.java b/src/main/java/org/bukkit/craftbukkit/projectiles/CraftBlockProjectileSource.java
index 0959a09..fecba77 100644
--- a/src/main/java/org/bukkit/craftbukkit/projectiles/CraftBlockProjectileSource.java
+++ b/src/main/java/org/bukkit/craftbukkit/projectiles/CraftBlockProjectileSource.java
@@ -1,25 +1,5 @@
 package org.bukkit.craftbukkit.projectiles;
 
-import java.util.Random;
-
-import org.apache.commons.lang.Validate;
-import org.bukkit.Material;
-import org.bukkit.block.Block;
-import org.bukkit.craftbukkit.inventory.CraftItemStack;
-import org.bukkit.entity.Arrow;
-import org.bukkit.entity.Egg;
-import org.bukkit.entity.EnderPearl;
-import org.bukkit.entity.Fireball;
-import org.bukkit.entity.Projectile;
-import org.bukkit.entity.SmallFireball;
-import org.bukkit.entity.Snowball;
-import org.bukkit.entity.ThrownExpBottle;
-import org.bukkit.entity.ThrownPotion;
-import org.bukkit.entity.WitherSkull;
-import org.bukkit.inventory.ItemStack;
-import org.bukkit.projectiles.BlockProjectileSource;
-import org.bukkit.util.Vector;
-
 import net.minecraft.server.BlockDispenser;
 import net.minecraft.server.EntityArrow;
 import net.minecraft.server.EntityEgg;
@@ -38,8 +18,28 @@ import net.minecraft.server.IProjectile;
 import net.minecraft.server.MathHelper;
 import net.minecraft.server.SourceBlock;
 import net.minecraft.server.TileEntityDispenser;
+import org.apache.commons.lang.Validate;
+import org.bukkit.Material;
+import org.bukkit.block.Block;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.entity.Arrow;
+import org.bukkit.entity.Egg;
+import org.bukkit.entity.EnderPearl;
+import org.bukkit.entity.Fireball;
+import org.bukkit.entity.Projectile;
+import org.bukkit.entity.SmallFireball;
+import org.bukkit.entity.Snowball;
+import org.bukkit.entity.ThrownExpBottle;
+import org.bukkit.entity.ThrownPotion;
+import org.bukkit.entity.WitherSkull;
+import org.bukkit.inventory.ItemStack;
+import org.bukkit.projectiles.BlockProjectileSource;
+import org.bukkit.util.Vector;
+
+import java.util.Random;
 
 public class CraftBlockProjectileSource implements BlockProjectileSource {
+
     private final TileEntityDispenser dispenserBlock;
 
     public CraftBlockProjectileSource(TileEntityDispenser dispenserBlock) {
@@ -110,7 +110,7 @@ public class CraftBlockProjectileSource implements BlockProjectileSource {
                 ((EntityFireball) launch).dirY = d4 / d6 * 0.1D;
                 ((EntityFireball) launch).dirZ = d5 / d6 * 0.1D;
             }
-            
+
             ((EntityFireball) launch).projectileSource = this;
         }
 
@@ -133,7 +133,7 @@ public class CraftBlockProjectileSource implements BlockProjectileSource {
         }
 
         if (velocity != null) {
-            ((T) launch.getBukkitEntity()).setVelocity(velocity);
+            launch.getBukkitEntity().setVelocity(velocity);
         }
 
         world.addEntity(launch);
diff --git a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftAsyncDebugger.java b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftAsyncDebugger.java
index d80ae50..f75f19f 100644
--- a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftAsyncDebugger.java
+++ b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftAsyncDebugger.java
@@ -2,18 +2,17 @@ package org.bukkit.craftbukkit.scheduler;
 
 import org.bukkit.plugin.Plugin;
 
-
 class CraftAsyncDebugger {
-    private CraftAsyncDebugger next = null;
+
     private final int expiry;
     private final Plugin plugin;
     private final Class<? extends Runnable> clazz;
+    private CraftAsyncDebugger next = null;
 
-    CraftAsyncDebugger(final int expiry, final  Plugin plugin, final Class<? extends Runnable> clazz) {
+    CraftAsyncDebugger(final int expiry, final Plugin plugin, final Class<? extends Runnable> clazz) {
         this.expiry = expiry;
         this.plugin = plugin;
         this.clazz = clazz;
-
     }
 
     final CraftAsyncDebugger getNextHead(final int time) {
@@ -21,6 +20,7 @@ class CraftAsyncDebugger {
         while (time > current.expiry && (next = current.next) != null) {
             current = next;
         }
+
         return current;
     }
 
@@ -32,6 +32,7 @@ class CraftAsyncDebugger {
         for (CraftAsyncDebugger next = this; next != null; next = next.next) {
             string.append(next.plugin.getDescription().getName()).append(':').append(next.clazz.getName()).append('@').append(next.expiry).append(',');
         }
+
         return string;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftAsyncTask.java b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftAsyncTask.java
index f3da84a..a37151b 100644
--- a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftAsyncTask.java
+++ b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftAsyncTask.java
@@ -1,13 +1,12 @@
 package org.bukkit.craftbukkit.scheduler;
 
-import java.util.Iterator;
-import java.util.LinkedList;
-import java.util.Map;
-
 import org.apache.commons.lang.UnhandledException;
 import org.bukkit.plugin.Plugin;
 import org.bukkit.scheduler.BukkitWorker;
 
+import java.util.Iterator;
+import java.util.LinkedList;
+import java.util.Map;
 
 class CraftAsyncTask extends CraftTask {
 
@@ -27,41 +26,42 @@ class CraftAsyncTask extends CraftTask {
     @Override
     public void run() {
         final Thread thread = Thread.currentThread();
-        synchronized(workers) {
+        synchronized (workers) {
             if (getPeriod() == -2) {
                 // Never continue running after cancelled.
                 // Checking this with the lock is important!
                 return;
             }
-            workers.add(
-                new BukkitWorker() {
-                    public Thread getThread() {
-                        return thread;
-                    }
 
-                    public int getTaskId() {
-                        return CraftAsyncTask.this.getTaskId();
-                    }
+            workers.add(new BukkitWorker() {
+                public Thread getThread() {
+                    return thread;
+                }
 
-                    public Plugin getOwner() {
-                        return CraftAsyncTask.this.getOwner();
-                    }
-                });
+                public int getTaskId() {
+                    return CraftAsyncTask.this.getTaskId();
+                }
+
+                public Plugin getOwner() {
+                    return CraftAsyncTask.this.getOwner();
+                }
+            });
         }
+
         Throwable thrown = null;
         try {
             super.run();
-        } catch (final Throwable t) {
-            thrown = t;
+        } catch (final Throwable throwable) {
+            thrown = throwable;
             throw new UnhandledException(
                     String.format(
-                        "Plugin %s generated an exception while executing task %s",
-                        getOwner().getDescription().getFullName(),
-                        getTaskId()),
+                            "Plugin %s generated an exception while executing task %s",
+                            getOwner().getDescription().getFullName(),
+                            getTaskId()),
                     thrown);
         } finally {
             // Cleanup is important for any async task, otherwise ghost tasks are everywhere
-            synchronized(workers) {
+            synchronized (workers) {
                 try {
                     final Iterator<BukkitWorker> workers = this.workers.iterator();
                     boolean removed = false;
@@ -72,13 +72,14 @@ class CraftAsyncTask extends CraftTask {
                             break;
                         }
                     }
+
                     if (!removed) {
                         throw new IllegalStateException(
                                 String.format(
-                                    "Unable to remove worker %s on task %s for %s",
-                                    thread.getName(),
-                                    getTaskId(),
-                                    getOwner().getDescription().getFullName()),
+                                        "Unable to remove worker %s on task %s for %s",
+                                        thread.getName(),
+                                        getTaskId(),
+                                        getOwner().getDescription().getFullName()),
                                 thrown); // We don't want to lose the original exception, if any
                     }
                 } finally {
@@ -104,6 +105,7 @@ class CraftAsyncTask extends CraftTask {
                 runners.remove(getTaskId());
             }
         }
+
         return true;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftFuture.java b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftFuture.java
index 1baec56..65c8bb0 100644
--- a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftFuture.java
+++ b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftFuture.java
@@ -1,5 +1,8 @@
 package org.bukkit.craftbukkit.scheduler;
 
+import org.bukkit.plugin.Plugin;
+
+import javax.annotation.Nonnull;
 import java.util.concurrent.Callable;
 import java.util.concurrent.CancellationException;
 import java.util.concurrent.ExecutionException;
@@ -7,11 +10,10 @@ import java.util.concurrent.Future;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.TimeoutException;
 
-import org.bukkit.plugin.Plugin;
-
 class CraftFuture<T> extends CraftTask implements Future<T> {
 
     private final Callable<T> callable;
+
     private T value;
     private Exception exception = null;
 
@@ -45,7 +47,7 @@ class CraftFuture<T> extends CraftTask implements Future<T> {
         }
     }
 
-    public synchronized T get(long timeout, final TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {
+    public synchronized T get(long timeout, @Nonnull final TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {
         timeout = unit.toMillis(timeout);
         long period = this.getPeriod();
         long timestamp = timeout > 0 ? System.currentTimeMillis() : 0l;
@@ -57,22 +59,28 @@ class CraftFuture<T> extends CraftTask implements Future<T> {
                     if (timeout == 0l) {
                         continue;
                     }
+
                     timeout += timestamp - (timestamp = System.currentTimeMillis());
                     if (timeout > 0) {
                         continue;
                     }
+
                     throw new TimeoutException();
                 }
             }
+
             if (period == -2l) {
                 throw new CancellationException();
             }
+
             if (period == -4l) {
                 if (exception == null) {
                     return value;
                 }
+
                 throw new ExecutionException(exception);
             }
+
             throw new IllegalStateException("Expected " + -1l + " to " + -4l + ", got " + period);
         }
     }
@@ -83,12 +91,14 @@ class CraftFuture<T> extends CraftTask implements Future<T> {
             if (getPeriod() == -2l) {
                 return;
             }
+
             setPeriod(-3l);
         }
+
         try {
             value = callable.call();
-        } catch (final Exception e) {
-            exception = e;
+        } catch (final Exception ex) {
+            exception = ex;
         } finally {
             synchronized (this) {
                 setPeriod(-4l);
@@ -101,6 +111,7 @@ class CraftFuture<T> extends CraftTask implements Future<T> {
         if (getPeriod() != -1l) {
             return false;
         }
+
         setPeriod(-2l);
         notifyAll();
         return true;
diff --git a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
index 93d8d42..81ba139 100644
--- a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
+++ b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
@@ -1,5 +1,13 @@
 package org.bukkit.craftbukkit.scheduler;
 
+import org.apache.commons.lang.Validate;
+import org.bukkit.plugin.IllegalPluginAccessException;
+import org.bukkit.plugin.Plugin;
+import org.bukkit.scheduler.BukkitRunnable;
+import org.bukkit.scheduler.BukkitScheduler;
+import org.bukkit.scheduler.BukkitTask;
+import org.bukkit.scheduler.BukkitWorker;
+
 import java.util.ArrayList;
 import java.util.Comparator;
 import java.util.Iterator;
@@ -14,47 +22,37 @@ import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.atomic.AtomicReference;
 import java.util.logging.Level;
 
-import org.apache.commons.lang.Validate;
-import org.bukkit.plugin.IllegalPluginAccessException;
-import org.bukkit.plugin.Plugin;
-import org.bukkit.scheduler.BukkitRunnable;
-import org.bukkit.scheduler.BukkitScheduler;
-import org.bukkit.scheduler.BukkitTask;
-import org.bukkit.scheduler.BukkitWorker;
-
 /**
  * The fundamental concepts for this implementation:
  * <li>Main thread owns {@link #head} and {@link #currentTick}, but it may be read from any thread</li>
  * <li>Main thread exclusively controls {@link #temp} and {@link #pending}.
- *     They are never to be accessed outside of the main thread; alternatives exist to prevent locking.</li>
+ * They are never to be accessed outside of the main thread; alternatives exist to prevent locking.</li>
  * <li>{@link #head} to {@link #tail} act as a linked list/queue, with 1 consumer and infinite producers.
- *     Adding to the tail is atomic and very efficient; utility method is {@link #handle(CraftTask, long)} or {@link #addTask(CraftTask)}. </li>
+ * Adding to the tail is atomic and very efficient; utility method is {@link #handle(CraftTask, long)} or {@link #addTask(CraftTask)}. </li>
  * <li>Changing the period on a task is delicate.
- *     Any future task needs to notify waiting threads.
- *     Async tasks must be synchronized to make sure that any thread that's finishing will remove itself from {@link #runners}.
- *     Another utility method is provided for this, {@link #cancelTask(CraftTask)}</li>
+ * Any future task needs to notify waiting threads.
+ * Async tasks must be synchronized to make sure that any thread that's finishing will remove itself from {@link #runners}.
+ * Another utility method is provided for this, {@link #cancelTask(int)}</li>
  * <li>{@link #runners} provides a moderately up-to-date view of active tasks.
- *     If the linked head to tail set is read, all remaining tasks that were active at the time execution started will be located in runners.</li>
+ * If the linked head to tail set is read, all remaining tasks that were active at the time execution started will be located in runners.</li>
  * <li>Async tasks are responsible for removing themselves from runners</li>
  * <li>Sync tasks are only to be removed from runners on the main thread when coupled with a removal from pending and temp.</li>
  * <li>Most of the design in this scheduler relies on queuing special tasks to perform any data changes on the main thread.
- *     When executed from inside a synchronous method, the scheduler will be updated before next execution by virtue of the frequent {@link #parsePending()} calls.</li>
+ * When executed from inside a synchronous method, the scheduler will be updated before next execution by virtue of the frequent {@link #parsePending()} calls.</li>
  */
 public class CraftScheduler implements BukkitScheduler {
 
+    private static final int RECENT_TICKS;
+
+    static {
+        RECENT_TICKS = 30;
+    }
+
     /**
      * Counter for IDs. Order doesn't matter, only uniqueness.
      */
     private final AtomicInteger ids = new AtomicInteger(1);
     /**
-     * Current head of linked-list. This reference is always stale, {@link CraftTask#next} is the live reference.
-     */
-    private volatile CraftTask head = new CraftTask();
-    /**
-     * Tail of a linked-list. AtomicReference only matters when adding to queue
-     */
-    private final AtomicReference<CraftTask> tail = new AtomicReference<CraftTask>(head);
-    /**
      * Main thread logic only
      */
     private final PriorityQueue<CraftTask> pending = new PriorityQueue<CraftTask>(10,
@@ -63,93 +61,129 @@ public class CraftScheduler implements BukkitScheduler {
                     return (int) (o1.getNextRun() - o2.getNextRun());
                 }
             });
+
     /**
      * Main thread logic only
      */
     private final List<CraftTask> temp = new ArrayList<CraftTask>();
+
     /**
      * These are tasks that are currently active. It's provided for 'viewing' the current state.
      */
+
     private final ConcurrentHashMap<Integer, CraftTask> runners = new ConcurrentHashMap<Integer, CraftTask>();
-    private volatile int currentTick = -1;
     private final Executor executor = Executors.newCachedThreadPool(new com.google.common.util.concurrent.ThreadFactoryBuilder().setNameFormat("Craft Scheduler Thread - %1$d").build()); // Spigot
-    private CraftAsyncDebugger debugHead = new CraftAsyncDebugger(-1, null, null) {@Override StringBuilder debugTo(StringBuilder string) {return string;}};
+    /**
+     * Current head of linked-list. This reference is always stale, {@link CraftTask#next} is the live reference.
+     */
+    private volatile CraftTask head = new CraftTask();
+    /**
+     * Tail of a linked-list. AtomicReference only matters when adding to queue
+     */
+    private final AtomicReference<CraftTask> tail = new AtomicReference<CraftTask>(head);
+    private volatile int currentTick = -1;
+    private CraftAsyncDebugger debugHead = new CraftAsyncDebugger(-1, null, null) {
+        @Override
+        StringBuilder debugTo(StringBuilder string) {
+            return string;
+        }
+    };
     private CraftAsyncDebugger debugTail = debugHead;
-    private static final int RECENT_TICKS;
 
-    static {
-        RECENT_TICKS = 30;
+    private static void validate(final Plugin plugin, final Object task) {
+        Validate.notNull(plugin, "Plugin cannot be null");
+        Validate.notNull(task, "Task cannot be null");
+        if (!plugin.isEnabled()) {
+            throw new IllegalPluginAccessException("Plugin attempted to register task while disabled");
+        }
     }
 
+    @Override
     public int scheduleSyncDelayedTask(final Plugin plugin, final Runnable task) {
         return this.scheduleSyncDelayedTask(plugin, task, 0l);
     }
 
+    @Override
     public BukkitTask runTask(Plugin plugin, Runnable runnable) {
         return runTaskLater(plugin, runnable, 0l);
     }
 
+    @Override
     @Deprecated
     public int scheduleAsyncDelayedTask(final Plugin plugin, final Runnable task) {
         return this.scheduleAsyncDelayedTask(plugin, task, 0l);
     }
 
+    @Override
     public BukkitTask runTaskAsynchronously(Plugin plugin, Runnable runnable) {
         return runTaskLaterAsynchronously(plugin, runnable, 0l);
     }
 
+    @Override
     public int scheduleSyncDelayedTask(final Plugin plugin, final Runnable task, final long delay) {
         return this.scheduleSyncRepeatingTask(plugin, task, delay, -1l);
     }
 
+    @Override
     public BukkitTask runTaskLater(Plugin plugin, Runnable runnable, long delay) {
         return runTaskTimer(plugin, runnable, delay, -1l);
     }
 
+    @Override
     @Deprecated
     public int scheduleAsyncDelayedTask(final Plugin plugin, final Runnable task, final long delay) {
         return this.scheduleAsyncRepeatingTask(plugin, task, delay, -1l);
     }
 
+    @Override
     public BukkitTask runTaskLaterAsynchronously(Plugin plugin, Runnable runnable, long delay) {
         return runTaskTimerAsynchronously(plugin, runnable, delay, -1l);
     }
 
+    @Override
     public int scheduleSyncRepeatingTask(final Plugin plugin, final Runnable runnable, long delay, long period) {
         return runTaskTimer(plugin, runnable, delay, period).getTaskId();
     }
 
+    @Override
     public BukkitTask runTaskTimer(Plugin plugin, Runnable runnable, long delay, long period) {
         validate(plugin, runnable);
         if (delay < 0l) {
             delay = 0;
         }
+
         if (period == 0l) {
             period = 1l;
         } else if (period < -1l) {
             period = -1l;
         }
+
         return handle(new CraftTask(plugin, runnable, nextId(), period), delay);
     }
 
+    @Override
     @Deprecated
     public int scheduleAsyncRepeatingTask(final Plugin plugin, final Runnable runnable, long delay, long period) {
         return runTaskTimerAsynchronously(plugin, runnable, delay, period).getTaskId();
     }
 
+    @Override
     public BukkitTask runTaskTimerAsynchronously(Plugin plugin, Runnable runnable, long delay, long period) {
         validate(plugin, runnable);
         if (delay < 0l) {
             delay = 0;
         }
+
         if (period == 0l) {
             period = 1l;
         } else if (period < -1l) {
             period = -1l;
         }
+
         return handle(new CraftAsyncTask(runners, plugin, runnable, nextId(), period), delay);
     }
 
+    @Override
     public <T> Future<T> callSyncMethod(final Plugin plugin, final Callable<T> task) {
         validate(plugin, task);
         final CraftFuture<T> future = new CraftFuture<T>(task, plugin, nextId());
@@ -157,36 +191,41 @@ public class CraftScheduler implements BukkitScheduler {
         return future;
     }
 
+    @Override
     public void cancelTask(final int taskId) {
         if (taskId <= 0) {
             return;
         }
+
         CraftTask task = runners.get(taskId);
         if (task != null) {
             task.cancel0();
         }
-        task = new CraftTask(
-                new Runnable() {
-                    public void run() {
-                        if (!check(CraftScheduler.this.temp)) {
-                            check(CraftScheduler.this.pending);
+
+        task = new CraftTask(new Runnable() {
+            public void run() {
+                if (!check(CraftScheduler.this.temp)) {
+                    check(CraftScheduler.this.pending);
+                }
+            }
+
+            private boolean check(final Iterable<CraftTask> collection) {
+                final Iterator<CraftTask> tasks = collection.iterator();
+                while (tasks.hasNext()) {
+                    final CraftTask task = tasks.next();
+                    if (task.getTaskId() == taskId) {
+                        task.cancel0();
+                        tasks.remove();
+                        if (task.isSync()) {
+                            runners.remove(taskId);
                         }
+                        return true;
                     }
-                    private boolean check(final Iterable<CraftTask> collection) {
-                        final Iterator<CraftTask> tasks = collection.iterator();
-                        while (tasks.hasNext()) {
-                            final CraftTask task = tasks.next();
-                            if (task.getTaskId() == taskId) {
-                                task.cancel0();
-                                tasks.remove();
-                                if (task.isSync()) {
-                                    runners.remove(taskId);
-                                }
-                                return true;
-                            }
-                        }
-                        return false;
-                    }});
+                }
+                return false;
+            }
+        });
+
         handle(task, 0l);
         for (CraftTask taskPending = head.getNext(); taskPending != null; taskPending = taskPending.getNext()) {
             if (taskPending == task) {
@@ -198,28 +237,30 @@ public class CraftScheduler implements BukkitScheduler {
         }
     }
 
+    @Override
     public void cancelTasks(final Plugin plugin) {
         Validate.notNull(plugin, "Cannot cancel tasks of null plugin");
-        final CraftTask task = new CraftTask(
-                new Runnable() {
-                    public void run() {
-                        check(CraftScheduler.this.pending);
-                        check(CraftScheduler.this.temp);
-                    }
-                    void check(final Iterable<CraftTask> collection) {
-                        final Iterator<CraftTask> tasks = collection.iterator();
-                        while (tasks.hasNext()) {
-                            final CraftTask task = tasks.next();
-                            if (task.getOwner().equals(plugin)) {
-                                task.cancel0();
-                                tasks.remove();
-                                if (task.isSync()) {
-                                    runners.remove(task.getTaskId());
-                                }
-                            }
+        final CraftTask task = new CraftTask(new Runnable() {
+            public void run() {
+                check(CraftScheduler.this.pending);
+                check(CraftScheduler.this.temp);
+            }
+
+            void check(final Iterable<CraftTask> collection) {
+                final Iterator<CraftTask> tasks = collection.iterator();
+                while (tasks.hasNext()) {
+                    final CraftTask task = tasks.next();
+                    if (task.getOwner().equals(plugin)) {
+                        task.cancel0();
+                        tasks.remove();
+                        if (task.isSync()) {
+                            runners.remove(task.getTaskId());
                         }
                     }
-                });
+                }
+            }
+        });
+
         handle(task, 0l);
         for (CraftTask taskPending = head.getNext(); taskPending != null; taskPending = taskPending.getNext()) {
             if (taskPending == task) {
@@ -229,6 +270,7 @@ public class CraftScheduler implements BukkitScheduler {
                 taskPending.cancel0();
             }
         }
+
         for (CraftTask runner : runners.values()) {
             if (runner.getOwner().equals(plugin)) {
                 runner.cancel0();
@@ -236,58 +278,68 @@ public class CraftScheduler implements BukkitScheduler {
         }
     }
 
+    @Override
     public void cancelAllTasks() {
-        final CraftTask task = new CraftTask(
-                new Runnable() {
-                    public void run() {
-                        Iterator<CraftTask> it = CraftScheduler.this.runners.values().iterator();
-                        while (it.hasNext()) {
-                            CraftTask task = it.next();
-                            task.cancel0();
-                            if (task.isSync()) {
-                                it.remove();
-                            }
-                        }
-                        CraftScheduler.this.pending.clear();
-                        CraftScheduler.this.temp.clear();
+        final CraftTask task = new CraftTask(new Runnable() {
+            public void run() {
+                Iterator<CraftTask> it = CraftScheduler.this.runners.values().iterator();
+                while (it.hasNext()) {
+                    CraftTask task = it.next();
+                    task.cancel0();
+                    if (task.isSync()) {
+                        it.remove();
                     }
-                });
+                }
+
+                CraftScheduler.this.pending.clear();
+                CraftScheduler.this.temp.clear();
+            }
+        });
+
         handle(task, 0l);
         for (CraftTask taskPending = head.getNext(); taskPending != null; taskPending = taskPending.getNext()) {
             if (taskPending == task) {
                 break;
             }
+
             taskPending.cancel0();
         }
+
         for (CraftTask runner : runners.values()) {
             runner.cancel0();
         }
     }
 
+    @Override
     public boolean isCurrentlyRunning(final int taskId) {
         final CraftTask task = runners.get(taskId);
         if (task == null || task.isSync()) {
             return false;
         }
+
         final CraftAsyncTask asyncTask = (CraftAsyncTask) task;
         synchronized (asyncTask.getWorkers()) {
             return asyncTask.getWorkers().isEmpty();
         }
     }
 
+    @Override
     public boolean isQueued(final int taskId) {
         if (taskId <= 0) {
             return false;
         }
+
         for (CraftTask task = head.getNext(); task != null; task = task.getNext()) {
             if (task.getTaskId() == taskId) {
                 return task.getPeriod() >= -1l; // The task will run
             }
         }
+
         CraftTask task = runners.get(taskId);
         return task != null && task.getPeriod() >= -1l;
     }
 
+    @Override
     public List<BukkitWorker> getActiveWorkers() {
         final ArrayList<BukkitWorker> workers = new ArrayList<BukkitWorker>();
         for (final CraftTask taskObj : runners.values()) {
@@ -295,15 +347,18 @@ public class CraftScheduler implements BukkitScheduler {
             if (taskObj.isSync()) {
                 continue;
             }
+
             final CraftAsyncTask task = (CraftAsyncTask) taskObj;
             synchronized (task.getWorkers()) {
                 // This will never have an issue with stale threads; it's state-safe
                 workers.addAll(task.getWorkers());
             }
         }
+
         return workers;
     }
 
+    @Override
     public List<BukkitTask> getPendingTasks() {
         final ArrayList<CraftTask> truePending = new ArrayList<CraftTask>();
         for (CraftTask task = head.getNext(); task != null; task = task.getNext()) {
@@ -325,6 +380,7 @@ public class CraftScheduler implements BukkitScheduler {
                 pending.add(task);
             }
         }
+
         return pending;
     }
 
@@ -341,9 +397,11 @@ public class CraftScheduler implements BukkitScheduler {
                 if (task.isSync()) {
                     runners.remove(task.getTaskId(), task);
                 }
+
                 parsePending();
                 continue;
             }
+
             if (task.isSync()) {
                 try {
                     task.timings.startTiming(); // Spigot
@@ -353,9 +411,9 @@ public class CraftScheduler implements BukkitScheduler {
                     task.getOwner().getLogger().log(
                             Level.WARNING,
                             String.format(
-                                "Task #%s for %s generated an exception",
-                                task.getTaskId(),
-                                task.getOwner().getDescription().getFullName()),
+                                    "Task #%s for %s generated an exception",
+                                    task.getTaskId(),
+                                    task.getOwner().getDescription().getFullName()),
                             throwable);
                 }
                 parsePending();
@@ -373,6 +431,7 @@ public class CraftScheduler implements BukkitScheduler {
                 runners.remove(task.getTaskId());
             }
         }
+
         pending.addAll(temp);
         temp.clear();
         debugHead = debugHead.getNextHead(currentTick);
@@ -384,6 +443,7 @@ public class CraftScheduler implements BukkitScheduler {
         while (!tail.compareAndSet(tailTask, task)) {
             tailTask = tail.get();
         }
+
         tailTask.setNext(task);
     }
 
@@ -393,14 +453,6 @@ public class CraftScheduler implements BukkitScheduler {
         return task;
     }
 
-    private static void validate(final Plugin plugin, final Object task) {
-        Validate.notNull(plugin, "Plugin cannot be null");
-        Validate.notNull(task, "Task cannot be null");
-        if (!plugin.isEnabled()) {
-            throw new IllegalPluginAccessException("Plugin attempted to register task while disabled");
-        }
-    }
-
     private int nextId() {
         return ids.incrementAndGet();
     }
@@ -417,12 +469,14 @@ public class CraftScheduler implements BukkitScheduler {
                 runners.put(task.getTaskId(), task);
             }
         }
+
         // We split this because of the way things are ordered for all of the async calls in CraftScheduler
         // (it prevents race-conditions)
         for (task = head; task != lastTask; task = head) {
-           head = task.getNext();
-           task.setNext(null);
+            head = task.getNext();
+            task.setNext(null);
         }
+
         this.head = lastTask;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftTask.java b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftTask.java
index 220e39a..4378aba 100644
--- a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftTask.java
+++ b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftTask.java
@@ -1,14 +1,20 @@
 package org.bukkit.craftbukkit.scheduler;
 
 import org.bukkit.Bukkit;
-import org.bukkit.craftbukkit.SpigotTimings; // Spigot
-import org.spigotmc.CustomTimingsHandler; // Spigot
+import org.bukkit.craftbukkit.SpigotTimings;
 import org.bukkit.plugin.Plugin;
 import org.bukkit.scheduler.BukkitTask;
+import org.spigotmc.CustomTimingsHandler;
 
 
 public class CraftTask implements BukkitTask, Runnable { // Spigot
 
+    final CustomTimingsHandler timings; // Spigot
+    private final Runnable task;
+    private final Plugin plugin;
+    private final int id;
+    // Spigot start
+    public String timingName = null;
     private volatile CraftTask next = null;
     /**
      * -1 means no repeating <br>
@@ -20,11 +26,7 @@ public class CraftTask implements BukkitTask, Runnable { // Spigot
      */
     private volatile long period;
     private long nextRun;
-    private final Runnable task;
-    private final Plugin plugin;
-    private final int id;
 
-    final CustomTimingsHandler timings; // Spigot
     CraftTask() {
         this(null, null, -1, -1);
     }
@@ -33,14 +35,14 @@ public class CraftTask implements BukkitTask, Runnable { // Spigot
         this(null, task, -1, -1);
     }
 
-    // Spigot start
-    public String timingName = null;
     CraftTask(String timingName) {
         this(timingName, null, null, -1, -1);
     }
+
     CraftTask(String timingName, final Runnable task) {
         this(timingName, null, task, -1, -1);
     }
+
     CraftTask(String timingName, final Plugin plugin, final Runnable task, final int id, final long period) {
         this.plugin = plugin;
         this.task = task;
@@ -52,7 +54,7 @@ public class CraftTask implements BukkitTask, Runnable { // Spigot
 
     CraftTask(final Plugin plugin, final Runnable task, final int id, final long period) {
         this(null, plugin, task, id, period);
-    // Spigot end
+        // Spigot end
     }
 
     public final int getTaskId() {
diff --git a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftCriteria.java b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftCriteria.java
index 612a524..65f60a6 100644
--- a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftCriteria.java
+++ b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftCriteria.java
@@ -1,20 +1,20 @@
 package org.bukkit.craftbukkit.scoreboard;
 
-import java.util.Map;
-
+import com.google.common.collect.ImmutableMap;
 import net.minecraft.server.IScoreboardCriteria;
 import net.minecraft.server.ScoreboardObjective;
 
-import com.google.common.collect.ImmutableMap;
+import java.util.Map;
 
 final class CraftCriteria {
+
     static final Map<String, CraftCriteria> DEFAULTS;
     static final CraftCriteria DUMMY;
 
     static {
         ImmutableMap.Builder<String, CraftCriteria> defaults = ImmutableMap.builder();
 
-        for (Map.Entry<?, ?> entry : ((Map<?,?> ) IScoreboardCriteria.criteria).entrySet()) {
+        for (Map.Entry<?, ?> entry : ((Map<?, ?>) IScoreboardCriteria.criteria).entrySet()) {
             String name = entry.getKey().toString();
             IScoreboardCriteria criteria = (IScoreboardCriteria) entry.getValue();
             if (!criteria.getName().equals(name)) {
@@ -55,10 +55,7 @@ final class CraftCriteria {
 
     @Override
     public boolean equals(Object that) {
-        if (!(that instanceof CraftCriteria)) {
-            return false;
-        }
-        return ((CraftCriteria) that).bukkitName.equals(this.bukkitName);
+        return that instanceof CraftCriteria && ((CraftCriteria) that).bukkitName.equals(this.bukkitName);
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftObjective.java b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftObjective.java
index 0ee1147..e2449a0 100644
--- a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftObjective.java
+++ b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftObjective.java
@@ -2,7 +2,6 @@ package org.bukkit.craftbukkit.scoreboard;
 
 import net.minecraft.server.Scoreboard;
 import net.minecraft.server.ScoreboardObjective;
-
 import org.apache.commons.lang.Validate;
 import org.bukkit.OfflinePlayer;
 import org.bukkit.scoreboard.DisplaySlot;
@@ -10,6 +9,7 @@ import org.bukkit.scoreboard.Objective;
 import org.bukkit.scoreboard.Score;
 
 final class CraftObjective extends CraftScoreboardComponent implements Objective {
+
     private final ScoreboardObjective objective;
     private final CraftCriteria criteria;
 
@@ -25,86 +25,92 @@ final class CraftObjective extends CraftScoreboardComponent implements Objective
         return objective;
     }
 
+    @Override
     public String getName() throws IllegalStateException {
         CraftScoreboard scoreboard = checkState();
-
         return objective.getName();
     }
 
+    @Override
     public String getDisplayName() throws IllegalStateException {
         CraftScoreboard scoreboard = checkState();
-
         return objective.getDisplayName();
     }
 
+    @Override
     public void setDisplayName(String displayName) throws IllegalStateException, IllegalArgumentException {
         Validate.notNull(displayName, "Display name cannot be null");
         Validate.isTrue(displayName.length() <= 32, "Display name '" + displayName + "' is longer than the limit of 32 characters");
         CraftScoreboard scoreboard = checkState();
-
         objective.setDisplayName(displayName);
     }
 
+    @Override
     public String getCriteria() throws IllegalStateException {
         CraftScoreboard scoreboard = checkState();
-
         return criteria.bukkitName;
     }
 
+    @Override
     public boolean isModifiable() throws IllegalStateException {
         CraftScoreboard scoreboard = checkState();
-
         return !criteria.criteria.isReadOnly();
     }
 
-    public void setDisplaySlot(DisplaySlot slot) throws IllegalStateException {
+    @Override
+    public DisplaySlot getDisplaySlot() throws IllegalStateException {
         CraftScoreboard scoreboard = checkState();
         Scoreboard board = scoreboard.board;
         ScoreboardObjective objective = this.objective;
 
         for (int i = 0; i < CraftScoreboardTranslations.MAX_DISPLAY_SLOT; i++) {
             if (board.getObjectiveForSlot(i) == objective) {
-                board.setDisplaySlot(i, null);
+                return CraftScoreboardTranslations.toBukkitSlot(i);
             }
         }
-        if (slot != null) {
-            int slotNumber = CraftScoreboardTranslations.fromBukkitSlot(slot);
-            board.setDisplaySlot(slotNumber, getHandle());
-        }
+
+        return null;
     }
 
-    public DisplaySlot getDisplaySlot() throws IllegalStateException {
+    @Override
+    public void setDisplaySlot(DisplaySlot slot) throws IllegalStateException {
         CraftScoreboard scoreboard = checkState();
         Scoreboard board = scoreboard.board;
         ScoreboardObjective objective = this.objective;
 
         for (int i = 0; i < CraftScoreboardTranslations.MAX_DISPLAY_SLOT; i++) {
             if (board.getObjectiveForSlot(i) == objective) {
-                return CraftScoreboardTranslations.toBukkitSlot(i);
+                board.setDisplaySlot(i, null);
             }
         }
-        return null;
+
+        if (slot != null) {
+            int slotNumber = CraftScoreboardTranslations.fromBukkitSlot(slot);
+            board.setDisplaySlot(slotNumber, getHandle());
+        }
     }
 
+    @Override
     public Score getScore(OfflinePlayer player) throws IllegalArgumentException, IllegalStateException {
         Validate.notNull(player, "Player cannot be null");
         CraftScoreboard scoreboard = checkState();
-
         return new CraftScore(this, player.getName());
     }
 
+    @Override
     public Score getScore(String entry) throws IllegalArgumentException, IllegalStateException {
         Validate.notNull(entry, "Entry cannot be null");
-        if (entry.length() > 16) throw new IllegalArgumentException("Entry cannot be longer than 16 characters!"); // Spigot
-        CraftScoreboard scoreboard = checkState();
+        if (entry.length() > 16) {
+            throw new IllegalArgumentException("Entry cannot be longer than 16 characters!"); // Spigot
+        }
 
+        CraftScoreboard scoreboard = checkState();
         return new CraftScore(this, entry);
     }
 
     @Override
     public void unregister() throws IllegalStateException {
         CraftScoreboard scoreboard = checkState();
-
         scoreboard.objectives.remove(this.getName());
         scoreboard.board.unregisterObjective(objective);
         setUnregistered();
diff --git a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScore.java b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScore.java
index b265616..7caabcc 100644
--- a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScore.java
+++ b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScore.java
@@ -1,15 +1,14 @@
 package org.bukkit.craftbukkit.scoreboard;
 
-import java.util.Map;
-
 import net.minecraft.server.Scoreboard;
 import net.minecraft.server.ScoreboardScore;
-
 import org.bukkit.Bukkit;
 import org.bukkit.OfflinePlayer;
 import org.bukkit.scoreboard.Objective;
 import org.bukkit.scoreboard.Score;
 
+import java.util.Map;
+
 /**
  * TL;DR: This class is special and lazily grabs a handle...
  * ...because a handle is a full fledged (I think permanent) hashMap for the associated name.
@@ -17,6 +16,7 @@ import org.bukkit.scoreboard.Score;
  * Also, as an added perk, a CraftScore will (intentionally) stay a valid reference so long as objective is valid.
  */
 final class CraftScore implements Score {
+
     private final String entry;
     private final CraftObjective objective;
 
@@ -25,21 +25,24 @@ final class CraftScore implements Score {
         this.entry = entry;
     }
 
+    @Override
     public OfflinePlayer getPlayer() {
         return Bukkit.getOfflinePlayer(entry);
     }
 
+    @Override
     public String getEntry() {
         return entry;
     }
 
+    @Override
     public Objective getObjective() {
         return objective;
     }
 
+    @Override
     public int getScore() throws IllegalStateException {
         Scoreboard board = objective.checkState().board;
-
         if (board.getPlayers().contains(entry)) { // Lazy
             Map<net.minecraft.server.ScoreboardObjective, ScoreboardScore> scores = board.getPlayerObjectives(entry); // Spigot
             ScoreboardScore score = scores.get(objective.getHandle());
@@ -51,19 +54,20 @@ final class CraftScore implements Score {
         return 0; // Lazy
     }
 
+    @Override
     public void setScore(int score) throws IllegalStateException {
         objective.checkState().board.getPlayerScoreForObjective(entry, objective.getHandle()).setScore(score);
     }
 
     // Spigot start
-    @Override    
+    @Override
     public boolean isScoreSet() throws IllegalStateException {
         Scoreboard board = objective.checkState().board;
-
         return board.getPlayers().contains(entry) && board.getPlayerObjectives(entry).containsKey(objective.getHandle());
     }
     // Spigot end
 
+    @Override
     public CraftScoreboard getScoreboard() {
         return objective.getScoreboard();
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboard.java b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboard.java
index ad65b3f..08a4f55 100644
--- a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboard.java
+++ b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboard.java
@@ -1,12 +1,9 @@
 package org.bukkit.craftbukkit.scoreboard;
 
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.Map;
+import com.google.common.collect.ImmutableSet;
 import net.minecraft.server.Scoreboard;
 import net.minecraft.server.ScoreboardObjective;
 import net.minecraft.server.ScoreboardTeam;
-
 import org.apache.commons.lang.Validate;
 import org.bukkit.Bukkit;
 import org.bukkit.OfflinePlayer;
@@ -15,9 +12,12 @@ import org.bukkit.scoreboard.Objective;
 import org.bukkit.scoreboard.Score;
 import org.bukkit.scoreboard.Team;
 
-import com.google.common.collect.ImmutableSet;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.Map;
 
 public final class CraftScoreboard implements org.bukkit.scoreboard.Scoreboard {
+
     final Scoreboard board;
     final Map<String, CraftObjective> objectives = new HashMap<String, CraftObjective>();
     final Map<String, CraftTeam> teams = new HashMap<String, CraftTeam>();
@@ -28,11 +28,13 @@ public final class CraftScoreboard implements org.bukkit.scoreboard.Scoreboard {
         for (ScoreboardObjective objective : (Iterable<ScoreboardObjective>) board.getObjectives()) {
             new CraftObjective(this, objective); // It adds itself to map
         }
+
         for (ScoreboardTeam team : (Iterable<ScoreboardTeam>) board.getTeams()) {
             new CraftTeam(this, team); // It adds itself to map
         }
     }
 
+    @Override
     public CraftObjective registerNewObjective(String name, String criteria) throws IllegalArgumentException {
         Validate.notNull(name, "Objective name cannot be null");
         Validate.notNull(criteria, "Criteria cannot be null");
@@ -44,109 +46,122 @@ public final class CraftScoreboard implements org.bukkit.scoreboard.Scoreboard {
         return new CraftObjective(this, objective);
     }
 
+    @Override
     public Objective getObjective(String name) throws IllegalArgumentException {
         Validate.notNull(name, "Name cannot be null");
         return objectives.get(name);
     }
 
+    @Override
     public ImmutableSet<Objective> getObjectivesByCriteria(String criteria) throws IllegalArgumentException {
         Validate.notNull(criteria, "Criteria cannot be null");
-
         ImmutableSet.Builder<Objective> objectives = ImmutableSet.builder();
         for (CraftObjective objective : this.objectives.values()) {
             if (objective.getCriteria().equals(criteria)) {
                 objectives.add(objective);
             }
         }
+
         return objectives.build();
     }
 
+    @Override
     public ImmutableSet<Objective> getObjectives() {
         return ImmutableSet.copyOf((Collection<? extends Objective>) objectives.values());
     }
 
+    @Override
     public Objective getObjective(DisplaySlot slot) throws IllegalArgumentException {
         Validate.notNull(slot, "Display slot cannot be null");
         ScoreboardObjective objective = board.getObjectiveForSlot(CraftScoreboardTranslations.fromBukkitSlot(slot));
         if (objective == null) {
             return null;
         }
+
         return this.objectives.get(objective.getName());
     }
 
+    @Override
     public ImmutableSet<Score> getScores(OfflinePlayer player) throws IllegalArgumentException {
         Validate.notNull(player, "OfflinePlayer cannot be null");
-
         ImmutableSet.Builder<Score> scores = ImmutableSet.builder();
         for (CraftObjective objective : objectives.values()) {
             scores.add(objective.getScore(player));
         }
+
         return scores.build();
     }
 
+    @Override
     public ImmutableSet<Score> getScores(String entry) throws IllegalArgumentException {
         Validate.notNull(entry, "Entry cannot be null");
-
         ImmutableSet.Builder<Score> scores = ImmutableSet.builder();
         for (CraftObjective objective : objectives.values()) {
             scores.add(objective.getScore(entry));
         }
+
         return scores.build();
     }
 
+    @Override
     public void resetScores(OfflinePlayer player) throws IllegalArgumentException {
         Validate.notNull(player, "OfflinePlayer cannot be null");
-
         board.resetPlayerScores(player.getName());
     }
 
+    @Override
     public void resetScores(String entry) throws IllegalArgumentException {
         Validate.notNull(entry, "Entry cannot be null");
-
         board.resetPlayerScores(entry);
     }
 
+    @Override
     public Team getPlayerTeam(OfflinePlayer player) throws IllegalArgumentException {
         Validate.notNull(player, "OfflinePlayer cannot be null");
-
         ScoreboardTeam team = board.getPlayerTeam(player.getName());
         return team == null ? null : teams.get(team.getName());
     }
 
+    @Override
     public Team getTeam(String teamName) throws IllegalArgumentException {
         Validate.notNull(teamName, "Team name cannot be null");
-
         return teams.get(teamName);
     }
 
+    @Override
     public ImmutableSet<Team> getTeams() {
         return ImmutableSet.copyOf((Collection<? extends Team>) teams.values());
     }
 
+    @Override
     public Team registerNewTeam(String name) throws IllegalArgumentException {
         Validate.notNull(name, "Team name cannot be null");
         Validate.isTrue(name.length() <= 16, "Team name '" + name + "' is longer than the limit of 16 characters");
         Validate.isTrue(board.getTeam(name) == null, "Team name '" + name + "' is already in use");
-
         return new CraftTeam(this, board.createTeam(name));
     }
 
+    @Override
     public ImmutableSet<OfflinePlayer> getPlayers() {
         ImmutableSet.Builder<OfflinePlayer> players = ImmutableSet.builder();
         for (Object playerName : board.getPlayers()) {
             players.add(Bukkit.getOfflinePlayer(playerName.toString()));
         }
+
         return players.build();
     }
 
+    @Override
     public ImmutableSet<String> getEntries() {
         ImmutableSet.Builder<String> entries = ImmutableSet.builder();
         for (Object entry : board.getPlayers()) {
             entries.add(entry.toString());
         }
+
         return entries.build();
     }
 
+    @Override
     public void clearSlot(DisplaySlot slot) throws IllegalArgumentException {
         Validate.notNull(slot, "Slot cannot be null");
         board.setDisplaySlot(CraftScoreboardTranslations.fromBukkitSlot(slot), null);
diff --git a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboardComponent.java b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboardComponent.java
index 3855a2b..4b1fb2e 100644
--- a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboardComponent.java
+++ b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboardComponent.java
@@ -12,6 +12,7 @@ abstract class CraftScoreboardComponent {
         if (scoreboard == null) {
             throw new IllegalStateException("Unregistered scoreboard component");
         }
+
         return scoreboard;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboardManager.java b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboardManager.java
index 295aed2..6258e82 100644
--- a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboardManager.java
+++ b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboardManager.java
@@ -1,13 +1,5 @@
 package org.bukkit.craftbukkit.scoreboard;
 
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-
 import net.minecraft.server.EntityPlayer;
 import net.minecraft.server.IScoreboardCriteria;
 import net.minecraft.server.MinecraftServer;
@@ -18,14 +10,23 @@ import net.minecraft.server.ScoreboardObjective;
 import net.minecraft.server.ScoreboardScore;
 import net.minecraft.server.ScoreboardServer;
 import net.minecraft.server.ScoreboardTeam;
-
 import org.apache.commons.lang.Validate;
 import org.bukkit.craftbukkit.entity.CraftPlayer;
 import org.bukkit.craftbukkit.util.WeakCollection;
 import org.bukkit.entity.Player;
+import org.bukkit.scoreboard.Score;
 import org.bukkit.scoreboard.ScoreboardManager;
 
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+
 public final class CraftScoreboardManager implements ScoreboardManager {
+
     private final CraftScoreboard mainScoreboard;
     private final MinecraftServer server;
     private final Collection<CraftScoreboard> scoreboards = new WeakCollection<CraftScoreboard>();
@@ -37,12 +38,14 @@ public final class CraftScoreboardManager implements ScoreboardManager {
         scoreboards.add(mainScoreboard);
     }
 
+    @Override
     public CraftScoreboard getMainScoreboard() {
         return mainScoreboard;
     }
 
+    @Override
     public CraftScoreboard getNewScoreboard() {
-        org.spigotmc.AsyncCatcher.catchOp( "scoreboard creation"); // Spigot
+        org.spigotmc.AsyncCatcher.catchOp("scoreboard creation"); // Spigot
         CraftScoreboard scoreboard = new CraftScoreboard(new ScoreboardServer(server));
         scoreboards.add(scoreboard);
         return scoreboard;
@@ -51,12 +54,15 @@ public final class CraftScoreboardManager implements ScoreboardManager {
     // CraftBukkit method
     public CraftScoreboard getPlayerBoard(CraftPlayer player) {
         CraftScoreboard board = playerBoards.get(player);
-        return (CraftScoreboard) (board == null ? getMainScoreboard() : board);
+        return board == null ? getMainScoreboard() : board;
     }
 
     // CraftBukkit method
     public void setPlayerBoard(CraftPlayer player, org.bukkit.scoreboard.Scoreboard bukkitScoreboard) throws IllegalArgumentException {
         Validate.isTrue(bukkitScoreboard instanceof CraftScoreboard, "Cannot set player scoreboard to an unregistered Scoreboard");
+        if (!(bukkitScoreboard instanceof CraftScoreboard)) {
+            throw new IllegalArgumentException("Bukkit scoreboard is not a CraftScoreboard");
+        }
 
         CraftScoreboard scoreboard = (CraftScoreboard) bukkitScoreboard;
         net.minecraft.server.Scoreboard oldboard = getPlayerBoard(player).getHandle();
@@ -70,7 +76,7 @@ public final class CraftScoreboardManager implements ScoreboardManager {
         if (scoreboard == mainScoreboard) {
             playerBoards.remove(player);
         } else {
-            playerBoards.put(player, (CraftScoreboard) scoreboard);
+            playerBoards.put(player, scoreboard);
         }
 
         // Old objective tracking
@@ -84,10 +90,11 @@ public final class CraftScoreboardManager implements ScoreboardManager {
         }
 
         // Old team tracking
-        Iterator<?> iterator = oldboard.getTeams().iterator();
-        while (iterator.hasNext()) {
-            ScoreboardTeam scoreboardteam = (ScoreboardTeam) iterator.next();
-            entityplayer.playerConnection.sendPacket(new PacketPlayOutScoreboardTeam(scoreboardteam, 1));
+        for (Object object : oldboard.getTeams()) {
+            if (object instanceof ScoreboardTeam) {
+                ScoreboardTeam scoreboardTeam = (ScoreboardTeam) object;
+                entityplayer.playerConnection.sendPacket(new PacketPlayOutScoreboardTeam(scoreboardTeam, 1));
+            }
         }
 
         // The above is the reverse of the below method.
@@ -96,7 +103,7 @@ public final class CraftScoreboardManager implements ScoreboardManager {
 
     // CraftBukkit method
     public void removePlayer(Player player) {
-        playerBoards.remove(player);
+        playerBoards.remove((CraftPlayer) player);
     }
 
     // CraftBukkit method
@@ -107,6 +114,7 @@ public final class CraftScoreboardManager implements ScoreboardManager {
                 collection.add(board.getPlayerScoreForObjective(name, objective));
             }
         }
+
         return collection;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboardTranslations.java b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboardTranslations.java
index d08e5a2..c8fd6ce 100644
--- a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboardTranslations.java
+++ b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboardTranslations.java
@@ -1,19 +1,19 @@
 package org.bukkit.craftbukkit.scoreboard;
 
+import com.google.common.collect.ImmutableBiMap;
 import net.minecraft.server.Scoreboard;
-
 import org.bukkit.scoreboard.DisplaySlot;
 
-import com.google.common.collect.ImmutableBiMap;
-
 class CraftScoreboardTranslations {
+
     static final int MAX_DISPLAY_SLOT = 3;
     static ImmutableBiMap<DisplaySlot, String> SLOTS = ImmutableBiMap.of(
             DisplaySlot.BELOW_NAME, "belowName",
             DisplaySlot.PLAYER_LIST, "list",
             DisplaySlot.SIDEBAR, "sidebar");
 
-    private CraftScoreboardTranslations() {}
+    private CraftScoreboardTranslations() {
+    }
 
     static DisplaySlot toBukkitSlot(int i) {
         return SLOTS.inverse().get(Scoreboard.getSlotName(i));
@@ -22,5 +22,4 @@ class CraftScoreboardTranslations {
     static int fromBukkitSlot(DisplaySlot slot) {
         return Scoreboard.getSlotForName(SLOTS.get(slot));
     }
-
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftTeam.java b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftTeam.java
index a1864a5..76863b9 100644
--- a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftTeam.java
+++ b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftTeam.java
@@ -1,17 +1,16 @@
 package org.bukkit.craftbukkit.scoreboard;
 
-import java.util.Set;
-
+import com.google.common.collect.ImmutableSet;
+import net.minecraft.server.ScoreboardTeam;
 import org.apache.commons.lang.Validate;
 import org.bukkit.Bukkit;
 import org.bukkit.OfflinePlayer;
 import org.bukkit.scoreboard.Team;
 
-import com.google.common.collect.ImmutableSet;
-
-import net.minecraft.server.ScoreboardTeam;
+import java.util.Set;
 
 final class CraftTeam extends CraftScoreboardComponent implements Team {
+
     private final ScoreboardTeam team;
 
     CraftTeam(CraftScoreboard scoreboard, ScoreboardTeam team) {
@@ -20,78 +19,80 @@ final class CraftTeam extends CraftScoreboardComponent implements Team {
         scoreboard.teams.put(team.getName(), this);
     }
 
+    @Override
     public String getName() throws IllegalStateException {
         CraftScoreboard scoreboard = checkState();
-
         return team.getName();
     }
 
+    @Override
     public String getDisplayName() throws IllegalStateException {
         CraftScoreboard scoreboard = checkState();
-
         return team.getDisplayName();
     }
 
+    @Override
     public void setDisplayName(String displayName) throws IllegalStateException {
         Validate.notNull(displayName, "Display name cannot be null");
         Validate.isTrue(displayName.length() <= 32, "Display name '" + displayName + "' is longer than the limit of 32 characters");
         CraftScoreboard scoreboard = checkState();
-
         team.setDisplayName(displayName);
     }
 
+    @Override
     public String getPrefix() throws IllegalStateException {
         CraftScoreboard scoreboard = checkState();
-
         return team.getPrefix();
     }
 
+    @Override
     public void setPrefix(String prefix) throws IllegalStateException, IllegalArgumentException {
         Validate.notNull(prefix, "Prefix cannot be null");
         Validate.isTrue(prefix.length() <= 32, "Prefix '" + prefix + "' is longer than the limit of 32 characters");
         CraftScoreboard scoreboard = checkState();
-
         team.setPrefix(prefix);
     }
 
+    @Override
     public String getSuffix() throws IllegalStateException {
         CraftScoreboard scoreboard = checkState();
-
         return team.getSuffix();
     }
 
+    @Override
+
     public void setSuffix(String suffix) throws IllegalStateException, IllegalArgumentException {
         Validate.notNull(suffix, "Suffix cannot be null");
         Validate.isTrue(suffix.length() <= 32, "Suffix '" + suffix + "' is longer than the limit of 32 characters");
         CraftScoreboard scoreboard = checkState();
-
         team.setSuffix(suffix);
     }
 
+    @Override
     public boolean allowFriendlyFire() throws IllegalStateException {
         CraftScoreboard scoreboard = checkState();
-
         return team.allowFriendlyFire();
     }
 
+    @Override
     public void setAllowFriendlyFire(boolean enabled) throws IllegalStateException {
         CraftScoreboard scoreboard = checkState();
-
         team.setAllowFriendlyFire(enabled);
     }
 
+    @Override
     public boolean canSeeFriendlyInvisibles() throws IllegalStateException {
         CraftScoreboard scoreboard = checkState();
-
         return team.canSeeFriendlyInvisibles();
     }
 
+    @Override
     public void setCanSeeFriendlyInvisibles(boolean enabled) throws IllegalStateException {
         CraftScoreboard scoreboard = checkState();
-
         team.setCanSeeFriendlyInvisibles(enabled);
     }
 
+    @Override
     public Set<OfflinePlayer> getPlayers() throws IllegalStateException {
         CraftScoreboard scoreboard = checkState();
 
@@ -99,6 +100,7 @@ final class CraftTeam extends CraftScoreboardComponent implements Team {
         for (Object o : team.getPlayerNameSet()) {
             players.add(Bukkit.getOfflinePlayer(o.toString()));
         }
+
         return players.build();
     }
 
@@ -106,27 +108,31 @@ final class CraftTeam extends CraftScoreboardComponent implements Team {
     @Override
     public Set<String> getEntries() throws IllegalStateException {
         CraftScoreboard scoreboard = checkState();
-        
+
         ImmutableSet.Builder<String> entries = ImmutableSet.builder();
-        for (Object o : team.getPlayerNameSet()){
+        for (Object o : team.getPlayerNameSet()) {
             entries.add(o.toString());
         }
+
         return entries.build();
     }
-    // Spigot end
 
+    // Spigot end
+    @Override
     public int getSize() throws IllegalStateException {
         CraftScoreboard scoreboard = checkState();
 
         return team.getPlayerNameSet().size();
     }
 
+    @Override
     public void addPlayer(OfflinePlayer player) throws IllegalStateException, IllegalArgumentException {
         Validate.notNull(player, "OfflinePlayer cannot be null");
         // Spigot Start
         addEntry(player.getName());
     }
-    
+
+    @Override
     public void addEntry(String entry) throws IllegalStateException, IllegalArgumentException {
         Validate.notNull(entry, "Entry cannot be null");
         CraftScoreboard scoreboard = checkState();
@@ -135,12 +141,14 @@ final class CraftTeam extends CraftScoreboardComponent implements Team {
         // Spigot end
     }
 
+    @Override
     public boolean removePlayer(OfflinePlayer player) throws IllegalStateException, IllegalArgumentException {
         Validate.notNull(player, "OfflinePlayer cannot be null");
         // Spigot start
         return removeEntry(player.getName());
     }
-    
+
+    @Override
     public boolean removeEntry(String entry) throws IllegalStateException, IllegalArgumentException {
         Validate.notNull(entry, "Entry cannot be null");
         CraftScoreboard scoreboard = checkState();
@@ -154,12 +162,14 @@ final class CraftTeam extends CraftScoreboardComponent implements Team {
         return true;
     }
 
+    @Override
     public boolean hasPlayer(OfflinePlayer player) throws IllegalArgumentException, IllegalStateException {
         Validate.notNull(player, "OfflinePlayer cannot be null");
         // Spigot start
         return hasEntry(player.getName());
     }
 
+    @Override
     public boolean hasEntry(String entry) throws IllegalArgumentException, IllegalStateException {
         Validate.notNull("Entry cannot be null");
 
diff --git a/src/main/java/org/bukkit/craftbukkit/updater/ArtifactDetails.java b/src/main/java/org/bukkit/craftbukkit/updater/ArtifactDetails.java
index a9c5eaf..45a4036 100644
--- a/src/main/java/org/bukkit/craftbukkit/updater/ArtifactDetails.java
+++ b/src/main/java/org/bukkit/craftbukkit/updater/ArtifactDetails.java
@@ -3,6 +3,7 @@ package org.bukkit.craftbukkit.updater;
 import java.util.Date;
 
 public class ArtifactDetails {
+
     private String brokenReason;
     private boolean isBroken;
     private int buildNumber;
@@ -85,6 +86,7 @@ public class ArtifactDetails {
     }
 
     public static class FileDetails {
+
         private String url;
 
         public String getUrl() {
@@ -97,6 +99,7 @@ public class ArtifactDetails {
     }
 
     public static class ChannelDetails {
+
         private String name;
         private String slug;
         private int priority;
diff --git a/src/main/java/org/bukkit/craftbukkit/updater/AutoUpdater.java b/src/main/java/org/bukkit/craftbukkit/updater/AutoUpdater.java
index f21301c..2b1ac17 100644
--- a/src/main/java/org/bukkit/craftbukkit/updater/AutoUpdater.java
+++ b/src/main/java/org/bukkit/craftbukkit/updater/AutoUpdater.java
@@ -5,6 +5,7 @@ import java.util.List;
 import java.util.logging.Logger;
 
 public class AutoUpdater {
+
     public static final String WARN_CONSOLE = "warn-console";
     public static final String WARN_OPERATORS = "warn-ops";
 
@@ -53,11 +54,7 @@ public class AutoUpdater {
     }
 
     public boolean isUpdateAvailable() {
-        if ((latest == null) || (current == null) || (!isEnabled())) {
-            return false;
-        } else {
-            return latest.getCreated().after(current.getCreated());
-        }
+        return !((latest == null) || (current == null) || (!isEnabled())) && latest.getCreated().after(current.getCreated());
     }
 
     public ArtifactDetails getCurrent() {
diff --git a/src/main/java/org/bukkit/craftbukkit/updater/BukkitDLUpdaterService.java b/src/main/java/org/bukkit/craftbukkit/updater/BukkitDLUpdaterService.java
index 0145ac3..af01262 100644
--- a/src/main/java/org/bukkit/craftbukkit/updater/BukkitDLUpdaterService.java
+++ b/src/main/java/org/bukkit/craftbukkit/updater/BukkitDLUpdaterService.java
@@ -1,6 +1,14 @@
 package org.bukkit.craftbukkit.updater;
 
-import com.google.gson.*;
+import com.google.gson.FieldNamingPolicy;
+import com.google.gson.Gson;
+import com.google.gson.GsonBuilder;
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonDeserializer;
+import com.google.gson.JsonElement;
+import com.google.gson.JsonParseException;
+import org.bukkit.Bukkit;
+
 import java.io.IOException;
 import java.io.InputStreamReader;
 import java.io.UnsupportedEncodingException;
@@ -11,9 +19,6 @@ import java.text.ParseException;
 import java.text.SimpleDateFormat;
 import java.util.Date;
 import java.util.logging.Level;
-import java.util.logging.Logger;
-
-import org.bukkit.Bukkit;
 
 public class BukkitDLUpdaterService {
     private static final String API_PREFIX_ARTIFACT = "/api/1.0/downloads/projects/craftbukkit/view/";
@@ -38,7 +43,7 @@ public class BukkitDLUpdaterService {
     }
 
     private String getUserAgent() {
-         return "CraftBukkit/" + BukkitDLUpdaterService.class.getPackage().getImplementationVersion() + "/" + System.getProperty("java.version");
+        return "CraftBukkit/" + BukkitDLUpdaterService.class.getPackage().getImplementationVersion() + "/" + System.getProperty("java.version");
     }
 
     public ArtifactDetails fetchArtifact(String slug) throws IOException {
diff --git a/src/main/java/org/bukkit/craftbukkit/util/AsynchronousExecutor.java b/src/main/java/org/bukkit/craftbukkit/util/AsynchronousExecutor.java
index 81bb0d1..dd5a3e3 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/AsynchronousExecutor.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/AsynchronousExecutor.java
@@ -1,5 +1,7 @@
 package org.bukkit.craftbukkit.util;
 
+import org.apache.commons.lang.Validate;
+
 import java.util.HashMap;
 import java.util.LinkedList;
 import java.util.List;
@@ -12,8 +14,6 @@ import java.util.concurrent.ThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
 
-import org.apache.commons.lang.Validate;
-
 /**
  * Executes tasks using a multi-stage process executor. Synchronous executions are via {@link AsynchronousExecutor#finishActive()} or the {@link AsynchronousExecutor#get(Object)} methods.
  * <li \> Stage 1 creates the object from a parameter, and is usually called asynchronously.
@@ -28,7 +28,162 @@ import org.apache.commons.lang.Validate;
  */
 public final class AsynchronousExecutor<P, T, C, E extends Throwable> {
 
-    public static interface CallBackProvider<P, T, C, E extends Throwable> extends ThreadFactory {
+    @SuppressWarnings("rawtypes")
+    static final AtomicIntegerFieldUpdater STATE_FIELD = AtomicIntegerFieldUpdater.newUpdater(AsynchronousExecutor.Task.class, "state");
+    final CallBackProvider<P, T, C, E> provider;
+    final Queue<Task> finished = new ConcurrentLinkedQueue<Task>();
+    final Map<P, Task> tasks = new HashMap<P, Task>();
+    final ThreadPoolExecutor pool;
+    /**
+     * Uses a thread pool to pass executions to the provider.
+     *
+     * @see AsynchronousExecutor
+     */
+    public AsynchronousExecutor(final CallBackProvider<P, T, C, E> provider, final int coreSize) {
+        Validate.notNull(provider, "Provider cannot be null");
+        this.provider = provider;
+
+        // We have an unbound queue size so do not need a max thread size
+        pool = new ThreadPoolExecutor(coreSize, Integer.MAX_VALUE, 60l, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>(), provider);
+    }
+
+    @SuppressWarnings({"unchecked", "rawtypes"})
+    private static boolean set(AsynchronousExecutor.Task $this, int expected, int value) {
+        return STATE_FIELD.compareAndSet($this, expected, value);
+    }
+
+    /**
+     * Adds a callback to the parameter provided, adding parameter to the queue if needed.
+     * <p>
+     * This should always be synchronous.
+     */
+    public void add(P parameter, C callback) {
+        Task task = tasks.get(parameter);
+        if (task == null) {
+            tasks.put(parameter, task = new Task(parameter));
+            pool.execute(task);
+        }
+
+        task.callbacks.add(callback);
+    }
+
+    /**
+     * This removes a particular callback from the specified parameter.
+     * <p>
+     * If no callbacks remain for a given parameter, then the {@link CallBackProvider CallBackProvider's} stages may be omitted from execution.
+     * Stage 3 will have no callbacks, stage 2 will be skipped unless a {@link #get(Object)} is used, and stage 1 will be avoided on a best-effort basis.
+     * <p>
+     * Subsequent calls to {@link #getSkipQueue(Object)} will always work.
+     * <p>
+     * Subsequent calls to {@link #get(Object)} might work.
+     * <p>
+     * This should always be synchronous
+     *
+     * @return true if no further execution for the parameter is possible, such that, no exceptions will be thrown in {@link #finishActive()} for the parameter, and {@link #get(Object)} will throw an {@link IllegalStateException}, false otherwise
+     * @throws IllegalStateException if parameter is not in the queue anymore
+     * @throws IllegalStateException if the callback was not specified for given parameter
+     */
+    public boolean drop(P parameter, C callback) throws IllegalStateException {
+        final Task task = tasks.get(parameter);
+        if (task == null) {
+            throw new IllegalStateException("Unknown " + parameter);
+        }
+
+        if (!task.callbacks.remove(callback)) {
+            throw new IllegalStateException("Unknown " + callback + " for " + parameter);
+        }
+
+        if (task.callbacks.isEmpty()) {
+            return task.drop();
+        }
+
+        return false;
+    }
+
+    /**
+     * This method attempts to skip the waiting period for said parameter.
+     * <p>
+     * This should always be synchronous.
+     *
+     * @throws IllegalStateException if the parameter is not in the queue anymore, or sometimes if called from asynchronous thread
+     */
+    public T get(P parameter) throws E, IllegalStateException {
+        final Task task = tasks.get(parameter);
+        if (task == null) {
+            throw new IllegalStateException("Unknown " + parameter);
+        }
+
+        return task.get();
+    }
+
+    /**
+     * Processes a parameter as if it was in the queue, without ever passing to another thread.
+     */
+    public T getSkipQueue(P parameter) throws E {
+        return skipQueue(parameter);
+    }
+
+    /**
+     * Processes a parameter as if it was in the queue, without ever passing to another thread.
+     */
+    public T getSkipQueue(P parameter, C callback) throws E {
+        final T object = skipQueue(parameter);
+        provider.callStage3(parameter, object, callback);
+        return object;
+    }
+
+    /**
+     * Processes a parameter as if it was in the queue, without ever passing to another thread.
+     */
+    public T getSkipQueue(P parameter, C... callbacks) throws E {
+        final CallBackProvider<P, T, C, E> provider = this.provider;
+        final T object = skipQueue(parameter);
+        for (C callback : callbacks) {
+            provider.callStage3(parameter, object, callback);
+        }
+
+        return object;
+    }
+
+    /**
+     * Processes a parameter as if it was in the queue, without ever passing to another thread.
+     */
+    public T getSkipQueue(P parameter, Iterable<C> callbacks) throws E {
+        final CallBackProvider<P, T, C, E> provider = this.provider;
+        final T object = skipQueue(parameter);
+        for (C callback : callbacks) {
+            provider.callStage3(parameter, object, callback);
+        }
+
+        return object;
+    }
+
+    private T skipQueue(P parameter) throws E {
+        Task task = tasks.get(parameter);
+        if (task != null) {
+            return task.get();
+        }
+
+        T object = provider.callStage1(parameter);
+        provider.callStage2(parameter, object);
+        return object;
+    }
+
+    /**
+     * This is the 'heartbeat' that should be called synchronously to finish any pending tasks
+     */
+    public void finishActive() throws E {
+        final Queue<Task> finished = this.finished;
+        while (!finished.isEmpty()) {
+            finished.poll().finish();
+        }
+    }
+
+    public void setActiveThreads(final int coreSize) {
+        pool.setCorePoolSize(coreSize);
+    }
+
+    public interface CallBackProvider<P, T, C, E extends Throwable> extends ThreadFactory {
 
         /**
          * Normally an asynchronous call, but can be synchronous
@@ -56,31 +211,24 @@ public final class AsynchronousExecutor<P, T, C, E extends Throwable> {
         void callStage3(P parameter, T object, C callback) throws E;
     }
 
-    @SuppressWarnings("rawtypes")
-    static final AtomicIntegerFieldUpdater STATE_FIELD = AtomicIntegerFieldUpdater.newUpdater(AsynchronousExecutor.Task.class, "state");
-
-    @SuppressWarnings({ "unchecked", "rawtypes" })
-    private static boolean set(AsynchronousExecutor.Task $this, int expected, int value) {
-        return STATE_FIELD.compareAndSet($this, expected, value);
-    }
-
     class Task implements Runnable {
+
         static final int PENDING = 0x0;
         static final int STAGE_1_ASYNC = PENDING + 1;
         static final int STAGE_1_SYNC = STAGE_1_ASYNC + 1;
         static final int STAGE_1_COMPLETE = STAGE_1_SYNC + 1;
         static final int FINISHED = STAGE_1_COMPLETE + 1;
-
-        volatile int state = PENDING;
         final P parameter;
-        T object;
         final List<C> callbacks = new LinkedList<C>();
+        volatile int state = PENDING;
+        T object;
         E t = null;
 
         Task(final P parameter) {
             this.parameter = parameter;
         }
 
+        @Override
         public void run() {
             if (initAsync()) {
                 finished.add(this);
@@ -161,6 +309,7 @@ public final class AsynchronousExecutor<P, T, C, E extends Throwable> {
                 // See get method below
                 callbacks.add((C) this);
             }
+
             finish();
             return object;
         }
@@ -213,142 +362,4 @@ public final class AsynchronousExecutor<P, T, C, E extends Throwable> {
             }
         }
     }
-
-    final CallBackProvider<P, T, C, E> provider;
-    final Queue<Task> finished = new ConcurrentLinkedQueue<Task>();
-    final Map<P, Task> tasks = new HashMap<P, Task>();
-    final ThreadPoolExecutor pool;
-
-    /**
-     * Uses a thread pool to pass executions to the provider.
-     * @see AsynchronousExecutor
-     */
-    public AsynchronousExecutor(final CallBackProvider<P, T, C, E> provider, final int coreSize) {
-        Validate.notNull(provider, "Provider cannot be null");
-        this.provider = provider;
-
-        // We have an unbound queue size so do not need a max thread size
-        pool = new ThreadPoolExecutor(coreSize, Integer.MAX_VALUE, 60l, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>(), provider);
-    }
-
-    /**
-     * Adds a callback to the parameter provided, adding parameter to the queue if needed.
-     * <p>
-     * This should always be synchronous.
-     */
-    public void add(P parameter, C callback) {
-        Task task = tasks.get(parameter);
-        if (task == null) {
-            tasks.put(parameter, task = new Task(parameter));
-            pool.execute(task);
-        }
-        task.callbacks.add(callback);
-    }
-
-    /**
-     * This removes a particular callback from the specified parameter.
-     * <p>
-     * If no callbacks remain for a given parameter, then the {@link CallBackProvider CallBackProvider's} stages may be omitted from execution.
-     * Stage 3 will have no callbacks, stage 2 will be skipped unless a {@link #get(Object)} is used, and stage 1 will be avoided on a best-effort basis.
-     * <p>
-     * Subsequent calls to {@link #getSkipQueue(Object)} will always work.
-     * <p>
-     * Subsequent calls to {@link #get(Object)} might work.
-     * <p>
-     * This should always be synchronous
-     * @return true if no further execution for the parameter is possible, such that, no exceptions will be thrown in {@link #finishActive()} for the parameter, and {@link #get(Object)} will throw an {@link IllegalStateException}, false otherwise
-     * @throws IllegalStateException if parameter is not in the queue anymore
-     * @throws IllegalStateException if the callback was not specified for given parameter
-     */
-    public boolean drop(P parameter, C callback) throws IllegalStateException {
-        final Task task = tasks.get(parameter);
-        if (task == null) {
-            throw new IllegalStateException("Unknown " + parameter);
-        }
-        if (!task.callbacks.remove(callback)) {
-            throw new IllegalStateException("Unknown " + callback + " for " + parameter);
-        }
-        if (task.callbacks.isEmpty()) {
-            return task.drop();
-        }
-        return false;
-    }
-
-    /**
-     * This method attempts to skip the waiting period for said parameter.
-     * <p>
-     * This should always be synchronous.
-     * @throws IllegalStateException if the parameter is not in the queue anymore, or sometimes if called from asynchronous thread
-     */
-    public T get(P parameter) throws E, IllegalStateException {
-        final Task task = tasks.get(parameter);
-        if (task == null) {
-            throw new IllegalStateException("Unknown " + parameter);
-        }
-        return task.get();
-    }
-
-    /**
-     * Processes a parameter as if it was in the queue, without ever passing to another thread.
-     */
-    public T getSkipQueue(P parameter) throws E {
-        return skipQueue(parameter);
-    }
-
-    /**
-     * Processes a parameter as if it was in the queue, without ever passing to another thread.
-     */
-    public T getSkipQueue(P parameter, C callback) throws E {
-        final T object = skipQueue(parameter);
-        provider.callStage3(parameter, object, callback);
-        return object;
-    }
-
-    /**
-     * Processes a parameter as if it was in the queue, without ever passing to another thread.
-     */
-    public T getSkipQueue(P parameter, C...callbacks) throws E {
-        final CallBackProvider<P, T, C, E> provider = this.provider;
-        final T object = skipQueue(parameter);
-        for (C callback : callbacks) {
-            provider.callStage3(parameter, object, callback);
-        }
-        return object;
-    }
-
-    /**
-     * Processes a parameter as if it was in the queue, without ever passing to another thread.
-     */
-    public T getSkipQueue(P parameter, Iterable<C> callbacks) throws E {
-        final CallBackProvider<P, T, C, E> provider = this.provider;
-        final T object = skipQueue(parameter);
-        for (C callback : callbacks) {
-            provider.callStage3(parameter, object, callback);
-        }
-        return object;
-    }
-
-    private T skipQueue(P parameter) throws E {
-        Task task = tasks.get(parameter);
-        if (task != null) {
-            return task.get();
-        }
-        T object = provider.callStage1(parameter);
-        provider.callStage2(parameter, object);
-        return object;
-    }
-
-    /**
-     * This is the 'heartbeat' that should be called synchronously to finish any pending tasks
-     */
-    public void finishActive() throws E {
-        final Queue<Task> finished = this.finished;
-        while (!finished.isEmpty()) {
-            finished.poll().finish();
-        }
-    }
-
-    public void setActiveThreads(final int coreSize) {
-        pool.setCorePoolSize(coreSize);
-    }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/util/BlockStateListPopulator.java b/src/main/java/org/bukkit/craftbukkit/util/BlockStateListPopulator.java
index 30f2622..0bfa308 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/BlockStateListPopulator.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/BlockStateListPopulator.java
@@ -1,14 +1,14 @@
 package org.bukkit.craftbukkit.util;
 
-import java.util.ArrayList;
-import java.util.List;
-
 import net.minecraft.server.Block;
-
 import org.bukkit.World;
 import org.bukkit.block.BlockState;
 
+import java.util.ArrayList;
+import java.util.List;
+
 public class BlockStateListPopulator {
+
     private final World world;
     private final List<BlockState> list;
 
@@ -27,6 +27,7 @@ public class BlockStateListPopulator {
         state.setRawData((byte) data);
         list.add(state);
     }
+
     public void setTypeId(int x, int y, int z, int type) {
         BlockState state = world.getBlockAt(x, y, z).getState();
         state.setTypeId(type);
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftChatMessage.java b/src/main/java/org/bukkit/craftbukkit/util/CraftChatMessage.java
index 6491b10..71abdc5 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftChatMessage.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftChatMessage.java
@@ -1,11 +1,7 @@
 package org.bukkit.craftbukkit.util;
 
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Map;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-
+import com.google.common.collect.ImmutableMap;
+import com.google.common.collect.ImmutableMap.Builder;
 import net.minecraft.server.ChatClickable;
 import net.minecraft.server.ChatComponentText;
 import net.minecraft.server.ChatModifier;
@@ -13,10 +9,22 @@ import net.minecraft.server.EnumChatFormat;
 import net.minecraft.server.EnumClickAction;
 import net.minecraft.server.IChatBaseComponent;
 
-import com.google.common.collect.ImmutableMap;
-import com.google.common.collect.ImmutableMap.Builder;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Map;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
 
 public final class CraftChatMessage {
+
+    private CraftChatMessage() {
+
+    }
+
+    public static IChatBaseComponent[] fromString(String message) {
+        return new StringMessage(message).getOutput();
+    }
+
     private static class StringMessage {
         private static final Map<Character, EnumChatFormat> formatMap;
         private static final Pattern INCREMENTAL_PATTERN = Pattern.compile("(" + String.valueOf(org.bukkit.ChatColor.COLOR_CHAR) + "[0-9a-fk-or])|(\\n)|((?:(?:https?)://)?(?:[-\\w_\\.]{2,}\\.[a-z]{2,4}.*?(?=[\\.\\?!,;:]?(?:[" + String.valueOf(org.bukkit.ChatColor.COLOR_CHAR) + " \\n]|$))))", Pattern.CASE_INSENSITIVE);
@@ -26,20 +34,21 @@ public final class CraftChatMessage {
             for (EnumChatFormat format : EnumChatFormat.values()) {
                 builder.put(Character.toLowerCase(format.getChar()), format);
             }
+
             formatMap = builder.build();
         }
 
         private final List<IChatBaseComponent> list = new ArrayList<IChatBaseComponent>();
+        private final IChatBaseComponent[] output;
+        private final String message;
         private IChatBaseComponent currentChatComponent = new ChatComponentText("");
         private ChatModifier modifier = new ChatModifier();
-        private final IChatBaseComponent[] output;
         private int currentIndex;
-        private final String message;
 
         private StringMessage(String message) {
             this.message = message;
             if (message == null) {
-                output = new IChatBaseComponent[] { currentChatComponent };
+                output = new IChatBaseComponent[]{currentChatComponent};
                 return;
             }
             list.add(currentChatComponent);
@@ -53,45 +62,47 @@ public final class CraftChatMessage {
                 }
                 appendNewComponent(matcher.start(groupId));
                 switch (groupId) {
-                case 1:
-                    EnumChatFormat format = formatMap.get(match.toLowerCase().charAt(1));
-                    if (format == EnumChatFormat.RESET) {
-                        modifier = new ChatModifier();
-                    } else if (format.isFormat()) {
-                        switch (format) {
-                        case BOLD:
-                            modifier.setBold(Boolean.TRUE);
-                            break;
-                        case ITALIC:
-                            modifier.setItalic(Boolean.TRUE);
-                            break;
-                        case STRIKETHROUGH:
-                            modifier.setStrikethrough(Boolean.TRUE);
-                            break;
-                        case UNDERLINE:
-                            modifier.setUnderline(Boolean.TRUE);
-                            break;
-                        case RANDOM:
-                            modifier.setRandom(Boolean.TRUE);
-                            break;
-                        default:
-                            throw new AssertionError("Unexpected message format");
+                    case 1:
+                        EnumChatFormat format = formatMap.get(match.toLowerCase().charAt(1));
+                        if (format == EnumChatFormat.RESET) {
+                            modifier = new ChatModifier();
+                        } else if (format.isFormat()) {
+                            switch (format) {
+                                case BOLD:
+                                    modifier.setBold(Boolean.TRUE);
+                                    break;
+                                case ITALIC:
+                                    modifier.setItalic(Boolean.TRUE);
+                                    break;
+                                case STRIKETHROUGH:
+                                    modifier.setStrikethrough(Boolean.TRUE);
+                                    break;
+                                case UNDERLINE:
+                                    modifier.setUnderline(Boolean.TRUE);
+                                    break;
+                                case RANDOM:
+                                    modifier.setRandom(Boolean.TRUE);
+                                    break;
+                                default:
+                                    throw new AssertionError("Unexpected message format");
+                            }
+                        } else { // Color resets formatting
+                            modifier = new ChatModifier().setColor(format);
                         }
-                    } else { // Color resets formatting
-                        modifier = new ChatModifier().setColor(format);
-                    }
-                    break;
-                case 2:
-                    currentChatComponent = null;
-                    break;
-                case 3:
-                    if ( !( match.startsWith( "http://" ) || match.startsWith( "https://" ) ) ) {
-                        match = "http://" + match;
-                    }
-                    modifier.setChatClickable(new ChatClickable(EnumClickAction.OPEN_URL, match));
-                    appendNewComponent(matcher.end(groupId));
-                    modifier.setChatClickable((ChatClickable) null);
+                        break;
+                    case 2:
+                        currentChatComponent = null;
+                        break;
+                    case 3:
+                        if (!(match.startsWith("http://") || match.startsWith("https://"))) {
+                            match = "http://" + match;
+                        }
+
+                        modifier.setChatClickable(new ChatClickable(EnumClickAction.OPEN_URL, match));
+                        appendNewComponent(matcher.end(groupId));
+                        modifier.setChatClickable(null);
                 }
+
                 currentIndex = matcher.end(groupId);
             }
 
@@ -106,6 +117,7 @@ public final class CraftChatMessage {
             if (index <= currentIndex) {
                 return;
             }
+
             IChatBaseComponent addition = new ChatComponentText(message.substring(currentIndex, index)).setChatModifier(modifier);
             currentIndex = index;
             modifier = modifier.clone();
@@ -113,6 +125,7 @@ public final class CraftChatMessage {
                 currentChatComponent = new ChatComponentText("");
                 list.add(currentChatComponent);
             }
+
             currentChatComponent.addSibling(addition);
         }
 
@@ -120,11 +133,4 @@ public final class CraftChatMessage {
             return output;
         }
     }
-
-    public static IChatBaseComponent[] fromString(String message) {
-        return new StringMessage(message).getOutput();
-    }
-
-    private CraftChatMessage() {
-    }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftDamageSource.java b/src/main/java/org/bukkit/craftbukkit/util/CraftDamageSource.java
index a8e2b5e..034c1cb 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftDamageSource.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftDamageSource.java
@@ -4,6 +4,11 @@ import net.minecraft.server.DamageSource;
 
 // Util class to create custom DamageSources.
 public final class CraftDamageSource extends DamageSource {
+
+    private CraftDamageSource(String identifier) {
+        super(identifier);
+    }
+
     public static DamageSource copyOf(final DamageSource original) {
         CraftDamageSource newSource = new CraftDamageSource(original.translationIndex);
 
@@ -24,8 +29,4 @@ public final class CraftDamageSource extends DamageSource {
 
         return newSource;
     }
-
-    private CraftDamageSource(String identifier) {
-        super(identifier);
-    }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftIconCache.java b/src/main/java/org/bukkit/craftbukkit/util/CraftIconCache.java
index e52ef47..4fbfb93 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftIconCache.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftIconCache.java
@@ -3,6 +3,7 @@ package org.bukkit.craftbukkit.util;
 import org.bukkit.util.CachedServerIcon;
 
 public class CraftIconCache implements CachedServerIcon {
+
     public final String value;
 
     public CraftIconCache(final String value) {
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
index 52aa5d1..d5f6b9f 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
@@ -1,16 +1,11 @@
 package org.bukkit.craftbukkit.util;
 
-import java.util.ArrayList;
-import java.util.Iterator;
-import java.util.List;
-
 import net.minecraft.server.Block;
 import net.minecraft.server.Blocks;
 import net.minecraft.server.Item;
 import net.minecraft.server.MojangsonParser;
 import net.minecraft.server.NBTTagCompound;
 import net.minecraft.server.StatisticList;
-
 import org.bukkit.Achievement;
 import org.bukkit.Material;
 import org.bukkit.Statistic;
@@ -20,11 +15,17 @@ import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.util.StringUtil;
 
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+
 @SuppressWarnings("deprecation")
 public final class CraftMagicNumbers implements UnsafeValues {
+
     public static final UnsafeValues INSTANCE = new CraftMagicNumbers();
 
-    private CraftMagicNumbers() {}
+    private CraftMagicNumbers() {
+    }
 
     public static Block getBlock(org.bukkit.block.Block block) {
         return getBlock(block.getType());
@@ -127,6 +128,7 @@ public final class CraftMagicNumbers implements UnsafeValues {
                 matches.add(statistic);
             }
         }
+
         return matches;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/util/DatFileFilter.java b/src/main/java/org/bukkit/craftbukkit/util/DatFileFilter.java
index 712c44f..cda19ba 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/DatFileFilter.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/DatFileFilter.java
@@ -4,6 +4,7 @@ import java.io.File;
 import java.io.FilenameFilter;
 
 public class DatFileFilter implements FilenameFilter {
+
     public boolean accept(File dir, String name) {
         return name.endsWith(".dat");
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/util/ForwardLogHandler.java b/src/main/java/org/bukkit/craftbukkit/util/ForwardLogHandler.java
index 4db463a..5e98e50 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/ForwardLogHandler.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/ForwardLogHandler.java
@@ -10,6 +10,7 @@ import java.util.logging.Level;
 import java.util.logging.LogRecord;
 
 public class ForwardLogHandler extends ConsoleHandler {
+
     private Map<String, Logger> cachedLoggers = new ConcurrentHashMap<String, Logger>();
 
     private Logger getLogger(String name) {
diff --git a/src/main/java/org/bukkit/craftbukkit/util/Java15Compat.java b/src/main/java/org/bukkit/craftbukkit/util/Java15Compat.java
index c9c5f28..54b015e 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/Java15Compat.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/Java15Compat.java
@@ -3,10 +3,12 @@ package org.bukkit.craftbukkit.util;
 import java.lang.reflect.Array;
 
 public class Java15Compat {
+
     public static <T> T[] Arrays_copyOf(T[] original, int newLength) {
         if (0 <= newLength) {
             return org.bukkit.util.Java15Compat.Arrays_copyOfRange(original, 0, newLength);
         }
+
         throw new NegativeArraySizeException();
     }
 
@@ -14,6 +16,7 @@ public class Java15Compat {
         if (0 <= newLength) {
             return Arrays_copyOfRange(original, 0, newLength);
         }
+
         throw new NegativeArraySizeException();
     }
 
@@ -26,9 +29,11 @@ public class Java15Compat {
                 System.arraycopy(original, start, copy, 0, copyLength);
                 return copy;
             }
+
             throw new IllegalArgumentException();
+
         }
+
         throw new ArrayIndexOutOfBoundsException();
     }
-
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/util/LazyHashSet.java b/src/main/java/org/bukkit/craftbukkit/util/LazyHashSet.java
index ad83fd8..0660c1f 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/LazyHashSet.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/LazyHashSet.java
@@ -1,11 +1,12 @@
 package org.bukkit.craftbukkit.util;
 
+import javax.annotation.Nonnull;
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.Set;
 
-
 public abstract class LazyHashSet<E> implements Set<E> {
+
     Set<E> reference = null;
 
     public int size() {
@@ -20,15 +21,21 @@ public abstract class LazyHashSet<E> implements Set<E> {
         return getReference().contains(o);
     }
 
-    public Iterator<E> iterator() {
+    public
+    @Nonnull
+    Iterator<E> iterator() {
         return getReference().iterator();
     }
 
-    public Object[] toArray() {
+    public
+    @Nonnull
+    Object[] toArray() {
         return getReference().toArray();
     }
 
-    public <T> T[] toArray(T[] a) {
+    public
+    @Nonnull
+    <T> T[] toArray(@Nonnull T[] a) {
         return getReference().toArray(a);
     }
 
@@ -40,19 +47,19 @@ public abstract class LazyHashSet<E> implements Set<E> {
         return getReference().remove(o);
     }
 
-    public boolean containsAll(Collection<?> c) {
+    public boolean containsAll(@Nonnull Collection<?> c) {
         return getReference().containsAll(c);
     }
 
-    public boolean addAll(Collection<? extends E> c) {
+    public boolean addAll(@Nonnull Collection<? extends E> c) {
         return getReference().addAll(c);
     }
 
-    public boolean retainAll(Collection<?> c) {
+    public boolean retainAll(@Nonnull Collection<?> c) {
         return getReference().retainAll(c);
     }
 
-    public boolean removeAll(Collection<?> c) {
+    public boolean removeAll(@Nonnull Collection<?> c) {
         return getReference().removeAll(c);
     }
 
@@ -61,10 +68,11 @@ public abstract class LazyHashSet<E> implements Set<E> {
     }
 
     public Set<E> getReference() {
-        Set<E> reference = this.reference ;
+        Set<E> reference = this.reference;
         if (reference != null) {
             return reference;
         }
+
         return this.reference = makeReference();
     }
 
@@ -84,9 +92,11 @@ public abstract class LazyHashSet<E> implements Set<E> {
         if (obj == this) {
             return true;
         }
+
         if (obj == null || this.getClass() != obj.getClass()) {
             return false;
         }
+
         LazyHashSet<?> that = (LazyHashSet<?>) obj;
         return (this.isLazy() && that.isLazy()) || this.getReference().equals(that.getReference());
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/util/LazyPlayerSet.java b/src/main/java/org/bukkit/craftbukkit/util/LazyPlayerSet.java
index 90b2e6a..b65f838 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/LazyPlayerSet.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/LazyPlayerSet.java
@@ -1,12 +1,12 @@
 package org.bukkit.craftbukkit.util;
 
-import java.util.HashSet;
-import java.util.List;
 import net.minecraft.server.EntityPlayer;
 import net.minecraft.server.MinecraftServer;
-
 import org.bukkit.entity.Player;
 
+import java.util.HashSet;
+import java.util.List;
+
 public class LazyPlayerSet extends LazyHashSet<Player> {
 
     @Override
@@ -14,12 +14,13 @@ public class LazyPlayerSet extends LazyHashSet<Player> {
         if (reference != null) {
             throw new IllegalStateException("Reference already created!");
         }
+
         List<EntityPlayer> players = MinecraftServer.getServer().getPlayerList().players;
         HashSet<Player> reference = new HashSet<Player>(players.size());
         for (EntityPlayer player : players) {
             reference.add(player.getBukkitEntity());
         }
+
         return reference;
     }
-
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/util/LongHash.java b/src/main/java/org/bukkit/craftbukkit/util/LongHash.java
index 1765c79..6bd7809 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/LongHash.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/LongHash.java
@@ -1,6 +1,7 @@
 package org.bukkit.craftbukkit.util;
 
 public class LongHash {
+
     public static long toLong(int msw, int lsw) {
         return ((long) msw << 32) + lsw - Integer.MIN_VALUE;
     }
@@ -10,6 +11,6 @@ public class LongHash {
     }
 
     public static int lsw(long l) {
-        return (int) (l & -1L) + Integer.MIN_VALUE; // Spigot - remove redundant & // Spigot Update - 20140921a
+        return (int) (l) + Integer.MIN_VALUE; // Spigot - remove redundant & // Spigot Update - 20140921a
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/util/LongHashSet.java b/src/main/java/org/bukkit/craftbukkit/util/LongHashSet.java
index 22c96c5..4552ac5 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/LongHashSet.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/LongHashSet.java
@@ -16,11 +16,12 @@
 
 package org.bukkit.craftbukkit.util;
 
-import java.util.Iterator;
 import java.util.ConcurrentModificationException;
+import java.util.Iterator;
 import java.util.NoSuchElementException;
 
 public class LongHashSet {
+
     private final static int INITIAL_SIZE = 3;
     private final static double LOAD_FACTOR = 0.75;
 
@@ -37,7 +38,7 @@ public class LongHashSet {
     }
 
     public LongHashSet(int size) {
-        values = new long[(size==0 ? 1 : size)];
+        values = new long[(size == 0 ? 1 : size)];
         elements = 0;
         freeEntries = values.length;
         modCount = 0;
@@ -65,7 +66,7 @@ public class LongHashSet {
         int offset = 1;
 
         // search for the object (continue while !null and !this object)
-        while(values[index] != FREE && !(hash(values[index]) == hash && values[index] == value)) {
+        while (values[index] != FREE && !(hash(values[index]) == hash && values[index] == value)) {
             index = ((index + offset) & 0x7FFFFFFF) % values.length;
             offset = offset * 2 + 1;
 
@@ -88,7 +89,7 @@ public class LongHashSet {
         int deletedix = -1;
 
         // search for the object (continue while !null and !this object)
-        while(values[index] != FREE && !(hash(values[index]) == hash && values[index] == value)) {
+        while (values[index] != FREE && !(hash(values[index]) == hash && values[index] == value)) {
             // if there's a deleted object here we can put this object here,
             // provided it's not in here somewhere else already
             if (values[index] == REMOVED) {
@@ -134,7 +135,7 @@ public class LongHashSet {
         int offset = 1;
 
         // search for the object (continue while !null and !this object)
-        while(values[index] != FREE && !(hash(values[index]) == hash && values[index] == value)) {
+        while (values[index] != FREE && !(hash(values[index]) == hash && values[index] == value)) {
             index = ((index + offset) & 0x7FFFFFFF) % values.length;
             offset = offset * 2 + 1;
 
@@ -251,6 +252,7 @@ public class LongHashSet {
             for (index = 0; index < values.length && (values[index] == FREE || values[index] == REMOVED); index++) {
                 // This is just to drive the index forward to the first valid entry
             }
+
             expectedModCount = modCount;
         }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/util/LongObjectHashMap.java b/src/main/java/org/bukkit/craftbukkit/util/LongObjectHashMap.java
index 01861cc..0334c2e 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/LongObjectHashMap.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/LongObjectHashMap.java
@@ -1,5 +1,6 @@
 package org.bukkit.craftbukkit.util;
 
+import javax.annotation.Nonnull;
 import java.io.IOException;
 import java.io.ObjectInputStream;
 import java.io.ObjectOutputStream;
@@ -19,15 +20,16 @@ import static org.bukkit.craftbukkit.util.Java15Compat.Arrays_copyOf;
 
 @SuppressWarnings("unchecked")
 public class LongObjectHashMap<V> implements Cloneable, Serializable {
+
     static final long serialVersionUID = 2841537710170573815L;
 
     private static final long EMPTY_KEY = Long.MIN_VALUE;
-    private static final int  BUCKET_SIZE = 4096;
+    private static final int BUCKET_SIZE = 4096;
 
     private transient long[][] keys;
-    private transient V[][]    values;
-    private transient int      modCount;
-    private transient int      size;
+    private transient V[][] values;
+    private transient int modCount;
+    private transient int size;
 
     public LongObjectHashMap() {
         initialize();
@@ -202,6 +204,7 @@ public class LongObjectHashMap<V> implements Cloneable, Serializable {
         return set;
     }
 
+    @Override
     public Object clone() throws CloneNotSupportedException {
         LongObjectHashMap clone = (LongObjectHashMap) super.clone();
         // Make sure we clear any existing information from the clone
@@ -260,17 +263,16 @@ public class LongObjectHashMap<V> implements Cloneable, Serializable {
         }
     }
 
-
     private class ValueIterator implements Iterator<V> {
+
+        long prevKey = EMPTY_KEY;
+        V prevValue;
         private int count;
         private int index;
         private int innerIndex;
         private int expectedModCount;
         private long lastReturned = EMPTY_KEY;
 
-        long prevKey = EMPTY_KEY;
-        V prevValue;
-
         ValueIterator() {
             expectedModCount = LongObjectHashMap.this.modCount;
         }
@@ -333,6 +335,7 @@ public class LongObjectHashMap<V> implements Cloneable, Serializable {
     }
 
     private class KeyIterator implements Iterator<Long> {
+
         final ValueIterator iterator;
 
         public KeyIterator() {
@@ -353,8 +356,8 @@ public class LongObjectHashMap<V> implements Cloneable, Serializable {
         }
     }
 
-
     private class KeySet extends AbstractSet<Long> {
+
         public void clear() {
             LongObjectHashMap.this.clear();
         }
@@ -372,13 +375,15 @@ public class LongObjectHashMap<V> implements Cloneable, Serializable {
             return LongObjectHashMap.this.remove((Long) key) != null;
         }
 
-        public Iterator<Long> iterator() {
+        public
+        @Nonnull
+        Iterator<Long> iterator() {
             return new KeyIterator();
         }
     }
 
-
     private class ValueCollection extends AbstractCollection<V> {
+
         public void clear() {
             LongObjectHashMap.this.clear();
         }
@@ -391,13 +396,15 @@ public class LongObjectHashMap<V> implements Cloneable, Serializable {
             return LongObjectHashMap.this.containsValue((V) value);
         }
 
-        public Iterator<V> iterator() {
+        public
+        @Nonnull
+        Iterator<V> iterator() {
             return new ValueIterator();
         }
     }
 
-
     private class Entry implements Map.Entry<Long, V> {
+
         private final Long key;
         private V value;
 
diff --git a/src/main/java/org/bukkit/craftbukkit/util/MojangNameLookup.java b/src/main/java/org/bukkit/craftbukkit/util/MojangNameLookup.java
index 1db4874..5d1f6d7 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/MojangNameLookup.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/MojangNameLookup.java
@@ -1,7 +1,7 @@
 package org.bukkit.craftbukkit.util;
 
-import net.minecraft.util.com.google.gson.Gson;
 import net.minecraft.util.com.google.common.base.Charsets;
+import net.minecraft.util.com.google.gson.Gson;
 import net.minecraft.util.org.apache.commons.io.IOUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -14,6 +14,7 @@ import java.net.URLConnection;
 import java.util.UUID;
 
 public class MojangNameLookup {
+
     private static final Logger logger = LogManager.getFormatterLogger(MojangNameLookup.class);
 
     public static String lookupName(UUID id) {
diff --git a/src/main/java/org/bukkit/craftbukkit/util/ServerShutdownThread.java b/src/main/java/org/bukkit/craftbukkit/util/ServerShutdownThread.java
index ae3481b..bf57ed7 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/ServerShutdownThread.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/ServerShutdownThread.java
@@ -4,6 +4,7 @@ import net.minecraft.server.ExceptionWorldConflict;
 import net.minecraft.server.MinecraftServer;
 
 public class ServerShutdownThread extends Thread {
+
     private final MinecraftServer server;
 
     public ServerShutdownThread(MinecraftServer server) {
@@ -19,7 +20,7 @@ public class ServerShutdownThread extends Thread {
         } finally {
             try {
                 server.reader.getTerminal().restore();
-            } catch (Exception e) {
+            } catch (Exception ignored) {
             }
         }
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/util/ShortConsoleLogFormatter.java b/src/main/java/org/bukkit/craftbukkit/util/ShortConsoleLogFormatter.java
index 2dbfef9..ae534bc 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/ShortConsoleLogFormatter.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/ShortConsoleLogFormatter.java
@@ -1,15 +1,17 @@
 package org.bukkit.craftbukkit.util;
 
+import joptsimple.OptionException;
+import joptsimple.OptionSet;
+import net.minecraft.server.MinecraftServer;
+
 import java.io.PrintWriter;
 import java.io.StringWriter;
 import java.text.SimpleDateFormat;
 import java.util.logging.Formatter;
 import java.util.logging.LogRecord;
-import joptsimple.OptionException;
-import joptsimple.OptionSet;
-import net.minecraft.server.MinecraftServer;
 
 public class ShortConsoleLogFormatter extends Formatter {
+
     private final SimpleDateFormat date;
 
     public ShortConsoleLogFormatter(MinecraftServer server) {
diff --git a/src/main/java/org/bukkit/craftbukkit/util/StructureGrowDelegate.java b/src/main/java/org/bukkit/craftbukkit/util/StructureGrowDelegate.java
index f9cc7d6..6a80d20 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/StructureGrowDelegate.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/StructureGrowDelegate.java
@@ -1,18 +1,18 @@
 package org.bukkit.craftbukkit.util;
 
-import java.util.ArrayList;
-import java.util.List;
-
 import net.minecraft.server.Block;
 import net.minecraft.server.Blocks;
 import net.minecraft.server.World;
-
 import org.bukkit.BlockChangeDelegate;
 import org.bukkit.block.BlockState;
 import org.bukkit.craftbukkit.CraftWorld;
 import org.bukkit.material.MaterialData;
 
+import java.util.ArrayList;
+import java.util.List;
+
 public class StructureGrowDelegate implements BlockChangeDelegate {
+
     private final CraftWorld world;
     private final List<BlockState> blocks = new ArrayList<BlockState>();
 
@@ -20,10 +20,12 @@ public class StructureGrowDelegate implements BlockChangeDelegate {
         this.world = world.getWorld();
     }
 
+    @Override
     public boolean setRawTypeId(int x, int y, int z, int type) {
         return setRawTypeIdAndData(x, y, z, type, 0);
     }
 
+    @Override
     public boolean setRawTypeIdAndData(int x, int y, int z, int type, int data) {
         BlockState state = world.getBlockAt(x, y, z).getState();
         state.setTypeId(type);
@@ -32,14 +34,17 @@ public class StructureGrowDelegate implements BlockChangeDelegate {
         return true;
     }
 
+    @Override
     public boolean setTypeId(int x, int y, int z, int typeId) {
         return setRawTypeId(x, y, z, typeId);
     }
 
+    @Override
     public boolean setTypeIdAndData(int x, int y, int z, int typeId, int data) {
         return setRawTypeIdAndData(x, y, z, typeId, data);
     }
 
+    @Override
     public int getTypeId(int x, int y, int z) {
         for (BlockState state : blocks) {
             if (state.getX() == x && state.getY() == y && state.getZ() == z) {
@@ -50,6 +55,7 @@ public class StructureGrowDelegate implements BlockChangeDelegate {
         return world.getBlockTypeIdAt(x, y, z);
     }
 
+    @Override
     public int getHeight() {
         return world.getMaxHeight();
     }
@@ -58,6 +64,7 @@ public class StructureGrowDelegate implements BlockChangeDelegate {
         return blocks;
     }
 
+    @Override
     public boolean isEmpty(int x, int y, int z) {
         for (BlockState state : blocks) {
             if (state.getX() == x && state.getY() == y && state.getZ() == z) {
diff --git a/src/main/java/org/bukkit/craftbukkit/util/TerminalConsoleWriterThread.java b/src/main/java/org/bukkit/craftbukkit/util/TerminalConsoleWriterThread.java
index 0bdfde6..2465ce8 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/TerminalConsoleWriterThread.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/TerminalConsoleWriterThread.java
@@ -1,12 +1,13 @@
 package org.bukkit.craftbukkit.util;
 
+import jline.console.ConsoleReader;
+import net.minecraft.util.com.mojang.util.QueueLogAppender;
+import org.bukkit.craftbukkit.Main;
+
 import java.io.IOException;
 import java.io.OutputStream;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-import jline.console.ConsoleReader;
-import net.minecraft.util.com.mojang.util.QueueLogAppender;
-import org.bukkit.craftbukkit.Main;
 
 public class TerminalConsoleWriterThread implements Runnable {
     final private ConsoleReader reader;
@@ -17,6 +18,7 @@ public class TerminalConsoleWriterThread implements Runnable {
         this.reader = reader;
     }
 
+    @Override
     public void run() {
         String message;
 
diff --git a/src/main/java/org/bukkit/craftbukkit/util/UnsafeList.java b/src/main/java/org/bukkit/craftbukkit/util/UnsafeList.java
index 1351ecd..7f18f01 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/UnsafeList.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/UnsafeList.java
@@ -1,5 +1,6 @@
 package org.bukkit.craftbukkit.util;
 
+import javax.annotation.Nonnull;
 import java.io.IOException;
 import java.io.ObjectInputStream;
 import java.io.ObjectOutputStream;
@@ -14,6 +15,7 @@ import java.util.RandomAccess;
 // implementation of an ArrayList that offers a getter without range checks
 @SuppressWarnings("unchecked")
 public class UnsafeList<E> extends AbstractList<E> implements List<E>, RandomAccess, Cloneable, Serializable {
+
     private static final long serialVersionUID = 8683452581112892191L;
 
     private transient Object[] data;
@@ -42,9 +44,9 @@ public class UnsafeList<E> extends AbstractList<E> implements List<E>, RandomAcc
         this(32);
     }
 
+    @Override
     public E get(int index) {
         rangeCheck(index);
-
         return (E) data[index];
     }
 
@@ -52,20 +54,22 @@ public class UnsafeList<E> extends AbstractList<E> implements List<E>, RandomAcc
         return (E) data[index];
     }
 
+    @Override
     public E set(int index, E element) {
         rangeCheck(index);
-
         E old = (E) data[index];
         data[index] = element;
         return old;
     }
 
+    @Override
     public boolean add(E element) {
         growIfNeeded();
         data[size++] = element;
         return true;
     }
 
+    @Override
     public void add(int index, E element) {
         growIfNeeded();
         System.arraycopy(data, index, data, index + 1, size - index);
@@ -73,6 +77,7 @@ public class UnsafeList<E> extends AbstractList<E> implements List<E>, RandomAcc
         size++;
     }
 
+    @Override
     public E remove(int index) {
         rangeCheck(index);
 
@@ -81,11 +86,12 @@ public class UnsafeList<E> extends AbstractList<E> implements List<E>, RandomAcc
         if (movedCount > 0) {
             System.arraycopy(data, index + 1, data, index, movedCount);
         }
-        data[--size] = null;
 
+        data[--size] = null;
         return old;
     }
 
+    @Override
     public boolean remove(Object o) {
         int index = indexOf(o);
         if (index >= 0) {
@@ -96,6 +102,7 @@ public class UnsafeList<E> extends AbstractList<E> implements List<E>, RandomAcc
         return false;
     }
 
+    @Override
     public int indexOf(Object o) {
         for (int i = 0; i < size; i++) {
             if (o == data[i] || o.equals(data[i])) {
@@ -106,10 +113,12 @@ public class UnsafeList<E> extends AbstractList<E> implements List<E>, RandomAcc
         return -1;
     }
 
+    @Override
     public boolean contains(Object o) {
         return indexOf(o) >= 0;
     }
 
+    @Override
     public void clear() {
         // Create new array to reset memory usage to initial capacity
         size = 0;
@@ -133,14 +142,17 @@ public class UnsafeList<E> extends AbstractList<E> implements List<E>, RandomAcc
         }
     }
 
+    @Override
     public int size() {
         return size;
     }
 
+    @Override
     public boolean isEmpty() {
         return size == 0;
     }
 
+    @Override
     public Object clone() throws CloneNotSupportedException {
         UnsafeList<E> copy = (UnsafeList<E>) super.clone();
         copy.data = Java15Compat.Arrays_copyOf(data, size);
@@ -153,7 +165,10 @@ public class UnsafeList<E> extends AbstractList<E> implements List<E>, RandomAcc
         return copy;
     }
 
-    public Iterator<E> iterator() {
+    @Override
+    public
+    @Nonnull
+    Iterator<E> iterator() {
         // Try to find an iterator that isn't in use
         for (Iterator iter : iterPool) {
             if (!((Itr) iter).valid) {
@@ -211,19 +226,22 @@ public class UnsafeList<E> extends AbstractList<E> implements List<E>, RandomAcc
         size = is.readInt();
         initialCapacity = is.readInt();
         data = new Object[Integer.highestOneBit(size - 1) << 1];
+
         for (int i = 0; i < size; i++) {
             data[i] = is.readObject();
         }
+
         maxPool = is.readInt();
         iterPool = new Iterator[1];
         iterPool[0] = new Itr();
     }
 
     public class Itr implements Iterator<E> {
+
+        public boolean valid = true;
         int index;
         int lastRet = -1;
         int expectedModCount = modCount;
-        public boolean valid = true;
 
         public void reset() {
             index = 0;
@@ -232,11 +250,13 @@ public class UnsafeList<E> extends AbstractList<E> implements List<E>, RandomAcc
             valid = true;
         }
 
+        @Override
         public boolean hasNext() {
             valid = index != size;
             return valid;
         }
 
+        @Override
         public E next() {
             if (modCount != expectedModCount) {
                 throw new ConcurrentModificationException();
@@ -255,6 +275,7 @@ public class UnsafeList<E> extends AbstractList<E> implements List<E>, RandomAcc
             return (E) data[lastRet = i];
         }
 
+        @Override
         public void remove() {
             if (lastRet < 0) {
                 throw new IllegalStateException();
diff --git a/src/main/java/org/bukkit/craftbukkit/util/Versioning.java b/src/main/java/org/bukkit/craftbukkit/util/Versioning.java
index 3a4b142..b50a6c8 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/Versioning.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/Versioning.java
@@ -1,13 +1,15 @@
 package org.bukkit.craftbukkit.util;
 
+import org.bukkit.Bukkit;
+
 import java.io.IOException;
 import java.io.InputStream;
 import java.util.Properties;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-import org.bukkit.Bukkit;
 
 public final class Versioning {
+
     public static String getBukkitVersion() {
         String result = "Unknown-Version";
 
diff --git a/src/main/java/org/bukkit/craftbukkit/util/Waitable.java b/src/main/java/org/bukkit/craftbukkit/util/Waitable.java
index 5cd1154..df642c9 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/Waitable.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/Waitable.java
@@ -4,11 +4,7 @@ import java.util.concurrent.ExecutionException;
 
 
 public abstract class Waitable<T> implements Runnable {
-    private enum Status {
-        WAITING,
-        RUNNING,
-        FINISHED,
-    }
+
     Throwable t = null;
     T value = null;
     Status status = Status.WAITING;
@@ -20,10 +16,11 @@ public abstract class Waitable<T> implements Runnable {
             }
             status = Status.RUNNING;
         }
+
         try {
             value = evaluate();
-        } catch (Throwable t) {
-            this.t = t;
+        } catch (Throwable throwable) {
+            this.t = throwable;
         } finally {
             synchronized (this) {
                 status = Status.FINISHED;
@@ -38,9 +35,17 @@ public abstract class Waitable<T> implements Runnable {
         while (status != Status.FINISHED) {
             this.wait();
         }
+
         if (t != null) {
             throw new ExecutionException(t);
         }
+
         return value;
     }
+
+    private enum Status {
+        WAITING,
+        RUNNING,
+        FINISHED,
+    }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/util/WeakCollection.java b/src/main/java/org/bukkit/craftbukkit/util/WeakCollection.java
index 7e7363f..34273dc 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/WeakCollection.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/WeakCollection.java
@@ -1,14 +1,16 @@
 package org.bukkit.craftbukkit.util;
 
+import org.apache.commons.lang.Validate;
+
+import javax.annotation.Nonnull;
 import java.lang.ref.WeakReference;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.NoSuchElementException;
 
-import org.apache.commons.lang.Validate;
-
 public final class WeakCollection<T> implements Collection<T> {
+
     static final Object NO_VALUE = new Object();
     private final Collection<WeakReference<T>> collection;
 
@@ -16,45 +18,55 @@ public final class WeakCollection<T> implements Collection<T> {
         collection = new ArrayList<WeakReference<T>>();
     }
 
+    @Override
     public boolean add(T value) {
         Validate.notNull(value, "Cannot add null value");
         return collection.add(new WeakReference<T>(value));
     }
 
-    public boolean addAll(Collection<? extends T> collection) {
+    @Override
+    public boolean addAll(@Nonnull Collection<? extends T> collection) {
         Collection<WeakReference<T>> values = this.collection;
         boolean ret = false;
         for (T value : collection) {
             Validate.notNull(value, "Cannot add null value");
             ret |= values.add(new WeakReference<T>(value));
         }
+
         return ret;
     }
 
+    @Override
     public void clear() {
         collection.clear();
     }
 
+    @Override
     public boolean contains(Object object) {
-        if (object  == null) {
+        if (object == null) {
             return false;
         }
+
         for (T compare : this) {
             if (object.equals(compare)) {
                 return true;
             }
         }
+
         return false;
     }
 
-    public boolean containsAll(Collection<?> collection) {
+    @Override
+    public boolean containsAll(@Nonnull Collection<?> collection) {
         return toCollection().containsAll(collection);
     }
 
+    @Override
     public boolean isEmpty() {
         return !iterator().hasNext();
     }
 
+    @Nonnull
     public Iterator<T> iterator() {
         return new Iterator<T>() {
             Iterator<WeakReference<T>> it = collection.iterator();
@@ -104,6 +116,7 @@ public final class WeakCollection<T> implements Collection<T> {
         };
     }
 
+    @Override
     public boolean remove(Object object) {
         if (object == null) {
             return false;
@@ -116,10 +129,12 @@ public final class WeakCollection<T> implements Collection<T> {
                 return true;
             }
         }
+
         return false;
     }
 
-    public boolean removeAll(Collection<?> collection) {
+    @Override
+    public boolean removeAll(@Nonnull Collection<?> collection) {
         Iterator<T> it = this.iterator();
         boolean ret = false;
         while (it.hasNext()) {
@@ -128,10 +143,12 @@ public final class WeakCollection<T> implements Collection<T> {
                 it.remove();
             }
         }
+
         return ret;
     }
 
-    public boolean retainAll(Collection<?> collection) {
+    @Override
+    public boolean retainAll(@Nonnull Collection<?> collection) {
         Iterator<T> it = this.iterator();
         boolean ret = false;
         while (it.hasNext()) {
@@ -140,9 +157,11 @@ public final class WeakCollection<T> implements Collection<T> {
                 it.remove();
             }
         }
+
         return ret;
     }
 
+    @Override
     public int size() {
         int s = 0;
         for (T value : this) {
@@ -151,11 +170,15 @@ public final class WeakCollection<T> implements Collection<T> {
         return s;
     }
 
+    @Override
     public Object[] toArray() {
         return this.toArray(new Object[0]);
     }
 
-    public <T> T[] toArray(T[] array) {
+    @Override
+    public
+    @Nonnull
+    <T> T[] toArray(@Nonnull T[] array) {
         return toCollection().toArray(array);
     }
 
@@ -164,6 +187,7 @@ public final class WeakCollection<T> implements Collection<T> {
         for (T value : this) {
             collection.add(value);
         }
+
         return collection;
     }
 }
diff --git a/src/main/java/org/github/paperspigot/PaperSpigotConfig.java b/src/main/java/org/github/paperspigot/PaperSpigotConfig.java
index a44a7f6..e9c8e90 100644
--- a/src/main/java/org/github/paperspigot/PaperSpigotConfig.java
+++ b/src/main/java/org/github/paperspigot/PaperSpigotConfig.java
@@ -1,6 +1,13 @@
 package org.github.paperspigot;
 
 import com.google.common.base.Throwables;
+import net.minecraft.server.MinecraftServer;
+import org.bukkit.Bukkit;
+import org.bukkit.Material;
+import org.bukkit.command.Command;
+import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.configuration.file.YamlConfiguration;
+
 import java.io.File;
 import java.io.IOException;
 import java.lang.reflect.Field;
@@ -12,17 +19,9 @@ import java.util.List;
 import java.util.Map;
 import java.util.logging.Level;
 
-import net.minecraft.server.MinecraftServer;
-import org.bukkit.Bukkit;
-import org.bukkit.Material;
-import org.bukkit.command.Command;
-import org.bukkit.configuration.InvalidConfigurationException;
-import org.bukkit.configuration.file.YamlConfiguration;
+public class PaperSpigotConfig {
 
-public class PaperSpigotConfig
-{
-
-    private static final File CONFIG_FILE = new File( "paper.yml" );
+    private static final File CONFIG_FILE = new File("paper.yml");
     private static final String HEADER = "This is the main configuration file for PaperSpigot.\n"
             + "As you can see, there's tons to configure. Some options may impact gameplay, so use\n"
             + "with caution, and make sure you know what each option does before configuring.\n"
@@ -31,164 +30,138 @@ public class PaperSpigotConfig
             + "join us at the IRC.\n"
             + "\n"
             + "IRC: #paperspigot @ irc.spi.gt ( http://irc.spi.gt/iris/?channels=PaperSpigot )\n";
+    public static double babyZombieMovementSpeed;
+    public static boolean asyncCatcherFeature;
+    public static boolean interactLimitEnabled;
+    /*========================================================================*/
+    public static double strengthEffectModifier;
+    public static double weaknessEffectModifier;
+    public static int maxPacketsPerPlayer;
+    public static boolean stackableLavaBuckets;
+    public static boolean stackableWaterBuckets;
+    public static boolean stackableMilkBuckets;
     /*========================================================================*/
     static YamlConfiguration config;
     static int version;
     static Map<String, Command> commands;
-    /*========================================================================*/
 
-    static { init(); }
+    static {
+        init();
+    }
 
-    public static void init()
-    {
+    public static void init() {
         config = new YamlConfiguration();
-        try
-        {
-            config.load ( CONFIG_FILE );
-        } catch ( IOException ex )
-        {
-        } catch ( InvalidConfigurationException ex )
-        {
-            Bukkit.getLogger().log( Level.SEVERE, "Could not load paper.yml, please correct your syntax errors", ex );
-            throw Throwables.propagate( ex );
+        try {
+            config.load(CONFIG_FILE);
+        } catch (IOException ex) {
+        } catch (InvalidConfigurationException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not load paper.yml, please correct your syntax errors", ex);
+            throw Throwables.propagate(ex);
         }
-        config.options().header( HEADER );
-        config.options().copyDefaults( true );
+        config.options().header(HEADER);
+        config.options().copyDefaults(true);
 
         commands = new HashMap<String, Command>();
 
-        version = getInt( "config-version", 6 );
-        set( "config-version", 6 );
-        readConfig( PaperSpigotConfig.class, null );
+        version = getInt("config-version", 6);
+        set("config-version", 6);
+        readConfig(PaperSpigotConfig.class, null);
     }
 
-    public static void registerCommands()
-    {
-        for ( Map.Entry<String, Command> entry : commands.entrySet() )
-        {
-            MinecraftServer.getServer().server.getCommandMap().register( entry.getKey(), "PaperSpigot", entry.getValue() );
+    public static void registerCommands() {
+        for (Map.Entry<String, Command> entry : commands.entrySet()) {
+            MinecraftServer.getServer().server.getCommandMap().register(entry.getKey(), "PaperSpigot", entry.getValue());
         }
     }
 
-    static void readConfig(Class<?> clazz, Object instance)
-    {
-        for ( Method method : clazz.getDeclaredMethods() )
-        {
-            if ( Modifier.isPrivate( method.getModifiers() ) )
-            {
-                if ( method.getParameterTypes().length == 0 && method.getReturnType() == Void.TYPE )
-                {
-                    try
-                    {
-                        method.setAccessible( true );
-                        method.invoke( instance );
-                    } catch ( InvocationTargetException ex )
-                    {
-                        throw Throwables.propagate( ex.getCause() );
-                    } catch ( Exception ex )
-                    {
-                        Bukkit.getLogger().log( Level.SEVERE, "Error invoking " + method, ex );
+    static void readConfig(Class<?> clazz, Object instance) {
+        for (Method method : clazz.getDeclaredMethods()) {
+            if (Modifier.isPrivate(method.getModifiers())) {
+                if (method.getParameterTypes().length == 0 && method.getReturnType() == Void.TYPE) {
+                    try {
+                        method.setAccessible(true);
+                        method.invoke(instance);
+                    } catch (InvocationTargetException ex) {
+                        throw Throwables.propagate(ex.getCause());
+                    } catch (Exception ex) {
+                        Bukkit.getLogger().log(Level.SEVERE, "Error invoking " + method, ex);
                     }
                 }
             }
         }
 
-        try
-        {
-            config.save( CONFIG_FILE );
-        } catch ( IOException ex )
-        {
-            Bukkit.getLogger().log( Level.SEVERE, "Could not save " + CONFIG_FILE, ex );
+        try {
+            config.save(CONFIG_FILE);
+        } catch (IOException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not save " + CONFIG_FILE, ex);
         }
     }
 
-    private static void set(String path, Object val)
-    {
-        config.set( path, val );
+    private static void set(String path, Object val) {
+        config.set(path, val);
     }
 
-    private static boolean getBoolean(String path, boolean def)
-    {
-        config.addDefault( path, def );
-        return config.getBoolean( path, config.getBoolean( path ) );
+    private static boolean getBoolean(String path, boolean def) {
+        config.addDefault(path, def);
+        return config.getBoolean(path, config.getBoolean(path));
     }
 
-    private static double getDouble(String path, double def)
-    {
-        config.addDefault( path, def );
-        return config.getDouble( path, config.getDouble( path ) );
+    private static double getDouble(String path, double def) {
+        config.addDefault(path, def);
+        return config.getDouble(path, config.getDouble(path));
     }
 
-    private static float getFloat(String path, float def)
-    {
-        config.addDefault( path, def );
-        return config.getFloat( path, config.getFloat( path ) );
+    private static float getFloat(String path, float def) {
+        config.addDefault(path, def);
+        return config.getFloat(path, config.getFloat(path));
     }
 
-    private static int getInt(String path, int def)
-    {
-        config.addDefault( path, def );
-        return config.getInt( path, config.getInt( path ) );
+    private static int getInt(String path, int def) {
+        config.addDefault(path, def);
+        return config.getInt(path, config.getInt(path));
     }
 
-    private static <T> List getList(String path, T def)
-    {
-        config.addDefault( path, def );
-        return (List<T>) config.getList( path, config.getList( path ) );
+    private static <T> List getList(String path, T def) {
+        config.addDefault(path, def);
+        return config.getList(path, config.getList(path));
     }
 
-    private static String getString(String path, String def)
-    {
-        config.addDefault( path, def );
-        return config.getString( path, config.getString( path ) );
+    private static String getString(String path, String def) {
+        config.addDefault(path, def);
+        return config.getString(path, config.getString(path));
     }
 
-    public static double babyZombieMovementSpeed;
-    private static void babyZombieMovementSpeed()
-    {
-        babyZombieMovementSpeed = getDouble( "settings.baby-zombie-movement-speed", 0.5D); // Player moves at 0.1F, for reference
+    private static void babyZombieMovementSpeed() {
+        babyZombieMovementSpeed = getDouble("settings.baby-zombie-movement-speed", 0.5D); // Player moves at 0.1F, for reference
     }
 
-    public static boolean asyncCatcherFeature;
-    private static void asyncCatcherFeature()
-    {
-        asyncCatcherFeature = getBoolean( "settings.async-plugin-bad-magic-catcher", true );
+    private static void asyncCatcherFeature() {
+        asyncCatcherFeature = getBoolean("settings.async-plugin-bad-magic-catcher", true);
         if (!asyncCatcherFeature) {
-            Bukkit.getLogger().log( Level.INFO, "Disabling async plugin bad ju-ju catcher, this may be bad depending on your plugins" );
+            Bukkit.getLogger().log(Level.INFO, "Disabling async plugin bad ju-ju catcher, this may be bad depending on your plugins");
         }
     }
 
-    public static boolean interactLimitEnabled;
-    private static void interactLimitEnabled()
-    {
-        interactLimitEnabled = getBoolean( "settings.limit-player-interactions", true );
+    private static void interactLimitEnabled() {
+        interactLimitEnabled = getBoolean("settings.limit-player-interactions", true);
         if (!interactLimitEnabled) {
-            Bukkit.getLogger().log( Level.INFO, "Disabling player interaction limiter, your server may be more vulnerable to malicious users" );
+            Bukkit.getLogger().log(Level.INFO, "Disabling player interaction limiter, your server may be more vulnerable to malicious users");
         }
     }
 
-    public static double strengthEffectModifier;
-    public static double weaknessEffectModifier;
-    private static void effectModifiers()
-    {
-        strengthEffectModifier = getDouble( "effect-modifiers.strength", 1.3D );
-        weaknessEffectModifier = getDouble( "effect-modifiers.weakness", -0.5D );
+    private static void effectModifiers() {
+        strengthEffectModifier = getDouble("effect-modifiers.strength", 1.3D);
+        weaknessEffectModifier = getDouble("effect-modifiers.weakness", -0.5D);
     }
 
-    public static int maxPacketsPerPlayer;
-    private static void maxPacketsPerPlayer()
-    {
-        maxPacketsPerPlayer = getInt( "max-packets-per-player", 1000 );
+    private static void maxPacketsPerPlayer() {
+        maxPacketsPerPlayer = getInt("max-packets-per-player", 1000);
     }
 
-    public static boolean stackableLavaBuckets;
-    public static boolean stackableWaterBuckets;
-    public static boolean stackableMilkBuckets;
-    private static void stackableBuckets()
-    {
-        stackableLavaBuckets = getBoolean( "stackable-buckets.lava", false );
-        stackableWaterBuckets = getBoolean( "stackable-buckets.water", false );
-        stackableMilkBuckets = getBoolean( "stackable-buckets.milk", false );
+    private static void stackableBuckets() {
+        stackableLavaBuckets = getBoolean("stackable-buckets.lava", false);
+        stackableWaterBuckets = getBoolean("stackable-buckets.water", false);
+        stackableMilkBuckets = getBoolean("stackable-buckets.milk", false);
 
         Field maxStack;
 
diff --git a/src/main/java/org/github/paperspigot/PaperSpigotWorldConfig.java b/src/main/java/org/github/paperspigot/PaperSpigotWorldConfig.java
index 19c77cc..97f8c92 100644
--- a/src/main/java/org/github/paperspigot/PaperSpigotWorldConfig.java
+++ b/src/main/java/org/github/paperspigot/PaperSpigotWorldConfig.java
@@ -1,268 +1,233 @@
 package org.github.paperspigot;
 
-import java.util.List;
 import org.bukkit.Bukkit;
 import org.bukkit.configuration.file.YamlConfiguration;
 
-public class PaperSpigotWorldConfig
-{
+import java.util.List;
+
+public class PaperSpigotWorldConfig {
 
     private final String worldName;
     private final YamlConfiguration config;
+    public boolean allowUndeadHorseLeashing;
+    public double squidMinSpawnHeight;
+    public double squidMaxSpawnHeight;
+    public float playerBlockingDamageMultiplier;
+    public int cactusMaxHeight;
+    public int reedMaxHeight;
+    public boolean invertedDaylightDetectors;
+    public int fishingMinTicks;
+    public int fishingMaxTicks;
+    public float blockBreakExhaustion;
+    public float playerSwimmingExhaustion;
+    public Integer softDespawnDistance;
+    public Integer hardDespawnDistance;
+    public boolean keepSpawnInMemory;
+    public double fallingBlockHeightNerf;
+    public int waterOverLavaFlowSpeed;
+    public boolean removeInvalidMobSpawnerTEs;
+    public boolean removeUnloadedEnderPearls;
+    public boolean removeUnloadedTNTEntities;
+    public boolean removeUnloadedFallingBlocks;
+    public boolean boatsDropBoats;
+    public boolean lessPickyTorches;
+    public boolean disablePlayerCrits;
+    public int tickNextTickListCap;
+    public boolean tickNextTickListCapIgnoresRedstone;
+    public boolean useAsyncLighting;
+    public boolean generateCanyon;
+    public boolean generateCaves;
+    public boolean generateDungeon;
+    public boolean generateFortress;
+    public boolean generateMineshaft;
+    public boolean generateStronghold;
+    public boolean generateTemple;
+    public boolean generateVillage;
+    public int entityMaxTickTime;
+    public boolean optimizeDraining;
+    public boolean loadUnloadedEnderPearls;
+    public boolean loadUnloadedTNTEntities;
+    public boolean loadUnloadedFallingBlocks;
+    public boolean fallingBlocksCollideWithSigns;
     private boolean verbose;
-
-    public PaperSpigotWorldConfig(String worldName)
-    {
+    public PaperSpigotWorldConfig(String worldName) {
         this.worldName = worldName;
         this.config = PaperSpigotConfig.config;
         init();
     }
 
-    public void init()
-    {
-        this.verbose = getBoolean( "verbose", true );
+    public void init() {
+        this.verbose = getBoolean("verbose", true);
 
-        log( "-------- World Settings For [" + worldName + "] --------" );
-        PaperSpigotConfig.readConfig( PaperSpigotWorldConfig.class, this );
+        log("-------- World Settings For [" + worldName + "] --------");
+        PaperSpigotConfig.readConfig(PaperSpigotWorldConfig.class, this);
     }
 
-    private void log(String s)
-    {
-        if ( verbose )
-        {
-            Bukkit.getLogger().info( s );
+    private void log(String s) {
+        if (verbose) {
+            Bukkit.getLogger().info(s);
         }
     }
 
-    private void set(String path, Object val)
-    {
-        config.set( "world-settings.default." + path, val );
+    private void set(String path, Object val) {
+        config.set("world-settings.default." + path, val);
     }
 
-    private boolean getBoolean(String path, boolean def)
-    {
-        config.addDefault( "world-settings.default." + path, def );
-        return config.getBoolean( "world-settings." + worldName + "." + path, config.getBoolean( "world-settings.default." + path ) );
+    private boolean getBoolean(String path, boolean def) {
+        config.addDefault("world-settings.default." + path, def);
+        return config.getBoolean("world-settings." + worldName + "." + path, config.getBoolean("world-settings.default." + path));
     }
 
-    private double getDouble(String path, double def)
-    {
-        config.addDefault( "world-settings.default." + path, def );
-        return config.getDouble( "world-settings." + worldName + "." + path, config.getDouble( "world-settings.default." + path ) );
+    private double getDouble(String path, double def) {
+        config.addDefault("world-settings.default." + path, def);
+        return config.getDouble("world-settings." + worldName + "." + path, config.getDouble("world-settings.default." + path));
     }
 
-    private int getInt(String path, int def)
-    {
-        config.addDefault( "world-settings.default." + path, def );
-        return config.getInt( "world-settings." + worldName + "." + path, config.getInt( "world-settings.default." + path ) );
+    private int getInt(String path, int def) {
+        config.addDefault("world-settings.default." + path, def);
+        return config.getInt("world-settings." + worldName + "." + path, config.getInt("world-settings.default." + path));
     }
 
-    private float getFloat(String path, float def)
-    {
-        config.addDefault( "world-settings.default." + path, def );
-        return config.getFloat( "world-settings." + worldName + "." + path, config.getFloat( "world-settings.default." + path ) );
+    private float getFloat(String path, float def) {
+        config.addDefault("world-settings.default." + path, def);
+        return config.getFloat("world-settings." + worldName + "." + path, config.getFloat("world-settings.default." + path));
     }
 
-    private <T> List getList(String path, T def)
-    {
-        config.addDefault( "world-settings.default." + path, def );
-        return (List<T>) config.getList( "world-settings." + worldName + "." + path, config.getList( "world-settings.default." + path ) );
+    private <T> List getList(String path, T def) {
+        config.addDefault("world-settings.default." + path, def);
+        return config.getList("world-settings." + worldName + "." + path, config.getList("world-settings.default." + path));
     }
 
-    private String getString(String path, String def)
-    {
-        config.addDefault( "world-settings.default." + path, def );
-        return config.getString( "world-settings." + worldName + "." + path, config.getString( "world-settings.default." + path ) );
+    private String getString(String path, String def) {
+        config.addDefault("world-settings.default." + path, def);
+        return config.getString("world-settings." + worldName + "." + path, config.getString("world-settings.default." + path));
     }
 
-    public boolean allowUndeadHorseLeashing;
-    private void allowUndeadHorseLeashing()
-    {
-        allowUndeadHorseLeashing = getBoolean( "allow-undead-horse-leashing", true );
-        log( "Allow undead horse types to be leashed: " + allowUndeadHorseLeashing );
+    private void allowUndeadHorseLeashing() {
+        allowUndeadHorseLeashing = getBoolean("allow-undead-horse-leashing", true);
+        log("Allow undead horse types to be leashed: " + allowUndeadHorseLeashing);
     }
 
-    public double squidMinSpawnHeight;
-    public double squidMaxSpawnHeight;
-    private void squidSpawnHeight()
-    {
-        squidMinSpawnHeight = getDouble( "squid-spawn-height.minimum", 45.0D );
-        squidMaxSpawnHeight = getDouble( "squid-spawn-height.maximum", 63.0D );
-        log( "Squids will spawn between Y: " + squidMinSpawnHeight + " and Y: " + squidMaxSpawnHeight);
+    private void squidSpawnHeight() {
+        squidMinSpawnHeight = getDouble("squid-spawn-height.minimum", 45.0D);
+        squidMaxSpawnHeight = getDouble("squid-spawn-height.maximum", 63.0D);
+        log("Squids will spawn between Y: " + squidMinSpawnHeight + " and Y: " + squidMaxSpawnHeight);
     }
 
-    public float playerBlockingDamageMultiplier;
-    private void playerBlockingDamageMultiplier()
-    {
-        playerBlockingDamageMultiplier = getFloat( "player-blocking-damage-multiplier", 0.5F );
-        log( "Player blocking damage multiplier set to " + playerBlockingDamageMultiplier);
+    private void playerBlockingDamageMultiplier() {
+        playerBlockingDamageMultiplier = getFloat("player-blocking-damage-multiplier", 0.5F);
+        log("Player blocking damage multiplier set to " + playerBlockingDamageMultiplier);
     }
 
-    public int cactusMaxHeight;
-    public int reedMaxHeight;
-    private void blockGrowthHeight()
-    {
-        cactusMaxHeight = getInt( "max-growth-height.cactus", 3 );
-        reedMaxHeight = getInt( "max-growth-height.reeds", 3 );
-        log( "Max height for cactus growth " + cactusMaxHeight + ". Max height for reed growth " + reedMaxHeight);
+    private void blockGrowthHeight() {
+        cactusMaxHeight = getInt("max-growth-height.cactus", 3);
+        reedMaxHeight = getInt("max-growth-height.reeds", 3);
+        log("Max height for cactus growth " + cactusMaxHeight + ". Max height for reed growth " + reedMaxHeight);
     }
 
-    public boolean invertedDaylightDetectors;
-    private void invertedDaylightDetectors()
-    {
-        invertedDaylightDetectors = getBoolean( "inverted-daylight-detectors", false );
-        log( "Inverted Redstone Lamps: " + invertedDaylightDetectors );
+    private void invertedDaylightDetectors() {
+        invertedDaylightDetectors = getBoolean("inverted-daylight-detectors", false);
+        log("Inverted Redstone Lamps: " + invertedDaylightDetectors);
     }
 
-    public int fishingMinTicks;
-    public int fishingMaxTicks;
-    private void fishingTickRange()
-    {
-        fishingMinTicks = getInt( "fishing-time-range.MinimumTicks", 100 );
-        fishingMaxTicks = getInt( "fishing-time-range.MaximumTicks", 900 );
+    private void fishingTickRange() {
+        fishingMinTicks = getInt("fishing-time-range.MinimumTicks", 100);
+        fishingMaxTicks = getInt("fishing-time-range.MaximumTicks", 900);
     }
 
-    public float blockBreakExhaustion;
-    public float playerSwimmingExhaustion;
-    private void exhaustionValues ()
-    {
-        blockBreakExhaustion = getFloat( "player-exhaustion.block-break", 0.025F );
-        playerSwimmingExhaustion = getFloat("player-exhaustion.swimming", 0.015F );
+    private void exhaustionValues() {
+        blockBreakExhaustion = getFloat("player-exhaustion.block-break", 0.025F);
+        playerSwimmingExhaustion = getFloat("player-exhaustion.swimming", 0.015F);
     }
 
-    public Integer softDespawnDistance;
-    public Integer hardDespawnDistance;
-    private void despawnDistances()
-    {
-        softDespawnDistance = getInt( "despawn-ranges.soft", 32 ); // 32^2 = 1024, Minecraft Default
-        hardDespawnDistance = getInt( "despawn-ranges.hard", 128 ); // 128^2 = 16384, Minecraft Default;
-        
-        if ( softDespawnDistance > hardDespawnDistance)
-        {
+    private void despawnDistances() {
+        softDespawnDistance = getInt("despawn-ranges.soft", 32); // 32^2 = 1024, Minecraft Default
+        hardDespawnDistance = getInt("despawn-ranges.hard", 128); // 128^2 = 16384, Minecraft Default;
+
+        if (softDespawnDistance > hardDespawnDistance) {
             softDespawnDistance = hardDespawnDistance;
         }
-        
-        log( "Living Entity Despawn Ranges:  Soft: " + softDespawnDistance + " Hard: " + hardDespawnDistance );
-        
-        softDespawnDistance = softDespawnDistance*softDespawnDistance;
-        hardDespawnDistance = hardDespawnDistance*hardDespawnDistance;
+
+        log("Living Entity Despawn Ranges:  Soft: " + softDespawnDistance + " Hard: " + hardDespawnDistance);
+
+        softDespawnDistance = softDespawnDistance * softDespawnDistance;
+        hardDespawnDistance = hardDespawnDistance * hardDespawnDistance;
     }
-    
-    public boolean keepSpawnInMemory;
-    private void keepSpawnInMemory()
-    {
-        keepSpawnInMemory = getBoolean( "keep-spawn-loaded", true );
-        log( "Keep spawn chunk loaded: " + keepSpawnInMemory );
+
+    private void keepSpawnInMemory() {
+        keepSpawnInMemory = getBoolean("keep-spawn-loaded", true);
+        log("Keep spawn chunk loaded: " + keepSpawnInMemory);
     }
 
-    public double fallingBlockHeightNerf;
-    private void fallingBlockheightNerf()
-    {
+    private void fallingBlockheightNerf() {
         // Technically a little disingenuous as it applies to all falling blocks but alas, backwards compat prevails!
-        fallingBlockHeightNerf = getDouble( "tnt-entity-height-nerf", 0 );
+        fallingBlockHeightNerf = getDouble("tnt-entity-height-nerf", 0);
         if (fallingBlockHeightNerf != 0) {
-            log( "TNT/Falling Block Height Limit set to Y: " + fallingBlockHeightNerf);
+            log("TNT/Falling Block Height Limit set to Y: " + fallingBlockHeightNerf);
         }
     }
 
-    public int waterOverLavaFlowSpeed;
-    private void waterOverLavaFlowSpeed()
-    {
-        waterOverLavaFlowSpeed = getInt( "water-over-lava-flow-speed", 5 );
-        log( "Water over lava flow speed: " + waterOverLavaFlowSpeed);
+    private void waterOverLavaFlowSpeed() {
+        waterOverLavaFlowSpeed = getInt("water-over-lava-flow-speed", 5);
+        log("Water over lava flow speed: " + waterOverLavaFlowSpeed);
     }
 
-    public boolean removeInvalidMobSpawnerTEs;
-    private void removeInvalidMobSpawnerTEs()
-    {
-        removeInvalidMobSpawnerTEs = getBoolean( "remove-invalid-mob-spawner-tile-entities", true );
-        log( "Remove invalid mob spawner tile entities: " + removeInvalidMobSpawnerTEs );
+    private void removeInvalidMobSpawnerTEs() {
+        removeInvalidMobSpawnerTEs = getBoolean("remove-invalid-mob-spawner-tile-entities", true);
+        log("Remove invalid mob spawner tile entities: " + removeInvalidMobSpawnerTEs);
     }
 
-    public boolean removeUnloadedEnderPearls;
-    public boolean removeUnloadedTNTEntities;
-    public boolean removeUnloadedFallingBlocks;
-    private void removeUnloaded()
-    {
-        removeUnloadedEnderPearls = getBoolean( "remove-unloaded.enderpearls", true );
-        removeUnloadedTNTEntities = getBoolean( "remove-unloaded.tnt-entities", true );
-        removeUnloadedFallingBlocks = getBoolean( "remove-unloaded.falling-blocks", true );
+    private void removeUnloaded() {
+        removeUnloadedEnderPearls = getBoolean("remove-unloaded.enderpearls", true);
+        removeUnloadedTNTEntities = getBoolean("remove-unloaded.tnt-entities", true);
+        removeUnloadedFallingBlocks = getBoolean("remove-unloaded.falling-blocks", true);
     }
 
-    public boolean boatsDropBoats;
-    public boolean lessPickyTorches;
-    public boolean disablePlayerCrits;
-    private void mechanicsChanges()
-    {
-        boatsDropBoats = getBoolean( "game-mechanics.boats-drop-boats", false );
-        lessPickyTorches = getBoolean( "game-mechanics.less-picky-torch-placement", false );
-        disablePlayerCrits = getBoolean( "game-mechanics.disable-player-crits", false);
+    private void mechanicsChanges() {
+        boatsDropBoats = getBoolean("game-mechanics.boats-drop-boats", false);
+        lessPickyTorches = getBoolean("game-mechanics.less-picky-torch-placement", false);
+        disablePlayerCrits = getBoolean("game-mechanics.disable-player-crits", false);
     }
 
-    public int tickNextTickListCap;
-    public boolean tickNextTickListCapIgnoresRedstone;
-    private void tickNextTickListCap()
-    {
-        tickNextTickListCap = getInt( "tick-next-tick-list-cap", 10000 ); // Higher values will be friendlier to vanilla style mechanics (to a point) but may hurt performance
+    private void tickNextTickListCap() {
+        tickNextTickListCap = getInt("tick-next-tick-list-cap", 10000); // Higher values will be friendlier to vanilla style mechanics (to a point) but may hurt performance
         tickNextTickListCapIgnoresRedstone = getBoolean("tick-next-tick-list-cap-ignores-redstone", false); // Redstone TickNextTicks will always bypass the preceding cap.
-        log( "WorldServer TickNextTickList cap set at " + tickNextTickListCap );
-        log( "WorldServer TickNextTickList cap always processes redstone: " + tickNextTickListCapIgnoresRedstone );
+        log("WorldServer TickNextTickList cap set at " + tickNextTickListCap);
+        log("WorldServer TickNextTickList cap always processes redstone: " + tickNextTickListCapIgnoresRedstone);
     }
 
-    public boolean useAsyncLighting;
-    private void useAsyncLighting()
-    {
-        useAsyncLighting = getBoolean( "use-async-lighting", false );
-        log( "World async lighting: " + useAsyncLighting );
+    private void useAsyncLighting() {
+        useAsyncLighting = getBoolean("use-async-lighting", false);
+        log("World async lighting: " + useAsyncLighting);
     }
 
-    public boolean generateCanyon;
-    public boolean generateCaves;
-    public boolean generateDungeon;
-    public boolean generateFortress;
-    public boolean generateMineshaft;
-    public boolean generateStronghold;
-    public boolean generateTemple;
-    public boolean generateVillage;
-    private void generatorSettings()
-    {
-        generateCanyon = getBoolean( "generator-settings.canyon", true );
-        generateCaves = getBoolean( "generator-settings.caves", true );
-        generateDungeon = getBoolean( "generator-settings.dungeon", true );
-        generateFortress = getBoolean( "generator-settings.fortress", true );
-        generateMineshaft = getBoolean( "generator-settings.mineshaft", true );
-        generateStronghold = getBoolean( "generator-settings.stronghold", true );
-        generateTemple = getBoolean( "generator-settings.temple", true );
-        generateVillage = getBoolean( "generator-settings.village", true );
+    private void generatorSettings() {
+        generateCanyon = getBoolean("generator-settings.canyon", true);
+        generateCaves = getBoolean("generator-settings.caves", true);
+        generateDungeon = getBoolean("generator-settings.dungeon", true);
+        generateFortress = getBoolean("generator-settings.fortress", true);
+        generateMineshaft = getBoolean("generator-settings.mineshaft", true);
+        generateStronghold = getBoolean("generator-settings.stronghold", true);
+        generateTemple = getBoolean("generator-settings.temple", true);
+        generateVillage = getBoolean("generator-settings.village", true);
     }
 
-    public int entityMaxTickTime;
-    private void entityMaxTickTime()
-    {
-        entityMaxTickTime = getInt( "max-tick-time-entity", 50 );
-        log( "Entity max Tick Time: " + entityMaxTickTime + "ms" );
+    private void entityMaxTickTime() {
+        entityMaxTickTime = getInt("max-tick-time-entity", 50);
+        log("Entity max Tick Time: " + entityMaxTickTime + "ms");
     }
 
-
-    public boolean optimizeDraining;
-    private void optimizeDraining()
-    {
-        optimizeDraining = getBoolean( "optimize-draining", false );
+    private void optimizeDraining() {
+        optimizeDraining = getBoolean("optimize-draining", false);
     }
 
-    public boolean loadUnloadedEnderPearls;
-    public boolean loadUnloadedTNTEntities;
-    public boolean loadUnloadedFallingBlocks;
-    private void loadUnloaded()
-    {
-        loadUnloadedEnderPearls = getBoolean( "load-chunks.enderpearls", false );
-        loadUnloadedTNTEntities = getBoolean( "load-chunks.tnt-entities", false );
-        loadUnloadedFallingBlocks = getBoolean( "load-chunks.falling-blocks", false );
+    private void loadUnloaded() {
+        loadUnloadedEnderPearls = getBoolean("load-chunks.enderpearls", false);
+        loadUnloadedTNTEntities = getBoolean("load-chunks.tnt-entities", false);
+        loadUnloadedFallingBlocks = getBoolean("load-chunks.falling-blocks", false);
     }
 
-    public boolean fallingBlocksCollideWithSigns;
-    private void fallingBlocksCollideWithSigns()
-    {
-        fallingBlocksCollideWithSigns = getBoolean( "falling-blocks-collide-with-signs", false );
+    private void fallingBlocksCollideWithSigns() {
+        fallingBlocksCollideWithSigns = getBoolean("falling-blocks-collide-with-signs", false);
     }
 }
diff --git a/src/main/java/org/github/paperspigot/TickLimiter.java b/src/main/java/org/github/paperspigot/TickLimiter.java
index 7d5be5e..d2889ca 100644
--- a/src/main/java/org/github/paperspigot/TickLimiter.java
+++ b/src/main/java/org/github/paperspigot/TickLimiter.java
@@ -9,18 +9,15 @@ public class TickLimiter {
     private final int maxTime;
     private long startTime;
 
-    public TickLimiter(int maxtime)
-    {
+    public TickLimiter(int maxtime) {
         this.maxTime = maxtime;
     }
 
-    public void initTick()
-    {
+    public void initTick() {
         startTime = System.currentTimeMillis();
     }
 
-    public boolean shouldContinue()
-    {
+    public boolean shouldContinue() {
         long remaining = System.currentTimeMillis() - startTime;
         return remaining < maxTime;
     }
diff --git a/src/main/java/org/spigotmc/ActivationRange.java b/src/main/java/org/spigotmc/ActivationRange.java
index 06145fc..ab9c7d6 100644
--- a/src/main/java/org/spigotmc/ActivationRange.java
+++ b/src/main/java/org/spigotmc/ActivationRange.java
@@ -1,7 +1,5 @@
 package org.spigotmc;
 
-import java.util.ArrayList;
-import java.util.List;
 import net.minecraft.server.AxisAlignedBB;
 import net.minecraft.server.Chunk;
 import net.minecraft.server.Entity;
@@ -12,8 +10,8 @@ import net.minecraft.server.EntityComplexPart;
 import net.minecraft.server.EntityCreature;
 import net.minecraft.server.EntityEnderCrystal;
 import net.minecraft.server.EntityEnderDragon;
-import net.minecraft.server.EntityEnderPearl; // PaperSpigot
-import net.minecraft.server.EntityFallingBlock; // PaperSpigot
+import net.minecraft.server.EntityEnderPearl;
+import net.minecraft.server.EntityFallingBlock;
 import net.minecraft.server.EntityFireball;
 import net.minecraft.server.EntityFireworks;
 import net.minecraft.server.EntityHuman;
@@ -31,13 +29,14 @@ import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.World;
 import org.bukkit.craftbukkit.SpigotTimings;
 
-public class ActivationRange
-{
+import java.util.List;
+
+public class ActivationRange {
 
-    static AxisAlignedBB maxBB = AxisAlignedBB.a( 0, 0, 0, 0, 0, 0 );
-    static AxisAlignedBB miscBB = AxisAlignedBB.a( 0, 0, 0, 0, 0, 0 );
-    static AxisAlignedBB animalBB = AxisAlignedBB.a( 0, 0, 0, 0, 0, 0 );
-    static AxisAlignedBB monsterBB = AxisAlignedBB.a( 0, 0, 0, 0, 0, 0 );
+    static AxisAlignedBB maxBB = AxisAlignedBB.a(0, 0, 0, 0, 0, 0);
+    static AxisAlignedBB miscBB = AxisAlignedBB.a(0, 0, 0, 0, 0, 0);
+    static AxisAlignedBB animalBB = AxisAlignedBB.a(0, 0, 0, 0, 0, 0);
+    static AxisAlignedBB monsterBB = AxisAlignedBB.a(0, 0, 0, 0, 0, 0);
 
     /**
      * Initializes an entities type on construction to specify what group this
@@ -46,16 +45,12 @@ public class ActivationRange
      * @param entity
      * @return group id
      */
-    public static byte initializeEntityActivationType(Entity entity)
-    {
-        if ( entity instanceof EntityMonster || entity instanceof EntitySlime )
-        {
+    public static byte initializeEntityActivationType(Entity entity) {
+        if (entity instanceof EntityMonster || entity instanceof EntitySlime) {
             return 1; // Monster
-        } else if ( entity instanceof EntityCreature || entity instanceof EntityAmbient )
-        {
+        } else if (entity instanceof EntityCreature || entity instanceof EntityAmbient) {
             return 2; // Animal
-        } else
-        {
+        } else {
             return 3; // Misc
         }
     }
@@ -64,14 +59,13 @@ public class ActivationRange
      * These entities are excluded from Activation range checks.
      *
      * @param entity
-     * @param world
+     * @param config
      * @return boolean If it should always tick.
      */
-    public static boolean initializeEntityActivationState(Entity entity, SpigotWorldConfig config)
-    {
-        if ( ( entity.activationType == 3 && config.miscActivationRange == 0 )
-                || ( entity.activationType == 2 && config.animalActivationRange == 0 )
-                || ( entity.activationType == 1 && config.monsterActivationRange == 0 )
+    public static boolean initializeEntityActivationState(Entity entity, SpigotWorldConfig config) {
+        return (entity.activationType == 3 && config.miscActivationRange == 0)
+                || (entity.activationType == 2 && config.animalActivationRange == 0)
+                || (entity.activationType == 1 && config.monsterActivationRange == 0)
                 || entity instanceof EntityHuman
                 || entity instanceof EntityProjectile
                 || entity instanceof EntityEnderDragon
@@ -81,12 +75,8 @@ public class ActivationRange
                 || entity instanceof EntityWeather
                 || entity instanceof EntityTNTPrimed
                 || entity instanceof EntityEnderCrystal
-                || entity instanceof EntityFireworks )
-        {
-            return true;
-        }
+                || entity instanceof EntityFireworks;
 
-        return false;
     }
 
     /**
@@ -99,8 +89,7 @@ public class ActivationRange
      * @param y
      * @param z
      */
-    public static void growBB(AxisAlignedBB target, AxisAlignedBB source, int x, int y, int z)
-    {
+    public static void growBB(AxisAlignedBB target, AxisAlignedBB source, int x, int y, int z) {
         target.a = source.a - x;
         target.b = source.b - y;
         target.c = source.c - z;
@@ -115,38 +104,33 @@ public class ActivationRange
      *
      * @param world
      */
-    public static void activateEntities(World world)
-    {
+    public static void activateEntities(World world) {
         SpigotTimings.entityActivationCheckTimer.startTiming();
         final int miscActivationRange = world.spigotConfig.miscActivationRange;
         final int animalActivationRange = world.spigotConfig.animalActivationRange;
         final int monsterActivationRange = world.spigotConfig.monsterActivationRange;
 
-        int maxRange = Math.max( monsterActivationRange, animalActivationRange );
-        maxRange = Math.max( maxRange, miscActivationRange );
-        maxRange = Math.min( ( world.spigotConfig.viewDistance << 4 ) - 8, maxRange );
+        int maxRange = Math.max(monsterActivationRange, animalActivationRange);
+        maxRange = Math.max(maxRange, miscActivationRange);
+        maxRange = Math.min((world.spigotConfig.viewDistance << 4) - 8, maxRange);
 
-        for ( Entity player : (List<Entity>) world.players )
-        {
+        for (Entity player : (List<Entity>) world.players) {
 
             player.activatedTick = MinecraftServer.currentTick;
-            growBB( maxBB, player.boundingBox, maxRange, 256, maxRange );
-            growBB( miscBB, player.boundingBox, miscActivationRange, 256, miscActivationRange );
-            growBB( animalBB, player.boundingBox, animalActivationRange, 256, animalActivationRange );
-            growBB( monsterBB, player.boundingBox, monsterActivationRange, 256, monsterActivationRange );
+            growBB(maxBB, player.boundingBox, maxRange, 256, maxRange);
+            growBB(miscBB, player.boundingBox, miscActivationRange, 256, miscActivationRange);
+            growBB(animalBB, player.boundingBox, animalActivationRange, 256, animalActivationRange);
+            growBB(monsterBB, player.boundingBox, monsterActivationRange, 256, monsterActivationRange);
 
-            int i = MathHelper.floor( maxBB.a / 16.0D );
-            int j = MathHelper.floor( maxBB.d / 16.0D );
-            int k = MathHelper.floor( maxBB.c / 16.0D );
-            int l = MathHelper.floor( maxBB.f / 16.0D );
+            int i = MathHelper.floor(maxBB.a / 16.0D);
+            int j = MathHelper.floor(maxBB.d / 16.0D);
+            int k = MathHelper.floor(maxBB.c / 16.0D);
+            int l = MathHelper.floor(maxBB.f / 16.0D);
 
-            for ( int i1 = i; i1 <= j; ++i1 )
-            {
-                for ( int j1 = k; j1 <= l; ++j1 )
-                {
-                    if ( world.getWorld().isChunkLoaded( i1, j1 ) )
-                    {
-                        activateChunkEntities( world.getChunkAt( i1, j1 ) );
+            for (int i1 = i; i1 <= j; ++i1) {
+                for (int j1 = k; j1 <= l; ++j1) {
+                    if (world.getWorld().isChunkLoaded(i1, j1)) {
+                        activateChunkEntities(world.getChunkAt(i1, j1));
                     }
                 }
             }
@@ -159,37 +143,28 @@ public class ActivationRange
      *
      * @param chunk
      */
-    private static void activateChunkEntities(Chunk chunk)
-    {
-        for ( List<Entity> slice : chunk.entitySlices )
-        {
-            for ( Entity entity : slice )
-            {
-                if ( MinecraftServer.currentTick > entity.activatedTick )
-                {
-                    if ( entity.defaultActivationState )
-                    {
+    private static void activateChunkEntities(Chunk chunk) {
+        for (List<Entity> slice : chunk.entitySlices) {
+            for (Entity entity : slice) {
+                if (MinecraftServer.currentTick > entity.activatedTick) {
+                    if (entity.defaultActivationState) {
                         entity.activatedTick = MinecraftServer.currentTick;
                         continue;
                     }
-                    switch ( entity.activationType )
-                    {
+                    switch (entity.activationType) {
                         case 1:
-                            if ( monsterBB.b( entity.boundingBox ) )
-                            {
+                            if (monsterBB.b(entity.boundingBox)) {
                                 entity.activatedTick = MinecraftServer.currentTick;
                             }
                             break;
                         case 2:
-                            if ( animalBB.b( entity.boundingBox ) )
-                            {
+                            if (animalBB.b(entity.boundingBox)) {
                                 entity.activatedTick = MinecraftServer.currentTick;
                             }
                             break;
                         case 3:
                         default:
-                            if ( miscBB.b( entity.boundingBox ) )
-                            {
+                            if (miscBB.b(entity.boundingBox)) {
                                 entity.activatedTick = MinecraftServer.currentTick;
                             }
                     }
@@ -205,49 +180,37 @@ public class ActivationRange
      * @param entity
      * @return
      */
-    public static boolean checkEntityImmunities(Entity entity)
-    {
+    public static boolean checkEntityImmunities(Entity entity) {
         // quick checks.
-        if ( entity.inWater /* isInWater */ || entity.fireTicks > 0 )
-        {
+        if (entity.inWater /* isInWater */ || entity.fireTicks > 0) {
             return true;
         }
-        if ( !( entity instanceof EntityArrow ) )
-        {
-            if ( !entity.onGround || entity.passenger != null
-                    || entity.vehicle != null )
-            {
+        if (!(entity instanceof EntityArrow)) {
+            if (!entity.onGround || entity.passenger != null
+                    || entity.vehicle != null) {
                 return true;
             }
-        } else if ( !( (EntityArrow) entity ).inGround )
-        {
+        } else if (!((EntityArrow) entity).inGround) {
             return true;
         }
         // special cases.
-        if ( entity instanceof EntityLiving )
-        {
+        if (entity instanceof EntityLiving) {
             EntityLiving living = (EntityLiving) entity;
-            if ( living.attackTicks > 0 || living.hurtTicks > 0 || living.effects.size() > 0 )
-            {
+            if (living.attackTicks > 0 || living.hurtTicks > 0 || living.effects.size() > 0) {
                 return true;
             }
-            if ( entity instanceof EntityCreature && ( (EntityCreature) entity ).target != null )
-            {
+            if (entity instanceof EntityCreature && ((EntityCreature) entity).target != null) {
                 return true;
             }
-            if ( entity instanceof EntityVillager && ( (EntityVillager) entity ).bY() /* Getter for first boolean */ )
-            {
+            if (entity instanceof EntityVillager && ((EntityVillager) entity).bY() /* Getter for first boolean */) {
                 return true;
             }
-            if ( entity instanceof EntityAnimal )
-            {
+            if (entity instanceof EntityAnimal) {
                 EntityAnimal animal = (EntityAnimal) entity;
-                if ( animal.isBaby() || animal.ce() /*love*/ )
-                {
+                if (animal.isBaby() || animal.ce() /*love*/) {
                     return true;
                 }
-                if ( entity instanceof EntitySheep && ( (EntitySheep) entity ).isSheared() )
-                {
+                if (entity instanceof EntitySheep && ((EntitySheep) entity).isSheared()) {
                     return true;
                 }
             }
@@ -261,15 +224,14 @@ public class ActivationRange
      * @param entity
      * @return
      */
-    public static boolean checkIfActive(Entity entity)
-    {
+    public static boolean checkIfActive(Entity entity) {
         SpigotTimings.checkIfActiveTimer.startTiming();
 
         // PaperSpigot start - EAR backport
         // Never safe to skip fireworks or entities not yet added to chunk and we don't skip falling blocks
-        if ( !entity.isAddedToChunk() || entity instanceof EntityFireworks || entity instanceof EntityFallingBlock ||
+        if (!entity.isAddedToChunk() || entity instanceof EntityFireworks || entity instanceof EntityFallingBlock ||
                 (entity instanceof EntityEnderPearl && entity.world.paperSpigotConfig.loadUnloadedEnderPearls) ||
-                (entity instanceof EntityTNTPrimed && entity.world.paperSpigotConfig.loadUnloadedTNTEntities) ) {
+                (entity instanceof EntityTNTPrimed && entity.world.paperSpigotConfig.loadUnloadedTNTEntities)) {
             SpigotTimings.checkIfActiveTimer.stopTiming();
             return true;
         }
@@ -278,29 +240,24 @@ public class ActivationRange
         boolean isActive = entity.activatedTick >= MinecraftServer.currentTick || entity.defaultActivationState;
 
         // Should this entity tick?
-        if ( !isActive )
-        {
-            if ( ( MinecraftServer.currentTick - entity.activatedTick - 1 ) % 20 == 0 )
-            {
+        if (!isActive) {
+            if ((MinecraftServer.currentTick - entity.activatedTick - 1) % 20 == 0) {
                 // Check immunities every 20 ticks.
-                if ( checkEntityImmunities( entity ) )
-                {
+                if (checkEntityImmunities(entity)) {
                     // Triggered some sort of immunity, give 20 full ticks before we check again.
                     entity.activatedTick = MinecraftServer.currentTick + 20;
                 }
                 isActive = true;
             }
             // Add a little performance juice to active entities. Skip 1/4 if not immune.
-        } else if ( !entity.defaultActivationState && entity.ticksLived % 4 == 0 && !checkEntityImmunities( entity ) )
-        {
+        } else if (!entity.defaultActivationState && entity.ticksLived % 4 == 0 && !checkEntityImmunities(entity)) {
             isActive = false;
         }
-        int x = MathHelper.floor( entity.locX );
-        int z = MathHelper.floor( entity.locZ );
+        int x = MathHelper.floor(entity.locX);
+        int z = MathHelper.floor(entity.locZ);
         // Make sure not on edge of unloaded chunk
-        Chunk chunk = entity.world.getChunkIfLoaded( x >> 4, z >> 4 );
-        if ( isActive && !( chunk != null && chunk.areNeighborsLoaded( 1 ) ) )
-        {
+        Chunk chunk = entity.world.getChunkIfLoaded(x >> 4, z >> 4);
+        if (isActive && !(chunk != null && chunk.areNeighborsLoaded(1))) {
             isActive = false;
         }
         SpigotTimings.checkIfActiveTimer.stopTiming();
diff --git a/src/main/java/org/spigotmc/AntiXray.java b/src/main/java/org/spigotmc/AntiXray.java
index 80e538c..98ecbd7 100644
--- a/src/main/java/org/spigotmc/AntiXray.java
+++ b/src/main/java/org/spigotmc/AntiXray.java
@@ -1,57 +1,81 @@
 package org.spigotmc;
 
-import net.minecraft.util.gnu.trove.set.TByteSet;
-import net.minecraft.util.gnu.trove.set.hash.TByteHashSet;
 import net.minecraft.server.Block;
 import net.minecraft.server.Blocks;
 import net.minecraft.server.World;
+import net.minecraft.util.gnu.trove.set.TByteSet;
+import net.minecraft.util.gnu.trove.set.hash.TByteHashSet;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 
-public class AntiXray
-{
+public class AntiXray {
 
-    private static final CustomTimingsHandler update = new CustomTimingsHandler( "xray - update" );
-    private static final CustomTimingsHandler obfuscate = new CustomTimingsHandler( "xray - obfuscate" );
+    private static final CustomTimingsHandler update = new CustomTimingsHandler("xray - update");
+    private static final CustomTimingsHandler obfuscate = new CustomTimingsHandler("xray - obfuscate");
     /*========================================================================*/
     // Used to keep track of which blocks to obfuscate
-    private final boolean[] obfuscateBlocks = new boolean[ Short.MAX_VALUE ];
+    private final boolean[] obfuscateBlocks = new boolean[Short.MAX_VALUE];
     // Used to select a random replacement ore
     private final byte[] replacementOres;
 
-    public AntiXray(SpigotWorldConfig config)
-    {
+    public AntiXray(SpigotWorldConfig config) {
         // Set all listed blocks as true to be obfuscated
-        for ( int id : ( config.engineMode == 1 ) ? config.hiddenBlocks : config.replaceBlocks )
-        {
+        for (int id : (config.engineMode == 1) ? config.hiddenBlocks : config.replaceBlocks) {
             obfuscateBlocks[id] = true;
         }
 
         // For every block
         TByteSet blocks = new TByteHashSet();
-        for ( Integer i : config.hiddenBlocks )
-        {
-            Block block = Block.getById( i );
+        for (Integer i : config.hiddenBlocks) {
+            Block block = Block.getById(i);
             // Check it exists and is not a tile entity
-            if ( block != null && !block.isTileEntity() )
-            {
+            if (block != null && !block.isTileEntity()) {
                 // Add it to the set of replacement blocks
-                blocks.add( (byte) (int) i );
+                blocks.add((byte) (int) i);
             }
         }
         // Bake it to a flat array of replacements
         replacementOres = blocks.toArray();
     }
 
+    private static boolean isLoaded(World world, int x, int y, int z, int radius) {
+        return world.isLoaded(x, y, z)
+                && (radius == 0 ||
+                (isLoaded(world, x + 1, y, z, radius - 1)
+                        && isLoaded(world, x - 1, y, z, radius - 1)
+                        && isLoaded(world, x, y + 1, z, radius - 1)
+                        && isLoaded(world, x, y - 1, z, radius - 1)
+                        && isLoaded(world, x, y, z + 1, radius - 1)
+                        && isLoaded(world, x, y, z - 1, radius - 1)));
+    }
+
+    private static boolean hasTransparentBlockAdjacent(World world, int x, int y, int z, int radius) {
+        return !isSolidBlock(world.getType(x, y, z, false)) /* isSolidBlock */
+                || (radius > 0
+                && (hasTransparentBlockAdjacent(world, x + 1, y, z, radius - 1)
+                || hasTransparentBlockAdjacent(world, x - 1, y, z, radius - 1)
+                || hasTransparentBlockAdjacent(world, x, y + 1, z, radius - 1)
+                || hasTransparentBlockAdjacent(world, x, y - 1, z, radius - 1)
+                || hasTransparentBlockAdjacent(world, x, y, z + 1, radius - 1)
+                || hasTransparentBlockAdjacent(world, x, y, z - 1, radius - 1)));
+    }
+
+    private static boolean isSolidBlock(Block block) {
+        // Mob spawners are treated as solid blocks as far as the
+        // game is concerned for lighting and other tasks but for
+        // rendering they can be seen through therefor we special
+        // case them so that the antixray doesn't show the fake
+        // blocks around them.
+        return block.r() && block != Blocks.MOB_SPAWNER;
+    }
+
     /**
      * Starts the timings handler, then updates all blocks within the set radius
      * of the given coordinate, revealing them if they are hidden ores.
      */
-    public void updateNearbyBlocks(World world, int x, int y, int z)
-    {
-        if ( world.spigotConfig.antiXray )
-        {
+    public void updateNearbyBlocks(World world, int x, int y, int z) {
+        if (world.spigotConfig.antiXray) {
             update.startTiming();
-            updateNearbyBlocks( world, x, y, z, 2, false ); // 2 is the radius, we shouldn't change it as that would make it exponentially slower
+            updateNearbyBlocks(world, x, y, z, 2, false); // 2 is the radius, we shouldn't change it as that would make it exponentially slower
             update.stopTiming();
         }
     }
@@ -60,12 +84,10 @@ public class AntiXray
      * Starts the timings handler, and then removes all non exposed ores from
      * the chunk buffer.
      */
-    public void obfuscateSync(int chunkX, int chunkY, int bitmask, byte[] buffer, World world)
-    {
-        if ( world.spigotConfig.antiXray )
-        {
+    public void obfuscateSync(int chunkX, int chunkY, int bitmask, byte[] buffer, World world) {
+        if (world.spigotConfig.antiXray) {
             obfuscate.startTiming();
-            obfuscate( chunkX, chunkY, bitmask, buffer, world, false );
+            obfuscate(chunkX, chunkY, bitmask, buffer, world, false);
             obfuscate.stopTiming();
         }
     }
@@ -73,11 +95,9 @@ public class AntiXray
     /**
      * Removes all non exposed ores from the chunk buffer.
      */
-    public void obfuscate(int chunkX, int chunkY, int bitmask, byte[] buffer, World world, boolean newFormat)
-    {
+    public void obfuscate(int chunkX, int chunkY, int bitmask, byte[] buffer, World world, boolean newFormat) {
         // If the world is marked as obfuscated
-        if ( world.spigotConfig.antiXray )
-        {
+        if (world.spigotConfig.antiXray) {
             // Initial radius to search around for air
             int initialRadius = 1;
             // Which block in the buffer we are looking at, anywhere from 0 to 16^4
@@ -90,8 +110,7 @@ public class AntiXray
             int startZ = chunkY << 4;
 
             byte replaceWithTypeId;
-            switch ( world.getWorld().getEnvironment() )
-            {
+            switch (world.getWorld().getEnvironment()) {
                 case NETHER:
                     replaceWithTypeId = (byte) CraftMagicNumbers.getId(Blocks.NETHERRACK);
                     break;
@@ -104,80 +123,63 @@ public class AntiXray
             }
 
             // Chunks can have up to 16 sections
-            for ( int i = 0; i < 16; i++ )
-            {
+            for (int i = 0; i < 16; i++) {
                 // If the bitmask indicates this chunk is sent...
-                if ( ( bitmask & 1 << i ) != 0 )
-                {
+                if ((bitmask & 1 << i) != 0) {
                     // Work through all blocks in the chunk, y,z,x
-                    for ( int y = 0; y < 16; y++ )
-                    {
-                        for ( int z = 0; z < 16; z++ )
-                        {
-                            for ( int x = 0; x < 16; x++ )
-                            {
+                    for (int y = 0; y < 16; y++) {
+                        for (int z = 0; z < 16; z++) {
+                            for (int x = 0; x < 16; x++) {
                                 // For some reason we can get too far ahead of ourselves (concurrent modification on bulk chunks?) so if we do, just abort and move on
-                                if ( index >= buffer.length )
-                                {
+                                if (index >= buffer.length) {
                                     index++;
-                                    if ( newFormat ) index++;
+                                    if (newFormat) index++;
                                     continue;
                                 }
                                 // Grab the block ID in the buffer.
                                 // TODO: extended IDs are not yet supported
                                 int blockId;
                                 int data = 0;
-                                if ( newFormat )
-                                {
-                                    blockId = (buffer[ index ] & 0xFF) | ( ( buffer[ index + 1 ] & 0xFF ) << 8 );
+                                if (newFormat) {
+                                    blockId = (buffer[index] & 0xFF) | ((buffer[index + 1] & 0xFF) << 8);
                                     data = blockId & 0xF;
                                     blockId >>>= 4; // Remove data value
-                                } else
-                                {
-                                    blockId = buffer[ index ] & 0xFF;
+                                } else {
+                                    blockId = buffer[index] & 0xFF;
                                 }
                                 // Check if the block should be obfuscated
-                                if ( obfuscateBlocks[blockId] )
-                                {
+                                if (obfuscateBlocks[blockId]) {
                                     // The world isn't loaded, bail out
-                                    if ( !isLoaded( world, startX + x, ( i << 4 ) + y, startZ + z, initialRadius ) )
-                                    {
+                                    if (!isLoaded(world, startX + x, (i << 4) + y, startZ + z, initialRadius)) {
                                         index++;
-                                        if ( newFormat ) index++;
+                                        if (newFormat) index++;
                                         continue;
                                     }
                                     // On the otherhand, if radius is 0, or the nearby blocks are all non air, we can obfuscate
-                                    if ( !hasTransparentBlockAdjacent( world, startX + x, ( i << 4 ) + y, startZ + z, initialRadius ) )
-                                    {
-                                        switch ( world.spigotConfig.engineMode )
-                                        {
+                                    if (!hasTransparentBlockAdjacent(world, startX + x, (i << 4) + y, startZ + z, initialRadius)) {
+                                        switch (world.spigotConfig.engineMode) {
                                             case 1:
                                                 // Replace with replacement material
-                                                if ( newFormat )
-                                                {
+                                                if (newFormat) {
                                                     char replace = (char) ((replaceWithTypeId << 4) | data);
-                                                    buffer[ index ] = (byte) ( replace & 0xFF );
-                                                    buffer[ index + 1 ] = (byte) ( ( replace >> 8 ) & 0xFF );
-                                                } else
-                                                {
-                                                    buffer[ index ] = replaceWithTypeId;
+                                                    buffer[index] = (byte) (replace & 0xFF);
+                                                    buffer[index + 1] = (byte) ((replace >> 8) & 0xFF);
+                                                } else {
+                                                    buffer[index] = replaceWithTypeId;
                                                 }
                                                 break;
                                             case 2:
                                                 // Replace with random ore.
-                                                if ( randomOre >= replacementOres.length )
-                                                {
+                                                if (randomOre >= replacementOres.length) {
                                                     randomOre = 0;
                                                 }
-                                                if ( newFormat )
-                                                {
-                                                    char replace = (char) (replacementOres[ randomOre++ ] & 0xFF);
+                                                if (newFormat) {
+                                                    char replace = (char) (replacementOres[randomOre++] & 0xFF);
                                                     replace = (char) ((replace << 4) | data);
-                                                    buffer[ index ] = (byte) ( replace & 0xFF );
-                                                    buffer[ index + 1 ] = (byte) ( ( replace >> 8 ) & 0xFF );
-                                                } else
-                                                {
-                                                    buffer[ index ] = replacementOres[ randomOre++ ];
+                                                    buffer[index] = (byte) (replace & 0xFF);
+                                                    buffer[index + 1] = (byte) ((replace >> 8) & 0xFF);
+                                                } else {
+                                                    buffer[index] = replacementOres[randomOre++];
                                                 }
                                                 break;
                                         }
@@ -194,64 +196,27 @@ public class AntiXray
         }
     }
 
-    private void updateNearbyBlocks(World world, int x, int y, int z, int radius, boolean updateSelf)
-    {
+    private void updateNearbyBlocks(World world, int x, int y, int z, int radius, boolean updateSelf) {
         // If the block in question is loaded
-        if ( world.isLoaded( x, y, z ) )
-        {
+        if (world.isLoaded(x, y, z)) {
             // Get block id
             Block block = world.getType(x, y, z);
 
             // See if it needs update
-            if ( updateSelf && obfuscateBlocks[Block.getId( block )] )
-            {
+            if (updateSelf && obfuscateBlocks[Block.getId(block)]) {
                 // Send the update
-                world.notify( x, y, z );
+                world.notify(x, y, z);
             }
 
             // Check other blocks for updates
-            if ( radius > 0 )
-            {
-                updateNearbyBlocks( world, x + 1, y, z, radius - 1, true );
-                updateNearbyBlocks( world, x - 1, y, z, radius - 1, true );
-                updateNearbyBlocks( world, x, y + 1, z, radius - 1, true );
-                updateNearbyBlocks( world, x, y - 1, z, radius - 1, true );
-                updateNearbyBlocks( world, x, y, z + 1, radius - 1, true );
-                updateNearbyBlocks( world, x, y, z - 1, radius - 1, true );
+            if (radius > 0) {
+                updateNearbyBlocks(world, x + 1, y, z, radius - 1, true);
+                updateNearbyBlocks(world, x - 1, y, z, radius - 1, true);
+                updateNearbyBlocks(world, x, y + 1, z, radius - 1, true);
+                updateNearbyBlocks(world, x, y - 1, z, radius - 1, true);
+                updateNearbyBlocks(world, x, y, z + 1, radius - 1, true);
+                updateNearbyBlocks(world, x, y, z - 1, radius - 1, true);
             }
         }
     }
-
-    private static boolean isLoaded(World world, int x, int y, int z, int radius)
-    {
-        return world.isLoaded( x, y, z )
-                && ( radius == 0 ||
-                ( isLoaded( world, x + 1, y, z, radius - 1 )
-                && isLoaded( world, x - 1, y, z, radius - 1 )
-                && isLoaded( world, x, y + 1, z, radius - 1 )
-                && isLoaded( world, x, y - 1, z, radius - 1 )
-                && isLoaded( world, x, y, z + 1, radius - 1 )
-                && isLoaded( world, x, y, z - 1, radius - 1 ) ) );
-    }
-
-    private static boolean hasTransparentBlockAdjacent(World world, int x, int y, int z, int radius)
-    {
-        return !isSolidBlock(world.getType(x, y, z, false)) /* isSolidBlock */
-                || ( radius > 0
-                && ( hasTransparentBlockAdjacent( world, x + 1, y, z, radius - 1 )
-                || hasTransparentBlockAdjacent( world, x - 1, y, z, radius - 1 )
-                || hasTransparentBlockAdjacent( world, x, y + 1, z, radius - 1 )
-                || hasTransparentBlockAdjacent( world, x, y - 1, z, radius - 1 )
-                || hasTransparentBlockAdjacent( world, x, y, z + 1, radius - 1 )
-                || hasTransparentBlockAdjacent( world, x, y, z - 1, radius - 1 ) ) );
-    }
-
-    private static boolean isSolidBlock(Block block) {
-        // Mob spawners are treated as solid blocks as far as the
-        // game is concerned for lighting and other tasks but for
-        // rendering they can be seen through therefor we special
-        // case them so that the antixray doesn't show the fake
-        // blocks around them.
-        return block.r() && block != Blocks.MOB_SPAWNER;
-    }
 }
diff --git a/src/main/java/org/spigotmc/AsyncCatcher.java b/src/main/java/org/spigotmc/AsyncCatcher.java
index f7e8d16..977bc02 100644
--- a/src/main/java/org/spigotmc/AsyncCatcher.java
+++ b/src/main/java/org/spigotmc/AsyncCatcher.java
@@ -2,16 +2,13 @@ package org.spigotmc;
 
 import net.minecraft.server.MinecraftServer;
 
-public class AsyncCatcher
-{
+public class AsyncCatcher {
 
     public static boolean enabled = org.github.paperspigot.PaperSpigotConfig.asyncCatcherFeature; // PaperSpigot - Allow disabling of AsyncCatcher from PaperSpigotConfig
 
-    public static void catchOp(String reason)
-    {
-        if ( enabled && Thread.currentThread() != MinecraftServer.getServer().primaryThread )
-        {
-            throw new IllegalStateException( "Asynchronous " + reason + "!" );
+    public static void catchOp(String reason) {
+        if (enabled && Thread.currentThread() != MinecraftServer.getServer().primaryThread) {
+            throw new IllegalStateException("Asynchronous " + reason + "!");
         }
     }
 }
diff --git a/src/main/java/org/spigotmc/CachedMojangAPIConnection.java b/src/main/java/org/spigotmc/CachedMojangAPIConnection.java
index 42edeba..c7222af 100644
--- a/src/main/java/org/spigotmc/CachedMojangAPIConnection.java
+++ b/src/main/java/org/spigotmc/CachedMojangAPIConnection.java
@@ -19,8 +19,11 @@ import java.net.Proxy;
 import java.net.URL;
 import java.util.concurrent.TimeUnit;
 
-public class CachedMojangAPIConnection extends HttpURLConnection
-{
+public class CachedMojangAPIConnection extends HttpURLConnection {
+    private static final Cache<String, String> cache = CacheBuilder.newBuilder()
+            .maximumSize(10000)
+            .expireAfterAccess(1, TimeUnit.HOURS)
+            .build();
     private final CachedStreamHandlerFactory.CachedStreamHandler cachedStreamHandler;
     private final Proxy proxy;
     private final ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
@@ -28,117 +31,93 @@ public class CachedMojangAPIConnection extends HttpURLConnection
     private InputStream errorStream;
     private boolean outClosed = false;
 
-    private static final Cache<String, String> cache = CacheBuilder.newBuilder()
-            .maximumSize( 10000 )
-            .expireAfterAccess( 1, TimeUnit.HOURS )
-            .build();
-
-    public CachedMojangAPIConnection(CachedStreamHandlerFactory.CachedStreamHandler cachedStreamHandler, URL url, Proxy proxy)
-    {
-        super( url );
+    public CachedMojangAPIConnection(CachedStreamHandlerFactory.CachedStreamHandler cachedStreamHandler, URL url, Proxy proxy) {
+        super(url);
         this.cachedStreamHandler = cachedStreamHandler;
         this.proxy = proxy;
     }
 
     @Override
-    public void disconnect()
-    {
+    public void disconnect() {
 
     }
 
     @Override
-    public boolean usingProxy()
-    {
+    public boolean usingProxy() {
         return proxy != null;
     }
 
     @Override
-    public void connect() throws IOException
-    {
+    public void connect() throws IOException {
 
     }
 
     @Override
-    public InputStream getInputStream() throws IOException
-    {
-        if ( inputStream == null )
-        {
+    public InputStream getInputStream() throws IOException {
+        if (inputStream == null) {
             outClosed = true;
-            JsonArray users = new JsonParser().parse( new String( outputStream.toByteArray(), Charsets.UTF_8 ) ).getAsJsonArray();
-            StringBuilder reply = new StringBuilder( "[" );
-            StringBuilder missingUsers = new StringBuilder( "[" );
-            for ( JsonElement user : users )
-            {
+            JsonArray users = new JsonParser().parse(new String(outputStream.toByteArray(), Charsets.UTF_8)).getAsJsonArray();
+            StringBuilder reply = new StringBuilder("[");
+            StringBuilder missingUsers = new StringBuilder("[");
+            for (JsonElement user : users) {
                 String username = user.getAsString().toLowerCase();
-                String info = cache.getIfPresent( username );
-                if ( info != null )
-                {
-                    reply.append( info ).append( "," );
-                } else
-                {
+                String info = cache.getIfPresent(username);
+                if (info != null) {
+                    reply.append(info).append(",");
+                } else {
                     missingUsers
-                            .append( "\"" )
-                            .append( username )
-                            .append( "\"" )
-                            .append( "," );
+                            .append("\"")
+                            .append(username)
+                            .append("\"")
+                            .append(",");
                 }
             }
-            if ( missingUsers.length() > 1 )
-            {
-                missingUsers.deleteCharAt( missingUsers.length() - 1 ).append( "]" );
+            if (missingUsers.length() > 1) {
+                missingUsers.deleteCharAt(missingUsers.length() - 1).append("]");
             }
-            if ( missingUsers.length() > 2 )
-            {
+            if (missingUsers.length() > 2) {
                 HttpURLConnection connection;
-                if ( proxy == null )
-                {
-                    connection = (HttpURLConnection) cachedStreamHandler.getDefaultConnection( url );
-                } else
-                {
-                    connection = (HttpURLConnection) cachedStreamHandler.getDefaultConnection( url, proxy );
+                if (proxy == null) {
+                    connection = (HttpURLConnection) cachedStreamHandler.getDefaultConnection(url);
+                } else {
+                    connection = (HttpURLConnection) cachedStreamHandler.getDefaultConnection(url, proxy);
                 }
-                connection.setRequestMethod( "POST" );
-                connection.setRequestProperty( "Content-Type", "application/json" );
-                connection.setDoInput( true );
-                connection.setDoOutput( true );
+                connection.setRequestMethod("POST");
+                connection.setRequestProperty("Content-Type", "application/json");
+                connection.setDoInput(true);
+                connection.setDoOutput(true);
                 OutputStream out = connection.getOutputStream();
-                out.write( missingUsers.toString().getBytes( Charsets.UTF_8 ) );
+                out.write(missingUsers.toString().getBytes(Charsets.UTF_8));
                 out.flush();
                 out.close();
-                JsonArray newUsers = new JsonParser().parse( new InputStreamReader( connection.getInputStream(), Charsets.UTF_8 ) ).getAsJsonArray();
-                for ( JsonElement user : newUsers )
-                {
+                JsonArray newUsers = new JsonParser().parse(new InputStreamReader(connection.getInputStream(), Charsets.UTF_8)).getAsJsonArray();
+                for (JsonElement user : newUsers) {
                     JsonObject u = user.getAsJsonObject();
-                    cache.put( u.get( "name" ).getAsString(), u.toString() );
-                    reply.append( u.toString() ).append( "," );
+                    cache.put(u.get("name").getAsString(), u.toString());
+                    reply.append(u.toString()).append(",");
                 }
                 responseCode = connection.getResponseCode();
                 errorStream = connection.getErrorStream();
-            } else
-            {
+            } else {
                 responseCode = HTTP_OK;
             }
-            if ( reply.length() > 1 )
-            {
-                reply.deleteCharAt( reply.length() - 1 );
+            if (reply.length() > 1) {
+                reply.deleteCharAt(reply.length() - 1);
             }
-            inputStream = new ByteArrayInputStream( reply.append( "]" ).toString().getBytes( Charsets.UTF_8 ) );
+            inputStream = new ByteArrayInputStream(reply.append("]").toString().getBytes(Charsets.UTF_8));
         }
         return inputStream;
     }
 
     @Override
-    public InputStream getErrorStream()
-    {
+    public InputStream getErrorStream() {
         return errorStream;
     }
 
     @Override
-    public OutputStream getOutputStream() throws IOException
-    {
-        if ( outClosed )
-        {
-            throw new RuntimeException( "Write after send" );
+    public OutputStream getOutputStream() throws IOException {
+        if (outClosed) {
+            throw new RuntimeException("Write after send");
         }
         return outputStream;
     }
diff --git a/src/main/java/org/spigotmc/CachedStreamHandlerFactory.java b/src/main/java/org/spigotmc/CachedStreamHandlerFactory.java
index b9a8736..046ee42 100644
--- a/src/main/java/org/spigotmc/CachedStreamHandlerFactory.java
+++ b/src/main/java/org/spigotmc/CachedStreamHandlerFactory.java
@@ -9,106 +9,83 @@ import java.net.URLConnection;
 import java.net.URLStreamHandler;
 import java.net.URLStreamHandlerFactory;
 
-public class CachedStreamHandlerFactory implements URLStreamHandlerFactory
-{
+public class CachedStreamHandlerFactory implements URLStreamHandlerFactory {
     public static boolean isSet = false;
 
     @Override
-    public URLStreamHandler createURLStreamHandler(String protocol)
-    {
-        if ( protocol.equals( "http" ) || protocol.equals( "https" ) )
-        {
-            return new CachedStreamHandler( protocol );
+    public URLStreamHandler createURLStreamHandler(String protocol) {
+        if (protocol.equals("http") || protocol.equals("https")) {
+            return new CachedStreamHandler(protocol);
         }
         return null;
     }
 
-    public class CachedStreamHandler extends URLStreamHandler
-    {
+    public class CachedStreamHandler extends URLStreamHandler {
         private final String protocol;
         private final URLStreamHandler handler;
         private final Method openCon;
         private final Method openConProxy;
 
-        public CachedStreamHandler(String protocol)
-        {
+        public CachedStreamHandler(String protocol) {
             this.protocol = protocol;
-            if ( protocol.equals( "http" ) )
-            {
+            if (protocol.equals("http")) {
                 handler = new sun.net.www.protocol.http.Handler();
-            } else
-            {
+            } else {
                 handler = new sun.net.www.protocol.https.Handler();
             }
-            try
-            {
-                openCon = handler.getClass().getDeclaredMethod( "openConnection", URL.class );
-                openCon.setAccessible( true );
-                openConProxy = handler.getClass().getDeclaredMethod( "openConnection", URL.class, Proxy.class );
-                openConProxy.setAccessible( true );
-            } catch ( NoSuchMethodException e )
-            {
-                throw new RuntimeException( e );
+            try {
+                openCon = handler.getClass().getDeclaredMethod("openConnection", URL.class);
+                openCon.setAccessible(true);
+                openConProxy = handler.getClass().getDeclaredMethod("openConnection", URL.class, Proxy.class);
+                openConProxy.setAccessible(true);
+            } catch (NoSuchMethodException e) {
+                throw new RuntimeException(e);
             }
         }
 
         @Override
-        protected URLConnection openConnection(URL u) throws IOException
-        {
-            if ( u.getHost().equals( "api.mojang.com" )
-                    || u.getPath().startsWith( "/profiles/minecraft" ) )
-            {
-                return cachedConnection( u );
+        protected URLConnection openConnection(URL u) throws IOException {
+            if (u.getHost().equals("api.mojang.com")
+                    || u.getPath().startsWith("/profiles/minecraft")) {
+                return cachedConnection(u);
             }
-            return getDefaultConnection( u );
+            return getDefaultConnection(u);
         }
 
         @Override
-        protected URLConnection openConnection(URL u, Proxy p) throws IOException
-        {
-            if ( u.getHost().equals( "api.mojang.com" )
-                    || u.getPath().startsWith( "/profiles/minecraft" ) )
-            {
-                return cachedConnection( u, p );
+        protected URLConnection openConnection(URL u, Proxy p) throws IOException {
+            if (u.getHost().equals("api.mojang.com")
+                    || u.getPath().startsWith("/profiles/minecraft")) {
+                return cachedConnection(u, p);
             }
-            return getDefaultConnection( u, p );
+            return getDefaultConnection(u, p);
         }
 
-        private URLConnection cachedConnection(URL u)
-        {
-            return cachedConnection( u, null );
+        private URLConnection cachedConnection(URL u) {
+            return cachedConnection(u, null);
         }
 
-        private URLConnection cachedConnection(URL u, Proxy p)
-        {
-            return new CachedMojangAPIConnection( this, u, p );
+        private URLConnection cachedConnection(URL u, Proxy p) {
+            return new CachedMojangAPIConnection(this, u, p);
         }
 
-        public URLConnection getDefaultConnection(URL u)
-        {
-            try
-            {
-                return (URLConnection) openCon.invoke( handler, u );
-            } catch ( IllegalAccessException e )
-            {
+        public URLConnection getDefaultConnection(URL u) {
+            try {
+                return (URLConnection) openCon.invoke(handler, u);
+            } catch (IllegalAccessException e) {
                 e.printStackTrace();
-            } catch ( InvocationTargetException e )
-            {
+            } catch (InvocationTargetException e) {
                 e.printStackTrace();
             }
             return null;
         }
 
-        public URLConnection getDefaultConnection(URL u, Proxy p)
-        {
-            try
-            {
-                return (URLConnection) openConProxy.invoke( handler, u, p );
-            } catch ( IllegalAccessException e )
-            {
+        public URLConnection getDefaultConnection(URL u, Proxy p) {
+            try {
+                return (URLConnection) openConProxy.invoke(handler, u, p);
+            } catch (IllegalAccessException e) {
                 e.printStackTrace();
-            } catch ( InvocationTargetException e )
-            {
+            } catch (InvocationTargetException e) {
                 e.printStackTrace();
             }
             return null;
diff --git a/src/main/java/org/spigotmc/LimitStream.java b/src/main/java/org/spigotmc/LimitStream.java
index 1804518..34ccc58 100644
--- a/src/main/java/org/spigotmc/LimitStream.java
+++ b/src/main/java/org/spigotmc/LimitStream.java
@@ -1,39 +1,35 @@
 package org.spigotmc;
 
+import net.minecraft.server.NBTReadLimiter;
+
 import java.io.FilterInputStream;
 import java.io.IOException;
 import java.io.InputStream;
-import net.minecraft.server.NBTReadLimiter;
 
-public class LimitStream extends FilterInputStream
-{
+public class LimitStream extends FilterInputStream {
 
     private final NBTReadLimiter limit;
 
-    public LimitStream(InputStream is, NBTReadLimiter limit)
-    {
-        super( is );
+    public LimitStream(InputStream is, NBTReadLimiter limit) {
+        super(is);
         this.limit = limit;
     }
 
     @Override
-    public int read() throws IOException
-    {
-        limit.a( 8 ); // PaperSpigot - backport security fix
+    public int read() throws IOException {
+        limit.a(8); // PaperSpigot - backport security fix
         return super.read();
     }
 
     @Override
-    public int read(byte[] b) throws IOException
-    {
-        limit.a( b.length * 8 ); // PaperSpigot - backport security fix
-        return super.read( b );
+    public int read(byte[] b) throws IOException {
+        limit.a(b.length * 8); // PaperSpigot - backport security fix
+        return super.read(b);
     }
 
     @Override
-    public int read(byte[] b, int off, int len) throws IOException
-    {
-        limit.a( len * 8 ); // PaperSpigot - backport security fix
-        return super.read( b, off, len );
+    public int read(byte[] b, int off, int len) throws IOException {
+        limit.a(len * 8); // PaperSpigot - backport security fix
+        return super.read(b, off, len);
     }
 }
diff --git a/src/main/java/org/spigotmc/ProtocolData.java b/src/main/java/org/spigotmc/ProtocolData.java
index ff93cbe..8dce0da 100644
--- a/src/main/java/org/spigotmc/ProtocolData.java
+++ b/src/main/java/org/spigotmc/ProtocolData.java
@@ -1,189 +1,158 @@
 package org.spigotmc;
 
-public class ProtocolData
-{
-    public static class ByteShort extends Number
-    {
+public class ProtocolData {
+    public static class ByteShort extends Number {
 
         private short value;
 
-        public ByteShort(short value)
-        {
+        public ByteShort(short value) {
             this.value = value;
         }
 
         @Override
-        public int intValue()
-        {
+        public int intValue() {
             return value;
         }
 
         @Override
-        public long longValue()
-        {
+        public long longValue() {
             return value;
         }
 
         @Override
-        public float floatValue()
-        {
+        public float floatValue() {
             return value;
         }
 
         @Override
-        public double doubleValue()
-        {
+        public double doubleValue() {
             return value;
         }
     }
 
-    public static class DualByte extends Number
-    {
+    public static class DualByte extends Number {
 
         public byte value;
         public byte value2;
 
-        public DualByte(byte value, byte value2)
-        {
+        public DualByte(byte value, byte value2) {
             this.value = value;
             this.value2 = value2;
         }
 
         @Override
-        public int intValue()
-        {
+        public int intValue() {
             return value;
         }
 
         @Override
-        public long longValue()
-        {
+        public long longValue() {
             return value;
         }
 
         @Override
-        public float floatValue()
-        {
+        public float floatValue() {
             return value;
         }
 
         @Override
-        public double doubleValue()
-        {
+        public double doubleValue() {
             return value;
         }
     }
 
-    public static class HiddenByte extends Number
-    {
+    public static class HiddenByte extends Number {
 
         private byte value;
 
-        public HiddenByte(byte value)
-        {
+        public HiddenByte(byte value) {
             this.value = value;
         }
 
         @Override
-        public int intValue()
-        {
+        public int intValue() {
             return value;
         }
 
         @Override
-        public long longValue()
-        {
+        public long longValue() {
             return value;
         }
 
         @Override
-        public float floatValue()
-        {
+        public float floatValue() {
             return value;
         }
 
         @Override
-        public double doubleValue()
-        {
+        public double doubleValue() {
             return value;
         }
     }
-    public static class IntByte extends Number
-    {
+
+    public static class IntByte extends Number {
 
         public int value;
         public byte value2;
 
-        public IntByte(int value, byte value2)
-        {
+        public IntByte(int value, byte value2) {
             this.value = value;
             this.value2 = value2;
         }
 
         @Override
-        public byte byteValue()
-        {
+        public byte byteValue() {
             return value2;
         }
 
         @Override
-        public int intValue()
-        {
+        public int intValue() {
             return value;
         }
 
         @Override
-        public long longValue()
-        {
+        public long longValue() {
             return value;
         }
 
         @Override
-        public float floatValue()
-        {
+        public float floatValue() {
             return value;
         }
 
         @Override
-        public double doubleValue()
-        {
+        public double doubleValue() {
             return value;
         }
     }
 
-    public static class DualInt extends Number
-    {
+    public static class DualInt extends Number {
 
         public int value;
         public int value2;
 
-        public DualInt(int value, int value2)
-        {
+        public DualInt(int value, int value2) {
             this.value = value;
             this.value2 = value2;
         }
 
         @Override
-        public int intValue()
-        {
+        public int intValue() {
             return value;
         }
 
         @Override
-        public long longValue()
-        {
+        public long longValue() {
             return value;
         }
 
         @Override
-        public float floatValue()
-        {
+        public float floatValue() {
             return value;
         }
 
         @Override
-        public double doubleValue()
-        {
+        public double doubleValue() {
             return value;
         }
     }
diff --git a/src/main/java/org/spigotmc/ProtocolInjector.java b/src/main/java/org/spigotmc/ProtocolInjector.java
index 3b2df91..68ad9bf 100644
--- a/src/main/java/org/spigotmc/ProtocolInjector.java
+++ b/src/main/java/org/spigotmc/ProtocolInjector.java
@@ -12,62 +12,53 @@ import java.io.IOException;
 import java.lang.reflect.Field;
 import java.util.Map;
 
-public class ProtocolInjector
-{
-    public static void inject()
-    {
-        try
-        {
-            addPacket( EnumProtocol.LOGIN, true, 0x3, PacketLoginCompression.class );
-
-            addPacket( EnumProtocol.PLAY, true, 0x45, PacketTitle.class );
-            addPacket( EnumProtocol.PLAY, true, 0x47, PacketTabHeader.class );
-            addPacket( EnumProtocol.PLAY, true, 0x48, PacketPlayResourcePackSend.class );
-            addPacket( EnumProtocol.PLAY, false, 0x19, PacketPlayResourcePackStatus.class );
-        } catch ( NoSuchFieldException e )
-        {
+public class ProtocolInjector {
+    public static void inject() {
+        try {
+            addPacket(EnumProtocol.LOGIN, true, 0x3, PacketLoginCompression.class);
+
+            addPacket(EnumProtocol.PLAY, true, 0x45, PacketTitle.class);
+            addPacket(EnumProtocol.PLAY, true, 0x47, PacketTabHeader.class);
+            addPacket(EnumProtocol.PLAY, true, 0x48, PacketPlayResourcePackSend.class);
+            addPacket(EnumProtocol.PLAY, false, 0x19, PacketPlayResourcePackStatus.class);
+        } catch (NoSuchFieldException e) {
             e.printStackTrace();
-        } catch ( IllegalAccessException e )
-        {
+        } catch (IllegalAccessException e) {
             e.printStackTrace();
         }
     }
 
-    private static void addPacket(EnumProtocol protocol, boolean clientbound, int id, Class<? extends Packet> packet) throws NoSuchFieldException, IllegalAccessException
-    {
+    private static void addPacket(EnumProtocol protocol, boolean clientbound, int id, Class<? extends Packet> packet) throws NoSuchFieldException, IllegalAccessException {
         Field packets;
         if (!clientbound) {
-            packets = EnumProtocol.class.getDeclaredField( "h" );
+            packets = EnumProtocol.class.getDeclaredField("h");
         } else {
-            packets = EnumProtocol.class.getDeclaredField( "i" );
-        }
-        packets.setAccessible( true );
-        BiMap<Integer, Class<? extends Packet>> pMap = (BiMap<Integer, Class<? extends Packet>>) packets.get( protocol );
-        pMap.put( id, packet );
-        Field map = EnumProtocol.class.getDeclaredField( "f" );
-        map.setAccessible( true );
-        Map<Class<? extends Packet>, EnumProtocol> protocolMap = (Map<Class<? extends Packet>, EnumProtocol>) map.get( null );
-        protocolMap.put( packet, protocol );
+            packets = EnumProtocol.class.getDeclaredField("i");
+        }
+        packets.setAccessible(true);
+        BiMap<Integer, Class<? extends Packet>> pMap = (BiMap<Integer, Class<? extends Packet>>) packets.get(protocol);
+        pMap.put(id, packet);
+        Field map = EnumProtocol.class.getDeclaredField("f");
+        map.setAccessible(true);
+        Map<Class<? extends Packet>, EnumProtocol> protocolMap = (Map<Class<? extends Packet>, EnumProtocol>) map.get(null);
+        protocolMap.put(packet, protocol);
     }
 
     public static class PacketPlayResourcePackStatus extends Packet {
 
         @Override
-        public void a(PacketDataSerializer packetdataserializer) throws IOException
-        {
-            packetdataserializer.c( 255 ); // Hash
+        public void a(PacketDataSerializer packetdataserializer) throws IOException {
+            packetdataserializer.c(255); // Hash
             packetdataserializer.a(); // Result
         }
 
         @Override
-        public void b(PacketDataSerializer packetdataserializer) throws IOException
-        {
+        public void b(PacketDataSerializer packetdataserializer) throws IOException {
 
         }
 
         @Override
-        public void handle(PacketListener packetlistener)
-        {
+        public void handle(PacketListener packetlistener) {
 
         }
     }
@@ -77,28 +68,24 @@ public class ProtocolInjector
         private String url;
         private String hash;
 
-        public PacketPlayResourcePackSend(String url, String hash)
-        {
+        public PacketPlayResourcePackSend(String url, String hash) {
             this.url = url;
             this.hash = hash;
         }
 
         @Override
-        public void a(PacketDataSerializer packetdataserializer) throws IOException
-        {
+        public void a(PacketDataSerializer packetdataserializer) throws IOException {
 
         }
 
         @Override
-        public void b(PacketDataSerializer packetdataserializer) throws IOException
-        {
-            packetdataserializer.a( url );
-            packetdataserializer.a( hash );
+        public void b(PacketDataSerializer packetdataserializer) throws IOException {
+            packetdataserializer.a(url);
+            packetdataserializer.a(hash);
         }
 
         @Override
-        public void handle(PacketListener packetlistener)
-        {
+        public void handle(PacketListener packetlistener) {
 
         }
     }
@@ -107,68 +94,57 @@ public class ProtocolInjector
 
         private int threshold;
 
-        public PacketLoginCompression(int threshold)
-        {
+        public PacketLoginCompression(int threshold) {
             this.threshold = threshold;
         }
 
         @Override
-        public void a(PacketDataSerializer packetdataserializer) throws IOException
-        {
+        public void a(PacketDataSerializer packetdataserializer) throws IOException {
 
         }
 
         @Override
-        public void b(PacketDataSerializer packetdataserializer) throws IOException
-        {
-            packetdataserializer.b( threshold );
+        public void b(PacketDataSerializer packetdataserializer) throws IOException {
+            packetdataserializer.b(threshold);
         }
 
         @Override
-        public void handle(PacketListener packetlistener)
-        {
+        public void handle(PacketListener packetlistener) {
 
         }
     }
 
-    public static class PacketTabHeader extends Packet
-    {
+    public static class PacketTabHeader extends Packet {
 
         private IChatBaseComponent header;
         private IChatBaseComponent footer;
 
-        public PacketTabHeader()
-        {
+        public PacketTabHeader() {
         }
 
-        public PacketTabHeader(IChatBaseComponent header, IChatBaseComponent footer)
-        {
+        public PacketTabHeader(IChatBaseComponent header, IChatBaseComponent footer) {
             this.header = header;
             this.footer = footer;
         }
 
         @Override
-        public void a(PacketDataSerializer packetdataserializer) throws IOException
-        {
-            this.header = ChatSerializer.a( packetdataserializer.c( 32767 ) );
-            this.footer = ChatSerializer.a( packetdataserializer.c( 32767 ) );
+        public void a(PacketDataSerializer packetdataserializer) throws IOException {
+            this.header = ChatSerializer.a(packetdataserializer.c(32767));
+            this.footer = ChatSerializer.a(packetdataserializer.c(32767));
         }
 
         @Override
-        public void b(PacketDataSerializer packetdataserializer) throws IOException
-        {
-            packetdataserializer.a( ChatSerializer.a( this.header ) );
-            packetdataserializer.a( ChatSerializer.a( this.footer ) );
+        public void b(PacketDataSerializer packetdataserializer) throws IOException {
+            packetdataserializer.a(ChatSerializer.a(this.header));
+            packetdataserializer.a(ChatSerializer.a(this.footer));
         }
 
         @Override
-        public void handle(PacketListener packetlistener)
-        {
+        public void handle(PacketListener packetlistener) {
         }
     }
 
-    public static class PacketTitle extends Packet
-    {
+    public static class PacketTitle extends Packet {
         private Action action;
 
         // TITLE & SUBTITLE
@@ -179,22 +155,20 @@ public class ProtocolInjector
         private int stay = -1;
         private int fadeOut = -1;
 
-        public PacketTitle() {}
+        public PacketTitle() {
+        }
 
-        public PacketTitle(Action action)
-        {
+        public PacketTitle(Action action) {
             this.action = action;
         }
 
-        public PacketTitle(Action action, IChatBaseComponent text)
-        {
-            this( action );
+        public PacketTitle(Action action, IChatBaseComponent text) {
+            this(action);
             this.text = text;
         }
 
-        public PacketTitle(Action action, int fadeIn, int stay, int fadeOut)
-        {
-            this( action );
+        public PacketTitle(Action action, int fadeIn, int stay, int fadeOut) {
+            this(action);
             this.fadeIn = fadeIn;
             this.stay = stay;
             this.fadeOut = fadeOut;
@@ -202,14 +176,12 @@ public class ProtocolInjector
 
 
         @Override
-        public void a(PacketDataSerializer packetdataserializer) throws IOException
-        {
+        public void a(PacketDataSerializer packetdataserializer) throws IOException {
             this.action = Action.values()[packetdataserializer.a()];
-            switch ( action )
-            {
+            switch (action) {
                 case TITLE:
                 case SUBTITLE:
-                    this.text = ChatSerializer.a( packetdataserializer.c(32767) );
+                    this.text = ChatSerializer.a(packetdataserializer.c(32767));
                     break;
                 case TIMES:
                     this.fadeIn = packetdataserializer.readInt();
@@ -220,29 +192,26 @@ public class ProtocolInjector
         }
 
         @Override
-        public void b(PacketDataSerializer packetdataserializer) throws IOException
-        {
-            packetdataserializer.b( action.ordinal() );
-            switch ( action )
-            {
+        public void b(PacketDataSerializer packetdataserializer) throws IOException {
+            packetdataserializer.b(action.ordinal());
+            switch (action) {
                 case TITLE:
                 case SUBTITLE:
-                    packetdataserializer.a( ChatSerializer.a( this.text ) );
+                    packetdataserializer.a(ChatSerializer.a(this.text));
                     break;
                 case TIMES:
-                    packetdataserializer.writeInt( this.fadeIn );
-                    packetdataserializer.writeInt( this.stay );
-                    packetdataserializer.writeInt( this.fadeOut );
+                    packetdataserializer.writeInt(this.fadeIn);
+                    packetdataserializer.writeInt(this.stay);
+                    packetdataserializer.writeInt(this.fadeOut);
                     break;
             }
         }
 
         @Override
-        public void handle(PacketListener packetlistener)
-        {
+        public void handle(PacketListener packetlistener) {
         }
 
-        public static enum Action {
+        public enum Action {
             TITLE,
             SUBTITLE,
             TIMES,
diff --git a/src/main/java/org/spigotmc/RestartCommand.java b/src/main/java/org/spigotmc/RestartCommand.java
index 429c258..3d68e5f 100644
--- a/src/main/java/org/spigotmc/RestartCommand.java
+++ b/src/main/java/org/spigotmc/RestartCommand.java
@@ -1,124 +1,100 @@
 package org.spigotmc;
 
-import java.io.File;
-import java.util.List;
 import net.minecraft.server.EntityPlayer;
 import net.minecraft.server.MinecraftServer;
 import org.bukkit.command.Command;
 import org.bukkit.command.CommandSender;
 
-public class RestartCommand extends Command
-{
+import java.io.File;
+import java.util.List;
+
+public class RestartCommand extends Command {
 
-    public RestartCommand(String name)
-    {
-        super( name );
+    public RestartCommand(String name) {
+        super(name);
         this.description = "Restarts the server";
         this.usageMessage = "/restart";
-        this.setPermission( "bukkit.command.restart" );
+        this.setPermission("bukkit.command.restart");
     }
 
-    @Override
-    public boolean execute(CommandSender sender, String currentAlias, String[] args)
-    {
-        if ( testPermission( sender ) )
-        {
-            MinecraftServer.getServer().processQueue.add( new Runnable()
-            {
-                @Override
-                public void run()
-                {
-                    restart();
-                }
-            } );
-        }
-        return true;
+    public static void restart() {
+        restart(new File(SpigotConfig.restartScript));
     }
 
-    public static void restart()
-    {
-        restart( new File( SpigotConfig.restartScript ) );
-    }
-
-    public static void restart(final File script)
-    {
+    public static void restart(final File script) {
         AsyncCatcher.enabled = false; // Disable async catcher incase it interferes with us
-        try
-        {
-            if ( script.isFile() )
-            {
-                System.out.println( "Attempting to restart with " + SpigotConfig.restartScript );
+        try {
+            if (script.isFile()) {
+                System.out.println("Attempting to restart with " + SpigotConfig.restartScript);
 
                 // Disable Watchdog
                 WatchdogThread.doStop();
 
                 // Kick all players
-                for ( EntityPlayer p : (List< EntityPlayer>) MinecraftServer.getServer().getPlayerList().players )
-                {
+                for (EntityPlayer p : (List<EntityPlayer>) MinecraftServer.getServer().getPlayerList().players) {
                     p.playerConnection.disconnect(SpigotConfig.restartMessage);
                 }
                 // Give the socket a chance to send the packets
-                try
-                {
-                    Thread.sleep( 100 );
-                } catch ( InterruptedException ex )
-                {
+                try {
+                    Thread.sleep(100);
+                } catch (InterruptedException ex) {
                 }
                 // Close the socket so we can rebind with the new process
                 MinecraftServer.getServer().getServerConnection().b();
 
                 // Give time for it to kick in
-                try
-                {
-                    Thread.sleep( 100 );
-                } catch ( InterruptedException ex )
-                {
+                try {
+                    Thread.sleep(100);
+                } catch (InterruptedException ex) {
                 }
 
                 // Actually shutdown
-                try
-                {
+                try {
                     MinecraftServer.getServer().stop();
-                } catch ( Throwable t )
-                {
+                } catch (Throwable t) {
                 }
 
                 // This will be done AFTER the server has completely halted
-                Thread shutdownHook = new Thread()
-                {
+                Thread shutdownHook = new Thread() {
                     @Override
-                    public void run()
-                    {
-                        try
-                        {
-                            String os = System.getProperty( "os.name" ).toLowerCase();
-                            if ( os.contains( "win" ) )
-                            {
-                                Runtime.getRuntime().exec( "cmd /c start " + script.getPath() );
-                            } else
-                            {
-                                Runtime.getRuntime().exec( new String[]
-                                {
-                                    "sh", script.getPath()
-                                } );
+                    public void run() {
+                        try {
+                            String os = System.getProperty("os.name").toLowerCase();
+                            if (os.contains("win")) {
+                                Runtime.getRuntime().exec("cmd /c start " + script.getPath());
+                            } else {
+                                Runtime.getRuntime().exec(new String[]
+                                        {
+                                                "sh", script.getPath()
+                                        });
                             }
-                        } catch ( Exception e )
-                        {
+                        } catch (Exception e) {
                             e.printStackTrace();
                         }
                     }
                 };
 
-                shutdownHook.setDaemon( true );
-                Runtime.getRuntime().addShutdownHook( shutdownHook );
-            } else
-            {
-                System.out.println( "Startup script '" + SpigotConfig.restartScript + "' does not exist! Stopping server." );
+                shutdownHook.setDaemon(true);
+                Runtime.getRuntime().addShutdownHook(shutdownHook);
+            } else {
+                System.out.println("Startup script '" + SpigotConfig.restartScript + "' does not exist! Stopping server.");
             }
-            System.exit( 0 );
-        } catch ( Exception ex )
-        {
+            System.exit(0);
+        } catch (Exception ex) {
             ex.printStackTrace();
         }
     }
+
+    @Override
+    public boolean execute(CommandSender sender, String currentAlias, String[] args) {
+        if (testPermission(sender)) {
+            MinecraftServer.getServer().processQueue.add(new Runnable() {
+                @Override
+                public void run() {
+                    restart();
+                }
+            });
+        }
+        return true;
+    }
 }
diff --git a/src/main/java/org/spigotmc/SneakyThrow.java b/src/main/java/org/spigotmc/SneakyThrow.java
index 31fc0a9..5fd7746 100644
--- a/src/main/java/org/spigotmc/SneakyThrow.java
+++ b/src/main/java/org/spigotmc/SneakyThrow.java
@@ -1,15 +1,12 @@
 package org.spigotmc;
 
-public class SneakyThrow
-{
+public class SneakyThrow {
 
-    public static void sneaky(Throwable t)
-    {
-        throw SneakyThrow.<RuntimeException>superSneaky( t );
+    public static void sneaky(Throwable t) {
+        throw SneakyThrow.<RuntimeException>superSneaky(t);
     }
 
-    private static <T extends Throwable> T superSneaky(Throwable t) throws T
-    {
+    private static <T extends Throwable> T superSneaky(Throwable t) throws T {
         throw (T) t;
     }
 }
diff --git a/src/main/java/org/spigotmc/SpigotComponentReverter.java b/src/main/java/org/spigotmc/SpigotComponentReverter.java
index 6093d62..b416de7 100644
--- a/src/main/java/org/spigotmc/SpigotComponentReverter.java
+++ b/src/main/java/org/spigotmc/SpigotComponentReverter.java
@@ -6,100 +6,81 @@ import net.minecraft.server.EnumChatFormat;
 import net.minecraft.server.IChatBaseComponent;
 import org.bukkit.ChatColor;
 
-import java.util.Iterator;
 import java.util.List;
 
-public class SpigotComponentReverter
-{
-    public static String toLegacy(IChatBaseComponent s)
-    {
+public class SpigotComponentReverter {
+    public static String toLegacy(IChatBaseComponent s) {
         StringBuilder builder = new StringBuilder();
-        legacy( builder, s );
+        legacy(builder, s);
         return builder.toString();
     }
 
-    private static void legacy(StringBuilder builder, IChatBaseComponent s)
-    {
+    private static void legacy(StringBuilder builder, IChatBaseComponent s) {
         ChatModifier modifier = s.getChatModifier();
-        colorize( builder, modifier );
-        if ( s instanceof ChatComponentText )
-        {
-            builder.append( s.e() );
+        colorize(builder, modifier);
+        if (s instanceof ChatComponentText) {
+            builder.append(s.e());
         } else {
-            throw new RuntimeException( "Unhandled type: " + s.getClass().getSimpleName() );
+            throw new RuntimeException("Unhandled type: " + s.getClass().getSimpleName());
         }
 
-        for ( IChatBaseComponent c : getExtra( s ) ) {
-            legacy( builder, c );
+        for (IChatBaseComponent c : getExtra(s)) {
+            legacy(builder, c);
         }
     }
 
-    private static void colorize(StringBuilder builder, ChatModifier modifier)
-    {
-        if ( modifier == null ) return;
+    private static void colorize(StringBuilder builder, ChatModifier modifier) {
+        if (modifier == null) return;
         // Color first
-        EnumChatFormat color = getColor( modifier );
-        if ( color == null )
-        {
+        EnumChatFormat color = getColor(modifier);
+        if (color == null) {
             color = EnumChatFormat.BLACK;
         }
-        builder.append( color.toString() );
+        builder.append(color.toString());
 
-        if ( isBold( modifier ) )
-        {
-            builder.append( ChatColor.BOLD );
+        if (isBold(modifier)) {
+            builder.append(ChatColor.BOLD);
         }
-        if ( isItalic( modifier ) )
-        {
-            builder.append( ChatColor.ITALIC );
+        if (isItalic(modifier)) {
+            builder.append(ChatColor.ITALIC);
         }
-        if ( isRandom( modifier ) )
-        {
-            builder.append( ChatColor.MAGIC );
+        if (isRandom(modifier)) {
+            builder.append(ChatColor.MAGIC);
         }
-        if ( isStrikethrough( modifier ) )
-        {
-            builder.append( ChatColor.STRIKETHROUGH );
+        if (isStrikethrough(modifier)) {
+            builder.append(ChatColor.STRIKETHROUGH);
         }
-        if ( isUnderline( modifier ) )
-        {
-            builder.append( ChatColor.UNDERLINE );
+        if (isUnderline(modifier)) {
+            builder.append(ChatColor.UNDERLINE);
         }
     }
 
     // Helpers
-    private static List<IChatBaseComponent> getExtra(IChatBaseComponent c)
-    {
+    private static List<IChatBaseComponent> getExtra(IChatBaseComponent c) {
         return c.a();
     }
 
-    private static EnumChatFormat getColor(ChatModifier c)
-    {
+    private static EnumChatFormat getColor(ChatModifier c) {
         return c.a();
     }
 
-    private static boolean isBold(ChatModifier c)
-    {
+    private static boolean isBold(ChatModifier c) {
         return c.b();
     }
 
-    private static boolean isItalic(ChatModifier c)
-    {
+    private static boolean isItalic(ChatModifier c) {
         return c.c();
     }
 
-    private static boolean isStrikethrough(ChatModifier c)
-    {
+    private static boolean isStrikethrough(ChatModifier c) {
         return c.d();
     }
 
-    private static boolean isUnderline(ChatModifier c)
-    {
+    private static boolean isUnderline(ChatModifier c) {
         return c.e();
     }
 
-    private static boolean isRandom(ChatModifier c)
-    {
+    private static boolean isRandom(ChatModifier c) {
         return c.f();
     }
 }
diff --git a/src/main/java/org/spigotmc/SpigotCompressor.java b/src/main/java/org/spigotmc/SpigotCompressor.java
index 2e0857e..1193cb6 100644
--- a/src/main/java/org/spigotmc/SpigotCompressor.java
+++ b/src/main/java/org/spigotmc/SpigotCompressor.java
@@ -7,35 +7,31 @@ import net.minecraft.util.io.netty.handler.codec.MessageToByteEncoder;
 
 import java.util.zip.Deflater;
 
-public class SpigotCompressor extends MessageToByteEncoder
-{
+public class SpigotCompressor extends MessageToByteEncoder {
 
     private final byte[] buffer = new byte[8192];
     private final Deflater deflater = new Deflater();
 
     @Override
-    protected void encode(ChannelHandlerContext ctx, Object msg, ByteBuf out) throws Exception
-    {
+    protected void encode(ChannelHandlerContext ctx, Object msg, ByteBuf out) throws Exception {
         ByteBuf in = (ByteBuf) msg;
         int origSize = in.readableBytes();
-        PacketDataSerializer serializer = new PacketDataSerializer( out );
+        PacketDataSerializer serializer = new PacketDataSerializer(out);
 
-        if ( origSize < 256 )
-        {
-            serializer.b( 0 );
-            serializer.writeBytes( in );
-        } else
-        {
-            byte[] data = new byte[ origSize ];
-            in.readBytes( data );
+        if (origSize < 256) {
+            serializer.b(0);
+            serializer.writeBytes(in);
+        } else {
+            byte[] data = new byte[origSize];
+            in.readBytes(data);
 
-            serializer.b( data.length );
+            serializer.b(data.length);
 
-            deflater.setInput( data );
+            deflater.setInput(data);
             deflater.finish();
             while (!deflater.finished()) {
-                int count = deflater.deflate( buffer );
-                serializer.writeBytes( buffer, 0, count );
+                int count = deflater.deflate(buffer);
+                serializer.writeBytes(buffer, 0, count);
             }
             deflater.reset();
         }
diff --git a/src/main/java/org/spigotmc/SpigotConfig.java b/src/main/java/org/spigotmc/SpigotConfig.java
index 9fbf21f..31ea6ab 100644
--- a/src/main/java/org/spigotmc/SpigotConfig.java
+++ b/src/main/java/org/spigotmc/SpigotConfig.java
@@ -1,6 +1,20 @@
 package org.spigotmc;
 
 import com.google.common.base.Throwables;
+import net.minecraft.server.AttributeRanged;
+import net.minecraft.server.GenericAttributes;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.util.gnu.trove.map.hash.TObjectIntHashMap;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.core.LoggerContext;
+import org.apache.logging.log4j.core.config.Configuration;
+import org.bukkit.Bukkit;
+import org.bukkit.ChatColor;
+import org.bukkit.command.Command;
+import org.bukkit.configuration.ConfigurationSection;
+import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.configuration.file.YamlConfiguration;
+
 import java.io.File;
 import java.io.IOException;
 import java.lang.reflect.InvocationTargetException;
@@ -14,24 +28,10 @@ import java.util.List;
 import java.util.Map;
 import java.util.Set;
 import java.util.logging.Level;
-import net.minecraft.server.AttributeRanged;
-import net.minecraft.server.GenericAttributes;
-import net.minecraft.util.gnu.trove.map.hash.TObjectIntHashMap;
-import net.minecraft.server.MinecraftServer;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.core.LoggerContext;
-import org.apache.logging.log4j.core.config.Configuration;
-import org.bukkit.Bukkit;
-import org.bukkit.ChatColor;
-import org.bukkit.command.Command;
-import org.bukkit.configuration.ConfigurationSection;
-import org.bukkit.configuration.InvalidConfigurationException;
-import org.bukkit.configuration.file.YamlConfiguration;
 
-public class SpigotConfig
-{
+public class SpigotConfig {
 
-    private static final File CONFIG_FILE = new File( "spigot.yml" );
+    private static final File CONFIG_FILE = new File("spigot.yml");
     private static final String HEADER = "This is the main configuration file for Spigot.\n"
             + "As you can see, there's tons to configure. Some options may impact gameplay, so use\n"
             + "with caution, and make sure you know what each option does before configuring.\n"
@@ -45,344 +45,286 @@ public class SpigotConfig
             + "Forums: http://www.spigotmc.org/\n";
     /*========================================================================*/
     public static YamlConfiguration config;
+    public static boolean logCommands;
+    public static int tabComplete;
+    /*========================================================================*/
+    public static String whitelistMessage;
+    public static String unknownCommandMessage;
+    public static String serverFullMessage;
+    public static String outdatedClientMessage = "Outdated client! Please use {}";
+    public static String outdatedServerMessage = "Outdated server! I\'m still on {0}";
+    public static int timeoutTime = 60;
+    public static boolean restartOnCrash = true;
+    public static String restartScript = "./start.sh";
+    public static String restartMessage;
+    public static boolean bungee;
+    public static boolean lateBind;
+    public static boolean disableStatSaving;
+    public static TObjectIntHashMap<String> forcedStats = new TObjectIntHashMap<String>();
+    public static int playerSample;
+    public static int playerShuffle;
+    public static List<String> spamExclusions;
+    public static boolean silentCommandBlocks;
+    public static boolean filterCreativeItems;
+    public static Set<String> replaceCommands;
+    public static int userCacheCap;
+    public static boolean saveUserCacheOnStopOnly;
+    public static int intCacheLimit;
+    public static double movedWronglyThreshold;
+    public static double movedTooQuicklyThreshold;
+    public static double maxHealth = 2048;
+    public static double movementSpeed = 2048;
+    public static double attackDamage = 2048;
+    public static boolean debug;
     static int version;
     static Map<String, Command> commands;
-    /*========================================================================*/
 
-    public static void init()
-    {
+    public static void init() {
         config = new YamlConfiguration();
-        try
-        {
-            config.load( CONFIG_FILE );
-        } catch ( IOException ex )
-        {
-        } catch ( InvalidConfigurationException ex )
-        {
-            Bukkit.getLogger().log( Level.SEVERE, "Could not load spigot.yml, please correct your syntax errors", ex );
-            throw Throwables.propagate( ex );
+        try {
+            config.load(CONFIG_FILE);
+        } catch (IOException ex) {
+        } catch (InvalidConfigurationException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not load spigot.yml, please correct your syntax errors", ex);
+            throw Throwables.propagate(ex);
         }
 
-        config.options().header( HEADER );
-        config.options().copyDefaults( true );
+        config.options().header(HEADER);
+        config.options().copyDefaults(true);
 
         commands = new HashMap<String, Command>();
 
-        version = getInt( "config-version", 7 );
-        set( "config-version", 7 );
-        readConfig( SpigotConfig.class, null );
+        version = getInt("config-version", 7);
+        set("config-version", 7);
+        readConfig(SpigotConfig.class, null);
     }
 
-    public static void registerCommands()
-    {
-        for ( Map.Entry<String, Command> entry : commands.entrySet() )
-        {
-            MinecraftServer.getServer().server.getCommandMap().register( entry.getKey(), "Spigot", entry.getValue() );
+    public static void registerCommands() {
+        for (Map.Entry<String, Command> entry : commands.entrySet()) {
+            MinecraftServer.getServer().server.getCommandMap().register(entry.getKey(), "Spigot", entry.getValue());
         }
     }
 
-    static void readConfig(Class<?> clazz, Object instance)
-    {
-        for ( Method method : clazz.getDeclaredMethods() )
-        {
-            if ( Modifier.isPrivate( method.getModifiers() ) )
-            {
-                if ( method.getParameterTypes().length == 0 && method.getReturnType() == Void.TYPE )
-                {
-                    try
-                    {
-                        method.setAccessible( true );
-                        method.invoke( instance );
-                    } catch ( InvocationTargetException ex )
-                    {
-                        throw Throwables.propagate( ex.getCause() );
-                    } catch ( Exception ex )
-                    {
-                        Bukkit.getLogger().log( Level.SEVERE, "Error invoking " + method, ex );
+    static void readConfig(Class<?> clazz, Object instance) {
+        for (Method method : clazz.getDeclaredMethods()) {
+            if (Modifier.isPrivate(method.getModifiers())) {
+                if (method.getParameterTypes().length == 0 && method.getReturnType() == Void.TYPE) {
+                    try {
+                        method.setAccessible(true);
+                        method.invoke(instance);
+                    } catch (InvocationTargetException ex) {
+                        throw Throwables.propagate(ex.getCause());
+                    } catch (Exception ex) {
+                        Bukkit.getLogger().log(Level.SEVERE, "Error invoking " + method, ex);
                     }
                 }
             }
         }
 
-        try
-        {
-            config.save( CONFIG_FILE );
-        } catch ( IOException ex )
-        {
-            Bukkit.getLogger().log( Level.SEVERE, "Could not save " + CONFIG_FILE, ex );
+        try {
+            config.save(CONFIG_FILE);
+        } catch (IOException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not save " + CONFIG_FILE, ex);
         }
     }
 
-    private static void set(String path, Object val)
-    {
-        config.set( path, val );
+    private static void set(String path, Object val) {
+        config.set(path, val);
     }
 
-    private static boolean getBoolean(String path, boolean def)
-    {
-        config.addDefault( path, def );
-        return config.getBoolean( path, config.getBoolean( path ) );
+    private static boolean getBoolean(String path, boolean def) {
+        config.addDefault(path, def);
+        return config.getBoolean(path, config.getBoolean(path));
     }
 
-    private static int getInt(String path, int def)
-    {
-        config.addDefault( path, def );
-        return config.getInt( path, config.getInt( path ) );
+    private static int getInt(String path, int def) {
+        config.addDefault(path, def);
+        return config.getInt(path, config.getInt(path));
     }
 
-    private static <T> List getList(String path, T def)
-    {
-        config.addDefault( path, def );
-        return (List<T>) config.getList( path, config.getList( path ) );
+    private static <T> List getList(String path, T def) {
+        config.addDefault(path, def);
+        return config.getList(path, config.getList(path));
     }
 
-    private static String getString(String path, String def)
-    {
-        config.addDefault( path, def );
-        return config.getString( path, config.getString( path ) );
+    private static String getString(String path, String def) {
+        config.addDefault(path, def);
+        return config.getString(path, config.getString(path));
     }
 
-    private static double getDouble(String path, double def)
-    {
-        config.addDefault( path, def );
-        return config.getDouble( path, config.getDouble( path ) );
+    private static double getDouble(String path, double def) {
+        config.addDefault(path, def);
+        return config.getDouble(path, config.getDouble(path));
     }
 
-    public static boolean logCommands;
-    private static void logCommands()
-    {
-        logCommands = getBoolean( "commands.log", true );
+    private static void logCommands() {
+        logCommands = getBoolean("commands.log", true);
     }
 
-    public static int tabComplete;
-    private static void tabComplete()
-    {
-        if ( version < 6 )
-        {
-            boolean oldValue = getBoolean( "commands.tab-complete", true );
-            if ( oldValue )
-            {
-                set( "commands.tab-complete", 0 );
-            } else
-            {
-                set( "commands.tab-complete", -1 );
+    private static void tabComplete() {
+        if (version < 6) {
+            boolean oldValue = getBoolean("commands.tab-complete", true);
+            if (oldValue) {
+                set("commands.tab-complete", 0);
+            } else {
+                set("commands.tab-complete", -1);
             }
         }
-        tabComplete = getInt( "commands.tab-complete", 0 );
+        tabComplete = getInt("commands.tab-complete", 0);
     }
 
-    public static String whitelistMessage;
-    public static String unknownCommandMessage;
-    public static String serverFullMessage;
-    public static String outdatedClientMessage = "Outdated client! Please use {}";
-    public static String outdatedServerMessage = "Outdated server! I\'m still on {0}";
-    private static String transform(String s)
-    {
-        return ChatColor.translateAlternateColorCodes( '&', s ).replaceAll( "\\n", "\n" );
-    }
-    private static void messages()
-    {
-        if (version < 4)
-        {
-            set( "messages.outdated-client", outdatedClientMessage );
-            set( "messages.outdated-server", outdatedServerMessage );
+    private static String transform(String s) {
+        return ChatColor.translateAlternateColorCodes('&', s).replaceAll("\\n", "\n");
+    }
+
+    private static void messages() {
+        if (version < 4) {
+            set("messages.outdated-client", outdatedClientMessage);
+            set("messages.outdated-server", outdatedServerMessage);
         }
 
-        whitelistMessage = transform( getString( "messages.whitelist", "You are not whitelisted on this server!" ) );
-        unknownCommandMessage = transform( getString( "messages.unknown-command", "Unknown command. Type \"/help\" for help." ) );
-        serverFullMessage = transform( getString( "messages.server-full", "The server is full!" ) );
-        outdatedClientMessage = transform( getString( "messages.outdated-client", outdatedClientMessage ) );
-        outdatedServerMessage = transform( getString( "messages.outdated-server", outdatedServerMessage ) );
+        whitelistMessage = transform(getString("messages.whitelist", "You are not whitelisted on this server!"));
+        unknownCommandMessage = transform(getString("messages.unknown-command", "Unknown command. Type \"/help\" for help."));
+        serverFullMessage = transform(getString("messages.server-full", "The server is full!"));
+        outdatedClientMessage = transform(getString("messages.outdated-client", outdatedClientMessage));
+        outdatedServerMessage = transform(getString("messages.outdated-server", outdatedServerMessage));
     }
 
-    public static int timeoutTime = 60;
-    public static boolean restartOnCrash = true;
-    public static String restartScript = "./start.sh";
-    public static String restartMessage;
-    private static void watchdog()
-    {
-        timeoutTime = getInt( "settings.timeout-time", timeoutTime );
-        restartOnCrash = getBoolean( "settings.restart-on-crash", restartOnCrash );
-        restartScript = getString( "settings.restart-script", restartScript );
-        restartMessage = transform( getString( "messages.restart", "Server is restarting" ) );
-        commands.put( "restart", new RestartCommand( "restart" ) );
-        WatchdogThread.doStart( timeoutTime, restartOnCrash );
+    private static void watchdog() {
+        timeoutTime = getInt("settings.timeout-time", timeoutTime);
+        restartOnCrash = getBoolean("settings.restart-on-crash", restartOnCrash);
+        restartScript = getString("settings.restart-script", restartScript);
+        restartMessage = transform(getString("messages.restart", "Server is restarting"));
+        commands.put("restart", new RestartCommand("restart"));
+        WatchdogThread.doStart(timeoutTime, restartOnCrash);
     }
 
-    public static boolean bungee;
     private static void bungee() {
-        if ( version < 4 )
-        {
-            set( "settings.bungeecord", false );
-            System.out.println( "Oudated config, disabling BungeeCord support!" );
+        if (version < 4) {
+            set("settings.bungeecord", false);
+            System.out.println("Oudated config, disabling BungeeCord support!");
         }
-        bungee = getBoolean( "settings.bungeecord", false );
+        bungee = getBoolean("settings.bungeecord", false);
     }
 
-    private static void nettyThreads()
-    {
-        int count = getInt( "settings.netty-threads", 4 );
-        System.setProperty( "io.netty.eventLoopThreads", Integer.toString( count ) );
-        Bukkit.getLogger().log( Level.INFO, "Using {0} threads for Netty based IO", count );
+    private static void nettyThreads() {
+        int count = getInt("settings.netty-threads", 4);
+        System.setProperty("io.netty.eventLoopThreads", Integer.toString(count));
+        Bukkit.getLogger().log(Level.INFO, "Using {0} threads for Netty based IO", count);
     }
 
-    public static boolean lateBind;
     private static void lateBind() {
-        lateBind = getBoolean( "settings.late-bind", false );
+        lateBind = getBoolean("settings.late-bind", false);
     }
 
-    public static boolean disableStatSaving;
-    public static TObjectIntHashMap<String> forcedStats = new TObjectIntHashMap<String>();
-    private static void stats()
-    {
-        disableStatSaving = getBoolean( "stats.disable-saving", false );
+    private static void stats() {
+        disableStatSaving = getBoolean("stats.disable-saving", false);
 
-        if ( !config.contains( "stats.forced-stats" ) ) {
-            config.createSection( "stats.forced-stats" );
+        if (!config.contains("stats.forced-stats")) {
+            config.createSection("stats.forced-stats");
         }
 
-        ConfigurationSection section = config.getConfigurationSection( "stats.forced-stats" );
-        for ( String name : section.getKeys( true ) )
-        {
-            if ( section.isInt( name ) )
-            {
-                forcedStats.put( name, section.getInt( name ) );
+        ConfigurationSection section = config.getConfigurationSection("stats.forced-stats");
+        for (String name : section.getKeys(true)) {
+            if (section.isInt(name)) {
+                forcedStats.put(name, section.getInt(name));
             }
         }
 
-        if ( disableStatSaving && section.getInt( "achievement.openInventory", 0 ) < 1 )
-        {
-            Bukkit.getLogger().warning( "*** WARNING *** stats.disable-saving is true but stats.forced-stats.achievement.openInventory" +
+        if (disableStatSaving && section.getInt("achievement.openInventory", 0) < 1) {
+            Bukkit.getLogger().warning("*** WARNING *** stats.disable-saving is true but stats.forced-stats.achievement.openInventory" +
                     " isn't set to 1. Disabling stat saving without forcing the achievement may cause it to get stuck on the player's " +
-                    "screen." );
+                    "screen.");
         }
     }
 
-    private static void tpsCommand()
-    {
-        commands.put( "tps", new TicksPerSecondCommand( "tps" ) );
+    private static void tpsCommand() {
+        commands.put("tps", new TicksPerSecondCommand("tps"));
     }
 
-    public static int playerSample;
-    private static void playerSample()
-    {
-        playerSample = getInt( "settings.sample-count", 12 );
-        System.out.println( "Server Ping Player Sample Count: " + playerSample );
+    private static void playerSample() {
+        playerSample = getInt("settings.sample-count", 12);
+        System.out.println("Server Ping Player Sample Count: " + playerSample);
     }
 
-    public static int playerShuffle;
-    private static void playerShuffle()
-    {
-        playerShuffle = getInt( "settings.player-shuffle", 0 );
+    private static void playerShuffle() {
+        playerShuffle = getInt("settings.player-shuffle", 0);
     }
 
-    public static List<String> spamExclusions;
-    private static void spamExclusions()
-    {
-        spamExclusions = getList( "commands.spam-exclusions", Arrays.asList( new String[]
-        {
-                "/skill"
-        } ) );
+    private static void spamExclusions() {
+        spamExclusions = getList("commands.spam-exclusions", Arrays.asList("/skill"));
     }
 
-    public static boolean silentCommandBlocks;
-    private static void silentCommandBlocks()
-    {
-        silentCommandBlocks = getBoolean( "commands.silent-commandblock-console", false );
+    private static void silentCommandBlocks() {
+        silentCommandBlocks = getBoolean("commands.silent-commandblock-console", false);
     }
 
-    public static boolean filterCreativeItems;
-    private static void filterCreativeItems()
-    {
-        filterCreativeItems = getBoolean( "settings.filter-creative-items", true );
+    private static void filterCreativeItems() {
+        filterCreativeItems = getBoolean("settings.filter-creative-items", true);
     }
 
-    public static Set<String> replaceCommands;
-    private static void replaceCommands()
-    {
-        if ( config.contains( "replace-commands" ) )
-        {
-            set( "commands.replace-commands", config.getStringList( "replace-commands" ) );
-            config.set( "replace-commands", null );
+    private static void replaceCommands() {
+        if (config.contains("replace-commands")) {
+            set("commands.replace-commands", config.getStringList("replace-commands"));
+            config.set("replace-commands", null);
         }
-        replaceCommands = new HashSet<String>( (List<String>) getList( "commands.replace-commands",
-                Arrays.asList( "setblock", "summon", "testforblock", "tellraw" ) ) );
+        replaceCommands = new HashSet<String>((List<String>) getList("commands.replace-commands",
+                Arrays.asList("setblock", "summon", "testforblock", "tellraw")));
     }
-    
-    public static int userCacheCap;
-    private static void userCacheCap()
-    {
-        userCacheCap = getInt( "settings.user-cache-size", 1000 );
+
+    private static void userCacheCap() {
+        userCacheCap = getInt("settings.user-cache-size", 1000);
     }
-    
-    public static boolean saveUserCacheOnStopOnly;
-    private static void saveUserCacheOnStopOnly()
-    {
-        saveUserCacheOnStopOnly = getBoolean( "settings.save-user-cache-on-stop-only", false );
+
+    private static void saveUserCacheOnStopOnly() {
+        saveUserCacheOnStopOnly = getBoolean("settings.save-user-cache-on-stop-only", false);
     }
 
-    public static int intCacheLimit;
-    private static void intCacheLimit()
-    {
-        intCacheLimit = getInt( "settings.int-cache-limit", 1024 );
+    private static void intCacheLimit() {
+        intCacheLimit = getInt("settings.int-cache-limit", 1024);
     }
 
-    public static double movedWronglyThreshold;
-    private static void movedWronglyThreshold()
-    {
-        movedWronglyThreshold = getDouble( "settings.moved-wrongly-threshold", 0.0625D );
+    private static void movedWronglyThreshold() {
+        movedWronglyThreshold = getDouble("settings.moved-wrongly-threshold", 0.0625D);
     }
 
-    public static double movedTooQuicklyThreshold;
-    private static void movedTooQuicklyThreshold()
-    {
-        movedTooQuicklyThreshold = getDouble( "settings.moved-too-quickly-threshold", 100.0D );
+    private static void movedTooQuicklyThreshold() {
+        movedTooQuicklyThreshold = getDouble("settings.moved-too-quickly-threshold", 100.0D);
     }
 
-    public static double maxHealth = 2048;
-    public static double movementSpeed = 2048;
-    public static double attackDamage = 2048;
-    private static void attributeMaxes()
-    {
-        maxHealth = getDouble( "settings.attribute.maxHealth.max", maxHealth );
-        ( (AttributeRanged) GenericAttributes.maxHealth ).b = maxHealth;
-        movementSpeed = getDouble( "settings.attribute.movementSpeed.max", movementSpeed );
-        ( (AttributeRanged) GenericAttributes.d ).b = movementSpeed;
-        attackDamage = getDouble( "settings.attribute.attackDamage.max", attackDamage );
-        ( (AttributeRanged) GenericAttributes.e ).b = attackDamage;
-    }
-
-    private static void globalAPICache()
-    {
-        if ( getBoolean( "settings.global-api-cache", false ) && !CachedStreamHandlerFactory.isSet )
-        {
-            Bukkit.getLogger().info( "Global API cache enabled - All requests to Mojang's API will be " +
-                    "handled by Spigot" );
+    private static void attributeMaxes() {
+        maxHealth = getDouble("settings.attribute.maxHealth.max", maxHealth);
+        ((AttributeRanged) GenericAttributes.maxHealth).b = maxHealth;
+        movementSpeed = getDouble("settings.attribute.movementSpeed.max", movementSpeed);
+        ((AttributeRanged) GenericAttributes.d).b = movementSpeed;
+        attackDamage = getDouble("settings.attribute.attackDamage.max", attackDamage);
+        ((AttributeRanged) GenericAttributes.e).b = attackDamage;
+    }
+
+    private static void globalAPICache() {
+        if (getBoolean("settings.global-api-cache", false) && !CachedStreamHandlerFactory.isSet) {
+            Bukkit.getLogger().info("Global API cache enabled - All requests to Mojang's API will be " +
+                    "handled by Spigot");
             CachedStreamHandlerFactory.isSet = true;
             URL.setURLStreamHandlerFactory(new CachedStreamHandlerFactory());
         }
     }
 
-    public static boolean debug;
-    private static void debug()
-    {
-        debug = getBoolean( "settings.debug", false );
+    private static void debug() {
+        debug = getBoolean("settings.debug", false);
 
-        if ( debug && !LogManager.getRootLogger().isTraceEnabled() )
-        {
+        if (debug && !LogManager.getRootLogger().isTraceEnabled()) {
             // Enable debug logging
-            LoggerContext ctx = (LoggerContext) LogManager.getContext( false );
+            LoggerContext ctx = (LoggerContext) LogManager.getContext(false);
             Configuration conf = ctx.getConfiguration();
-            conf.getLoggerConfig( LogManager.ROOT_LOGGER_NAME ).setLevel( org.apache.logging.log4j.Level.ALL );
-            ctx.updateLoggers( conf );
+            conf.getLoggerConfig(LogManager.ROOT_LOGGER_NAME).setLevel(org.apache.logging.log4j.Level.ALL);
+            ctx.updateLoggers(conf);
         }
 
-        if ( LogManager.getRootLogger().isTraceEnabled() )
-        {
-            Bukkit.getLogger().info( "Debug logging is enabled" );
-        } else
-        {
-            Bukkit.getLogger().info( "Debug logging is disabled" );
+        if (LogManager.getRootLogger().isTraceEnabled()) {
+            Bukkit.getLogger().info("Debug logging is enabled");
+        } else {
+            Bukkit.getLogger().info("Debug logging is disabled");
         }
     }
 }
diff --git a/src/main/java/org/spigotmc/SpigotDebreakifier.java b/src/main/java/org/spigotmc/SpigotDebreakifier.java
index d811f55..06e8126 100644
--- a/src/main/java/org/spigotmc/SpigotDebreakifier.java
+++ b/src/main/java/org/spigotmc/SpigotDebreakifier.java
@@ -15,88 +15,75 @@ import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.util.Arrays;
 
-public class SpigotDebreakifier
-{
+public class SpigotDebreakifier {
 
-    private static final boolean[] validBlocks = new boolean[ 198 << 4 ];
-    private static final int[] correctedValues = new int[ 198 ];
+    private static final boolean[] validBlocks = new boolean[198 << 4];
+    private static final int[] correctedValues = new int[198];
+    private static TIntIntHashMap invalidItems = new TIntIntHashMap();
 
-    static
-    {
-        Arrays.fill( correctedValues, -1 );
-        InputStream in = SpigotDebreakifier.class.getResourceAsStream( "/blocks.json" );
-        try
-        {
-            JsonArray e = new JsonParser().parse( new InputStreamReader( in, Charsets.UTF_8 ) ).getAsJsonArray();
-            for ( JsonElement entry : e )
-            {
-                String[] parts = entry.getAsString().split( ":" );
-                int id = Integer.parseInt( parts[ 0 ] );
-                int data = Integer.parseInt( parts[ 1 ] );
-                validBlocks[ ( id << 4 ) | data ] = true;
-                if ( correctedValues[ id ] == -1 || data < correctedValues[ id ] )
-                {
-                    correctedValues[ id ] = data;
+    static {
+        Arrays.fill(correctedValues, -1);
+        InputStream in = SpigotDebreakifier.class.getResourceAsStream("/blocks.json");
+        try {
+            JsonArray e = new JsonParser().parse(new InputStreamReader(in, Charsets.UTF_8)).getAsJsonArray();
+            for (JsonElement entry : e) {
+                String[] parts = entry.getAsString().split(":");
+                int id = Integer.parseInt(parts[0]);
+                int data = Integer.parseInt(parts[1]);
+                validBlocks[(id << 4) | data] = true;
+                if (correctedValues[id] == -1 || data < correctedValues[id]) {
+                    correctedValues[id] = data;
                 }
             }
-        } finally
-        {
-            try
-            {
+        } finally {
+            try {
                 in.close();
-            } catch ( IOException e )
-            {
-                throw new RuntimeException( e );
+            } catch (IOException e) {
+                throw new RuntimeException(e);
             }
         }
     }
 
-    public static int getCorrectedData(int id, int data)
-    {
-        if ( id > 197 ) return data;
-        if ( id == 175 && data > 8 )
-        {
+    static {
+        replace(Blocks.WATER, Items.WATER_BUCKET);
+        replace(Blocks.STATIONARY_WATER, Items.WATER_BUCKET);
+        replace(Blocks.LAVA, Items.LAVA_BUCKET);
+        replace(Blocks.STATIONARY_LAVA, Items.LAVA_BUCKET);
+        replace(Blocks.PORTAL, Items.NETHER_BRICK);
+        replace(Blocks.DOUBLE_STEP, Blocks.STEP);
+        replace(Blocks.FIRE, Items.FLINT_AND_STEEL);
+        replace(Blocks.ENDER_PORTAL, Blocks.ENDER_PORTAL_FRAME);
+        replace(Blocks.WOOD_DOUBLE_STEP, Blocks.WOOD_STEP);
+        replace(Blocks.COCOA, Items.SEEDS);
+        replace(Blocks.CARROTS, Items.CARROT);
+        replace(Blocks.POTATOES, Items.POTATO);
+    }
+
+    public static int getCorrectedData(int id, int data) {
+        if (id > 197) return data;
+        if (id == 175 && data > 8) {
             data = 8;
         }
-        if ( validBlocks[ ( id << 4 ) | data ] )
-        {
+        if (validBlocks[(id << 4) | data]) {
             return data;
-        } else
-        {
-            return correctedValues[ id ] & 0xF;
+        } else {
+            return correctedValues[id] & 0xF;
         }
     }
 
-    private static TIntIntHashMap invalidItems = new TIntIntHashMap();
-    static {
-        replace( Blocks.WATER, Items.WATER_BUCKET );
-        replace( Blocks.STATIONARY_WATER, Items.WATER_BUCKET );
-        replace( Blocks.LAVA, Items.LAVA_BUCKET );
-        replace( Blocks.STATIONARY_LAVA, Items.LAVA_BUCKET );
-        replace( Blocks.PORTAL, Items.NETHER_BRICK );
-        replace( Blocks.DOUBLE_STEP, Blocks.STEP );
-        replace( Blocks.FIRE, Items.FLINT_AND_STEEL );
-        replace( Blocks.ENDER_PORTAL, Blocks.ENDER_PORTAL_FRAME );
-        replace( Blocks.WOOD_DOUBLE_STEP, Blocks.WOOD_STEP );
-        replace( Blocks.COCOA, Items.SEEDS );
-        replace( Blocks.CARROTS, Items.CARROT );
-        replace( Blocks.POTATOES, Items.POTATO );
-    }
-
-    public static int getItemId(int id)
-    {
-        return invalidItems.containsKey( id ) ? invalidItems.get( id ) : id;
+    public static int getItemId(int id) {
+        return invalidItems.containsKey(id) ? invalidItems.get(id) : id;
     }
 
     private static void replace(Block block, Block other) {
-        replace( Block.getId( block ), Block.getId( other ) );
+        replace(Block.getId(block), Block.getId(other));
     }
 
     private static void replace(Block block, Item other) {
-        replace( Block.getId( block ), Item.getId( other ) );
+        replace(Block.getId(block), Item.getId(other));
     }
 
     private static void replace(int block, int other) {
-        invalidItems.put( block, other );
+        invalidItems.put(block, other);
     }
 }
diff --git a/src/main/java/org/spigotmc/SpigotDecompressor.java b/src/main/java/org/spigotmc/SpigotDecompressor.java
index ffebf5d..ecc04f3 100644
--- a/src/main/java/org/spigotmc/SpigotDecompressor.java
+++ b/src/main/java/org/spigotmc/SpigotDecompressor.java
@@ -9,33 +9,28 @@ import net.minecraft.util.io.netty.handler.codec.ByteToMessageDecoder;
 import java.util.List;
 import java.util.zip.Inflater;
 
-public class SpigotDecompressor extends ByteToMessageDecoder
-{
+public class SpigotDecompressor extends ByteToMessageDecoder {
 
     private final Inflater inflater = new Inflater();
 
     @Override
-    protected void decode(ChannelHandlerContext channelHandlerContext, ByteBuf byteBuf, List<Object> objects) throws Exception
-    {
-        if ( byteBuf.readableBytes() == 0 )
-        {
+    protected void decode(ChannelHandlerContext channelHandlerContext, ByteBuf byteBuf, List<Object> objects) throws Exception {
+        if (byteBuf.readableBytes() == 0) {
             return;
         }
 
-        PacketDataSerializer serializer = new PacketDataSerializer( byteBuf );
+        PacketDataSerializer serializer = new PacketDataSerializer(byteBuf);
         int size = serializer.a();
-        if ( size == 0 )
-        {
-            objects.add( serializer.readBytes( serializer.readableBytes() ) );
-        } else
-        {
-            byte[] compressedData = new byte[ serializer.readableBytes() ];
-            serializer.readBytes( compressedData );
-            inflater.setInput( compressedData );
+        if (size == 0) {
+            objects.add(serializer.readBytes(serializer.readableBytes()));
+        } else {
+            byte[] compressedData = new byte[serializer.readableBytes()];
+            serializer.readBytes(compressedData);
+            inflater.setInput(compressedData);
 
-            byte[] data = new byte[ size ];
-            inflater.inflate( data );
-            objects.add( Unpooled.wrappedBuffer( data ) );
+            byte[] data = new byte[size];
+            inflater.inflate(data);
+            objects.add(Unpooled.wrappedBuffer(data));
             inflater.reset();
         }
     }
diff --git a/src/main/java/org/spigotmc/SpigotWorldConfig.java b/src/main/java/org/spigotmc/SpigotWorldConfig.java
index 854ba6d..c753e7a 100644
--- a/src/main/java/org/spigotmc/SpigotWorldConfig.java
+++ b/src/main/java/org/spigotmc/SpigotWorldConfig.java
@@ -1,181 +1,186 @@
 package org.spigotmc;
 
-import java.util.Arrays;
-import java.util.List;
 import org.bukkit.Bukkit;
 import org.bukkit.configuration.file.YamlConfiguration;
 
-public class SpigotWorldConfig
-{
+import java.util.Arrays;
+import java.util.List;
+
+public class SpigotWorldConfig {
 
     private final String worldName;
     private final YamlConfiguration config;
+    public int chunksPerTick;
+    public boolean clearChunksOnTick;
+    // Crop growth rates
+    public int cactusModifier;
+    public int caneModifier;
+    public int melonModifier;
+    public int mushroomModifier;
+    public int pumpkinModifier;
+    public int saplingModifier;
+    public int wheatModifier;
+    public double itemMerge;
+    public double expMerge;
+    public int viewDistance;
+    public byte mobSpawnRange;
+    public int animalActivationRange = 32;
+    public int monsterActivationRange = 32;
+    public int miscActivationRange = 16;
+    public int playerTrackingRange = 48;
+    public int animalTrackingRange = 48;
+    public int monsterTrackingRange = 48;
+    public int miscTrackingRange = 32;
+    public int otherTrackingRange = 64;
+    public boolean altHopperTicking;
+    public int hopperTransfer;
+    public int hopperCheck;
+    public int hopperAmount;
+    public boolean randomLightUpdates;
+    public boolean saveStructureInfo;
+    public int itemDespawnRate;
+    public int arrowDespawnRate;
+    public boolean antiXray;
+    public int engineMode;
+    public List<Integer> hiddenBlocks;
+    public List<Integer> replaceBlocks;
+    public AntiXray antiXrayInstance;
+    public boolean zombieAggressiveTowardsVillager;
+    public boolean nerfSpawnerMobs;
+    public boolean enableZombiePigmenPortalSpawns;
+    public int maxBulkChunk;
+    public int maxCollisionsPerEntity;
+    public int dragonDeathSoundRadius;
+    public int witherSpawnSoundRadius;
+    public int villageSeed;
+    public int largeFeatureSeed;
+    public float walkExhaustion;
+    public float sprintExhaustion;
+    public float combatExhaustion;
+    public float regenExhaustion;
+    public int currentPrimedTnt = 0;
+    public int maxTntTicksPerTick;
+    public int hangingTickFrequency;
     private boolean verbose;
 
-    public SpigotWorldConfig(String worldName)
-    {
+    public SpigotWorldConfig(String worldName) {
         this.worldName = worldName;
         this.config = SpigotConfig.config;
         init();
     }
 
-    public void init()
-    {
-        this.verbose = getBoolean( "verbose", true );
+    public void init() {
+        this.verbose = getBoolean("verbose", true);
 
-        log( "-------- World Settings For [" + worldName + "] --------" );
-        SpigotConfig.readConfig( SpigotWorldConfig.class, this );
+        log("-------- World Settings For [" + worldName + "] --------");
+        SpigotConfig.readConfig(SpigotWorldConfig.class, this);
     }
 
-    private void log(String s)
-    {
-        if ( verbose )
-        {
-            Bukkit.getLogger().info( s );
+    private void log(String s) {
+        if (verbose) {
+            Bukkit.getLogger().info(s);
         }
     }
 
-    private void set(String path, Object val)
-    {
-        config.set( "world-settings.default." + path, val );
+    private void set(String path, Object val) {
+        config.set("world-settings.default." + path, val);
     }
 
-    private boolean getBoolean(String path, boolean def)
-    {
-        config.addDefault( "world-settings.default." + path, def );
-        return config.getBoolean( "world-settings." + worldName + "." + path, config.getBoolean( "world-settings.default." + path ) );
+    private boolean getBoolean(String path, boolean def) {
+        config.addDefault("world-settings.default." + path, def);
+        return config.getBoolean("world-settings." + worldName + "." + path, config.getBoolean("world-settings.default." + path));
     }
 
-    private double getDouble(String path, double def)
-    {
-        config.addDefault( "world-settings.default." + path, def );
-        return config.getDouble( "world-settings." + worldName + "." + path, config.getDouble( "world-settings.default." + path ) );
+    private double getDouble(String path, double def) {
+        config.addDefault("world-settings.default." + path, def);
+        return config.getDouble("world-settings." + worldName + "." + path, config.getDouble("world-settings.default." + path));
     }
 
-    private int getInt(String path, int def)
-    {
-        config.addDefault( "world-settings.default." + path, def );
-        return config.getInt( "world-settings." + worldName + "." + path, config.getInt( "world-settings.default." + path ) );
+    private int getInt(String path, int def) {
+        config.addDefault("world-settings.default." + path, def);
+        return config.getInt("world-settings." + worldName + "." + path, config.getInt("world-settings.default." + path));
     }
 
-    private <T> List getList(String path, T def)
-    {
-        config.addDefault( "world-settings.default." + path, def );
-        return (List<T>) config.getList( "world-settings." + worldName + "." + path, config.getList( "world-settings.default." + path ) );
+    private <T> List getList(String path, T def) {
+        config.addDefault("world-settings.default." + path, def);
+        return config.getList("world-settings." + worldName + "." + path, config.getList("world-settings.default." + path));
     }
 
-    private String getString(String path, String def)
-    {
-        config.addDefault( "world-settings.default." + path, def );
-        return config.getString( "world-settings." + worldName + "." + path, config.getString( "world-settings.default." + path ) );
+    private String getString(String path, String def) {
+        config.addDefault("world-settings.default." + path, def);
+        return config.getString("world-settings." + worldName + "." + path, config.getString("world-settings.default." + path));
     }
 
-    public int chunksPerTick;
-    public boolean clearChunksOnTick;
-    private void chunksPerTick()
-    {
-        chunksPerTick = getInt( "chunks-per-tick", 650 );
-        log( "Chunks to Grow per Tick: " + chunksPerTick );
+    private void chunksPerTick() {
+        chunksPerTick = getInt("chunks-per-tick", 650);
+        log("Chunks to Grow per Tick: " + chunksPerTick);
 
-        clearChunksOnTick = getBoolean( "clear-tick-list", false );
-        log( "Clear tick list: " + clearChunksOnTick );
+        clearChunksOnTick = getBoolean("clear-tick-list", false);
+        log("Clear tick list: " + clearChunksOnTick);
     }
 
-    // Crop growth rates
-    public int cactusModifier;
-    public int caneModifier;
-    public int melonModifier;
-    public int mushroomModifier;
-    public int pumpkinModifier;
-    public int saplingModifier;
-    public int wheatModifier;
-    private int getAndValidateGrowth(String crop)
-    {
-        int modifier = getInt( "growth." + crop.toLowerCase() + "-modifier", 100 );
-        if ( modifier == 0 )
-        {
-            log( "Cannot set " + crop + " growth to zero, defaulting to 100" );
+    private int getAndValidateGrowth(String crop) {
+        int modifier = getInt("growth." + crop.toLowerCase() + "-modifier", 100);
+        if (modifier == 0) {
+            log("Cannot set " + crop + " growth to zero, defaulting to 100");
             modifier = 100;
         }
-        log( crop + " Growth Modifier: " + modifier + "%" );
+        log(crop + " Growth Modifier: " + modifier + "%");
 
         return modifier;
     }
-    private void growthModifiers()
-    {
-        cactusModifier = getAndValidateGrowth( "Cactus" );
-        caneModifier = getAndValidateGrowth( "Cane" );
-        melonModifier = getAndValidateGrowth( "Melon" );
-        mushroomModifier = getAndValidateGrowth( "Mushroom" );
-        pumpkinModifier = getAndValidateGrowth( "Pumpkin" );
-        saplingModifier = getAndValidateGrowth( "Sapling" );
-        wheatModifier = getAndValidateGrowth( "Wheat" );
+
+    private void growthModifiers() {
+        cactusModifier = getAndValidateGrowth("Cactus");
+        caneModifier = getAndValidateGrowth("Cane");
+        melonModifier = getAndValidateGrowth("Melon");
+        mushroomModifier = getAndValidateGrowth("Mushroom");
+        pumpkinModifier = getAndValidateGrowth("Pumpkin");
+        saplingModifier = getAndValidateGrowth("Sapling");
+        wheatModifier = getAndValidateGrowth("Wheat");
     }
 
-    public double itemMerge;
-    private void itemMerge()
-    {
-        itemMerge = getDouble("merge-radius.item", 2.5 );
-        log( "Item Merge Radius: " + itemMerge );
+    private void itemMerge() {
+        itemMerge = getDouble("merge-radius.item", 2.5);
+        log("Item Merge Radius: " + itemMerge);
     }
 
-    public double expMerge;
-    private void expMerge()
-    {
-        expMerge = getDouble("merge-radius.exp", 3.0 );
-        log( "Experience Merge Radius: " + expMerge );
+    private void expMerge() {
+        expMerge = getDouble("merge-radius.exp", 3.0);
+        log("Experience Merge Radius: " + expMerge);
     }
 
-    public int viewDistance;
-    private void viewDistance()
-    {
-        viewDistance = getInt( "view-distance", Bukkit.getViewDistance() );
-        log( "View Distance: " + viewDistance );
+    private void viewDistance() {
+        viewDistance = getInt("view-distance", Bukkit.getViewDistance());
+        log("View Distance: " + viewDistance);
     }
 
-    public byte mobSpawnRange;
-    private void mobSpawnRange()
-    {
-        mobSpawnRange = (byte) getInt( "mob-spawn-range", 4 );
-        log( "Mob Spawn Range: " + mobSpawnRange );
+    private void mobSpawnRange() {
+        mobSpawnRange = (byte) getInt("mob-spawn-range", 4);
+        log("Mob Spawn Range: " + mobSpawnRange);
     }
 
-    public int animalActivationRange = 32;
-    public int monsterActivationRange = 32;
-    public int miscActivationRange = 16;
-    private void activationRange()
-    {
-        animalActivationRange = getInt( "entity-activation-range.animals", animalActivationRange );
-        monsterActivationRange = getInt( "entity-activation-range.monsters", monsterActivationRange );
-        miscActivationRange = getInt( "entity-activation-range.misc", miscActivationRange );
-        log( "Entity Activation Range: An " + animalActivationRange + " / Mo " + monsterActivationRange + " / Mi " + miscActivationRange );
+    private void activationRange() {
+        animalActivationRange = getInt("entity-activation-range.animals", animalActivationRange);
+        monsterActivationRange = getInt("entity-activation-range.monsters", monsterActivationRange);
+        miscActivationRange = getInt("entity-activation-range.misc", miscActivationRange);
+        log("Entity Activation Range: An " + animalActivationRange + " / Mo " + monsterActivationRange + " / Mi " + miscActivationRange);
     }
 
-    public int playerTrackingRange = 48;
-    public int animalTrackingRange = 48;
-    public int monsterTrackingRange = 48;
-    public int miscTrackingRange = 32;
-    public int otherTrackingRange = 64;
-    private void trackingRange()
-    {
-        playerTrackingRange = getInt( "entity-tracking-range.players", playerTrackingRange );
-        animalTrackingRange = getInt( "entity-tracking-range.animals", animalTrackingRange );
-        monsterTrackingRange = getInt( "entity-tracking-range.monsters", monsterTrackingRange );
-        miscTrackingRange = getInt( "entity-tracking-range.misc", miscTrackingRange );
-        otherTrackingRange = getInt( "entity-tracking-range.other", otherTrackingRange );
-        log( "Entity Tracking Range: Pl " + playerTrackingRange + " / An " + animalTrackingRange + " / Mo " + monsterTrackingRange + " / Mi " + miscTrackingRange + " / Other " + otherTrackingRange );
+    private void trackingRange() {
+        playerTrackingRange = getInt("entity-tracking-range.players", playerTrackingRange);
+        animalTrackingRange = getInt("entity-tracking-range.animals", animalTrackingRange);
+        monsterTrackingRange = getInt("entity-tracking-range.monsters", monsterTrackingRange);
+        miscTrackingRange = getInt("entity-tracking-range.misc", miscTrackingRange);
+        otherTrackingRange = getInt("entity-tracking-range.other", otherTrackingRange);
+        log("Entity Tracking Range: Pl " + playerTrackingRange + " / An " + animalTrackingRange + " / Mo " + monsterTrackingRange + " / Mi " + miscTrackingRange + " / Other " + otherTrackingRange);
     }
 
-    public boolean altHopperTicking;
-    public int hopperTransfer;
-    public int hopperCheck;
-    public int hopperAmount;
-    private void hoppers()
-    {
+    private void hoppers() {
         // Alternate ticking method. Uses inventory changes, redstone updates etc.
         // to update hoppers. Hopper-check is disabled when this is true.
         boolean prev = altHopperTicking;
-        altHopperTicking = getBoolean( "hopper-alt-ticking", false );
+        altHopperTicking = getBoolean("hopper-alt-ticking", false);
         // Necessary for the reload command
         if (prev != altHopperTicking) {
             net.minecraft.server.World world = (net.minecraft.server.World) Bukkit.getWorld(this.worldName);
@@ -196,163 +201,114 @@ public class SpigotWorldConfig
             }
         }
         // Set the tick delay between hopper item movements
-        hopperTransfer = getInt( "ticks-per.hopper-transfer", 8 );
+        hopperTransfer = getInt("ticks-per.hopper-transfer", 8);
         // Set the tick delay between checking for items after the associated
         // container is empty. Default to the hopperTransfer value to prevent
         // hopper sorting machines from becoming out of sync.
-        hopperCheck = getInt( "ticks-per.hopper-check", hopperTransfer );
-        hopperAmount = getInt( "hopper-amount", 1 );
-        log( "Alternative Hopper Ticking: " + altHopperTicking );
-        log( "Hopper Transfer: " + hopperTransfer + " Hopper Check: " + hopperCheck + " Hopper Amount: " + hopperAmount );
+        hopperCheck = getInt("ticks-per.hopper-check", hopperTransfer);
+        hopperAmount = getInt("hopper-amount", 1);
+        log("Alternative Hopper Ticking: " + altHopperTicking);
+        log("Hopper Transfer: " + hopperTransfer + " Hopper Check: " + hopperCheck + " Hopper Amount: " + hopperAmount);
     }
 
-    public boolean randomLightUpdates;
-    private void lightUpdates()
-    {
-        randomLightUpdates = getBoolean( "random-light-updates", false );
-        log( "Random Lighting Updates: " + randomLightUpdates );
+    private void lightUpdates() {
+        randomLightUpdates = getBoolean("random-light-updates", false);
+        log("Random Lighting Updates: " + randomLightUpdates);
     }
 
-    public boolean saveStructureInfo;
-    private void structureInfo()
-    {
-        saveStructureInfo = getBoolean( "save-structure-info", true );
-        log( "Structure Info Saving: " + saveStructureInfo );
-        if ( !saveStructureInfo )
-        {
-            log( "*** WARNING *** You have selected to NOT save structure info. This may cause structures such as fortresses to not spawn mobs when updating to 1.7!" );
-            log( "*** WARNING *** Please use this option with caution, SpigotMC is not responsible for any issues this option may cause in the future!" );
+    private void structureInfo() {
+        saveStructureInfo = getBoolean("save-structure-info", true);
+        log("Structure Info Saving: " + saveStructureInfo);
+        if (!saveStructureInfo) {
+            log("*** WARNING *** You have selected to NOT save structure info. This may cause structures such as fortresses to not spawn mobs when updating to 1.7!");
+            log("*** WARNING *** Please use this option with caution, SpigotMC is not responsible for any issues this option may cause in the future!");
         }
     }
 
-    public int itemDespawnRate;
-    private void itemDespawnRate()
-    {
-        itemDespawnRate = getInt( "item-despawn-rate", 6000 );
-        log( "Item Despawn Rate: " + itemDespawnRate );
+    private void itemDespawnRate() {
+        itemDespawnRate = getInt("item-despawn-rate", 6000);
+        log("Item Despawn Rate: " + itemDespawnRate);
     }
 
-    public int arrowDespawnRate;
-    private void arrowDespawnRate()
-    {
-        arrowDespawnRate = getInt( "arrow-despawn-rate", 1200  );
-        log( "Arrow Despawn Rate: " + arrowDespawnRate );
+    private void arrowDespawnRate() {
+        arrowDespawnRate = getInt("arrow-despawn-rate", 1200);
+        log("Arrow Despawn Rate: " + arrowDespawnRate);
     }
-    
-    public boolean antiXray;
-    public int engineMode;
-    public List<Integer> hiddenBlocks;
-    public List<Integer> replaceBlocks;
-    public AntiXray antiXrayInstance;
-    private void antiXray()
-    {
-        antiXray = getBoolean( "anti-xray.enabled", true );
-        log( "Anti X-Ray: " + antiXray );
 
-        engineMode = getInt( "anti-xray.engine-mode", 1 );
-        log( "\tEngine Mode: " + engineMode );
+    private void antiXray() {
+        antiXray = getBoolean("anti-xray.enabled", true);
+        log("Anti X-Ray: " + antiXray);
+
+        engineMode = getInt("anti-xray.engine-mode", 1);
+        log("\tEngine Mode: " + engineMode);
 
-        if ( SpigotConfig.version < 5 )
-        {
-            set( "anti-xray.blocks", null );
+        if (SpigotConfig.version < 5) {
+            set("anti-xray.blocks", null);
         }
-        hiddenBlocks = getList( "anti-xray.hide-blocks", Arrays.asList( new Integer[]
-        {
-            14, 15, 16, 21, 48, 49, 54, 56, 73, 74, 82, 129, 130
-        } ) );
-        log( "\tHidden Blocks: " + hiddenBlocks );
+        hiddenBlocks = getList("anti-xray.hide-blocks", Arrays.asList(14, 15, 16, 21, 48, 49, 54, 56, 73, 74, 82, 129, 130));
+        log("\tHidden Blocks: " + hiddenBlocks);
 
-        replaceBlocks = getList( "anti-xray.replace-blocks", Arrays.asList( new Integer[]
-        {
-            1, 5
-        } ) );
-        log( "\tReplace Blocks: " + replaceBlocks );
+        replaceBlocks = getList("anti-xray.replace-blocks", Arrays.asList(1, 5));
+        log("\tReplace Blocks: " + replaceBlocks);
 
-        antiXrayInstance = new AntiXray( this );
+        antiXrayInstance = new AntiXray(this);
     }
 
-    public boolean zombieAggressiveTowardsVillager;
-    private void zombieAggressiveTowardsVillager()
-    {
-        zombieAggressiveTowardsVillager = getBoolean( "zombie-aggressive-towards-villager", true );
-        log( "Zombie Aggressive Towards Villager: " + zombieAggressiveTowardsVillager );
+    private void zombieAggressiveTowardsVillager() {
+        zombieAggressiveTowardsVillager = getBoolean("zombie-aggressive-towards-villager", true);
+        log("Zombie Aggressive Towards Villager: " + zombieAggressiveTowardsVillager);
     }
 
-    public boolean nerfSpawnerMobs;
-    private void nerfSpawnerMobs()
-    {
-        nerfSpawnerMobs = getBoolean( "nerf-spawner-mobs", false );
-        log( "Nerfing mobs spawned from spawners: " + nerfSpawnerMobs );
+    private void nerfSpawnerMobs() {
+        nerfSpawnerMobs = getBoolean("nerf-spawner-mobs", false);
+        log("Nerfing mobs spawned from spawners: " + nerfSpawnerMobs);
     }
 
-    public boolean enableZombiePigmenPortalSpawns;
-    private void enableZombiePigmenPortalSpawns()
-    {
-        enableZombiePigmenPortalSpawns = getBoolean( "enable-zombie-pigmen-portal-spawns", true );
-        log( "Allow Zombie Pigmen to spawn from portal blocks: " + enableZombiePigmenPortalSpawns );
+    private void enableZombiePigmenPortalSpawns() {
+        enableZombiePigmenPortalSpawns = getBoolean("enable-zombie-pigmen-portal-spawns", true);
+        log("Allow Zombie Pigmen to spawn from portal blocks: " + enableZombiePigmenPortalSpawns);
     }
 
-    public int maxBulkChunk;
-    private void bulkChunkCount()
-    {
-        maxBulkChunk = getInt( "max-bulk-chunks", 5 );
-        log( "Sending up to " + maxBulkChunk + " chunks per packet" );
+    private void bulkChunkCount() {
+        maxBulkChunk = getInt("max-bulk-chunks", 5);
+        log("Sending up to " + maxBulkChunk + " chunks per packet");
     }
 
-    public int maxCollisionsPerEntity;
-    private void maxEntityCollision()
-    {
-        maxCollisionsPerEntity = getInt( "max-entity-collisions", 8 );
-        log( "Max Entity Collisions: " + maxCollisionsPerEntity );
+    private void maxEntityCollision() {
+        maxCollisionsPerEntity = getInt("max-entity-collisions", 8);
+        log("Max Entity Collisions: " + maxCollisionsPerEntity);
     }
 
-    public int dragonDeathSoundRadius;
-    private void keepDragonDeathPerWorld()
-    {
-        dragonDeathSoundRadius = getInt( "dragon-death-sound-radius", 0 );
+    private void keepDragonDeathPerWorld() {
+        dragonDeathSoundRadius = getInt("dragon-death-sound-radius", 0);
     }
 
-    public int witherSpawnSoundRadius;
-    private void witherSpawnSoundRadius()
-    {
-        witherSpawnSoundRadius = getInt( "wither-spawn-sound-radius", 0 );
+    private void witherSpawnSoundRadius() {
+        witherSpawnSoundRadius = getInt("wither-spawn-sound-radius", 0);
     }
 
-    public int villageSeed;
-    public int largeFeatureSeed;
-    private void initWorldGenSeeds()
-    {
-        villageSeed = getInt( "seed-village", 10387312 );
-        largeFeatureSeed = getInt( "seed-feature", 14357617 );
-        log( "Custom Map Seeds:  Village: " + villageSeed + " Feature: " + largeFeatureSeed );
+    private void initWorldGenSeeds() {
+        villageSeed = getInt("seed-village", 10387312);
+        largeFeatureSeed = getInt("seed-feature", 14357617);
+        log("Custom Map Seeds:  Village: " + villageSeed + " Feature: " + largeFeatureSeed);
     }
 
-    public float walkExhaustion;
-    public float sprintExhaustion;
-    public float combatExhaustion;
-    public float regenExhaustion;
-    private void initHunger()
-    {
-        walkExhaustion = (float) getDouble( "hunger.walk-exhaustion", 0.2 );
-        sprintExhaustion = (float) getDouble( "hunger.sprint-exhaustion", 0.8 );
-        combatExhaustion = (float) getDouble( "hunger.combat-exhaustion", 0.3 );
-        regenExhaustion = (float) getDouble( "hunger.regen-exhaustion", 3 );
+    private void initHunger() {
+        walkExhaustion = (float) getDouble("hunger.walk-exhaustion", 0.2);
+        sprintExhaustion = (float) getDouble("hunger.sprint-exhaustion", 0.8);
+        combatExhaustion = (float) getDouble("hunger.combat-exhaustion", 0.3);
+        regenExhaustion = (float) getDouble("hunger.regen-exhaustion", 3);
     }
 
-    public int currentPrimedTnt = 0;
-    public int maxTntTicksPerTick;
     private void maxTntPerTick() {
-        if ( SpigotConfig.version < 7 )
-        {
-            set( "max-tnt-per-tick", 100 );
+        if (SpigotConfig.version < 7) {
+            set("max-tnt-per-tick", 100);
         }
-        maxTntTicksPerTick = getInt( "max-tnt-per-tick", 100 );
-        log( "Max TNT Explosions: " + maxTntTicksPerTick );
+        maxTntTicksPerTick = getInt("max-tnt-per-tick", 100);
+        log("Max TNT Explosions: " + maxTntTicksPerTick);
     }
 
-    public int hangingTickFrequency;
-    private void hangingTickFrequency()
-    {
-        hangingTickFrequency = getInt( "hanging-tick-frequency", 100 );
+    private void hangingTickFrequency() {
+        hangingTickFrequency = getInt("hanging-tick-frequency", 100);
     }
 }
diff --git a/src/main/java/org/spigotmc/TicksPerSecondCommand.java b/src/main/java/org/spigotmc/TicksPerSecondCommand.java
index 1780e35..6fa3bd5 100644
--- a/src/main/java/org/spigotmc/TicksPerSecondCommand.java
+++ b/src/main/java/org/spigotmc/TicksPerSecondCommand.java
@@ -6,22 +6,24 @@ import org.bukkit.ChatColor;
 import org.bukkit.command.Command;
 import org.bukkit.command.CommandSender;
 
-public class TicksPerSecondCommand extends Command
-{
+public class TicksPerSecondCommand extends Command {
 
-    public TicksPerSecondCommand(String name)
-    {
-        super( name );
+    public TicksPerSecondCommand(String name) {
+        super(name);
         this.description = "Gets the current ticks per second for the server";
         this.usageMessage = "/tps";
-        this.setPermission( "bukkit.command.tps" );
+        this.setPermission("bukkit.command.tps");
     }
 
-    @Override
-    public boolean execute(CommandSender sender, String currentAlias, String[] args)
+    private static String format(double tps) // PaperSpigot - made static
     {
-        if ( !testPermission( sender ) )
-        {
+        return ((tps > 18.0) ? ChatColor.GREEN : (tps > 16.0) ? ChatColor.YELLOW : ChatColor.RED).toString()
+                + ((tps > 20.0) ? "*" : "") + Math.min(Math.round(tps * 100.0) / 100.0, 20.0);
+    }
+
+    @Override
+    public boolean execute(CommandSender sender, String currentAlias, String[] args) {
+        if (!testPermission(sender)) {
             return true;
         }
 
@@ -29,19 +31,13 @@ public class TicksPerSecondCommand extends Command
         double[] tps = Bukkit.spigot().getTPS();
         String[] tpsAvg = new String[tps.length];
 
-        for ( int i = 0; i < tps.length; i++) {
-            tpsAvg[i] = format( tps[i] );
+        for (int i = 0; i < tps.length; i++) {
+            tpsAvg[i] = format(tps[i]);
         }
 
-        sender.sendMessage( ChatColor.GOLD + "TPS from last 1m, 5m, 15m: " + StringUtils.join(tpsAvg, ", "));
+        sender.sendMessage(ChatColor.GOLD + "TPS from last 1m, 5m, 15m: " + StringUtils.join(tpsAvg, ", "));
         // PaperSpigot end
 
         return true;
     }
-
-    private static String format(double tps) // PaperSpigot - made static
-    {
-        return ( ( tps > 18.0 ) ? ChatColor.GREEN : ( tps > 16.0 ) ? ChatColor.YELLOW : ChatColor.RED ).toString()
-                + ( ( tps > 20.0 ) ? "*" : "" ) + Math.min( Math.round( tps * 100.0 ) / 100.0, 20.0 );
-    }
 }
diff --git a/src/main/java/org/spigotmc/TrackingRange.java b/src/main/java/org/spigotmc/TrackingRange.java
index 4bf4d2a..850bae8 100644
--- a/src/main/java/org/spigotmc/TrackingRange.java
+++ b/src/main/java/org/spigotmc/TrackingRange.java
@@ -8,8 +8,7 @@ import net.minecraft.server.EntityItemFrame;
 import net.minecraft.server.EntityPainting;
 import net.minecraft.server.EntityPlayer;
 
-public class TrackingRange
-{
+public class TrackingRange {
 
     /**
      * Gets the range an entity should be 'tracked' by players and visible in
@@ -19,32 +18,23 @@ public class TrackingRange
      * @param defaultRange Default range defined by Mojang
      * @return
      */
-    public static int getEntityTrackingRange(Entity entity, int defaultRange)
-    {
+    public static int getEntityTrackingRange(Entity entity, int defaultRange) {
         SpigotWorldConfig config = entity.world.spigotConfig;
-        if ( entity instanceof EntityPlayer )
-        {
+        if (entity instanceof EntityPlayer) {
             return config.playerTrackingRange;
-        }  else if ( entity.activationType == 1 )
-        {
+        } else if (entity.activationType == 1) {
             return config.monsterTrackingRange;
-        } else if ( entity instanceof EntityGhast )
-        {
-            if ( config.monsterTrackingRange > config.monsterActivationRange )
-            {
+        } else if (entity instanceof EntityGhast) {
+            if (config.monsterTrackingRange > config.monsterActivationRange) {
                 return config.monsterTrackingRange;
-            } else
-            {
+            } else {
                 return config.monsterActivationRange;
             }
-        } else if ( entity.activationType == 2 )
-        {
+        } else if (entity.activationType == 2) {
             return config.animalTrackingRange;
-        } else if ( entity instanceof EntityItemFrame || entity instanceof EntityPainting || entity instanceof EntityItem || entity instanceof EntityExperienceOrb )
-        {
+        } else if (entity instanceof EntityItemFrame || entity instanceof EntityPainting || entity instanceof EntityItem || entity instanceof EntityExperienceOrb) {
             return config.miscTrackingRange;
-        } else 
-        {
+        } else {
             return config.otherTrackingRange;
         }
     }
diff --git a/src/main/java/org/spigotmc/ValidateUtils.java b/src/main/java/org/spigotmc/ValidateUtils.java
index 58a9534..3eeafc6 100644
--- a/src/main/java/org/spigotmc/ValidateUtils.java
+++ b/src/main/java/org/spigotmc/ValidateUtils.java
@@ -1,13 +1,10 @@
 package org.spigotmc;
 
-public class ValidateUtils
-{
+public class ValidateUtils {
 
-    public static String limit(String str, int limit)
-    {
-        if ( str.length() > limit )
-        {
-            return str.substring( 0, limit );
+    public static String limit(String str, int limit) {
+        if (str.length() > limit) {
+            return str.substring(0, limit);
         }
         return str;
     }
diff --git a/src/main/java/org/spigotmc/WatchdogThread.java b/src/main/java/org/spigotmc/WatchdogThread.java
index 94a3d42..787cc3a 100644
--- a/src/main/java/org/spigotmc/WatchdogThread.java
+++ b/src/main/java/org/spigotmc/WatchdogThread.java
@@ -1,15 +1,15 @@
 package org.spigotmc;
 
+import net.minecraft.server.MinecraftServer;
+import org.bukkit.Bukkit;
+
 import java.lang.management.ManagementFactory;
 import java.lang.management.MonitorInfo;
 import java.lang.management.ThreadInfo;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-import net.minecraft.server.MinecraftServer;
-import org.bukkit.Bukkit;
 
-public class WatchdogThread extends Thread
-{
+public class WatchdogThread extends Thread {
 
     private static WatchdogThread instance;
     private final long timeoutTime;
@@ -17,108 +17,90 @@ public class WatchdogThread extends Thread
     private volatile long lastTick;
     private volatile boolean stopping;
 
-    private WatchdogThread(long timeoutTime, boolean restart)
-    {
-        super( "Spigot Watchdog Thread" );
+    private WatchdogThread(long timeoutTime, boolean restart) {
+        super("Spigot Watchdog Thread");
         this.timeoutTime = timeoutTime;
         this.restart = restart;
     }
 
-    public static void doStart(int timeoutTime, boolean restart)
-    {
-        if ( instance == null )
-        {
-            instance = new WatchdogThread( timeoutTime * 1000L, restart );
+    public static void doStart(int timeoutTime, boolean restart) {
+        if (instance == null) {
+            instance = new WatchdogThread(timeoutTime * 1000L, restart);
             instance.start();
         }
     }
 
-    public static void tick()
-    {
+    public static void tick() {
         instance.lastTick = System.currentTimeMillis();
     }
 
-    public static void doStop()
-    {
-        if ( instance != null )
-        {
+    public static void doStop() {
+        if (instance != null) {
             instance.stopping = true;
         }
     }
 
+    private static void dumpThread(ThreadInfo thread, Logger log) {
+        log.log(Level.SEVERE, "------------------------------");
+        //
+        log.log(Level.SEVERE, "Current Thread: " + thread.getThreadName());
+        log.log(Level.SEVERE, "\tPID: " + thread.getThreadId()
+                + " | Suspended: " + thread.isSuspended()
+                + " | Native: " + thread.isInNative()
+                + " | State: " + thread.getThreadState());
+        if (thread.getLockedMonitors().length != 0) {
+            log.log(Level.SEVERE, "\tThread is waiting on monitor(s):");
+            for (MonitorInfo monitor : thread.getLockedMonitors()) {
+                log.log(Level.SEVERE, "\t\tLocked on:" + monitor.getLockedStackFrame());
+            }
+        }
+        log.log(Level.SEVERE, "\tStack:");
+        //
+        for (StackTraceElement stack : thread.getStackTrace()) {
+            log.log(Level.SEVERE, "\t\t" + stack);
+        }
+    }
+
     @Override
-    public void run()
-    {
-        while ( !stopping )
-        {
+    public void run() {
+        while (!stopping) {
             //
-            if ( lastTick != 0 && System.currentTimeMillis() > lastTick + timeoutTime )
-            {
+            if (lastTick != 0 && System.currentTimeMillis() > lastTick + timeoutTime) {
                 Logger log = Bukkit.getServer().getLogger();
-                log.log( Level.SEVERE, "The server has stopped responding!" );
-                log.log( Level.SEVERE, "Please report this to http://www.spigotmc.org/" );
-                log.log( Level.SEVERE, "Be sure to include ALL relevant console errors and Minecraft crash reports" );
-                log.log( Level.SEVERE, "Spigot version: " + Bukkit.getServer().getVersion() );
+                log.log(Level.SEVERE, "The server has stopped responding!");
+                log.log(Level.SEVERE, "Please report this to http://www.spigotmc.org/");
+                log.log(Level.SEVERE, "Be sure to include ALL relevant console errors and Minecraft crash reports");
+                log.log(Level.SEVERE, "Spigot version: " + Bukkit.getServer().getVersion());
                 //
-                if(net.minecraft.server.World.haveWeSilencedAPhysicsCrash)
-                {
-                    log.log( Level.SEVERE, "------------------------------" );
-                    log.log( Level.SEVERE, "During the run of the server, a physics stackoverflow was supressed" );
-                    log.log( Level.SEVERE, "near " + net.minecraft.server.World.blockLocation);
+                if (net.minecraft.server.World.haveWeSilencedAPhysicsCrash) {
+                    log.log(Level.SEVERE, "------------------------------");
+                    log.log(Level.SEVERE, "During the run of the server, a physics stackoverflow was supressed");
+                    log.log(Level.SEVERE, "near " + net.minecraft.server.World.blockLocation);
                 }
                 //
-                log.log( Level.SEVERE, "------------------------------" );
-                log.log( Level.SEVERE, "Server thread dump (Look for plugins here before reporting to Spigot!):" );
-                dumpThread( ManagementFactory.getThreadMXBean().getThreadInfo( MinecraftServer.getServer().primaryThread.getId(), Integer.MAX_VALUE ), log );
-                log.log( Level.SEVERE, "------------------------------" );
+                log.log(Level.SEVERE, "------------------------------");
+                log.log(Level.SEVERE, "Server thread dump (Look for plugins here before reporting to Spigot!):");
+                dumpThread(ManagementFactory.getThreadMXBean().getThreadInfo(MinecraftServer.getServer().primaryThread.getId(), Integer.MAX_VALUE), log);
+                log.log(Level.SEVERE, "------------------------------");
                 //
-                log.log( Level.SEVERE, "Entire Thread Dump:" );
-                ThreadInfo[] threads = ManagementFactory.getThreadMXBean().dumpAllThreads( true, true );
-                for ( ThreadInfo thread : threads )
-                {
-                    dumpThread( thread, log );
+                log.log(Level.SEVERE, "Entire Thread Dump:");
+                ThreadInfo[] threads = ManagementFactory.getThreadMXBean().dumpAllThreads(true, true);
+                for (ThreadInfo thread : threads) {
+                    dumpThread(thread, log);
                 }
-                log.log( Level.SEVERE, "------------------------------" );
+                log.log(Level.SEVERE, "------------------------------");
 
-                if ( restart )
-                {
+                if (restart) {
                     RestartCommand.restart();
                 }
                 break;
             }
 
-            try
-            {
-                sleep( 10000 );
-            } catch ( InterruptedException ex )
-            {
+            try {
+                sleep(10000);
+            } catch (InterruptedException ex) {
                 interrupt();
             }
         }
     }
-
-    private static void dumpThread(ThreadInfo thread, Logger log)
-    {
-        log.log( Level.SEVERE, "------------------------------" );
-        //
-        log.log( Level.SEVERE, "Current Thread: " + thread.getThreadName() );
-        log.log( Level.SEVERE, "\tPID: " + thread.getThreadId()
-                + " | Suspended: " + thread.isSuspended()
-                + " | Native: " + thread.isInNative()
-                + " | State: " + thread.getThreadState() );
-        if ( thread.getLockedMonitors().length != 0 )
-        {
-            log.log( Level.SEVERE, "\tThread is waiting on monitor(s):" );
-            for ( MonitorInfo monitor : thread.getLockedMonitors() )
-            {
-                log.log( Level.SEVERE, "\t\tLocked on:" + monitor.getLockedStackFrame() );
-            }
-        }
-        log.log( Level.SEVERE, "\tStack:" );
-        //
-        for ( StackTraceElement stack : thread.getStackTrace() )
-        {
-            log.log( Level.SEVERE, "\t\t" + stack );
-        }
-    }
 }
diff --git a/src/main/java/org/spigotmc/WorldTileEntityList.java b/src/main/java/org/spigotmc/WorldTileEntityList.java
index e7fd3d3..fb52fa4 100644
--- a/src/main/java/org/spigotmc/WorldTileEntityList.java
+++ b/src/main/java/org/spigotmc/WorldTileEntityList.java
@@ -3,57 +3,68 @@ package org.spigotmc;
 import com.google.common.collect.ArrayListMultimap;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Multimap;
-import net.minecraft.server.*;
+import net.minecraft.server.TileEntity;
+import net.minecraft.server.TileEntityBeacon;
+import net.minecraft.server.TileEntityChest;
+import net.minecraft.server.TileEntityCommand;
+import net.minecraft.server.TileEntityComparator;
+import net.minecraft.server.TileEntityDispenser;
+import net.minecraft.server.TileEntityDropper;
+import net.minecraft.server.TileEntityEnchantTable;
+import net.minecraft.server.TileEntityEnderChest;
+import net.minecraft.server.TileEntityEnderPortal;
+import net.minecraft.server.TileEntityFlowerPot;
+import net.minecraft.server.TileEntityLightDetector;
+import net.minecraft.server.TileEntityNote;
+import net.minecraft.server.TileEntityRecordPlayer;
+import net.minecraft.server.TileEntitySign;
+import net.minecraft.server.TileEntitySkull;
+import net.minecraft.server.World;
+import net.minecraft.server.WorldServer;
 import net.minecraft.util.gnu.trove.map.hash.TObjectIntHashMap;
 
+import javax.annotation.Nonnull;
 import java.util.Collection;
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.Map;
 
 public class WorldTileEntityList extends HashSet<TileEntity> {
-    private static final TObjectIntHashMap<Class<? extends TileEntity>> tileEntityTickIntervals =
-        new TObjectIntHashMap<Class<? extends TileEntity>>() {{
-            // Use -1 for no ticking
-            // These TE's have empty tick methods, doing nothing. Never bother ticking them.
-            for (Class<? extends TileEntity> ignored : new Class[]{
-                TileEntityChest.class, // PaperSpigot - Don't tick chests either
-                TileEntityEnderChest.class, // PaperSpigot - Don't tick chests either
-                TileEntityRecordPlayer.class,
-                TileEntityDispenser.class,
-                TileEntityDropper.class,
-                TileEntitySign.class,
-                TileEntityNote.class,
-                TileEntityEnderPortal.class,
-                TileEntityCommand.class,
-                TileEntitySkull.class,
-                TileEntityComparator.class,
-                TileEntityFlowerPot.class
-            }) {
-                put(ignored, -1);
-            }
 
-            // does findPlayer lookup, so this helps performance to slow down
-            put(TileEntityEnchantTable.class, 20);
+    private static final TObjectIntHashMap<Class<? extends TileEntity>> tileEntityTickIntervals =
+            new TObjectIntHashMap<Class<? extends TileEntity>>() {{
+                // Use -1 for no ticking
+                // These TE's have empty tick methods, doing nothing. Never bother ticking them.
+                for (Class<? extends TileEntity> ignored : new Class[]{
+                        TileEntityChest.class, // PaperSpigot - Don't tick chests either
+                        TileEntityEnderChest.class, // PaperSpigot - Don't tick chests either
+                        TileEntityRecordPlayer.class,
+                        TileEntityDispenser.class,
+                        TileEntityDropper.class,
+                        TileEntitySign.class,
+                        TileEntityNote.class,
+                        TileEntityEnderPortal.class,
+                        TileEntityCommand.class,
+                        TileEntitySkull.class,
+                        TileEntityComparator.class,
+                        TileEntityFlowerPot.class
+                }) {
+                    put(ignored, -1);
+                }
 
-            // Slow things down that players won't notice due to craftbukkit "wall time" patches.
-            // These need to be investigated further before they can be safely used here
-            //put(TileEntityFurnace.class, 20);
-            //put(TileEntityBrewingStand.class, 10);
+                // does findPlayer lookup, so this helps performance to slow down
+                put(TileEntityEnchantTable.class, 20);
 
-            // Vanilla controlled values - These are checks already done in vanilla, so don't tick on ticks we know
-            // won't do anything anyways
-            put(TileEntityBeacon.class, 80);
-            put(TileEntityLightDetector.class, 20);
-        }};
-    private static int getInterval(Class<? extends TileEntity> cls) {
-        int tickInterval = tileEntityTickIntervals.get(cls);
-        return tickInterval != 0 ? tickInterval : 1;
-    }
+                // Slow things down that players won't notice due to craftbukkit "wall time" patches.
+                // These need to be investigated further before they can be safely used here
+                //put(TileEntityFurnace.class, 20);
+                //put(TileEntityBrewingStand.class, 10);
 
-    private static int getBucketId(TileEntity entity, Integer interval) {
-        return entity.tileId % interval;
-    }
+                // Vanilla controlled values - These are checks already done in vanilla, so don't tick on ticks we know
+                // won't do anything anyways
+                put(TileEntityBeacon.class, 80);
+                put(TileEntityLightDetector.class, 20);
+            }};
 
     private final Map<Integer, Multimap<Integer, TileEntity>> tickList = Maps.newHashMap();
     private final WorldServer world;
@@ -62,6 +73,14 @@ public class WorldTileEntityList extends HashSet<TileEntity> {
         this.world = (WorldServer) world;
     }
 
+    private static int getInterval(Class<? extends TileEntity> cls) {
+        int tickInterval = tileEntityTickIntervals.get(cls);
+        return tickInterval != 0 ? tickInterval : 1;
+    }
+
+    private static int getBucketId(TileEntity entity, Integer interval) {
+        return entity.tileId % interval;
+    }
 
     private Multimap<Integer, TileEntity> getBucket(int interval) {
         Multimap<Integer, TileEntity> intervalBucket = tickList.get(interval);
@@ -69,6 +88,7 @@ public class WorldTileEntityList extends HashSet<TileEntity> {
             intervalBucket = ArrayListMultimap.create();
             tickList.put(interval, intervalBucket);
         }
+
         return intervalBucket;
     }
 
@@ -88,6 +108,7 @@ public class WorldTileEntityList extends HashSet<TileEntity> {
             Multimap<Integer, TileEntity> typeBucket = getBucket(interval);
             return typeBucket.put(bucket, entity);
         }
+
         return false;
     }
 
@@ -96,10 +117,12 @@ public class WorldTileEntityList extends HashSet<TileEntity> {
         if (!(o instanceof TileEntity)) {
             return false;
         }
+
         TileEntity entity = (TileEntity) o;
         if (!entity.isAdded) {
             return false;
         }
+
         entity.isAdded = false;
         int interval = getInterval(entity.getClass());
         int bucket = getBucketId(entity, interval);
@@ -108,7 +131,7 @@ public class WorldTileEntityList extends HashSet<TileEntity> {
     }
 
     @Override
-    public Iterator iterator() {
+    public @Nonnull Iterator<TileEntity> iterator() {
         return new WorldTileEntityIterator();
     }
 
-- 
1.9.5.msysgit.1

