From c3bb8932a1ad55ba7c8476cc6a639e969f2708fa Mon Sep 17 00:00:00 2001
From: Iceee <andrew@opticgaming.tv>
Date: Wed, 15 Jul 2015 00:44:50 -0700
Subject: [PATCH] ChunkMap caching


diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java
index 1b57206..e8bdb30 100644
--- a/src/main/java/net/minecraft/server/Chunk.java
+++ b/src/main/java/net/minecraft/server/Chunk.java
@@ -47,6 +47,63 @@ public class Chunk {
     public long lightUpdateTime;
     // PaperSpigot end
 
+    // PaperSpigot start - ChunkMap caching
+    private ChunkMap chunkMap17;
+    private ChunkMap chunkMap18;
+    private int emptySectionBits;
+
+    public ChunkMap getChunkMap(boolean groundUpContinuous, int primaryBitMask, int version) {
+        if (!world.paperSpigotConfig.cacheChunkMaps || !groundUpContinuous || (primaryBitMask != 0 && primaryBitMask != '\uffff')) {
+            return PacketPlayOutMapChunk.a(this, groundUpContinuous, primaryBitMask, version);
+        }
+
+        if (primaryBitMask == 0) {
+            ChunkMap chunkMap = new ChunkMap();
+            chunkMap.a = new byte[0];
+            return chunkMap;
+        }
+
+        boolean isDirty = false;
+        for (int i = 0; i < sections.length; ++i) {
+            ChunkSection section = sections[i];
+            if (section == null) {
+                if ((emptySectionBits & (1 << i)) == 0) {
+                    isDirty = true;
+                    emptySectionBits |= (1 << i);
+                }
+            } else {
+                if ((emptySectionBits & (1 << i)) == 1) {
+                    isDirty = true;
+                    emptySectionBits &= ~(1 << i);
+                    section.isDirty = false;
+                } else if (section.isDirty) {
+                    isDirty = true;
+                    section.isDirty = false;
+                }
+            }
+        }
+
+        if (isDirty) {
+            chunkMap17 = null;
+            chunkMap18 = null;
+        }
+
+        if (version < 24) {
+            if (chunkMap17 == null) {
+                chunkMap17 = PacketPlayOutMapChunk.a(this, true, '\uffff', version);
+            }
+
+            return chunkMap17;
+        } else {
+            if (chunkMap18 == null) {
+                chunkMap18 = PacketPlayOutMapChunk.a(this, true, '\uffff', version);
+            }
+
+            return chunkMap18;
+        }
+    }
+    // PaperSpigot end
+
     // CraftBukkit start - Neighbor loaded cache for chunk lighting and entity ticking
     private int neighbors = 0x1 << 12;
 
diff --git a/src/main/java/net/minecraft/server/ChunkSection.java b/src/main/java/net/minecraft/server/ChunkSection.java
index db1e52c..1803920 100644
--- a/src/main/java/net/minecraft/server/ChunkSection.java
+++ b/src/main/java/net/minecraft/server/ChunkSection.java
@@ -18,6 +18,7 @@ public class ChunkSection {
     private byte compactData;
     private byte compactEmitted;
     private byte compactSky;
+    boolean isDirty; // PaperSpigot
 
     // Pre-generated (read-only!) NibbleArrays for every possible value, used for chunk saving
     private static NibbleArray[] compactPregen = new NibbleArray[16];
@@ -139,6 +140,8 @@ public class ChunkSection {
         } else if (this.extBlockIds != null) {
             this.extBlockIds.a(i, j, k, 0);
         }
+
+        isDirty = true; // PaperSpigot
     }
 
     public int getData(int i, int j, int k) {
@@ -160,6 +163,7 @@ public class ChunkSection {
         }
         // CraftBukkit end
         this.blockData.a(i, j, k, l);
+        isDirty = true; // PaperSpigot
     }
 
     public boolean isEmpty() {
@@ -184,6 +188,7 @@ public class ChunkSection {
         }
         // CraftBukkit end
         this.skyLight.a(i, j, k, l);
+        isDirty = true; // PaperSpigot
     }
 
     public int getSkyLight(int i, int j, int k) {
@@ -205,6 +210,7 @@ public class ChunkSection {
         }
         // CraftBukkit end
         this.emittedLight.a(i, j, k, l);
+        isDirty = true; // PaperSpigot
     }
 
     public int getEmittedLight(int i, int j, int k) {
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java b/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java
index fcd126b..f68486d 100644
--- a/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java
@@ -29,7 +29,7 @@ public class PacketPlayOutMapChunk extends Packet {
         this.a = chunk.locX;
         this.b = chunk.locZ;
         this.g = flag;
-        ChunkMap chunkmap = a(chunk, flag, i, version);
+        ChunkMap chunkmap = chunk.getChunkMap(flag, i, version); // PaperSpigot
 
         this.d = chunkmap.c;
         this.c = chunkmap.b;
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutMapChunkBulk.java b/src/main/java/net/minecraft/server/PacketPlayOutMapChunkBulk.java
index b9db43c..ec4f1de 100644
--- a/src/main/java/net/minecraft/server/PacketPlayOutMapChunkBulk.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutMapChunkBulk.java
@@ -43,7 +43,7 @@ public class PacketPlayOutMapChunkBulk extends Packet {
 
         for (int k = 0; k < i; ++k) {
             Chunk chunk = (Chunk) list.get(k);
-            ChunkMap chunkmap = PacketPlayOutMapChunk.a(chunk, true, '\uffff', version);
+            ChunkMap chunkmap = chunk.getChunkMap(true, '\uffff', version); // PaperSpigot
 
             // Spigot start
             world = chunk.world;
diff --git a/src/main/java/org/github/paperspigot/PaperSpigotWorldConfig.java b/src/main/java/org/github/paperspigot/PaperSpigotWorldConfig.java
index 85b2cda..1ffc24d 100644
--- a/src/main/java/org/github/paperspigot/PaperSpigotWorldConfig.java
+++ b/src/main/java/org/github/paperspigot/PaperSpigotWorldConfig.java
@@ -317,4 +317,10 @@ public class PaperSpigotWorldConfig
     {
         mobSpawnerTickRate = getInt( "mob-spawner-tick-rate", 1 );
     }
+
+    public boolean cacheChunkMaps;
+    private void cacheChunkMaps()
+    {
+        cacheChunkMaps = getBoolean( "cache-chunk-maps", false );
+    }
 }
-- 
1.9.5.msysgit.1

