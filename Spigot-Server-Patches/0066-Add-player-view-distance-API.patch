From ce8c771a46de87b3186351210fb2d21616b589b0 Mon Sep 17 00:00:00 2001
From: Byteflux <byte@byteflux.net>
Date: Sun, 21 Jun 2015 18:29:12 -0700
Subject: [PATCH] Add player view distance API


diff --git a/src/main/java/net/minecraft/server/EntityEnderDragon.java b/src/main/java/net/minecraft/server/EntityEnderDragon.java
index 5d761aa..9c98cca 100644
--- a/src/main/java/net/minecraft/server/EntityEnderDragon.java
+++ b/src/main/java/net/minecraft/server/EntityEnderDragon.java
@@ -546,8 +546,8 @@ public class EntityEnderDragon extends EntityInsentient implements IComplex, IMo
             if (this.bB == 1) {
                 // CraftBukkit start - Use relative location for far away sounds
                 //this.world.b(1018, (int) this.locX, (int) this.locY, (int) this.locZ, 0);
-                int viewDistance = ((WorldServer) this.world).getServer().getViewDistance() * 16;
                 for (EntityPlayer player : (List<EntityPlayer>) this.world.players) {
+                    int viewDistance = player.viewDistance * 16; // PaperSpigot - Player view distance API
                     double deltaX = this.locX - player.locX;
                     double deltaZ = this.locZ - player.locZ;
                     double distanceSquared = deltaX * deltaX + deltaZ * deltaZ;
diff --git a/src/main/java/net/minecraft/server/EntityLightning.java b/src/main/java/net/minecraft/server/EntityLightning.java
index 0671659..d0a565f 100644
--- a/src/main/java/net/minecraft/server/EntityLightning.java
+++ b/src/main/java/net/minecraft/server/EntityLightning.java
@@ -76,8 +76,8 @@ public class EntityLightning extends EntityWeather {
             // CraftBukkit start - Use relative location for far away sounds
             //this.world.makeSound(this.locX, this.locY, this.locZ, "ambient.weather.thunder", 10000.0F, 0.8F + this.random.nextFloat() * 0.2F);
             float pitch = 0.8F + this.random.nextFloat() * 0.2F;
-            int viewDistance = ((WorldServer) this.world).getServer().getViewDistance() * 16;
             for (EntityPlayer player : (List<EntityPlayer>) this.world.players) {
+                int viewDistance = player.viewDistance * 16; // PaperSpigot - Player view distance API
                 double deltaX = this.locX - player.locX;
                 double deltaZ = this.locZ - player.locZ;
                 double distanceSquared = deltaX * deltaX + deltaZ * deltaZ;
diff --git a/src/main/java/net/minecraft/server/EntityPlayer.java b/src/main/java/net/minecraft/server/EntityPlayer.java
index 250c05f..42af771 100644
--- a/src/main/java/net/minecraft/server/EntityPlayer.java
+++ b/src/main/java/net/minecraft/server/EntityPlayer.java
@@ -67,6 +67,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
     // CraftBukkit end
     // Spigot start
     public boolean collidesWithEntities = true;
+    public int viewDistance; // PaperSpigot - Player view distance API
 
     @Override
     public boolean R()
@@ -83,6 +84,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
 
     public EntityPlayer(MinecraftServer minecraftserver, WorldServer worldserver, GameProfile gameprofile, PlayerInteractManager playerinteractmanager) {
         super(worldserver, gameprofile);
+        this.viewDistance = world.spigotConfig.viewDistance; // PaperSpigot - Player view distance API
         playerinteractmanager.player = this;
         this.playerInteractManager = playerinteractmanager;
         ChunkCoordinates chunkcoordinates = worldserver.getSpawn();
diff --git a/src/main/java/net/minecraft/server/PlayerChunkMap.java b/src/main/java/net/minecraft/server/PlayerChunkMap.java
index 6f60cac..5010152 100644
--- a/src/main/java/net/minecraft/server/PlayerChunkMap.java
+++ b/src/main/java/net/minecraft/server/PlayerChunkMap.java
@@ -124,8 +124,10 @@ public class PlayerChunkMap {
 
         // CraftBukkit start - Load nearby chunks first
         List<ChunkCoordIntPair> chunkList = new LinkedList<ChunkCoordIntPair>();
-        for (int k = i - this.g; k <= i + this.g; ++k) {
-            for (int l = j - this.g; l <= j + this.g; ++l) {
+        // PaperSpigot start - Player view distance API
+        for (int k = i - entityplayer.viewDistance; k <= i + entityplayer.viewDistance; ++k) {
+            for (int l = j - entityplayer.viewDistance; l <= j + entityplayer.viewDistance; ++l) {
+        // PaperSpigot end
                 chunkList.add(new ChunkCoordIntPair(k, l));
             }
         }
@@ -143,7 +145,7 @@ public class PlayerChunkMap {
     public void b(EntityPlayer entityplayer) {
         ArrayList arraylist = new ArrayList(entityplayer.chunkCoordIntPairQueue);
         int i = 0;
-        int j = this.g;
+        int j = entityplayer.viewDistance; // PaperSpigot - Player view distance API
         int k = (int) entityplayer.locX >> 4;
         int l = (int) entityplayer.locZ >> 4;
         int i1 = 0;
@@ -188,8 +190,10 @@ public class PlayerChunkMap {
         int i = (int) entityplayer.d >> 4;
         int j = (int) entityplayer.e >> 4;
 
-        for (int k = i - this.g; k <= i + this.g; ++k) {
-            for (int l = j - this.g; l <= j + this.g; ++l) {
+        // PaperSpigot start - Player view distance API
+        for (int k = i - entityplayer.viewDistance; k <= i + entityplayer.viewDistance; ++k) {
+            for (int l = j - entityplayer.viewDistance; l <= j + entityplayer.viewDistance; ++l) {
+        // PaperSpigot end
                 PlayerChunk playerchunk = this.a(k, l, false);
 
                 if (playerchunk != null) {
@@ -218,7 +222,7 @@ public class PlayerChunkMap {
         if (d2 >= 64.0D) {
             int k = (int) entityplayer.d >> 4;
             int l = (int) entityplayer.e >> 4;
-            int i1 = this.g;
+            int i1 = entityplayer.viewDistance; // PaperSpigot - Player view distance API
             int j1 = i - k;
             int k1 = j - l;
             List<ChunkCoordIntPair> chunksToLoad = new LinkedList<ChunkCoordIntPair>(); // CraftBukkit
@@ -302,6 +306,37 @@ public class PlayerChunkMap {
         }
     }
 
+    // PaperSpigot start - Player view distance API
+    public void updateViewDistance(EntityPlayer player, int viewDistance) {
+        viewDistance = MathHelper.a(viewDistance, 3, 20);
+        if (viewDistance != player.viewDistance) {
+            int cx = (int) player.locX >> 4;
+            int cz = (int) player.locZ >> 4;
+
+            if (viewDistance - player.viewDistance > 0) {
+                for (int x = cx - viewDistance; x <= cx + viewDistance; ++x) {
+                    for (int z = cz - viewDistance; z <= cz + viewDistance; ++z) {
+                        PlayerChunk playerChunk = this.a(x, z, true);
+                        if (!PlayerChunk.b(playerChunk).contains(player)) {
+                            playerChunk.a(player);
+                        }
+                    }
+                }
+            } else {
+                for (int x = cx - player.viewDistance; x <= cx + player.viewDistance; ++x) {
+                    for (int z = cz - player.viewDistance; z <= cz + player.viewDistance; ++z) {
+                        if (!this.a(x, z, cx, cz, viewDistance)) {
+                            this.a(x, z, true).b(player);
+                        }
+                    }
+                }
+            }
+
+            player.viewDistance = viewDistance;
+        }
+    }
+    // PaperSpigot end
+
     public static int getFurthestViewableBlock(int i) {
         return i * 16 - 16;
     }
diff --git a/src/main/java/net/minecraft/server/SpawnerCreature.java b/src/main/java/net/minecraft/server/SpawnerCreature.java
index 7b30362..fad950e 100644
--- a/src/main/java/net/minecraft/server/SpawnerCreature.java
+++ b/src/main/java/net/minecraft/server/SpawnerCreature.java
@@ -66,6 +66,12 @@ public final class SpawnerCreature {
                 // Spigot Start
                 b0 = worldserver.spigotConfig.mobSpawnRange;
                 b0 = ( b0 > worldserver.spigotConfig.viewDistance ) ? (byte) worldserver.spigotConfig.viewDistance : b0;
+                // PaperSpigot - Player view distance API
+                if (entityhuman instanceof EntityPlayer) {
+                    int viewDistance = ((EntityPlayer) entityhuman).viewDistance;
+                    b0 = b0 > viewDistance ? (byte) viewDistance : b0;
+                }
+                // PaperSpigot end
                 b0 = ( b0 > 8 ) ? 8 : b0;
                 // Spigot End
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 5899492..826ea3c 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -1466,6 +1466,17 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         }
         // PaperSpigot end
 
+        // PaperSpigot start - Player view distance API
+        @Override
+        public int getViewDistance() {
+            return getHandle().viewDistance;
+        }
+
+        @Override
+        public void setViewDistance(int viewDistance) {
+            ((WorldServer) getHandle().world).getPlayerChunkMap().updateViewDistance(getHandle(), viewDistance);
+        }
+        // PaperSpigot end
     };
 
     public Player.Spigot spigot()
diff --git a/src/main/java/org/spigotmc/ActivationRange.java b/src/main/java/org/spigotmc/ActivationRange.java
index 0128097..89ce091 100644
--- a/src/main/java/org/spigotmc/ActivationRange.java
+++ b/src/main/java/org/spigotmc/ActivationRange.java
@@ -19,6 +19,7 @@ import net.minecraft.server.EntityFireworks;
 import net.minecraft.server.EntityHuman;
 import net.minecraft.server.EntityLiving;
 import net.minecraft.server.EntityMonster;
+import net.minecraft.server.EntityPlayer; // PaperSpigot
 import net.minecraft.server.EntityProjectile;
 import net.minecraft.server.EntitySheep;
 import net.minecraft.server.EntitySlime;
@@ -129,8 +130,14 @@ public class ActivationRange
         for ( Entity player : (List<Entity>) world.players )
         {
 
+            // PaperSpigot start - Player view distance API
+            int maxRange0 = maxRange;
+            if (player instanceof EntityPlayer) {
+                maxRange0 = Math.min((((EntityPlayer) player).viewDistance << 4) - 8, maxRange);
+            }
+            // PaperSpigot end
             player.activatedTick = MinecraftServer.currentTick;
-            growBB( maxBB, player.boundingBox, maxRange, 256, maxRange );
+            growBB( maxBB, player.boundingBox, maxRange0, 256, maxRange0 ); // PaperSpigot - Player view distance API
             growBB( miscBB, player.boundingBox, miscActivationRange, 256, miscActivationRange );
             growBB( animalBB, player.boundingBox, animalActivationRange, 256, animalActivationRange );
             growBB( monsterBB, player.boundingBox, monsterActivationRange, 256, monsterActivationRange );
-- 
2.5.0.windows.1

